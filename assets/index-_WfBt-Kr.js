var mA = Object.defineProperty; var gA = (r, t, e) => t in r ? mA(r, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : r[t] = e; var so = (r, t, e) => gA(r, typeof t != "symbol" ? t + "" : t, e); (function () { const t = document.createElement("link").relList; if (t && t.supports && t.supports("modulepreload")) return; for (const a of document.querySelectorAll('link[rel="modulepreload"]')) n(a); new MutationObserver(a => { for (const o of a) if (o.type === "childList") for (const f of o.addedNodes) f.tagName === "LINK" && f.rel === "modulepreload" && n(f) }).observe(document, { childList: !0, subtree: !0 }); function e(a) { const o = {}; return a.integrity && (o.integrity = a.integrity), a.referrerPolicy && (o.referrerPolicy = a.referrerPolicy), a.crossOrigin === "use-credentials" ? o.credentials = "include" : a.crossOrigin === "anonymous" ? o.credentials = "omit" : o.credentials = "same-origin", o } function n(a) { if (a.ep) return; a.ep = !0; const o = e(a); fetch(a.href, o) } })(); function gx(r) { return r && r.__esModule && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r } var Fy = { exports: {} }, Jd = {};/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var XS; function vA() { if (XS) return Jd; XS = 1; var r = Symbol.for("react.transitional.element"), t = Symbol.for("react.fragment"); function e(n, a, o) { var f = null; if (o !== void 0 && (f = "" + o), a.key !== void 0 && (f = "" + a.key), "key" in a) { o = {}; for (var h in a) h !== "key" && (o[h] = a[h]) } else o = a; return a = o.ref, { $$typeof: r, type: n, key: f, ref: a !== void 0 ? a : null, props: o } } return Jd.Fragment = t, Jd.jsx = e, Jd.jsxs = e, Jd } var qS; function yA() { return qS || (qS = 1, Fy.exports = vA()), Fy.exports } var St = yA(), Vy = { exports: {} }, je = {};/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var YS; function _A() { if (YS) return je; YS = 1; var r = Symbol.for("react.transitional.element"), t = Symbol.for("react.portal"), e = Symbol.for("react.fragment"), n = Symbol.for("react.strict_mode"), a = Symbol.for("react.profiler"), o = Symbol.for("react.consumer"), f = Symbol.for("react.context"), h = Symbol.for("react.forward_ref"), m = Symbol.for("react.suspense"), g = Symbol.for("react.memo"), _ = Symbol.for("react.lazy"), x = Symbol.iterator; function S(Y) { return Y === null || typeof Y != "object" ? null : (Y = x && Y[x] || Y["@@iterator"], typeof Y == "function" ? Y : null) } var M = { isMounted: function () { return !1 }, enqueueForceUpdate: function () { }, enqueueReplaceState: function () { }, enqueueSetState: function () { } }, A = Object.assign, C = {}; function R(Y, it, Dt) { this.props = Y, this.context = it, this.refs = C, this.updater = Dt || M } R.prototype.isReactComponent = {}, R.prototype.setState = function (Y, it) { if (typeof Y != "object" && typeof Y != "function" && Y != null) throw Error("takes an object of state variables to update or a function which returns an object of state variables."); this.updater.enqueueSetState(this, Y, it, "setState") }, R.prototype.forceUpdate = function (Y) { this.updater.enqueueForceUpdate(this, Y, "forceUpdate") }; function T() { } T.prototype = R.prototype; function D(Y, it, Dt) { this.props = Y, this.context = it, this.refs = C, this.updater = Dt || M } var N = D.prototype = new T; N.constructor = D, A(N, R.prototype), N.isPureReactComponent = !0; var U = Array.isArray, V = { H: null, A: null, T: null, S: null }, I = Object.prototype.hasOwnProperty; function G(Y, it, Dt, Xt, $, Tt) { return Dt = Tt.ref, { $$typeof: r, type: Y, key: it, ref: Dt !== void 0 ? Dt : null, props: Tt } } function q(Y, it) { return G(Y.type, it, void 0, void 0, void 0, Y.props) } function z(Y) { return typeof Y == "object" && Y !== null && Y.$$typeof === r } function L(Y) { var it = { "=": "=0", ":": "=2" }; return "$" + Y.replace(/[=:]/g, function (Dt) { return it[Dt] }) } var j = /\/+/g; function dt(Y, it) { return typeof Y == "object" && Y !== null && Y.key != null ? L("" + Y.key) : it.toString(36) } function tt() { } function ct(Y) { switch (Y.status) { case "fulfilled": return Y.value; case "rejected": throw Y.reason; default: switch (typeof Y.status == "string" ? Y.then(tt, tt) : (Y.status = "pending", Y.then(function (it) { Y.status === "pending" && (Y.status = "fulfilled", Y.value = it) }, function (it) { Y.status === "pending" && (Y.status = "rejected", Y.reason = it) })), Y.status) { case "fulfilled": return Y.value; case "rejected": throw Y.reason } }throw Y } function xt(Y, it, Dt, Xt, $) { var Tt = typeof Y; (Tt === "undefined" || Tt === "boolean") && (Y = null); var Lt = !1; if (Y === null) Lt = !0; else switch (Tt) { case "bigint": case "string": case "number": Lt = !0; break; case "object": switch (Y.$$typeof) { case r: case t: Lt = !0; break; case _: return Lt = Y._init, xt(Lt(Y._payload), it, Dt, Xt, $) } }if (Lt) return $ = $(Y), Lt = Xt === "" ? "." + dt(Y, 0) : Xt, U($) ? (Dt = "", Lt != null && (Dt = Lt.replace(j, "$&/") + "/"), xt($, it, Dt, "", function (Me) { return Me })) : $ != null && (z($) && ($ = q($, Dt + ($.key == null || Y && Y.key === $.key ? "" : ("" + $.key).replace(j, "$&/") + "/") + Lt)), it.push($)), 1; Lt = 0; var Vt = Xt === "" ? "." : Xt + ":"; if (U(Y)) for (var kt = 0; kt < Y.length; kt++)Xt = Y[kt], Tt = Vt + dt(Xt, kt), Lt += xt(Xt, it, Dt, Tt, $); else if (kt = S(Y), typeof kt == "function") for (Y = kt.call(Y), kt = 0; !(Xt = Y.next()).done;)Xt = Xt.value, Tt = Vt + dt(Xt, kt++), Lt += xt(Xt, it, Dt, Tt, $); else if (Tt === "object") { if (typeof Y.then == "function") return xt(ct(Y), it, Dt, Xt, $); throw it = String(Y), Error("Objects are not valid as a React child (found: " + (it === "[object Object]" ? "object with keys {" + Object.keys(Y).join(", ") + "}" : it) + "). If you meant to render a collection of children, use an array instead.") } return Lt } function K(Y, it, Dt) { if (Y == null) return Y; var Xt = [], $ = 0; return xt(Y, Xt, "", "", function (Tt) { return it.call(Dt, Tt, $++) }), Xt } function ft(Y) { if (Y._status === -1) { var it = Y._result; it = it(), it.then(function (Dt) { (Y._status === 0 || Y._status === -1) && (Y._status = 1, Y._result = Dt) }, function (Dt) { (Y._status === 0 || Y._status === -1) && (Y._status = 2, Y._result = Dt) }), Y._status === -1 && (Y._status = 0, Y._result = it) } if (Y._status === 1) return Y._result.default; throw Y._result } var nt = typeof reportError == "function" ? reportError : function (Y) { if (typeof window == "object" && typeof window.ErrorEvent == "function") { var it = new window.ErrorEvent("error", { bubbles: !0, cancelable: !0, message: typeof Y == "object" && Y !== null && typeof Y.message == "string" ? String(Y.message) : String(Y), error: Y }); if (!window.dispatchEvent(it)) return } else if (typeof process == "object" && typeof process.emit == "function") { process.emit("uncaughtException", Y); return } console.error(Y) }; function Et() { } return je.Children = { map: K, forEach: function (Y, it, Dt) { K(Y, function () { it.apply(this, arguments) }, Dt) }, count: function (Y) { var it = 0; return K(Y, function () { it++ }), it }, toArray: function (Y) { return K(Y, function (it) { return it }) || [] }, only: function (Y) { if (!z(Y)) throw Error("React.Children.only expected to receive a single React element child."); return Y } }, je.Component = R, je.Fragment = e, je.Profiler = a, je.PureComponent = D, je.StrictMode = n, je.Suspense = m, je.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = V, je.act = function () { throw Error("act(...) is not supported in production builds of React.") }, je.cache = function (Y) { return function () { return Y.apply(null, arguments) } }, je.cloneElement = function (Y, it, Dt) { if (Y == null) throw Error("The argument must be a React element, but you passed " + Y + "."); var Xt = A({}, Y.props), $ = Y.key, Tt = void 0; if (it != null) for (Lt in it.ref !== void 0 && (Tt = void 0), it.key !== void 0 && ($ = "" + it.key), it) !I.call(it, Lt) || Lt === "key" || Lt === "__self" || Lt === "__source" || Lt === "ref" && it.ref === void 0 || (Xt[Lt] = it[Lt]); var Lt = arguments.length - 2; if (Lt === 1) Xt.children = Dt; else if (1 < Lt) { for (var Vt = Array(Lt), kt = 0; kt < Lt; kt++)Vt[kt] = arguments[kt + 2]; Xt.children = Vt } return G(Y.type, $, void 0, void 0, Tt, Xt) }, je.createContext = function (Y) { return Y = { $$typeof: f, _currentValue: Y, _currentValue2: Y, _threadCount: 0, Provider: null, Consumer: null }, Y.Provider = Y, Y.Consumer = { $$typeof: o, _context: Y }, Y }, je.createElement = function (Y, it, Dt) { var Xt, $ = {}, Tt = null; if (it != null) for (Xt in it.key !== void 0 && (Tt = "" + it.key), it) I.call(it, Xt) && Xt !== "key" && Xt !== "__self" && Xt !== "__source" && ($[Xt] = it[Xt]); var Lt = arguments.length - 2; if (Lt === 1) $.children = Dt; else if (1 < Lt) { for (var Vt = Array(Lt), kt = 0; kt < Lt; kt++)Vt[kt] = arguments[kt + 2]; $.children = Vt } if (Y && Y.defaultProps) for (Xt in Lt = Y.defaultProps, Lt) $[Xt] === void 0 && ($[Xt] = Lt[Xt]); return G(Y, Tt, void 0, void 0, null, $) }, je.createRef = function () { return { current: null } }, je.forwardRef = function (Y) { return { $$typeof: h, render: Y } }, je.isValidElement = z, je.lazy = function (Y) { return { $$typeof: _, _payload: { _status: -1, _result: Y }, _init: ft } }, je.memo = function (Y, it) { return { $$typeof: g, type: Y, compare: it === void 0 ? null : it } }, je.startTransition = function (Y) { var it = V.T, Dt = {}; V.T = Dt; try { var Xt = Y(), $ = V.S; $ !== null && $(Dt, Xt), typeof Xt == "object" && Xt !== null && typeof Xt.then == "function" && Xt.then(Et, nt) } catch (Tt) { nt(Tt) } finally { V.T = it } }, je.unstable_useCacheRefresh = function () { return V.H.useCacheRefresh() }, je.use = function (Y) { return V.H.use(Y) }, je.useActionState = function (Y, it, Dt) { return V.H.useActionState(Y, it, Dt) }, je.useCallback = function (Y, it) { return V.H.useCallback(Y, it) }, je.useContext = function (Y) { return V.H.useContext(Y) }, je.useDebugValue = function () { }, je.useDeferredValue = function (Y, it) { return V.H.useDeferredValue(Y, it) }, je.useEffect = function (Y, it) { return V.H.useEffect(Y, it) }, je.useId = function () { return V.H.useId() }, je.useImperativeHandle = function (Y, it, Dt) { return V.H.useImperativeHandle(Y, it, Dt) }, je.useInsertionEffect = function (Y, it) { return V.H.useInsertionEffect(Y, it) }, je.useLayoutEffect = function (Y, it) { return V.H.useLayoutEffect(Y, it) }, je.useMemo = function (Y, it) { return V.H.useMemo(Y, it) }, je.useOptimistic = function (Y, it) { return V.H.useOptimistic(Y, it) }, je.useReducer = function (Y, it, Dt) { return V.H.useReducer(Y, it, Dt) }, je.useRef = function (Y) { return V.H.useRef(Y) }, je.useState = function (Y) { return V.H.useState(Y) }, je.useSyncExternalStore = function (Y, it, Dt) { return V.H.useSyncExternalStore(Y, it, Dt) }, je.useTransition = function () { return V.H.useTransition() }, je.version = "19.0.0", je } var WS; function Nh() { return WS || (WS = 1, Vy.exports = _A()), Vy.exports } var Zt = Nh(); const Su = gx(Zt); function lb(r, t, e) { return Math.max(r, Math.min(t, e)) } class xA { advance(t) { var h; if (!this.isRunning) return; let e = !1; if (this.lerp) this.value = (n = this.value, a = this.to, o = 60 * this.lerp, f = t, function (m, g, _) { return (1 - _) * m + _ * g }(n, a, 1 - Math.exp(-o * f))), Math.round(this.value) === this.to && (this.value = this.to, e = !0); else { this.currentTime += t; const m = lb(0, this.currentTime / this.duration, 1); e = m >= 1; const g = e ? 1 : this.easing(m); this.value = this.from + (this.to - this.from) * g } var n, a, o, f; (h = this.onUpdate) == null || h.call(this, this.value, e), e && this.stop() } stop() { this.isRunning = !1 } fromTo(t, e, { lerp: n = .1, duration: a = 1, easing: o = m => m, onStart: f, onUpdate: h }) { this.from = this.value = t, this.to = e, this.lerp = n, this.duration = a, this.easing = o, this.currentTime = 0, this.isRunning = !0, f == null || f(), this.onUpdate = h } } class SA { constructor({ wrapper: t, content: e, autoResize: n = !0, debounce: a = 250 } = {}) { so(this, "resize", () => { this.onWrapperResize(), this.onContentResize() }); so(this, "onWrapperResize", () => { this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight) }); so(this, "onContentResize", () => { this.wrapper === window ? (this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth) : (this.scrollHeight = this.wrapper.scrollHeight, this.scrollWidth = this.wrapper.scrollWidth) }); this.wrapper = t, this.content = e, n && (this.debouncedResize = function (o, f) { let h; return function () { let m = arguments, g = this; clearTimeout(h), h = setTimeout(function () { o.apply(g, m) }, f) } }(this.resize, a), this.wrapper === window ? window.addEventListener("resize", this.debouncedResize, !1) : (this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(this.debouncedResize), this.contentResizeObserver.observe(this.content)), this.resize() } destroy() { var t, e; (t = this.wrapperResizeObserver) == null || t.disconnect(), (e = this.contentResizeObserver) == null || e.disconnect(), window.removeEventListener("resize", this.debouncedResize, !1) } get limit() { return { x: this.scrollWidth - this.width, y: this.scrollHeight - this.height } } } class ob { constructor() { this.events = {} } emit(t, ...e) { let n = this.events[t] || []; for (let a = 0, o = n.length; a < o; a++)n[a](...e) } on(t, e) { var n; return (n = this.events[t]) != null && n.push(e) || (this.events[t] = [e]), () => { var a; this.events[t] = (a = this.events[t]) == null ? void 0 : a.filter(o => e !== o) } } off(t, e) { var n; this.events[t] = (n = this.events[t]) == null ? void 0 : n.filter(a => e !== a) } destroy() { this.events = {} } } const kS = 100 / 6; class MA { constructor(t, { wheelMultiplier: e = 1, touchMultiplier: n = 1 }) { so(this, "onTouchStart", t => { const { clientX: e, clientY: n } = t.targetTouches ? t.targetTouches[0] : t; this.touchStart.x = e, this.touchStart.y = n, this.lastDelta = { x: 0, y: 0 }, this.emitter.emit("scroll", { deltaX: 0, deltaY: 0, event: t }) }); so(this, "onTouchMove", t => { const { clientX: e, clientY: n } = t.targetTouches ? t.targetTouches[0] : t, a = -(e - this.touchStart.x) * this.touchMultiplier, o = -(n - this.touchStart.y) * this.touchMultiplier; this.touchStart.x = e, this.touchStart.y = n, this.lastDelta = { x: a, y: o }, this.emitter.emit("scroll", { deltaX: a, deltaY: o, event: t }) }); so(this, "onTouchEnd", t => { this.emitter.emit("scroll", { deltaX: this.lastDelta.x, deltaY: this.lastDelta.y, event: t }) }); so(this, "onWheel", t => { let { deltaX: e, deltaY: n, deltaMode: a } = t; e *= a === 1 ? kS : a === 2 ? this.windowWidth : 1, n *= a === 1 ? kS : a === 2 ? this.windowHeight : 1, e *= this.wheelMultiplier, n *= this.wheelMultiplier, this.emitter.emit("scroll", { deltaX: e, deltaY: n, event: t }) }); so(this, "onWindowResize", () => { this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight }); this.element = t, this.wheelMultiplier = e, this.touchMultiplier = n, this.touchStart = { x: null, y: null }, this.emitter = new ob, window.addEventListener("resize", this.onWindowResize, !1), this.onWindowResize(), this.element.addEventListener("wheel", this.onWheel, { passive: !1 }), this.element.addEventListener("touchstart", this.onTouchStart, { passive: !1 }), this.element.addEventListener("touchmove", this.onTouchMove, { passive: !1 }), this.element.addEventListener("touchend", this.onTouchEnd, { passive: !1 }) } on(t, e) { return this.emitter.on(t, e) } destroy() { this.emitter.destroy(), window.removeEventListener("resize", this.onWindowResize, !1), this.element.removeEventListener("wheel", this.onWheel, { passive: !1 }), this.element.removeEventListener("touchstart", this.onTouchStart, { passive: !1 }), this.element.removeEventListener("touchmove", this.onTouchMove, { passive: !1 }), this.element.removeEventListener("touchend", this.onTouchEnd, { passive: !1 }) } } class bA { constructor({ wrapper: t = window, content: e = document.documentElement, wheelEventsTarget: n = t, eventsTarget: a = n, smoothWheel: o = !0, syncTouch: f = !1, syncTouchLerp: h = .075, touchInertiaMultiplier: m = 35, duration: g, easing: _ = N => Math.min(1, 1.001 - Math.pow(2, -10 * N)), lerp: x = !g && .1, infinite: S = !1, orientation: M = "vertical", gestureOrientation: A = "vertical", touchMultiplier: C = 1, wheelMultiplier: R = 1, autoResize: T = !0, __experimental__naiveDimensions: D = !1 } = {}) { this.__isSmooth = !1, this.__isScrolling = !1, this.__isStopped = !1, this.__isLocked = !1, this.onVirtualScroll = ({ deltaX: N, deltaY: U, event: V }) => { if (V.ctrlKey) return; const I = V.type.includes("touch"), G = V.type.includes("wheel"); if (this.options.syncTouch && I && V.type === "touchstart" && !this.isStopped && !this.isLocked) return void this.reset(); const q = N === 0 && U === 0, z = this.options.gestureOrientation === "vertical" && U === 0 || this.options.gestureOrientation === "horizontal" && N === 0; if (q || z) return; let L = V.composedPath(); if (L = L.slice(0, L.indexOf(this.rootElement)), L.find(ct => { var xt, K, ft, nt, Et; return ((xt = ct.hasAttribute) === null || xt === void 0 ? void 0 : xt.call(ct, "data-lenis-prevent")) || I && ((K = ct.hasAttribute) === null || K === void 0 ? void 0 : K.call(ct, "data-lenis-prevent-touch")) || G && ((ft = ct.hasAttribute) === null || ft === void 0 ? void 0 : ft.call(ct, "data-lenis-prevent-wheel")) || ((nt = ct.classList) === null || nt === void 0 ? void 0 : nt.contains("lenis")) && !(!((Et = ct.classList) === null || Et === void 0) && Et.contains("lenis-stopped")) })) return; if (this.isStopped || this.isLocked) return void V.preventDefault(); if (this.isSmooth = this.options.syncTouch && I || this.options.smoothWheel && G, !this.isSmooth) return this.isScrolling = !1, void this.animate.stop(); V.preventDefault(); let j = U; this.options.gestureOrientation === "both" ? j = Math.abs(U) > Math.abs(N) ? U : N : this.options.gestureOrientation === "horizontal" && (j = N); const dt = I && this.options.syncTouch, tt = I && V.type === "touchend" && Math.abs(j) > 5; tt && (j = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + j, Object.assign({ programmatic: !1 }, dt ? { lerp: tt ? this.options.syncTouchLerp : 1 } : { lerp: this.options.lerp, duration: this.options.duration, easing: this.options.easing })) }, this.onNativeScroll = () => { if (!this.__preventNextScrollEvent && !this.isScrolling) { const N = this.animatedScroll; this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.direction = Math.sign(this.animatedScroll - N), this.emit() } }, window.lenisVersion = "1.0.42", t !== document.documentElement && t !== document.body || (t = window), this.options = { wrapper: t, content: e, wheelEventsTarget: n, eventsTarget: a, smoothWheel: o, syncTouch: f, syncTouchLerp: h, touchInertiaMultiplier: m, duration: g, easing: _, lerp: x, infinite: S, gestureOrientation: A, orientation: M, touchMultiplier: C, wheelMultiplier: R, autoResize: T, __experimental__naiveDimensions: D }, this.animate = new xA, this.emitter = new ob, this.dimensions = new SA({ wrapper: t, content: e, autoResize: T }), this.toggleClassName("lenis", !0), this.velocity = 0, this.isLocked = !1, this.isStopped = !1, this.isSmooth = f || o, this.isScrolling = !1, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener("scroll", this.onNativeScroll, !1), this.virtualScroll = new MA(a, { touchMultiplier: C, wheelMultiplier: R }), this.virtualScroll.on("scroll", this.onVirtualScroll) } destroy() { this.emitter.destroy(), this.options.wrapper.removeEventListener("scroll", this.onNativeScroll, !1), this.virtualScroll.destroy(), this.dimensions.destroy(), this.toggleClassName("lenis", !1), this.toggleClassName("lenis-smooth", !1), this.toggleClassName("lenis-scrolling", !1), this.toggleClassName("lenis-stopped", !1), this.toggleClassName("lenis-locked", !1) } on(t, e) { return this.emitter.on(t, e) } off(t, e) { return this.emitter.off(t, e) } setScroll(t) { this.isHorizontal ? this.rootElement.scrollLeft = t : this.rootElement.scrollTop = t } resize() { this.dimensions.resize() } emit() { this.emitter.emit("scroll", this) } reset() { this.isLocked = !1, this.isScrolling = !1, this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.animate.stop() } start() { this.isStopped && (this.isStopped = !1, this.reset()) } stop() { this.isStopped || (this.isStopped = !0, this.animate.stop(), this.reset()) } raf(t) { const e = t - (this.time || t); this.time = t, this.animate.advance(.001 * e) } scrollTo(t, { offset: e = 0, immediate: n = !1, lock: a = !1, duration: o = this.options.duration, easing: f = this.options.easing, lerp: h = !o && this.options.lerp, onComplete: m, force: g = !1, programmatic: _ = !0 } = {}) { if (!this.isStopped && !this.isLocked || g) { if (["top", "left", "start"].includes(t)) t = 0; else if (["bottom", "right", "end"].includes(t)) t = this.limit; else { let x; if (typeof t == "string" ? x = document.querySelector(t) : t != null && t.nodeType && (x = t), x) { if (this.options.wrapper !== window) { const M = this.options.wrapper.getBoundingClientRect(); e -= this.isHorizontal ? M.left : M.top } const S = x.getBoundingClientRect(); t = (this.isHorizontal ? S.left : S.top) + this.animatedScroll } } if (typeof t == "number") { if (t += e, t = Math.round(t), this.options.infinite ? _ && (this.targetScroll = this.animatedScroll = this.scroll) : t = lb(0, t, this.limit), n) return this.animatedScroll = this.targetScroll = t, this.setScroll(this.scroll), this.reset(), void (m == null || m(this)); if (!_) { if (t === this.targetScroll) return; this.targetScroll = t } this.animate.fromTo(this.animatedScroll, t, { duration: o, easing: f, lerp: h, onStart: () => { a && (this.isLocked = !0), this.isScrolling = !0 }, onUpdate: (x, S) => { this.isScrolling = !0, this.velocity = x - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = x, this.setScroll(this.scroll), _ && (this.targetScroll = x), S || this.emit(), S && (this.reset(), this.emit(), m == null || m(this), this.__preventNextScrollEvent = !0, requestAnimationFrame(() => { delete this.__preventNextScrollEvent })) } }) } } } get rootElement() { return this.options.wrapper === window ? document.documentElement : this.options.wrapper } get limit() { return this.options.__experimental__naiveDimensions ? this.isHorizontal ? this.rootElement.scrollWidth - this.rootElement.clientWidth : this.rootElement.scrollHeight - this.rootElement.clientHeight : this.dimensions.limit[this.isHorizontal ? "x" : "y"] } get isHorizontal() { return this.options.orientation === "horizontal" } get actualScroll() { return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop } get scroll() { return this.options.infinite ? (t = this.animatedScroll, e = this.limit, (t % e + e) % e) : this.animatedScroll; var t, e } get progress() { return this.limit === 0 ? 1 : this.scroll / this.limit } get isSmooth() { return this.__isSmooth } set isSmooth(t) { this.__isSmooth !== t && (this.__isSmooth = t, this.toggleClassName("lenis-smooth", t)) } get isScrolling() { return this.__isScrolling } set isScrolling(t) { this.__isScrolling !== t && (this.__isScrolling = t, this.toggleClassName("lenis-scrolling", t)) } get isStopped() { return this.__isStopped } set isStopped(t) { this.__isStopped !== t && (this.__isStopped = t, this.toggleClassName("lenis-stopped", t)) } get isLocked() { return this.__isLocked } set isLocked(t) { this.__isLocked !== t && (this.__isLocked = t, this.toggleClassName("lenis-locked", t)) } get className() { let t = "lenis"; return this.isStopped && (t += " lenis-stopped"), this.isLocked && (t += " lenis-locked"), this.isScrolling && (t += " lenis-scrolling"), this.isSmooth && (t += " lenis-smooth"), t } toggleClassName(t, e) { this.rootElement.classList.toggle(t, e), this.emitter.emit("className change", this) } } const EA = () => (Zt.useEffect(() => { const r = new bA({ duration: 1.5, easing: e => Math.min(1, 1.001 - Math.pow(2, -10 * e)), smoothWheel: !0, smoothTouch: !1 }); function t(e) { r.raf(e), requestAnimationFrame(t) } return requestAnimationFrame(t), () => r.destroy() }, []), null), Wp = ({ children: r }) => { const t = Zt.useRef(null); return Zt.useEffect(() => { const e = new IntersectionObserver(([n]) => { n.isIntersecting && t.current.classList.add("visible") }, { threshold: .2, rootMargin: "0px 0px -50px 0px" }); return t.current && e.observe(t.current), () => e.disconnect() }, []), St.jsx("div", { ref: t, className: "reveal", children: r }) }, TA = () => St.jsx("section", {
	id: "home", className: "min-h-screen flex items-center justify-center relative", children: St.jsx(Wp, {
		children: St.jsxs("div", {
			className: "text-center z-10 px-4", children: [St.jsx("h1", { className: "cursive text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-white to-gray-500 bg-clip-text text-transparent leading-right", children: "Hi, I'm Amin" }), St.jsxs("p", { className: "text-[18px] tex-gray-400 mb-8 max-w-lg mx-auto", children: ["A creative front-end developer and UI designer with a passion for crafting visually stunning and user-friendly web experiences. With over four years of experience in content creation and video editing,", St.jsx("strong", { className: "cursive font-normal", children: "  I always strive to give my best in everything I do ~" })] }), St.jsxs("div", {
				className: "flex justify-center space-x-4", children: [St.jsx("a", { href: "#projects", className: "cursive bg-gray-300 text-black py-3 px-6 transition-all rounded font-medium relative overflow-hidden hover:-translate-y-0.5 hover:shadow-[0_0_15px_rgba(59, 130, 246, 0.4)] hover:bg-white", children: "View Projects" }), St.jsx("a", {
					href: "#contact", className: `cursive border border-white text-gray-300 py-3 px-6 rounded font-medium transition-all duration-200 
             hover:-translate-y-0.5 hover:shadow-[0_0_15px_rgba(237, 244, 255, 0.2)] hover:bg-gray-100 hover:text-black`, children: "Contact Me"
				})]
			})]
		})
	})
}); var ub = { color: void 0, size: void 0, className: void 0, style: void 0, attr: void 0 }, jS = Su.createContext && Su.createContext(ub), AA = ["attr", "size", "title"]; function RA(r, t) { if (r == null) return {}; var e = wA(r, t), n, a; if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(r); for (a = 0; a < o.length; a++)n = o[a], !(t.indexOf(n) >= 0) && Object.prototype.propertyIsEnumerable.call(r, n) && (e[n] = r[n]) } return e } function wA(r, t) { if (r == null) return {}; var e = {}; for (var n in r) if (Object.prototype.hasOwnProperty.call(r, n)) { if (t.indexOf(n) >= 0) continue; e[n] = r[n] } return e } function O0() { return O0 = Object.assign ? Object.assign.bind() : function (r) { for (var t = 1; t < arguments.length; t++) { var e = arguments[t]; for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && (r[n] = e[n]) } return r }, O0.apply(this, arguments) } function ZS(r, t) { var e = Object.keys(r); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(r); t && (n = n.filter(function (a) { return Object.getOwnPropertyDescriptor(r, a).enumerable })), e.push.apply(e, n) } return e } function L0(r) { for (var t = 1; t < arguments.length; t++) { var e = arguments[t] != null ? arguments[t] : {}; t % 2 ? ZS(Object(e), !0).forEach(function (n) { CA(r, n, e[n]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(e)) : ZS(Object(e)).forEach(function (n) { Object.defineProperty(r, n, Object.getOwnPropertyDescriptor(e, n)) }) } return r } function CA(r, t, e) { return t = DA(t), t in r ? Object.defineProperty(r, t, { value: e, enumerable: !0, configurable: !0, writable: !0 }) : r[t] = e, r } function DA(r) { var t = UA(r, "string"); return typeof t == "symbol" ? t : t + "" } function UA(r, t) { if (typeof r != "object" || !r) return r; var e = r[Symbol.toPrimitive]; if (e !== void 0) { var n = e.call(r, t); if (typeof n != "object") return n; throw new TypeError("@@toPrimitive must return a primitive value.") } return (t === "string" ? String : Number)(r) } function cb(r) { return r && r.map((t, e) => Su.createElement(t.tag, L0({ key: e }, t.attr), cb(t.child))) } function Oh(r) { return t => Su.createElement(NA, O0({ attr: L0({}, r.attr) }, t), cb(r.child)) } function NA(r) { var t = e => { var { attr: n, size: a, title: o } = r, f = RA(r, AA), h = a || e.size || "1em", m; return e.className && (m = e.className), r.className && (m = (m ? m + " " : "") + r.className), Su.createElement("svg", O0({ stroke: "currentColor", fill: "currentColor", strokeWidth: "0" }, e.attr, n, f, { className: m, style: L0(L0({ color: r.color || e.color }, e.style), r.style), height: h, width: h, xmlns: "http://www.w3.org/2000/svg" }), o && Su.createElement("title", null, o), r.children) }; return jS !== void 0 ? Su.createElement(jS.Consumer, null, e => t(e)) : t(ub) } function OA(r) { return Oh({ attr: { viewBox: "0 0 448 512" }, child: [{ tag: "path", attr: { d: "M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z" }, child: [] }] })(r) } function LA(r) { return Oh({ attr: { viewBox: "0 0 448 512" }, child: [{ tag: "path", attr: { d: "M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z" }, child: [] }] })(r) } function zA(r) { return Oh({ attr: { viewBox: "0 0 512 512" }, child: [{ tag: "path", attr: { d: "M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z" }, child: [] }] })(r) } function BA(r) { return Oh({ attr: { viewBox: "0 0 576 512" }, child: [{ tag: "path", attr: { d: "M549.655 124.083c-6.281-23.65-24.787-42.276-48.284-48.597C458.781 64 288 64 288 64S117.22 64 74.629 75.486c-23.497 6.322-42.003 24.947-48.284 48.597-11.412 42.867-11.412 132.305-11.412 132.305s0 89.438 11.412 132.305c6.281 23.65 24.787 41.5 48.284 47.821C117.22 448 288 448 288 448s170.78 0 213.371-11.486c23.497-6.321 42.003-24.171 48.284-47.821 11.412-42.867 11.412-132.305 11.412-132.305s0-89.438-11.412-132.305zm-317.51 213.508V175.185l142.739 81.205-142.739 81.201z" }, child: [] }] })(r) } function PA() { const r = new Date().getFullYear(); return St.jsx("section", { className: "cursive text-white py-6 text-center", children: St.jsxs(Wp, { children: [St.jsxs("div", { className: "flex justify-center space-x-6 mb-4", children: [St.jsx("a", { href: "https://www.youtube.com/c/DARKLORDCDL", target: "_blank", rel: "noopener noreferrer", className: "text-text-white transition-opacity opacity-75 hover:text-white hover:opacity-100 text-2xl z-10", children: St.jsx(BA, {}) }), St.jsx("a", { href: "https://www.instagram.com/darklordyt_", target: "_blank", rel: "noopener noreferrer", className: "text-text-white transition-opacity opacity-75 hover:text-white hover:opacity-100 text-2xl z-10", children: St.jsx(OA, {}) }), St.jsx("a", { href: "https://www.linkedin.com/in/m-amin-jafarnezhad", target: "_blank", rel: "noopener noreferrer", className: "text-text-white transition-opacity opacity-75 hover:text-white hover:opacity-100 text-2xl z-10", children: St.jsx(LA, {}) }), St.jsx("a", { href: "https://x.com/Amin_4994", target: "_blank", rel: "noopener noreferrer", className: "text-white transition-opacity opacity-75 hover:text-white hover:opacity-100 text-2xl z-10", children: St.jsx(zA, {}) })] }), St.jsxs("p", { className: "text-sm", children: ["© ", r, " All Rights Reserved."] })] }) }) } const IA = { React: "A JavaScript library for building user interfaces.", "Node.js": "A runtime environment that allows running JavaScript on the server.", JSX: "A syntax extension for JavaScript, used with React to describe UI structure.", Tailwind: "A utility-first CSS framework for building modern and responsive designs.", ThreeJs: "A JavaScript library used for rendering 3D graphics in the browser.", I18n: "Internationalization library for supporting multiple languages.", Atropos: "A hover effect library that creates layered 3D tilt effects.", ChartJs: "A JavaScript library for creating interactive charts and graphs.", GSAP: "A JavaScript animation library for smooth and complex animations.", "Router dom": "A routing library for React applications, enabling navigation between pages.", "Next.js": "A React framework for building fast and optimized web applications.", Prisma: "A modern database ORM for managing and interacting with databases.", TSX: "TypeScript syntax extension for React components.", Spline: "A tool for creating and embedding 3D interactive experiences.", HTML: "The standard markup language for creating web pages.", CSS: "A styling language used to design web pages and control layout.", JS: "JavaScript, a programming language used to create interactive web experiences." }, HA = [{ title: "Front-end", cubeShape: 4, skills: [{ name: "React", description: "A JavaScript library for building user interfaces." }, { name: "TypeScript", description: "A typed superset of JavaScript for better tooling and scalability." }, { name: "ThreeJs", description: "A 3D library for creating and rendering 3D graphics in the browser." }, { name: "TailwindCSS", description: "A utility-first CSS framework for rapid UI development." }, { name: "MUI", description: "A popular React UI framework for building responsive designs." }, { name: "Gsap", description: "A JavaScript animation library for high-performance animations." }] }, { title: "Back-end", cubeShape: 3, skills: [{ name: "Node.js", description: "A runtime environment for building server-side applications with JavaScript." }, { name: "MongoDB", description: "A NoSQL database for handling unstructured data." }, { name: "GraphQL", description: "A query language for APIs and runtime for executing those queries." }, { name: "Mongoose", description: "A lightweight Node.js web framework for building web applications." }, { name: "Bcrypt.js", description: "A lightweight Node.js web framework for building web applications." }, { name: "Nodemon", description: "A lightweight Node.js web framework for building web applications." }, { name: "Multer", description: "A lightweight Node.js web framework for building web applications." }] }, { title: "Design", cubeShape: 4.5, skills: [{ name: "Premiere Pro", description: "Professional tools for graphic design and video editing." }, { name: "Figma", description: "A collaborative design tool for UI/UX prototyping." }, { name: "Blender", description: "An open-source 3D creation suite for modeling and animation." }, { name: "After Effects", description: "Adobe After Effects for motion graphics and visual effects." }, { name: "Illustrator", description: "Adobe Illustrator for vector graphics and illustrations." }, { name: "PhotoShop", description: "Adobe Illustrator for vector graphics and illustrations." }] }, { title: "Other", cubeShape: 4, skills: [{ name: "C++", description: "A high-performance programming language." }, { name: "GLSL", description: "A high-level, C-like programming language for graphics processing." }, { name: "Python", description: "A versatile programming language for back-end development and data analysis." }, { name: "Model Optimization", description: "Techniques for optimizing machine learning models." }, { name: "DQN", description: "Deep Q-Networks for reinforcement learning." }, { name: "Computer Vision", description: "Techniques for enabling machines to interpret visual data." }, { name: "NLP", description: "Natural Language Processing for text analysis and understanding." }] }], FA = () => St.jsx("section", { id: "about", className: "text min-h-screen flex items-center justify-center py-20", children: St.jsx(Wp, { children: St.jsxs("div", { className: "max-w-3xl mx-auto px-4", children: [St.jsx("h2", { className: "cursive text-3xl font-bold mb-8 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent text-center", children: "About Me" }), St.jsxs("div", { className: "rounded-xl p-8 border-white/10 border hover:-translate-y-1 transition-all", children: [St.jsx("p", { className: "text-gray-300 mb-6 text-sm", children: "A passionate and creative developer with a strong expertise in cutting-edge technologies and innovative solutions." }), St.jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: HA.map((r, t) => St.jsxs("div", { className: "rounded-xl p-2 hover:-translate-y-1 transition-all", children: [St.jsxs("div", { className: "flex gap-2", children: [St.jsx("h3", { className: "text-xl font-bold mb-4", children: r.title }), St.jsx("div", { className: "flex gap-1 mt-2", children: [...Array(5)].map((e, n) => St.jsx("div", { className: `w-3 h-3 border-[1px] border-white rounded-[3px] ${n < Math.floor(r.cubeShape) ? "bg-white" : n === Math.floor(r.cubeShape) && r.cubeShape % 1 !== 0 ? "bg-gradient-to-r from-white to-transparent" : "bg-transparent"}` }, n)) })] }), St.jsx("div", { className: "flex flex-wrap gap-2", children: r.skills.map((e, n) => St.jsx("span", { className: "bg-blue-500/10 text-white py-1 px-3 rounded-full text-sm hover:bg-gray-700 cursor-pointer hover:shadow-[0_2px_8px_rgba(59,130,246,0.2)] transition-all", title: e.description, children: e.name }, n)) })] }, t)) })] }), St.jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 mt-3", children: [St.jsxs("div", { className: "p-6 rounded-xl border-white/10 border hover:-translate-y-1 transition-all", children: [St.jsx("h3", { className: "text-xl font-bold mb-4", children: " 👨🏻‍🎓 Education " }), St.jsxs("ul", { className: "list-disc list-inside text-gray-300 space-y-2", children: [St.jsxs("li", { children: [St.jsx("strong", { children: " I received my high school diploma on " }), " June 24, 2024 ,", St.jsxs("strong", { children: [" ", "from the Startup Vocational School (Rokad), and I am currently pursuing a bachelor's degree at Azad University."] })] }), St.jsxs("li", { children: [St.jsx("strong", { children: " Relevant Coursework: " }), " Web Development (Front-End & Back-End), Ui Design, Editing..."] })] })] }), St.jsxs("div", { className: "p-6 rounded-xl border-white/10 border hover:-translate-y-1 transition-all", children: [St.jsx("h3", { className: "text-xl font-bold mb-4", children: " 💼 Work Experience " }), St.jsxs("div", { className: "space-y-4 text-gray-300", children: [St.jsxs("div", { children: [St.jsx("h4", { className: "font-semibold", children: "Front-End Developer at Eghamat24 (2024)" }), St.jsx("p", { children: "Developed and maintained the front-end of the company's internal project." })] }), St.jsxs("div", { children: [St.jsx("h4", { className: "font-semibold", children: " Work with Startups & Freelancing (2021) " }), St.jsx("p", { children: "Worked with many clients and startups and various influencers." })] })] })] })] })] }) }) }); function VA(r) { return Oh({ attr: { viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, child: [{ tag: "path", attr: { d: "M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22" }, child: [] }] })(r) } const GA = ({ menuOpen: r, setMenuOpen: t }) => (Zt.useEffect(() => { document.body.style.overflow = r ? "hidden" : "" }, [r]), St.jsx("nav", { className: "cursive fixed top-0 w-full z-40 bg-[rgba(10, 10, 10, 0.8)] backdrop-blur-lg border-b border-white/10 shadow-lg", children: St.jsx("div", { className: "max-w-5xl mx-auto px-4", children: St.jsxs("div", { className: "flex justify-between items-center h-16", children: [St.jsxs("a", { href: "https://github.com/MDJAmin", className: "cursive flex gap-0.5 font-mono text-xl font-bold text-white", rel: "noopener noreferrer", target: "_blank", children: [St.jsx(VA, { className: "me-2 mt-1 opacity-80 hover:opacity-100 transition-opacity" }), " ", "MDJAmin"] }), St.jsx("div", { className: "w-7 h-5 relative cursor-pointer z-40 md:hidden", onClick: () => t(e => !e), children: "☰" }), St.jsxs("div", { className: "hidden md:flex items-center space-x-8", children: [St.jsx("a", { href: "#home", className: "text-gray-300 hover:text-white transition-colors", children: "Home" }), St.jsx("a", { href: "#about", className: "text-gray-300 hover:text-white transition-colors", children: "About" }), St.jsx("a", { href: "#projects", className: "text-gray-300 hover:text-white transition-colors", children: "Projects" }), St.jsx("a", { href: "#contact", className: "text-gray-300 hover:text-white transition-colors-", children: "Contact" })] })] }) }) })), Ap = { _origin: "https://api.emailjs.com" }, XA = (r, t = "https://api.emailjs.com") => { Ap._userID = r, Ap._origin = t }, fb = (r, t, e) => { if (!r) throw "The user ID is required. Visit https://dashboard.emailjs.com/admin/integration"; if (!t) throw "The service ID is required. Visit https://dashboard.emailjs.com/admin"; if (!e) throw "The template ID is required. Visit https://dashboard.emailjs.com/admin/templates"; return !0 }; class QS { constructor(t) { this.status = t.status, this.text = t.responseText } } const hb = (r, t, e = {}) => new Promise((n, a) => { const o = new XMLHttpRequest; o.addEventListener("load", ({ target: f }) => { const h = new QS(f); h.status === 200 || h.text === "OK" ? n(h) : a(h) }), o.addEventListener("error", ({ target: f }) => { a(new QS(f)) }), o.open("POST", Ap._origin + r, !0), Object.keys(e).forEach(f => { o.setRequestHeader(f, e[f]) }), o.send(t) }), qA = (r, t, e, n) => { const a = n || Ap._userID; return fb(a, r, t), hb("/api/v1.0/email/send", JSON.stringify({ lib_version: "3.2.0", user_id: a, service_id: r, template_id: t, template_params: e }), { "Content-type": "application/json" }) }, YA = r => { let t; if (typeof r == "string" ? t = document.querySelector(r) : t = r, !t || t.nodeName !== "FORM") throw "The 3rd parameter is expected to be the HTML form element or the style selector of form"; return t }, WA = (r, t, e, n) => { const a = n || Ap._userID, o = YA(e); fb(a, r, t); const f = new FormData(o); return f.append("lib_version", "3.2.0"), f.append("service_id", r), f.append("template_id", t), f.append("user_id", a), hb("/api/v1.0/email/send-form", f) }, kA = { init: XA, send: qA, sendForm: WA }, jA = () => { const [r, t] = Zt.useState({ name: "", email: "", title: "", message: "" }), [e, n] = Zt.useState(!1), [a, o] = Zt.useState(""), [f, h] = Zt.useState(!1), m = S => { t(M => ({ ...M, [S.target.name]: S.target.value })) }, g = () => { const { name: S, email: M, title: A, message: C } = r; return !S || !M || !A || !C ? (o("❌ All fields are required."), !1) : /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(M) ? C.length < 20 ? (o("❌ Message must be at least 20 characters long."), !1) : !0 : (o("❌ Please enter a valid email address."), !1) }, _ = () => { t({ name: "", email: "", title: "", message: "" }), o("") }, x = async S => { if (S.preventDefault(), f) { o("❌ Quota exhausted. Please try again later."); return } if (!g()) return; const M = JSON.parse(localStorage.getItem("lastSentTimes") || "{}"), A = M[r.email], C = Date.now(), R = 4 * 60 * 1e3; if (A && C - A < R) { o("❌ Please wait 4 minutes before sending another message from this email."); return } n(!0), o(""); try { await kA.sendForm("service_dp8qymu", "template_r0ymi7q", S.target, "z1aEPae85W2VY-zR7"), o("✅ Message sent successfully!"), M[r.email] = C, localStorage.setItem("lastSentTimes", JSON.stringify(M)), setTimeout(() => { _() }, 4e3) } catch (T) { T.status === 429 ? (o("❌ Quota exhausted. Please try again later."), h(!0)) : o("❌ Oops! Something went wrong. Please try again."), setTimeout(() => { o("") }, 4e3) } finally { n(!1) } }; return St.jsx("section", { id: "contact", className: "text min-h-screen flex items-center justify-center py-20", children: St.jsx(Wp, { children: St.jsxs("div", { className: "px-4 w-full min-w-[300px] md:w-[500px] sm:w-2/3 p-6", children: [St.jsx("h2", { className: "cursive text-3xl font-bold mb-8 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent text-center", children: "Get In Touch" }), St.jsxs("form", { className: "space-y-6", onSubmit: x, children: [St.jsx("div", { className: "relative", children: St.jsx("input", { type: "text", id: "name", name: "name", "aria-label": "Full Name", required: !0, value: r.name, className: "w-full bg-white/5 border border-white/10 rounded px-4 py-3 text-white transition focus:outline-none focus:border-gray-300 focus:bg-blue-500/5", placeholder: "Your Name", onChange: m, disabled: f }) }), St.jsx("div", { className: "relative", children: St.jsx("input", { type: "email", id: "email", name: "email", "aria-label": "Email Address", required: !0, value: r.email, className: "w-full bg-white/5 border border-white/10 rounded px-4 py-3 text-white transition focus:outline-none focus:border-gray-300 focus:bg-blue-500/5", placeholder: "Your Email", onChange: m, disabled: f }) }), St.jsx("div", { className: "relative", children: St.jsx("input", { type: "text", id: "title", name: "title", "aria-label": "Title", required: !0, value: r.title, className: "w-full bg-white/5 border border-white/10 rounded px-4 py-3 text-white transition focus:outline-none focus:border-gray-300 focus:bg-blue-500/5", placeholder: "Title For Your Massage", onChange: m, disabled: f }) }), St.jsx("div", { className: "relative", children: St.jsx("textarea", { id: "message", name: "message", "aria-label": "Message", required: !0, rows: 5, value: r.message, className: "w-full bg-white/5 border border-white/10 rounded px-4 py-3 text-white transition focus:outline-none focus:border-gray-300 focus:bg-blue-500/5 min-h-14", placeholder: "Your Message", onChange: m, disabled: f }) }), St.jsx("button", { type: "submit", className: "cursive w-full bg-gray-100 text-black py-3 px-6 rounded font-medium relative overflow-hidden hover:bg-gray-200 hover:text-black transition-all cursor-pointer", disabled: e || f, children: e ? "Sending..." : "Send Message" }), St.jsx("div", { className: "min-h-6", children: a && St.jsx("p", { className: `text-center ${a.startsWith("✅") ? "text-green-400" : "text-red-400"}`, children: a }) })] })] }) }) }) }; function ZA(r) { return Oh({ attr: { viewBox: "0 0 512 512" }, child: [{ tag: "path", attr: { d: "M294.1 256L167 129c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.3 34 0L345 239c9.1 9.1 9.3 23.7.7 33.1L201.1 417c-4.7 4.7-10.9 7-17 7s-12.3-2.3-17-7c-9.4-9.4-9.4-24.6 0-33.9l127-127.1z" }, child: [] }] })(r) } const QA = () => St.jsx("section", { id: "projects", className: "text min-h-screen flex items-center justify-center py-20", children: St.jsx(Wp, { children: St.jsxs("div", { className: "max-w-5xl mx-auto px-4", children: [St.jsx("h2", { className: "cursive text-3xl font-bold mb-8 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent text-center", children: "Featured Projects" }), St.jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [{ title: "Razer Mern Shop", description: "Razer MERN Shop is an e-commerce platform built using the MERN stack. It features a unique design inspired by Razer products, offering a sleek and dynamic shopping experience.", techStack: ["React", "Node.js", "JSX", "Tailwind", "ThreeJs", "I18n", "Atropos", "ChartJs", "GSAP", "React Router"], linkText: "In Progress..." }, { title: "GameZone", description: "A sleek e-commerce SPA website with an admin panel for managing games and a visually stunning homepage.", techStack: ["Next.js", "Prisma", "TSX", "GSAP", "Atropos", "Spline"], link: "https://github.com/MDJAmin/GameZone", linkText: "View Project" }, { title: "Elvora", description: "Multi-language (FA, EN, AR) website within a single day!", techStack: ["React", "JSX", "Tailwind", "I18n"], link: "https://mdjamin.github.io/Elvora/", linkText: "View" }, { title: "Snake Game", description: "A fun, idea-inspired game that supports on any device.", techStack: ["HTML", "CSS", "JS"], link: "https://mdjamin.github.io/Snake/", linkText: "Play" }].map((r, t) => St.jsxs("div", { className: "p-6 rounded-xl border border-white/10 hover:-translate-y-1 hover:border-gray-500/50 hover:shadow-[0_2px_8px_rgba(59,130,246,0.2)] transition", children: [St.jsx("h3", { className: "text-xl font-bold mb-2", children: r.title }), St.jsx("p", { className: "text-gray-400 mb-4", children: r.description }), St.jsx("div", { className: "flex flex-wrap gap-2 mb-4", children: r.techStack.map((e, n) => St.jsx("span", { className: "bg-blue-500/10 text-white py-1 px-3 rounded-full text-sm cursor-pointer transition hover:bg-gray-700 hover:-translate-y-0.5 hover:shadow-[0_2px_8px_rgba(59,130,246,0.2)]", title: IA[e] || "No description available", children: e }, n)) }), St.jsx("div", { className: "flex justify-between items-center", children: St.jsxs("a", { target: "_blank", rel: "noopener noreferrer", href: r.link, className: "flex text-gray-300 hover:text-white transition-colors my-4", children: [r.linkText, r.linkText !== "In Progress..." && St.jsx(ZA, { className: "mt-[5px]" })] }) })] }, t)) })] }) }) }), KA = ({ menuOpen: r, setMenuOpen: t }) => St.jsxs("div", {
	className: `cursive fixed top-0 right-0 w-full h-screen bg-black z-40 flex flex-col items-center justify-center
                     transition-all duration-300 ease-in-out transform
                     ${r ? "translate-x-0 opacity-100 pointer-events-auto" : "translate-x-full opacity-0 pointer-events-none"}
                   `, children: [St.jsx("button", { onClick: () => t(!1), className: "absolute top-6 right-6 text-white text-3xl focus:outline-none cursor-pointer", "aria-label": "Close Menu", children: "×" }), St.jsx("a", {
		href: "#home", onClick: () => t(!1), className: `text-2xl font-semibold text-white my-4 transform transition-transform duration-300
                    ${r ? "opacity-100 translate-x-0" : "opacity-0 translate-x-5"}        
            `, children: "Home"
	}), St.jsx("a", {
		href: "#about", onClick: () => t(!1), className: `text-2xl font-semibold text-white my-4 transform transition-transform duration-300
            ${r ? "opacity-100 translate-x-0" : "opacity-0 translate-x-5"}        
    `, children: "About"
	}), St.jsx("a", {
		href: "#projects", onClick: () => t(!1), className: `text-2xl font-semibold text-white my-4 transform transition-transform duration-300
            ${r ? "opacity-100 translate-x-0" : "opacity-0 translate-x-5"}        
    `, children: "Projects"
	}), St.jsx("a", {
		href: "#contact", onClick: () => t(!1), className: `text-2xl font-semibold text-white my-4 transform transition-transform duration-300
            ${r ? "opacity-100 translate-x-0" : "opacity-0 translate-x-5"}        
    `, children: "Contact"
	})]
});/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const kp = "174", JA = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, $A = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, db = 0, j_ = 1, pb = 2, t2 = 3, mb = 0, Ev = 1, mp = 2, Nr = 3, _o = 0, Va = 1, Ml = 2, vo = 0, Hc = 1, Z_ = 2, Q_ = 3, K_ = 4, gb = 5, yu = 100, vb = 101, yb = 102, _b = 103, xb = 104, Sb = 200, Mb = 201, bb = 202, Eb = 203, z0 = 204, B0 = 205, Tb = 206, Ab = 207, Rb = 208, wb = 209, Cb = 210, Db = 211, Ub = 212, Nb = 213, Ob = 214, P0 = 0, I0 = 1, H0 = 2, qc = 3, F0 = 4, V0 = 5, G0 = 6, X0 = 7, jp = 0, Lb = 1, zb = 2, El = 0, Bb = 1, Pb = 2, Ib = 3, vx = 4, Hb = 5, Fb = 6, Vb = 7, J_ = "attached", Gb = "detached", Tv = 300, xo = 301, Mu = 302, Rp = 303, wp = 304, Lh = 306, Cp = 1e3, Zs = 1001, Dp = 1002, ua = 1003, yx = 1004, e2 = 1004, _h = 1005, n2 = 1005, Li = 1006, gp = 1007, i2 = 1007, bl = 1008, a2 = 1008, zr = 1009, _x = 1010, xx = 1011, Ah = 1012, Av = 1013, So = 1014, us = 1015, zh = 1016, Rv = 1017, wv = 1018, Yc = 1020, Sx = 35902, Mx = 1021, bx = 1022, Ta = 1023, Ex = 1024, Tx = 1025, Fc = 1026, Wc = 1027, Cv = 1028, Zp = 1029, Ax = 1030, Dv = 1031, s2 = 1032, Uv = 1033, vp = 33776, yp = 33777, _p = 33778, xp = 33779, q0 = 35840, Y0 = 35841, W0 = 35842, k0 = 35843, j0 = 36196, Z0 = 37492, Q0 = 37496, K0 = 37808, J0 = 37809, $0 = 37810, tv = 37811, ev = 37812, nv = 37813, iv = 37814, av = 37815, sv = 37816, rv = 37817, lv = 37818, ov = 37819, uv = 37820, cv = 37821, Sp = 36492, fv = 36494, hv = 36495, Rx = 36283, dv = 36284, pv = 36285, mv = 36286, Xb = 2200, qb = 2201, Yb = 2202, Up = 2300, gv = 2301, w0 = 2302, Bc = 2400, Pc = 2401, Np = 2402, Nv = 2500, wx = 2501, r2 = 0, l2 = 1, o2 = 2, Wb = 3200, kb = 3201, u2 = 3202, c2 = 3203, Tu = 0, jb = 1, po = "", Ea = "srgb", bu = "srgb-linear", Op = "linear", Nn = "srgb", f2 = 0, Nc = 7680, h2 = 7681, d2 = 7682, p2 = 7683, m2 = 34055, g2 = 34056, v2 = 5386, y2 = 512, _2 = 513, x2 = 514, S2 = 515, M2 = 516, b2 = 517, E2 = 518, $_ = 519, Zb = 512, Qb = 513, Kb = 514, Cx = 515, Jb = 516, $b = 517, tE = 518, eE = 519, Lp = 35044, Vc = 35048, T2 = 35040, A2 = 35045, R2 = 35049, w2 = 35041, C2 = 35046, D2 = 35050, U2 = 35042, N2 = "100", tx = "300 es", Lr = 2e3, zp = 2001, O2 = { COMPUTE: "compute", RENDER: "render" }; class wl { addEventListener(t, e) { this._listeners === void 0 && (this._listeners = {}); const n = this._listeners; n[t] === void 0 && (n[t] = []), n[t].indexOf(e) === -1 && n[t].push(e) } hasEventListener(t, e) { const n = this._listeners; return n === void 0 ? !1 : n[t] !== void 0 && n[t].indexOf(e) !== -1 } removeEventListener(t, e) { const n = this._listeners; if (n === void 0) return; const a = n[t]; if (a !== void 0) { const o = a.indexOf(e); o !== -1 && a.splice(o, 1) } } dispatchEvent(t) { const e = this._listeners; if (e === void 0) return; const n = e[t.type]; if (n !== void 0) { t.target = this; const a = n.slice(0); for (let o = 0, f = a.length; o < f; o++)a[o].call(this, t); t.target = null } } } const xa = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"]; let KS = 1234567; const Gc = Math.PI / 180, Rh = 180 / Math.PI; function Cs() { const r = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0; return (xa[r & 255] + xa[r >> 8 & 255] + xa[r >> 16 & 255] + xa[r >> 24 & 255] + "-" + xa[t & 255] + xa[t >> 8 & 255] + "-" + xa[t >> 16 & 15 | 64] + xa[t >> 24 & 255] + "-" + xa[e & 63 | 128] + xa[e >> 8 & 255] + "-" + xa[e >> 16 & 255] + xa[e >> 24 & 255] + xa[n & 255] + xa[n >> 8 & 255] + xa[n >> 16 & 255] + xa[n >> 24 & 255]).toLowerCase() } function Ve(r, t, e) { return Math.max(t, Math.min(e, r)) } function Dx(r, t) { return (r % t + t) % t } function L2(r, t, e, n, a) { return n + (r - t) * (a - n) / (e - t) } function z2(r, t, e) { return r !== t ? (e - r) / (t - r) : 0 } function Mp(r, t, e) { return (1 - e) * r + e * t } function B2(r, t, e, n) { return Mp(r, t, 1 - Math.exp(-e * n)) } function P2(r, t = 1) { return t - Math.abs(Dx(r, t * 2) - t) } function I2(r, t, e) { return r <= t ? 0 : r >= e ? 1 : (r = (r - t) / (e - t), r * r * (3 - 2 * r)) } function H2(r, t, e) { return r <= t ? 0 : r >= e ? 1 : (r = (r - t) / (e - t), r * r * r * (r * (r * 6 - 15) + 10)) } function F2(r, t) { return r + Math.floor(Math.random() * (t - r + 1)) } function V2(r, t) { return r + Math.random() * (t - r) } function G2(r) { return r * (.5 - Math.random()) } function X2(r) { r !== void 0 && (KS = r); let t = KS += 1831565813; return t = Math.imul(t ^ t >>> 15, t | 1), t ^= t + Math.imul(t ^ t >>> 7, t | 61), ((t ^ t >>> 14) >>> 0) / 4294967296 } function q2(r) { return r * Gc } function Y2(r) { return r * Rh } function W2(r) { return (r & r - 1) === 0 && r !== 0 } function k2(r) { return Math.pow(2, Math.ceil(Math.log(r) / Math.LN2)) } function j2(r) { return Math.pow(2, Math.floor(Math.log(r) / Math.LN2)) } function Z2(r, t, e, n, a) { const o = Math.cos, f = Math.sin, h = o(e / 2), m = f(e / 2), g = o((t + n) / 2), _ = f((t + n) / 2), x = o((t - n) / 2), S = f((t - n) / 2), M = o((n - t) / 2), A = f((n - t) / 2); switch (a) { case "XYX": r.set(h * _, m * x, m * S, h * g); break; case "YZY": r.set(m * S, h * _, m * x, h * g); break; case "ZXZ": r.set(m * x, m * S, h * _, h * g); break; case "XZX": r.set(h * _, m * A, m * M, h * g); break; case "YXY": r.set(m * M, h * _, m * A, h * g); break; case "ZYZ": r.set(m * A, m * M, h * _, h * g); break; default: console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + a) } } function Fa(r, t) { switch (t.constructor) { case Float32Array: return r; case Uint32Array: return r / 4294967295; case Uint16Array: return r / 65535; case Uint8Array: return r / 255; case Int32Array: return Math.max(r / 2147483647, -1); case Int16Array: return Math.max(r / 32767, -1); case Int8Array: return Math.max(r / 127, -1); default: throw new Error("Invalid component type.") } } function Xe(r, t) { switch (t.constructor) { case Float32Array: return r; case Uint32Array: return Math.round(r * 4294967295); case Uint16Array: return Math.round(r * 65535); case Uint8Array: return Math.round(r * 255); case Int32Array: return Math.round(r * 2147483647); case Int16Array: return Math.round(r * 32767); case Int8Array: return Math.round(r * 127); default: throw new Error("Invalid component type.") } } const Q2 = { DEG2RAD: Gc, RAD2DEG: Rh, generateUUID: Cs, clamp: Ve, euclideanModulo: Dx, mapLinear: L2, inverseLerp: z2, lerp: Mp, damp: B2, pingpong: P2, smoothstep: I2, smootherstep: H2, randInt: F2, randFloat: V2, randFloatSpread: G2, seededRandom: X2, degToRad: q2, radToDeg: Y2, isPowerOfTwo: W2, ceilPowerOfTwo: k2, floorPowerOfTwo: j2, setQuaternionFromProperEuler: Z2, normalize: Xe, denormalize: Fa }; class zt { constructor(t = 0, e = 0) { zt.prototype.isVector2 = !0, this.x = t, this.y = e } get width() { return this.x } set width(t) { this.x = t } get height() { return this.y } set height(t) { this.y = t } set(t, e) { return this.x = t, this.y = e, this } setScalar(t) { return this.x = t, this.y = t, this } setX(t) { return this.x = t, this } setY(t) { return this.y = t, this } setComponent(t, e) { switch (t) { case 0: this.x = e; break; case 1: this.y = e; break; default: throw new Error("index is out of range: " + t) }return this } getComponent(t) { switch (t) { case 0: return this.x; case 1: return this.y; default: throw new Error("index is out of range: " + t) } } clone() { return new this.constructor(this.x, this.y) } copy(t) { return this.x = t.x, this.y = t.y, this } add(t) { return this.x += t.x, this.y += t.y, this } addScalar(t) { return this.x += t, this.y += t, this } addVectors(t, e) { return this.x = t.x + e.x, this.y = t.y + e.y, this } addScaledVector(t, e) { return this.x += t.x * e, this.y += t.y * e, this } sub(t) { return this.x -= t.x, this.y -= t.y, this } subScalar(t) { return this.x -= t, this.y -= t, this } subVectors(t, e) { return this.x = t.x - e.x, this.y = t.y - e.y, this } multiply(t) { return this.x *= t.x, this.y *= t.y, this } multiplyScalar(t) { return this.x *= t, this.y *= t, this } divide(t) { return this.x /= t.x, this.y /= t.y, this } divideScalar(t) { return this.multiplyScalar(1 / t) } applyMatrix3(t) { const e = this.x, n = this.y, a = t.elements; return this.x = a[0] * e + a[3] * n + a[6], this.y = a[1] * e + a[4] * n + a[7], this } min(t) { return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this } max(t) { return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this } clamp(t, e) { return this.x = Ve(this.x, t.x, e.x), this.y = Ve(this.y, t.y, e.y), this } clampScalar(t, e) { return this.x = Ve(this.x, t, e), this.y = Ve(this.y, t, e), this } clampLength(t, e) { const n = this.length(); return this.divideScalar(n || 1).multiplyScalar(Ve(n, t, e)) } floor() { return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this } ceil() { return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this } round() { return this.x = Math.round(this.x), this.y = Math.round(this.y), this } roundToZero() { return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this } negate() { return this.x = -this.x, this.y = -this.y, this } dot(t) { return this.x * t.x + this.y * t.y } cross(t) { return this.x * t.y - this.y * t.x } lengthSq() { return this.x * this.x + this.y * this.y } length() { return Math.sqrt(this.x * this.x + this.y * this.y) } manhattanLength() { return Math.abs(this.x) + Math.abs(this.y) } normalize() { return this.divideScalar(this.length() || 1) } angle() { return Math.atan2(-this.y, -this.x) + Math.PI } angleTo(t) { const e = Math.sqrt(this.lengthSq() * t.lengthSq()); if (e === 0) return Math.PI / 2; const n = this.dot(t) / e; return Math.acos(Ve(n, -1, 1)) } distanceTo(t) { return Math.sqrt(this.distanceToSquared(t)) } distanceToSquared(t) { const e = this.x - t.x, n = this.y - t.y; return e * e + n * n } manhattanDistanceTo(t) { return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) } setLength(t) { return this.normalize().multiplyScalar(t) } lerp(t, e) { return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this } lerpVectors(t, e, n) { return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this } equals(t) { return t.x === this.x && t.y === this.y } fromArray(t, e = 0) { return this.x = t[e], this.y = t[e + 1], this } toArray(t = [], e = 0) { return t[e] = this.x, t[e + 1] = this.y, t } fromBufferAttribute(t, e) { return this.x = t.getX(e), this.y = t.getY(e), this } rotateAround(t, e) { const n = Math.cos(e), a = Math.sin(e), o = this.x - t.x, f = this.y - t.y; return this.x = o * n - f * a + t.x, this.y = o * a + f * n + t.y, this } random() { return this.x = Math.random(), this.y = Math.random(), this } *[Symbol.iterator]() { yield this.x, yield this.y } } class Ge { constructor(t, e, n, a, o, f, h, m, g) { Ge.prototype.isMatrix3 = !0, this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1], t !== void 0 && this.set(t, e, n, a, o, f, h, m, g) } set(t, e, n, a, o, f, h, m, g) { const _ = this.elements; return _[0] = t, _[1] = a, _[2] = h, _[3] = e, _[4] = o, _[5] = m, _[6] = n, _[7] = f, _[8] = g, this } identity() { return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this } copy(t) { const e = this.elements, n = t.elements; return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], this } extractBasis(t, e, n) { return t.setFromMatrix3Column(this, 0), e.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this } setFromMatrix4(t) { const e = t.elements; return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]), this } multiply(t) { return this.multiplyMatrices(this, t) } premultiply(t) { return this.multiplyMatrices(t, this) } multiplyMatrices(t, e) { const n = t.elements, a = e.elements, o = this.elements, f = n[0], h = n[3], m = n[6], g = n[1], _ = n[4], x = n[7], S = n[2], M = n[5], A = n[8], C = a[0], R = a[3], T = a[6], D = a[1], N = a[4], U = a[7], V = a[2], I = a[5], G = a[8]; return o[0] = f * C + h * D + m * V, o[3] = f * R + h * N + m * I, o[6] = f * T + h * U + m * G, o[1] = g * C + _ * D + x * V, o[4] = g * R + _ * N + x * I, o[7] = g * T + _ * U + x * G, o[2] = S * C + M * D + A * V, o[5] = S * R + M * N + A * I, o[8] = S * T + M * U + A * G, this } multiplyScalar(t) { const e = this.elements; return e[0] *= t, e[3] *= t, e[6] *= t, e[1] *= t, e[4] *= t, e[7] *= t, e[2] *= t, e[5] *= t, e[8] *= t, this } determinant() { const t = this.elements, e = t[0], n = t[1], a = t[2], o = t[3], f = t[4], h = t[5], m = t[6], g = t[7], _ = t[8]; return e * f * _ - e * h * g - n * o * _ + n * h * m + a * o * g - a * f * m } invert() { const t = this.elements, e = t[0], n = t[1], a = t[2], o = t[3], f = t[4], h = t[5], m = t[6], g = t[7], _ = t[8], x = _ * f - h * g, S = h * m - _ * o, M = g * o - f * m, A = e * x + n * S + a * M; if (A === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0); const C = 1 / A; return t[0] = x * C, t[1] = (a * g - _ * n) * C, t[2] = (h * n - a * f) * C, t[3] = S * C, t[4] = (_ * e - a * m) * C, t[5] = (a * o - h * e) * C, t[6] = M * C, t[7] = (n * m - g * e) * C, t[8] = (f * e - n * o) * C, this } transpose() { let t; const e = this.elements; return t = e[1], e[1] = e[3], e[3] = t, t = e[2], e[2] = e[6], e[6] = t, t = e[5], e[5] = e[7], e[7] = t, this } getNormalMatrix(t) { return this.setFromMatrix4(t).invert().transpose() } transposeIntoArray(t) { const e = this.elements; return t[0] = e[0], t[1] = e[3], t[2] = e[6], t[3] = e[1], t[4] = e[4], t[5] = e[7], t[6] = e[2], t[7] = e[5], t[8] = e[8], this } setUvTransform(t, e, n, a, o, f, h) { const m = Math.cos(o), g = Math.sin(o); return this.set(n * m, n * g, -n * (m * f + g * h) + f + t, -a * g, a * m, -a * (-g * f + m * h) + h + e, 0, 0, 1), this } scale(t, e) { return this.premultiply(Gy.makeScale(t, e)), this } rotate(t) { return this.premultiply(Gy.makeRotation(-t)), this } translate(t, e) { return this.premultiply(Gy.makeTranslation(t, e)), this } makeTranslation(t, e) { return t.isVector2 ? this.set(1, 0, t.x, 0, 1, t.y, 0, 0, 1) : this.set(1, 0, t, 0, 1, e, 0, 0, 1), this } makeRotation(t) { const e = Math.cos(t), n = Math.sin(t); return this.set(e, -n, 0, n, e, 0, 0, 0, 1), this } makeScale(t, e) { return this.set(t, 0, 0, 0, e, 0, 0, 0, 1), this } equals(t) { const e = this.elements, n = t.elements; for (let a = 0; a < 9; a++)if (e[a] !== n[a]) return !1; return !0 } fromArray(t, e = 0) { for (let n = 0; n < 9; n++)this.elements[n] = t[n + e]; return this } toArray(t = [], e = 0) { const n = this.elements; return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t } clone() { return new this.constructor().fromArray(this.elements) } } const Gy = new Ge; function nE(r) { for (let t = r.length - 1; t >= 0; --t)if (r[t] >= 65535) return !0; return !1 } const K2 = { Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array }; function xh(r, t) { return new K2[r](t) } function Bp(r) { return document.createElementNS("http://www.w3.org/1999/xhtml", r) } function iE() { const r = Bp("canvas"); return r.style.display = "block", r } const JS = {}; function Oc(r) { r in JS || (JS[r] = !0, console.warn(r)) } function J2(r, t, e) { return new Promise(function (n, a) { function o() { switch (r.clientWaitSync(t, r.SYNC_FLUSH_COMMANDS_BIT, 0)) { case r.WAIT_FAILED: a(); break; case r.TIMEOUT_EXPIRED: setTimeout(o, e); break; default: n() } } setTimeout(o, e) }) } function $2(r) { const t = r.elements; t[2] = .5 * t[2] + .5 * t[3], t[6] = .5 * t[6] + .5 * t[7], t[10] = .5 * t[10] + .5 * t[11], t[14] = .5 * t[14] + .5 * t[15] } function tR(r) { const t = r.elements; t[11] === -1 ? (t[10] = -t[10] - 1, t[14] = -t[14]) : (t[10] = -t[10], t[14] = -t[14] + 1) } const $S = new Ge().set(.4123908, .3575843, .1804808, .212639, .7151687, .0721923, .0193308, .1191948, .9505322), t1 = new Ge().set(3.2409699, -1.5373832, -.4986108, -.9692436, 1.8759675, .0415551, .0556301, -.203977, 1.0569715); function eR() { const r = { enabled: !0, workingColorSpace: bu, spaces: {}, convert: function (a, o, f) { return this.enabled === !1 || o === f || !o || !f || (this.spaces[o].transfer === Nn && (a.r = yo(a.r), a.g = yo(a.g), a.b = yo(a.b)), this.spaces[o].primaries !== this.spaces[f].primaries && (a.applyMatrix3(this.spaces[o].toXYZ), a.applyMatrix3(this.spaces[f].fromXYZ)), this.spaces[f].transfer === Nn && (a.r = Eh(a.r), a.g = Eh(a.g), a.b = Eh(a.b))), a }, fromWorkingColorSpace: function (a, o) { return this.convert(a, this.workingColorSpace, o) }, toWorkingColorSpace: function (a, o) { return this.convert(a, o, this.workingColorSpace) }, getPrimaries: function (a) { return this.spaces[a].primaries }, getTransfer: function (a) { return a === po ? Op : this.spaces[a].transfer }, getLuminanceCoefficients: function (a, o = this.workingColorSpace) { return a.fromArray(this.spaces[o].luminanceCoefficients) }, define: function (a) { Object.assign(this.spaces, a) }, _getMatrix: function (a, o, f) { return a.copy(this.spaces[o].toXYZ).multiply(this.spaces[f].fromXYZ) }, _getDrawingBufferColorSpace: function (a) { return this.spaces[a].outputColorSpaceConfig.drawingBufferColorSpace }, _getUnpackColorSpace: function (a = this.workingColorSpace) { return this.spaces[a].workingColorSpaceConfig.unpackColorSpace } }, t = [.64, .33, .3, .6, .15, .06], e = [.2126, .7152, .0722], n = [.3127, .329]; return r.define({ [bu]: { primaries: t, whitePoint: n, transfer: Op, toXYZ: $S, fromXYZ: t1, luminanceCoefficients: e, workingColorSpaceConfig: { unpackColorSpace: Ea }, outputColorSpaceConfig: { drawingBufferColorSpace: Ea } }, [Ea]: { primaries: t, whitePoint: n, transfer: Nn, toXYZ: $S, fromXYZ: t1, luminanceCoefficients: e, outputColorSpaceConfig: { drawingBufferColorSpace: Ea } } }), r } const dn = eR(); function yo(r) { return r < .04045 ? r * .0773993808 : Math.pow(r * .9478672986 + .0521327014, 2.4) } function Eh(r) { return r < .0031308 ? r * 12.92 : 1.055 * Math.pow(r, .41666) - .055 } let Jf; class aE { static getDataURL(t) { if (/^data:/i.test(t.src) || typeof HTMLCanvasElement > "u") return t.src; let e; if (t instanceof HTMLCanvasElement) e = t; else { Jf === void 0 && (Jf = Bp("canvas")), Jf.width = t.width, Jf.height = t.height; const n = Jf.getContext("2d"); t instanceof ImageData ? n.putImageData(t, 0, 0) : n.drawImage(t, 0, 0, t.width, t.height), e = Jf } return e.toDataURL("image/png") } static sRGBToLinear(t) { if (typeof HTMLImageElement < "u" && t instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && t instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && t instanceof ImageBitmap) { const e = Bp("canvas"); e.width = t.width, e.height = t.height; const n = e.getContext("2d"); n.drawImage(t, 0, 0, t.width, t.height); const a = n.getImageData(0, 0, t.width, t.height), o = a.data; for (let f = 0; f < o.length; f++)o[f] = yo(o[f] / 255) * 255; return n.putImageData(a, 0, 0), e } else if (t.data) { const e = t.data.slice(0); for (let n = 0; n < e.length; n++)e instanceof Uint8Array || e instanceof Uint8ClampedArray ? e[n] = Math.floor(yo(e[n] / 255) * 255) : e[n] = yo(e[n]); return { data: e, width: t.width, height: t.height } } else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), t } } let nR = 0; class xu { constructor(t = null) { this.isSource = !0, Object.defineProperty(this, "id", { value: nR++ }), this.uuid = Cs(), this.data = t, this.dataReady = !0, this.version = 0 } set needsUpdate(t) { t === !0 && this.version++ } toJSON(t) { const e = t === void 0 || typeof t == "string"; if (!e && t.images[this.uuid] !== void 0) return t.images[this.uuid]; const n = { uuid: this.uuid, url: "" }, a = this.data; if (a !== null) { let o; if (Array.isArray(a)) { o = []; for (let f = 0, h = a.length; f < h; f++)a[f].isDataTexture ? o.push(Xy(a[f].image)) : o.push(Xy(a[f])) } else o = Xy(a); n.url = o } return e || (t.images[this.uuid] = n), n } } function Xy(r) { return typeof HTMLImageElement < "u" && r instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && r instanceof ImageBitmap ? aE.getDataURL(r) : r.data ? { data: Array.from(r.data), width: r.width, height: r.height, type: r.data.constructor.name } : (console.warn("THREE.Texture: Unable to serialize Texture."), {}) } let iR = 0; class yi extends wl { constructor(t = yi.DEFAULT_IMAGE, e = yi.DEFAULT_MAPPING, n = Zs, a = Zs, o = Li, f = bl, h = Ta, m = zr, g = yi.DEFAULT_ANISOTROPY, _ = po) { super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: iR++ }), this.uuid = Cs(), this.name = "", this.source = new xu(t), this.mipmaps = [], this.mapping = e, this.channel = 0, this.wrapS = n, this.wrapT = a, this.magFilter = o, this.minFilter = f, this.anisotropy = g, this.format = h, this.internalFormat = null, this.type = m, this.offset = new zt(0, 0), this.repeat = new zt(1, 1), this.center = new zt(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new Ge, this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.colorSpace = _, this.userData = {}, this.version = 0, this.onUpdate = null, this.renderTarget = null, this.isRenderTargetTexture = !1, this.pmremVersion = 0 } get image() { return this.source.data } set image(t = null) { this.source.data = t } updateMatrix() { this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y) } clone() { return new this.constructor().copy(this) } copy(t) { return this.name = t.name, this.source = t.source, this.mipmaps = t.mipmaps.slice(0), this.mapping = t.mapping, this.channel = t.channel, this.wrapS = t.wrapS, this.wrapT = t.wrapT, this.magFilter = t.magFilter, this.minFilter = t.minFilter, this.anisotropy = t.anisotropy, this.format = t.format, this.internalFormat = t.internalFormat, this.type = t.type, this.offset.copy(t.offset), this.repeat.copy(t.repeat), this.center.copy(t.center), this.rotation = t.rotation, this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrix.copy(t.matrix), this.generateMipmaps = t.generateMipmaps, this.premultiplyAlpha = t.premultiplyAlpha, this.flipY = t.flipY, this.unpackAlignment = t.unpackAlignment, this.colorSpace = t.colorSpace, this.renderTarget = t.renderTarget, this.isRenderTargetTexture = t.isRenderTargetTexture, this.userData = JSON.parse(JSON.stringify(t.userData)), this.needsUpdate = !0, this } toJSON(t) { const e = t === void 0 || typeof t == "string"; if (!e && t.textures[this.uuid] !== void 0) return t.textures[this.uuid]; const n = { metadata: { version: 4.6, type: "Texture", generator: "Texture.toJSON" }, uuid: this.uuid, name: this.name, image: this.source.toJSON(t).uuid, mapping: this.mapping, channel: this.channel, repeat: [this.repeat.x, this.repeat.y], offset: [this.offset.x, this.offset.y], center: [this.center.x, this.center.y], rotation: this.rotation, wrap: [this.wrapS, this.wrapT], format: this.format, internalFormat: this.internalFormat, type: this.type, colorSpace: this.colorSpace, minFilter: this.minFilter, magFilter: this.magFilter, anisotropy: this.anisotropy, flipY: this.flipY, generateMipmaps: this.generateMipmaps, premultiplyAlpha: this.premultiplyAlpha, unpackAlignment: this.unpackAlignment }; return Object.keys(this.userData).length > 0 && (n.userData = this.userData), e || (t.textures[this.uuid] = n), n } dispose() { this.dispatchEvent({ type: "dispose" }) } transformUv(t) { if (this.mapping !== Tv) return t; if (t.applyMatrix3(this.matrix), t.x < 0 || t.x > 1) switch (this.wrapS) { case Cp: t.x = t.x - Math.floor(t.x); break; case Zs: t.x = t.x < 0 ? 0 : 1; break; case Dp: Math.abs(Math.floor(t.x) % 2) === 1 ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x); break }if (t.y < 0 || t.y > 1) switch (this.wrapT) { case Cp: t.y = t.y - Math.floor(t.y); break; case Zs: t.y = t.y < 0 ? 0 : 1; break; case Dp: Math.abs(Math.floor(t.y) % 2) === 1 ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y); break }return this.flipY && (t.y = 1 - t.y), t } set needsUpdate(t) { t === !0 && (this.version++, this.source.needsUpdate = !0) } set needsPMREMUpdate(t) { t === !0 && this.pmremVersion++ } } yi.DEFAULT_IMAGE = null; yi.DEFAULT_MAPPING = Tv; yi.DEFAULT_ANISOTROPY = 1; class yn { constructor(t = 0, e = 0, n = 0, a = 1) { yn.prototype.isVector4 = !0, this.x = t, this.y = e, this.z = n, this.w = a } get width() { return this.z } set width(t) { this.z = t } get height() { return this.w } set height(t) { this.w = t } set(t, e, n, a) { return this.x = t, this.y = e, this.z = n, this.w = a, this } setScalar(t) { return this.x = t, this.y = t, this.z = t, this.w = t, this } setX(t) { return this.x = t, this } setY(t) { return this.y = t, this } setZ(t) { return this.z = t, this } setW(t) { return this.w = t, this } setComponent(t, e) { switch (t) { case 0: this.x = e; break; case 1: this.y = e; break; case 2: this.z = e; break; case 3: this.w = e; break; default: throw new Error("index is out of range: " + t) }return this } getComponent(t) { switch (t) { case 0: return this.x; case 1: return this.y; case 2: return this.z; case 3: return this.w; default: throw new Error("index is out of range: " + t) } } clone() { return new this.constructor(this.x, this.y, this.z, this.w) } copy(t) { return this.x = t.x, this.y = t.y, this.z = t.z, this.w = t.w !== void 0 ? t.w : 1, this } add(t) { return this.x += t.x, this.y += t.y, this.z += t.z, this.w += t.w, this } addScalar(t) { return this.x += t, this.y += t, this.z += t, this.w += t, this } addVectors(t, e) { return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this.w = t.w + e.w, this } addScaledVector(t, e) { return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this.w += t.w * e, this } sub(t) { return this.x -= t.x, this.y -= t.y, this.z -= t.z, this.w -= t.w, this } subScalar(t) { return this.x -= t, this.y -= t, this.z -= t, this.w -= t, this } subVectors(t, e) { return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this.w = t.w - e.w, this } multiply(t) { return this.x *= t.x, this.y *= t.y, this.z *= t.z, this.w *= t.w, this } multiplyScalar(t) { return this.x *= t, this.y *= t, this.z *= t, this.w *= t, this } applyMatrix4(t) { const e = this.x, n = this.y, a = this.z, o = this.w, f = t.elements; return this.x = f[0] * e + f[4] * n + f[8] * a + f[12] * o, this.y = f[1] * e + f[5] * n + f[9] * a + f[13] * o, this.z = f[2] * e + f[6] * n + f[10] * a + f[14] * o, this.w = f[3] * e + f[7] * n + f[11] * a + f[15] * o, this } divide(t) { return this.x /= t.x, this.y /= t.y, this.z /= t.z, this.w /= t.w, this } divideScalar(t) { return this.multiplyScalar(1 / t) } setAxisAngleFromQuaternion(t) { this.w = 2 * Math.acos(t.w); const e = Math.sqrt(1 - t.w * t.w); return e < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = t.x / e, this.y = t.y / e, this.z = t.z / e), this } setAxisAngleFromRotationMatrix(t) { let e, n, a, o; const m = t.elements, g = m[0], _ = m[4], x = m[8], S = m[1], M = m[5], A = m[9], C = m[2], R = m[6], T = m[10]; if (Math.abs(_ - S) < .01 && Math.abs(x - C) < .01 && Math.abs(A - R) < .01) { if (Math.abs(_ + S) < .1 && Math.abs(x + C) < .1 && Math.abs(A + R) < .1 && Math.abs(g + M + T - 3) < .1) return this.set(1, 0, 0, 0), this; e = Math.PI; const N = (g + 1) / 2, U = (M + 1) / 2, V = (T + 1) / 2, I = (_ + S) / 4, G = (x + C) / 4, q = (A + R) / 4; return N > U && N > V ? N < .01 ? (n = 0, a = .707106781, o = .707106781) : (n = Math.sqrt(N), a = I / n, o = G / n) : U > V ? U < .01 ? (n = .707106781, a = 0, o = .707106781) : (a = Math.sqrt(U), n = I / a, o = q / a) : V < .01 ? (n = .707106781, a = .707106781, o = 0) : (o = Math.sqrt(V), n = G / o, a = q / o), this.set(n, a, o, e), this } let D = Math.sqrt((R - A) * (R - A) + (x - C) * (x - C) + (S - _) * (S - _)); return Math.abs(D) < .001 && (D = 1), this.x = (R - A) / D, this.y = (x - C) / D, this.z = (S - _) / D, this.w = Math.acos((g + M + T - 1) / 2), this } setFromMatrixPosition(t) { const e = t.elements; return this.x = e[12], this.y = e[13], this.z = e[14], this.w = e[15], this } min(t) { return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this.w = Math.min(this.w, t.w), this } max(t) { return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this.w = Math.max(this.w, t.w), this } clamp(t, e) { return this.x = Ve(this.x, t.x, e.x), this.y = Ve(this.y, t.y, e.y), this.z = Ve(this.z, t.z, e.z), this.w = Ve(this.w, t.w, e.w), this } clampScalar(t, e) { return this.x = Ve(this.x, t, e), this.y = Ve(this.y, t, e), this.z = Ve(this.z, t, e), this.w = Ve(this.w, t, e), this } clampLength(t, e) { const n = this.length(); return this.divideScalar(n || 1).multiplyScalar(Ve(n, t, e)) } floor() { return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this } ceil() { return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this } round() { return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this } roundToZero() { return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this } negate() { return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this } dot(t) { return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w } lengthSq() { return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w } length() { return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w) } manhattanLength() { return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w) } normalize() { return this.divideScalar(this.length() || 1) } setLength(t) { return this.normalize().multiplyScalar(t) } lerp(t, e) { return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this.w += (t.w - this.w) * e, this } lerpVectors(t, e, n) { return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this.z = t.z + (e.z - t.z) * n, this.w = t.w + (e.w - t.w) * n, this } equals(t) { return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w } fromArray(t, e = 0) { return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this.w = t[e + 3], this } toArray(t = [], e = 0) { return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t[e + 3] = this.w, t } fromBufferAttribute(t, e) { return this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this.w = t.getW(e), this } random() { return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this } *[Symbol.iterator]() { yield this.x, yield this.y, yield this.z, yield this.w } } class Ov extends wl { constructor(t = 1, e = 1, n = {}) { super(), this.isRenderTarget = !0, this.width = t, this.height = e, this.depth = 1, this.scissor = new yn(0, 0, t, e), this.scissorTest = !1, this.viewport = new yn(0, 0, t, e); const a = { width: t, height: e, depth: 1 }; n = Object.assign({ generateMipmaps: !1, internalFormat: null, minFilter: Li, depthBuffer: !0, stencilBuffer: !1, resolveDepthBuffer: !0, resolveStencilBuffer: !0, depthTexture: null, samples: 0, count: 1 }, n); const o = new yi(a, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.colorSpace); o.flipY = !1, o.generateMipmaps = n.generateMipmaps, o.internalFormat = n.internalFormat, this.textures = []; const f = n.count; for (let h = 0; h < f; h++)this.textures[h] = o.clone(), this.textures[h].isRenderTargetTexture = !0, this.textures[h].renderTarget = this; this.depthBuffer = n.depthBuffer, this.stencilBuffer = n.stencilBuffer, this.resolveDepthBuffer = n.resolveDepthBuffer, this.resolveStencilBuffer = n.resolveStencilBuffer, this._depthTexture = null, this.depthTexture = n.depthTexture, this.samples = n.samples } get texture() { return this.textures[0] } set texture(t) { this.textures[0] = t } set depthTexture(t) { this._depthTexture !== null && (this._depthTexture.renderTarget = null), t !== null && (t.renderTarget = this), this._depthTexture = t } get depthTexture() { return this._depthTexture } setSize(t, e, n = 1) { if (this.width !== t || this.height !== e || this.depth !== n) { this.width = t, this.height = e, this.depth = n; for (let a = 0, o = this.textures.length; a < o; a++)this.textures[a].image.width = t, this.textures[a].image.height = e, this.textures[a].image.depth = n; this.dispose() } this.viewport.set(0, 0, t, e), this.scissor.set(0, 0, t, e) } clone() { return new this.constructor().copy(this) } copy(t) { this.width = t.width, this.height = t.height, this.depth = t.depth, this.scissor.copy(t.scissor), this.scissorTest = t.scissorTest, this.viewport.copy(t.viewport), this.textures.length = 0; for (let e = 0, n = t.textures.length; e < n; e++) { this.textures[e] = t.textures[e].clone(), this.textures[e].isRenderTargetTexture = !0, this.textures[e].renderTarget = this; const a = Object.assign({}, t.textures[e].image); this.textures[e].source = new xu(a) } return this.depthBuffer = t.depthBuffer, this.stencilBuffer = t.stencilBuffer, this.resolveDepthBuffer = t.resolveDepthBuffer, this.resolveStencilBuffer = t.resolveStencilBuffer, t.depthTexture !== null && (this.depthTexture = t.depthTexture.clone()), this.samples = t.samples, this } dispose() { this.dispatchEvent({ type: "dispose" }) } } class Rl extends Ov { constructor(t = 1, e = 1, n = {}) { super(t, e, n), this.isWebGLRenderTarget = !0 } } class Qp extends yi { constructor(t = null, e = 1, n = 1, a = 1) { super(null), this.isDataArrayTexture = !0, this.image = { data: t, width: e, height: n, depth: a }, this.magFilter = ua, this.minFilter = ua, this.wrapR = Zs, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1, this.layerUpdates = new Set } addLayerUpdate(t) { this.layerUpdates.add(t) } clearLayerUpdates() { this.layerUpdates.clear() } } class aR extends Rl { constructor(t = 1, e = 1, n = 1, a = {}) { super(t, e, a), this.isWebGLArrayRenderTarget = !0, this.depth = n, this.texture = new Qp(null, t, e, n), this.texture.isRenderTargetTexture = !0 } } class Lv extends yi { constructor(t = null, e = 1, n = 1, a = 1) { super(null), this.isData3DTexture = !0, this.image = { data: t, width: e, height: n, depth: a }, this.magFilter = ua, this.minFilter = ua, this.wrapR = Zs, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1 } } class sR extends Rl { constructor(t = 1, e = 1, n = 1, a = {}) { super(t, e, a), this.isWebGL3DRenderTarget = !0, this.depth = n, this.texture = new Lv(null, t, e, n), this.texture.isRenderTargetTexture = !0 } } class cs { constructor(t = 0, e = 0, n = 0, a = 1) { this.isQuaternion = !0, this._x = t, this._y = e, this._z = n, this._w = a } static slerpFlat(t, e, n, a, o, f, h) { let m = n[a + 0], g = n[a + 1], _ = n[a + 2], x = n[a + 3]; const S = o[f + 0], M = o[f + 1], A = o[f + 2], C = o[f + 3]; if (h === 0) { t[e + 0] = m, t[e + 1] = g, t[e + 2] = _, t[e + 3] = x; return } if (h === 1) { t[e + 0] = S, t[e + 1] = M, t[e + 2] = A, t[e + 3] = C; return } if (x !== C || m !== S || g !== M || _ !== A) { let R = 1 - h; const T = m * S + g * M + _ * A + x * C, D = T >= 0 ? 1 : -1, N = 1 - T * T; if (N > Number.EPSILON) { const V = Math.sqrt(N), I = Math.atan2(V, T * D); R = Math.sin(R * I) / V, h = Math.sin(h * I) / V } const U = h * D; if (m = m * R + S * U, g = g * R + M * U, _ = _ * R + A * U, x = x * R + C * U, R === 1 - h) { const V = 1 / Math.sqrt(m * m + g * g + _ * _ + x * x); m *= V, g *= V, _ *= V, x *= V } } t[e] = m, t[e + 1] = g, t[e + 2] = _, t[e + 3] = x } static multiplyQuaternionsFlat(t, e, n, a, o, f) { const h = n[a], m = n[a + 1], g = n[a + 2], _ = n[a + 3], x = o[f], S = o[f + 1], M = o[f + 2], A = o[f + 3]; return t[e] = h * A + _ * x + m * M - g * S, t[e + 1] = m * A + _ * S + g * x - h * M, t[e + 2] = g * A + _ * M + h * S - m * x, t[e + 3] = _ * A - h * x - m * S - g * M, t } get x() { return this._x } set x(t) { this._x = t, this._onChangeCallback() } get y() { return this._y } set y(t) { this._y = t, this._onChangeCallback() } get z() { return this._z } set z(t) { this._z = t, this._onChangeCallback() } get w() { return this._w } set w(t) { this._w = t, this._onChangeCallback() } set(t, e, n, a) { return this._x = t, this._y = e, this._z = n, this._w = a, this._onChangeCallback(), this } clone() { return new this.constructor(this._x, this._y, this._z, this._w) } copy(t) { return this._x = t.x, this._y = t.y, this._z = t.z, this._w = t.w, this._onChangeCallback(), this } setFromEuler(t, e = !0) { const n = t._x, a = t._y, o = t._z, f = t._order, h = Math.cos, m = Math.sin, g = h(n / 2), _ = h(a / 2), x = h(o / 2), S = m(n / 2), M = m(a / 2), A = m(o / 2); switch (f) { case "XYZ": this._x = S * _ * x + g * M * A, this._y = g * M * x - S * _ * A, this._z = g * _ * A + S * M * x, this._w = g * _ * x - S * M * A; break; case "YXZ": this._x = S * _ * x + g * M * A, this._y = g * M * x - S * _ * A, this._z = g * _ * A - S * M * x, this._w = g * _ * x + S * M * A; break; case "ZXY": this._x = S * _ * x - g * M * A, this._y = g * M * x + S * _ * A, this._z = g * _ * A + S * M * x, this._w = g * _ * x - S * M * A; break; case "ZYX": this._x = S * _ * x - g * M * A, this._y = g * M * x + S * _ * A, this._z = g * _ * A - S * M * x, this._w = g * _ * x + S * M * A; break; case "YZX": this._x = S * _ * x + g * M * A, this._y = g * M * x + S * _ * A, this._z = g * _ * A - S * M * x, this._w = g * _ * x - S * M * A; break; case "XZY": this._x = S * _ * x - g * M * A, this._y = g * M * x - S * _ * A, this._z = g * _ * A + S * M * x, this._w = g * _ * x + S * M * A; break; default: console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + f) }return e === !0 && this._onChangeCallback(), this } setFromAxisAngle(t, e) { const n = e / 2, a = Math.sin(n); return this._x = t.x * a, this._y = t.y * a, this._z = t.z * a, this._w = Math.cos(n), this._onChangeCallback(), this } setFromRotationMatrix(t) { const e = t.elements, n = e[0], a = e[4], o = e[8], f = e[1], h = e[5], m = e[9], g = e[2], _ = e[6], x = e[10], S = n + h + x; if (S > 0) { const M = .5 / Math.sqrt(S + 1); this._w = .25 / M, this._x = (_ - m) * M, this._y = (o - g) * M, this._z = (f - a) * M } else if (n > h && n > x) { const M = 2 * Math.sqrt(1 + n - h - x); this._w = (_ - m) / M, this._x = .25 * M, this._y = (a + f) / M, this._z = (o + g) / M } else if (h > x) { const M = 2 * Math.sqrt(1 + h - n - x); this._w = (o - g) / M, this._x = (a + f) / M, this._y = .25 * M, this._z = (m + _) / M } else { const M = 2 * Math.sqrt(1 + x - n - h); this._w = (f - a) / M, this._x = (o + g) / M, this._y = (m + _) / M, this._z = .25 * M } return this._onChangeCallback(), this } setFromUnitVectors(t, e) { let n = t.dot(e) + 1; return n < Number.EPSILON ? (n = 0, Math.abs(t.x) > Math.abs(t.z) ? (this._x = -t.y, this._y = t.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -t.z, this._z = t.y, this._w = n)) : (this._x = t.y * e.z - t.z * e.y, this._y = t.z * e.x - t.x * e.z, this._z = t.x * e.y - t.y * e.x, this._w = n), this.normalize() } angleTo(t) { return 2 * Math.acos(Math.abs(Ve(this.dot(t), -1, 1))) } rotateTowards(t, e) { const n = this.angleTo(t); if (n === 0) return this; const a = Math.min(1, e / n); return this.slerp(t, a), this } identity() { return this.set(0, 0, 0, 1) } invert() { return this.conjugate() } conjugate() { return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this } dot(t) { return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w } lengthSq() { return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w } length() { return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w) } normalize() { let t = this.length(); return t === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (t = 1 / t, this._x = this._x * t, this._y = this._y * t, this._z = this._z * t, this._w = this._w * t), this._onChangeCallback(), this } multiply(t) { return this.multiplyQuaternions(this, t) } premultiply(t) { return this.multiplyQuaternions(t, this) } multiplyQuaternions(t, e) { const n = t._x, a = t._y, o = t._z, f = t._w, h = e._x, m = e._y, g = e._z, _ = e._w; return this._x = n * _ + f * h + a * g - o * m, this._y = a * _ + f * m + o * h - n * g, this._z = o * _ + f * g + n * m - a * h, this._w = f * _ - n * h - a * m - o * g, this._onChangeCallback(), this } slerp(t, e) { if (e === 0) return this; if (e === 1) return this.copy(t); const n = this._x, a = this._y, o = this._z, f = this._w; let h = f * t._w + n * t._x + a * t._y + o * t._z; if (h < 0 ? (this._w = -t._w, this._x = -t._x, this._y = -t._y, this._z = -t._z, h = -h) : this.copy(t), h >= 1) return this._w = f, this._x = n, this._y = a, this._z = o, this; const m = 1 - h * h; if (m <= Number.EPSILON) { const M = 1 - e; return this._w = M * f + e * this._w, this._x = M * n + e * this._x, this._y = M * a + e * this._y, this._z = M * o + e * this._z, this.normalize(), this } const g = Math.sqrt(m), _ = Math.atan2(g, h), x = Math.sin((1 - e) * _) / g, S = Math.sin(e * _) / g; return this._w = f * x + this._w * S, this._x = n * x + this._x * S, this._y = a * x + this._y * S, this._z = o * x + this._z * S, this._onChangeCallback(), this } slerpQuaternions(t, e, n) { return this.copy(t).slerp(e, n) } random() { const t = 2 * Math.PI * Math.random(), e = 2 * Math.PI * Math.random(), n = Math.random(), a = Math.sqrt(1 - n), o = Math.sqrt(n); return this.set(a * Math.sin(t), a * Math.cos(t), o * Math.sin(e), o * Math.cos(e)) } equals(t) { return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w } fromArray(t, e = 0) { return this._x = t[e], this._y = t[e + 1], this._z = t[e + 2], this._w = t[e + 3], this._onChangeCallback(), this } toArray(t = [], e = 0) { return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._w, t } fromBufferAttribute(t, e) { return this._x = t.getX(e), this._y = t.getY(e), this._z = t.getZ(e), this._w = t.getW(e), this._onChangeCallback(), this } toJSON() { return this.toArray() } _onChange(t) { return this._onChangeCallback = t, this } _onChangeCallback() { } *[Symbol.iterator]() { yield this._x, yield this._y, yield this._z, yield this._w } } class k { constructor(t = 0, e = 0, n = 0) { k.prototype.isVector3 = !0, this.x = t, this.y = e, this.z = n } set(t, e, n) { return n === void 0 && (n = this.z), this.x = t, this.y = e, this.z = n, this } setScalar(t) { return this.x = t, this.y = t, this.z = t, this } setX(t) { return this.x = t, this } setY(t) { return this.y = t, this } setZ(t) { return this.z = t, this } setComponent(t, e) { switch (t) { case 0: this.x = e; break; case 1: this.y = e; break; case 2: this.z = e; break; default: throw new Error("index is out of range: " + t) }return this } getComponent(t) { switch (t) { case 0: return this.x; case 1: return this.y; case 2: return this.z; default: throw new Error("index is out of range: " + t) } } clone() { return new this.constructor(this.x, this.y, this.z) } copy(t) { return this.x = t.x, this.y = t.y, this.z = t.z, this } add(t) { return this.x += t.x, this.y += t.y, this.z += t.z, this } addScalar(t) { return this.x += t, this.y += t, this.z += t, this } addVectors(t, e) { return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this } addScaledVector(t, e) { return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this } sub(t) { return this.x -= t.x, this.y -= t.y, this.z -= t.z, this } subScalar(t) { return this.x -= t, this.y -= t, this.z -= t, this } subVectors(t, e) { return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this } multiply(t) { return this.x *= t.x, this.y *= t.y, this.z *= t.z, this } multiplyScalar(t) { return this.x *= t, this.y *= t, this.z *= t, this } multiplyVectors(t, e) { return this.x = t.x * e.x, this.y = t.y * e.y, this.z = t.z * e.z, this } applyEuler(t) { return this.applyQuaternion(e1.setFromEuler(t)) } applyAxisAngle(t, e) { return this.applyQuaternion(e1.setFromAxisAngle(t, e)) } applyMatrix3(t) { const e = this.x, n = this.y, a = this.z, o = t.elements; return this.x = o[0] * e + o[3] * n + o[6] * a, this.y = o[1] * e + o[4] * n + o[7] * a, this.z = o[2] * e + o[5] * n + o[8] * a, this } applyNormalMatrix(t) { return this.applyMatrix3(t).normalize() } applyMatrix4(t) { const e = this.x, n = this.y, a = this.z, o = t.elements, f = 1 / (o[3] * e + o[7] * n + o[11] * a + o[15]); return this.x = (o[0] * e + o[4] * n + o[8] * a + o[12]) * f, this.y = (o[1] * e + o[5] * n + o[9] * a + o[13]) * f, this.z = (o[2] * e + o[6] * n + o[10] * a + o[14]) * f, this } applyQuaternion(t) { const e = this.x, n = this.y, a = this.z, o = t.x, f = t.y, h = t.z, m = t.w, g = 2 * (f * a - h * n), _ = 2 * (h * e - o * a), x = 2 * (o * n - f * e); return this.x = e + m * g + f * x - h * _, this.y = n + m * _ + h * g - o * x, this.z = a + m * x + o * _ - f * g, this } project(t) { return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix) } unproject(t) { return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld) } transformDirection(t) { const e = this.x, n = this.y, a = this.z, o = t.elements; return this.x = o[0] * e + o[4] * n + o[8] * a, this.y = o[1] * e + o[5] * n + o[9] * a, this.z = o[2] * e + o[6] * n + o[10] * a, this.normalize() } divide(t) { return this.x /= t.x, this.y /= t.y, this.z /= t.z, this } divideScalar(t) { return this.multiplyScalar(1 / t) } min(t) { return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this } max(t) { return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this } clamp(t, e) { return this.x = Ve(this.x, t.x, e.x), this.y = Ve(this.y, t.y, e.y), this.z = Ve(this.z, t.z, e.z), this } clampScalar(t, e) { return this.x = Ve(this.x, t, e), this.y = Ve(this.y, t, e), this.z = Ve(this.z, t, e), this } clampLength(t, e) { const n = this.length(); return this.divideScalar(n || 1).multiplyScalar(Ve(n, t, e)) } floor() { return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this } ceil() { return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this } round() { return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this } roundToZero() { return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this } negate() { return this.x = -this.x, this.y = -this.y, this.z = -this.z, this } dot(t) { return this.x * t.x + this.y * t.y + this.z * t.z } lengthSq() { return this.x * this.x + this.y * this.y + this.z * this.z } length() { return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z) } manhattanLength() { return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) } normalize() { return this.divideScalar(this.length() || 1) } setLength(t) { return this.normalize().multiplyScalar(t) } lerp(t, e) { return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this } lerpVectors(t, e, n) { return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this.z = t.z + (e.z - t.z) * n, this } cross(t) { return this.crossVectors(this, t) } crossVectors(t, e) { const n = t.x, a = t.y, o = t.z, f = e.x, h = e.y, m = e.z; return this.x = a * m - o * h, this.y = o * f - n * m, this.z = n * h - a * f, this } projectOnVector(t) { const e = t.lengthSq(); if (e === 0) return this.set(0, 0, 0); const n = t.dot(this) / e; return this.copy(t).multiplyScalar(n) } projectOnPlane(t) { return qy.copy(this).projectOnVector(t), this.sub(qy) } reflect(t) { return this.sub(qy.copy(t).multiplyScalar(2 * this.dot(t))) } angleTo(t) { const e = Math.sqrt(this.lengthSq() * t.lengthSq()); if (e === 0) return Math.PI / 2; const n = this.dot(t) / e; return Math.acos(Ve(n, -1, 1)) } distanceTo(t) { return Math.sqrt(this.distanceToSquared(t)) } distanceToSquared(t) { const e = this.x - t.x, n = this.y - t.y, a = this.z - t.z; return e * e + n * n + a * a } manhattanDistanceTo(t) { return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z) } setFromSpherical(t) { return this.setFromSphericalCoords(t.radius, t.phi, t.theta) } setFromSphericalCoords(t, e, n) { const a = Math.sin(e) * t; return this.x = a * Math.sin(n), this.y = Math.cos(e) * t, this.z = a * Math.cos(n), this } setFromCylindrical(t) { return this.setFromCylindricalCoords(t.radius, t.theta, t.y) } setFromCylindricalCoords(t, e, n) { return this.x = t * Math.sin(e), this.y = n, this.z = t * Math.cos(e), this } setFromMatrixPosition(t) { const e = t.elements; return this.x = e[12], this.y = e[13], this.z = e[14], this } setFromMatrixScale(t) { const e = this.setFromMatrixColumn(t, 0).length(), n = this.setFromMatrixColumn(t, 1).length(), a = this.setFromMatrixColumn(t, 2).length(); return this.x = e, this.y = n, this.z = a, this } setFromMatrixColumn(t, e) { return this.fromArray(t.elements, e * 4) } setFromMatrix3Column(t, e) { return this.fromArray(t.elements, e * 3) } setFromEuler(t) { return this.x = t._x, this.y = t._y, this.z = t._z, this } setFromColor(t) { return this.x = t.r, this.y = t.g, this.z = t.b, this } equals(t) { return t.x === this.x && t.y === this.y && t.z === this.z } fromArray(t, e = 0) { return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this } toArray(t = [], e = 0) { return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t } fromBufferAttribute(t, e) { return this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this } random() { return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this } randomDirection() { const t = Math.random() * Math.PI * 2, e = Math.random() * 2 - 1, n = Math.sqrt(1 - e * e); return this.x = n * Math.cos(t), this.y = e, this.z = n * Math.sin(t), this } *[Symbol.iterator]() { yield this.x, yield this.y, yield this.z } } const qy = new k, e1 = new cs; class Ga { constructor(t = new k(1 / 0, 1 / 0, 1 / 0), e = new k(-1 / 0, -1 / 0, -1 / 0)) { this.isBox3 = !0, this.min = t, this.max = e } set(t, e) { return this.min.copy(t), this.max.copy(e), this } setFromArray(t) { this.makeEmpty(); for (let e = 0, n = t.length; e < n; e += 3)this.expandByPoint(Cr.fromArray(t, e)); return this } setFromBufferAttribute(t) { this.makeEmpty(); for (let e = 0, n = t.count; e < n; e++)this.expandByPoint(Cr.fromBufferAttribute(t, e)); return this } setFromPoints(t) { this.makeEmpty(); for (let e = 0, n = t.length; e < n; e++)this.expandByPoint(t[e]); return this } setFromCenterAndSize(t, e) { const n = Cr.copy(e).multiplyScalar(.5); return this.min.copy(t).sub(n), this.max.copy(t).add(n), this } setFromObject(t, e = !1) { return this.makeEmpty(), this.expandByObject(t, e) } clone() { return new this.constructor().copy(this) } copy(t) { return this.min.copy(t.min), this.max.copy(t.max), this } makeEmpty() { return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this } isEmpty() { return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z } getCenter(t) { return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5) } getSize(t) { return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min) } expandByPoint(t) { return this.min.min(t), this.max.max(t), this } expandByVector(t) { return this.min.sub(t), this.max.add(t), this } expandByScalar(t) { return this.min.addScalar(-t), this.max.addScalar(t), this } expandByObject(t, e = !1) { t.updateWorldMatrix(!1, !1); const n = t.geometry; if (n !== void 0) { const o = n.getAttribute("position"); if (e === !0 && o !== void 0 && t.isInstancedMesh !== !0) for (let f = 0, h = o.count; f < h; f++)t.isMesh === !0 ? t.getVertexPosition(f, Cr) : Cr.fromBufferAttribute(o, f), Cr.applyMatrix4(t.matrixWorld), this.expandByPoint(Cr); else t.boundingBox !== void 0 ? (t.boundingBox === null && t.computeBoundingBox(), zg.copy(t.boundingBox)) : (n.boundingBox === null && n.computeBoundingBox(), zg.copy(n.boundingBox)), zg.applyMatrix4(t.matrixWorld), this.union(zg) } const a = t.children; for (let o = 0, f = a.length; o < f; o++)this.expandByObject(a[o], e); return this } containsPoint(t) { return t.x >= this.min.x && t.x <= this.max.x && t.y >= this.min.y && t.y <= this.max.y && t.z >= this.min.z && t.z <= this.max.z } containsBox(t) { return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z } getParameter(t, e) { return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z)) } intersectsBox(t) { return t.max.x >= this.min.x && t.min.x <= this.max.x && t.max.y >= this.min.y && t.min.y <= this.max.y && t.max.z >= this.min.z && t.min.z <= this.max.z } intersectsSphere(t) { return this.clampPoint(t.center, Cr), Cr.distanceToSquared(t.center) <= t.radius * t.radius } intersectsPlane(t) { let e, n; return t.normal.x > 0 ? (e = t.normal.x * this.min.x, n = t.normal.x * this.max.x) : (e = t.normal.x * this.max.x, n = t.normal.x * this.min.x), t.normal.y > 0 ? (e += t.normal.y * this.min.y, n += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y, n += t.normal.y * this.min.y), t.normal.z > 0 ? (e += t.normal.z * this.min.z, n += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z, n += t.normal.z * this.min.z), e <= -t.constant && n >= -t.constant } intersectsTriangle(t) { if (this.isEmpty()) return !1; this.getCenter($d), Bg.subVectors(this.max, $d), $f.subVectors(t.a, $d), th.subVectors(t.b, $d), eh.subVectors(t.c, $d), cu.subVectors(th, $f), fu.subVectors(eh, th), yc.subVectors($f, eh); let e = [0, -cu.z, cu.y, 0, -fu.z, fu.y, 0, -yc.z, yc.y, cu.z, 0, -cu.x, fu.z, 0, -fu.x, yc.z, 0, -yc.x, -cu.y, cu.x, 0, -fu.y, fu.x, 0, -yc.y, yc.x, 0]; return !Yy(e, $f, th, eh, Bg) || (e = [1, 0, 0, 0, 1, 0, 0, 0, 1], !Yy(e, $f, th, eh, Bg)) ? !1 : (Pg.crossVectors(cu, fu), e = [Pg.x, Pg.y, Pg.z], Yy(e, $f, th, eh, Bg)) } clampPoint(t, e) { return e.copy(t).clamp(this.min, this.max) } distanceToPoint(t) { return this.clampPoint(t, Cr).distanceTo(t) } getBoundingSphere(t) { return this.isEmpty() ? t.makeEmpty() : (this.getCenter(t.center), t.radius = this.getSize(Cr).length() * .5), t } intersect(t) { return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this } union(t) { return this.min.min(t.min), this.max.max(t.max), this } applyMatrix4(t) { return this.isEmpty() ? this : (ro[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t), ro[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t), ro[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t), ro[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t), ro[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t), ro[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t), ro[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t), ro[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t), this.setFromPoints(ro), this) } translate(t) { return this.min.add(t), this.max.add(t), this } equals(t) { return t.min.equals(this.min) && t.max.equals(this.max) } } const ro = [new k, new k, new k, new k, new k, new k, new k, new k], Cr = new k, zg = new Ga, $f = new k, th = new k, eh = new k, cu = new k, fu = new k, yc = new k, $d = new k, Bg = new k, Pg = new k, _c = new k; function Yy(r, t, e, n, a) { for (let o = 0, f = r.length - 3; o <= f; o += 3) { _c.fromArray(r, o); const h = a.x * Math.abs(_c.x) + a.y * Math.abs(_c.y) + a.z * Math.abs(_c.z), m = t.dot(_c), g = e.dot(_c), _ = n.dot(_c); if (Math.max(-Math.max(m, g, _), Math.min(m, g, _)) > h) return !1 } return !0 } const rR = new Ga, tp = new k, Wy = new k; class Aa { constructor(t = new k, e = -1) { this.isSphere = !0, this.center = t, this.radius = e } set(t, e) { return this.center.copy(t), this.radius = e, this } setFromPoints(t, e) { const n = this.center; e !== void 0 ? n.copy(e) : rR.setFromPoints(t).getCenter(n); let a = 0; for (let o = 0, f = t.length; o < f; o++)a = Math.max(a, n.distanceToSquared(t[o])); return this.radius = Math.sqrt(a), this } copy(t) { return this.center.copy(t.center), this.radius = t.radius, this } isEmpty() { return this.radius < 0 } makeEmpty() { return this.center.set(0, 0, 0), this.radius = -1, this } containsPoint(t) { return t.distanceToSquared(this.center) <= this.radius * this.radius } distanceToPoint(t) { return t.distanceTo(this.center) - this.radius } intersectsSphere(t) { const e = this.radius + t.radius; return t.center.distanceToSquared(this.center) <= e * e } intersectsBox(t) { return t.intersectsSphere(this) } intersectsPlane(t) { return Math.abs(t.distanceToPoint(this.center)) <= this.radius } clampPoint(t, e) { const n = this.center.distanceToSquared(t); return e.copy(t), n > this.radius * this.radius && (e.sub(this.center).normalize(), e.multiplyScalar(this.radius).add(this.center)), e } getBoundingBox(t) { return this.isEmpty() ? (t.makeEmpty(), t) : (t.set(this.center, this.center), t.expandByScalar(this.radius), t) } applyMatrix4(t) { return this.center.applyMatrix4(t), this.radius = this.radius * t.getMaxScaleOnAxis(), this } translate(t) { return this.center.add(t), this } expandByPoint(t) { if (this.isEmpty()) return this.center.copy(t), this.radius = 0, this; tp.subVectors(t, this.center); const e = tp.lengthSq(); if (e > this.radius * this.radius) { const n = Math.sqrt(e), a = (n - this.radius) * .5; this.center.addScaledVector(tp, a / n), this.radius += a } return this } union(t) { return t.isEmpty() ? this : this.isEmpty() ? (this.copy(t), this) : (this.center.equals(t.center) === !0 ? this.radius = Math.max(this.radius, t.radius) : (Wy.subVectors(t.center, this.center).setLength(t.radius), this.expandByPoint(tp.copy(t.center).add(Wy)), this.expandByPoint(tp.copy(t.center).sub(Wy))), this) } equals(t) { return t.center.equals(this.center) && t.radius === this.radius } clone() { return new this.constructor().copy(this) } } const lo = new k, ky = new k, Ig = new k, hu = new k, jy = new k, Hg = new k, Zy = new k; class Bh { constructor(t = new k, e = new k(0, 0, -1)) { this.origin = t, this.direction = e } set(t, e) { return this.origin.copy(t), this.direction.copy(e), this } copy(t) { return this.origin.copy(t.origin), this.direction.copy(t.direction), this } at(t, e) { return e.copy(this.origin).addScaledVector(this.direction, t) } lookAt(t) { return this.direction.copy(t).sub(this.origin).normalize(), this } recast(t) { return this.origin.copy(this.at(t, lo)), this } closestPointToPoint(t, e) { e.subVectors(t, this.origin); const n = e.dot(this.direction); return n < 0 ? e.copy(this.origin) : e.copy(this.origin).addScaledVector(this.direction, n) } distanceToPoint(t) { return Math.sqrt(this.distanceSqToPoint(t)) } distanceSqToPoint(t) { const e = lo.subVectors(t, this.origin).dot(this.direction); return e < 0 ? this.origin.distanceToSquared(t) : (lo.copy(this.origin).addScaledVector(this.direction, e), lo.distanceToSquared(t)) } distanceSqToSegment(t, e, n, a) { ky.copy(t).add(e).multiplyScalar(.5), Ig.copy(e).sub(t).normalize(), hu.copy(this.origin).sub(ky); const o = t.distanceTo(e) * .5, f = -this.direction.dot(Ig), h = hu.dot(this.direction), m = -hu.dot(Ig), g = hu.lengthSq(), _ = Math.abs(1 - f * f); let x, S, M, A; if (_ > 0) if (x = f * m - h, S = f * h - m, A = o * _, x >= 0) if (S >= -A) if (S <= A) { const C = 1 / _; x *= C, S *= C, M = x * (x + f * S + 2 * h) + S * (f * x + S + 2 * m) + g } else S = o, x = Math.max(0, -(f * S + h)), M = -x * x + S * (S + 2 * m) + g; else S = -o, x = Math.max(0, -(f * S + h)), M = -x * x + S * (S + 2 * m) + g; else S <= -A ? (x = Math.max(0, -(-f * o + h)), S = x > 0 ? -o : Math.min(Math.max(-o, -m), o), M = -x * x + S * (S + 2 * m) + g) : S <= A ? (x = 0, S = Math.min(Math.max(-o, -m), o), M = S * (S + 2 * m) + g) : (x = Math.max(0, -(f * o + h)), S = x > 0 ? o : Math.min(Math.max(-o, -m), o), M = -x * x + S * (S + 2 * m) + g); else S = f > 0 ? -o : o, x = Math.max(0, -(f * S + h)), M = -x * x + S * (S + 2 * m) + g; return n && n.copy(this.origin).addScaledVector(this.direction, x), a && a.copy(ky).addScaledVector(Ig, S), M } intersectSphere(t, e) { lo.subVectors(t.center, this.origin); const n = lo.dot(this.direction), a = lo.dot(lo) - n * n, o = t.radius * t.radius; if (a > o) return null; const f = Math.sqrt(o - a), h = n - f, m = n + f; return m < 0 ? null : h < 0 ? this.at(m, e) : this.at(h, e) } intersectsSphere(t) { return this.distanceSqToPoint(t.center) <= t.radius * t.radius } distanceToPlane(t) { const e = t.normal.dot(this.direction); if (e === 0) return t.distanceToPoint(this.origin) === 0 ? 0 : null; const n = -(this.origin.dot(t.normal) + t.constant) / e; return n >= 0 ? n : null } intersectPlane(t, e) { const n = this.distanceToPlane(t); return n === null ? null : this.at(n, e) } intersectsPlane(t) { const e = t.distanceToPoint(this.origin); return e === 0 || t.normal.dot(this.direction) * e < 0 } intersectBox(t, e) { let n, a, o, f, h, m; const g = 1 / this.direction.x, _ = 1 / this.direction.y, x = 1 / this.direction.z, S = this.origin; return g >= 0 ? (n = (t.min.x - S.x) * g, a = (t.max.x - S.x) * g) : (n = (t.max.x - S.x) * g, a = (t.min.x - S.x) * g), _ >= 0 ? (o = (t.min.y - S.y) * _, f = (t.max.y - S.y) * _) : (o = (t.max.y - S.y) * _, f = (t.min.y - S.y) * _), n > f || o > a || ((o > n || isNaN(n)) && (n = o), (f < a || isNaN(a)) && (a = f), x >= 0 ? (h = (t.min.z - S.z) * x, m = (t.max.z - S.z) * x) : (h = (t.max.z - S.z) * x, m = (t.min.z - S.z) * x), n > m || h > a) || ((h > n || n !== n) && (n = h), (m < a || a !== a) && (a = m), a < 0) ? null : this.at(n >= 0 ? n : a, e) } intersectsBox(t) { return this.intersectBox(t, lo) !== null } intersectTriangle(t, e, n, a, o) { jy.subVectors(e, t), Hg.subVectors(n, t), Zy.crossVectors(jy, Hg); let f = this.direction.dot(Zy), h; if (f > 0) { if (a) return null; h = 1 } else if (f < 0) h = -1, f = -f; else return null; hu.subVectors(this.origin, t); const m = h * this.direction.dot(Hg.crossVectors(hu, Hg)); if (m < 0) return null; const g = h * this.direction.dot(jy.cross(hu)); if (g < 0 || m + g > f) return null; const _ = -h * hu.dot(Zy); return _ < 0 ? null : this.at(_ / f, o) } applyMatrix4(t) { return this.origin.applyMatrix4(t), this.direction.transformDirection(t), this } equals(t) { return t.origin.equals(this.origin) && t.direction.equals(this.direction) } clone() { return new this.constructor().copy(this) } } class Oe { constructor(t, e, n, a, o, f, h, m, g, _, x, S, M, A, C, R) { Oe.prototype.isMatrix4 = !0, this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], t !== void 0 && this.set(t, e, n, a, o, f, h, m, g, _, x, S, M, A, C, R) } set(t, e, n, a, o, f, h, m, g, _, x, S, M, A, C, R) { const T = this.elements; return T[0] = t, T[4] = e, T[8] = n, T[12] = a, T[1] = o, T[5] = f, T[9] = h, T[13] = m, T[2] = g, T[6] = _, T[10] = x, T[14] = S, T[3] = M, T[7] = A, T[11] = C, T[15] = R, this } identity() { return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this } clone() { return new Oe().fromArray(this.elements) } copy(t) { const e = this.elements, n = t.elements; return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], e[9] = n[9], e[10] = n[10], e[11] = n[11], e[12] = n[12], e[13] = n[13], e[14] = n[14], e[15] = n[15], this } copyPosition(t) { const e = this.elements, n = t.elements; return e[12] = n[12], e[13] = n[13], e[14] = n[14], this } setFromMatrix3(t) { const e = t.elements; return this.set(e[0], e[3], e[6], 0, e[1], e[4], e[7], 0, e[2], e[5], e[8], 0, 0, 0, 0, 1), this } extractBasis(t, e, n) { return t.setFromMatrixColumn(this, 0), e.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this } makeBasis(t, e, n) { return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1), this } extractRotation(t) { const e = this.elements, n = t.elements, a = 1 / nh.setFromMatrixColumn(t, 0).length(), o = 1 / nh.setFromMatrixColumn(t, 1).length(), f = 1 / nh.setFromMatrixColumn(t, 2).length(); return e[0] = n[0] * a, e[1] = n[1] * a, e[2] = n[2] * a, e[3] = 0, e[4] = n[4] * o, e[5] = n[5] * o, e[6] = n[6] * o, e[7] = 0, e[8] = n[8] * f, e[9] = n[9] * f, e[10] = n[10] * f, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this } makeRotationFromEuler(t) { const e = this.elements, n = t.x, a = t.y, o = t.z, f = Math.cos(n), h = Math.sin(n), m = Math.cos(a), g = Math.sin(a), _ = Math.cos(o), x = Math.sin(o); if (t.order === "XYZ") { const S = f * _, M = f * x, A = h * _, C = h * x; e[0] = m * _, e[4] = -m * x, e[8] = g, e[1] = M + A * g, e[5] = S - C * g, e[9] = -h * m, e[2] = C - S * g, e[6] = A + M * g, e[10] = f * m } else if (t.order === "YXZ") { const S = m * _, M = m * x, A = g * _, C = g * x; e[0] = S + C * h, e[4] = A * h - M, e[8] = f * g, e[1] = f * x, e[5] = f * _, e[9] = -h, e[2] = M * h - A, e[6] = C + S * h, e[10] = f * m } else if (t.order === "ZXY") { const S = m * _, M = m * x, A = g * _, C = g * x; e[0] = S - C * h, e[4] = -f * x, e[8] = A + M * h, e[1] = M + A * h, e[5] = f * _, e[9] = C - S * h, e[2] = -f * g, e[6] = h, e[10] = f * m } else if (t.order === "ZYX") { const S = f * _, M = f * x, A = h * _, C = h * x; e[0] = m * _, e[4] = A * g - M, e[8] = S * g + C, e[1] = m * x, e[5] = C * g + S, e[9] = M * g - A, e[2] = -g, e[6] = h * m, e[10] = f * m } else if (t.order === "YZX") { const S = f * m, M = f * g, A = h * m, C = h * g; e[0] = m * _, e[4] = C - S * x, e[8] = A * x + M, e[1] = x, e[5] = f * _, e[9] = -h * _, e[2] = -g * _, e[6] = M * x + A, e[10] = S - C * x } else if (t.order === "XZY") { const S = f * m, M = f * g, A = h * m, C = h * g; e[0] = m * _, e[4] = -x, e[8] = g * _, e[1] = S * x + C, e[5] = f * _, e[9] = M * x - A, e[2] = A * x - M, e[6] = h * _, e[10] = C * x + S } return e[3] = 0, e[7] = 0, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this } makeRotationFromQuaternion(t) { return this.compose(lR, t, oR) } lookAt(t, e, n) { const a = this.elements; return Rs.subVectors(t, e), Rs.lengthSq() === 0 && (Rs.z = 1), Rs.normalize(), du.crossVectors(n, Rs), du.lengthSq() === 0 && (Math.abs(n.z) === 1 ? Rs.x += 1e-4 : Rs.z += 1e-4, Rs.normalize(), du.crossVectors(n, Rs)), du.normalize(), Fg.crossVectors(Rs, du), a[0] = du.x, a[4] = Fg.x, a[8] = Rs.x, a[1] = du.y, a[5] = Fg.y, a[9] = Rs.y, a[2] = du.z, a[6] = Fg.z, a[10] = Rs.z, this } multiply(t) { return this.multiplyMatrices(this, t) } premultiply(t) { return this.multiplyMatrices(t, this) } multiplyMatrices(t, e) { const n = t.elements, a = e.elements, o = this.elements, f = n[0], h = n[4], m = n[8], g = n[12], _ = n[1], x = n[5], S = n[9], M = n[13], A = n[2], C = n[6], R = n[10], T = n[14], D = n[3], N = n[7], U = n[11], V = n[15], I = a[0], G = a[4], q = a[8], z = a[12], L = a[1], j = a[5], dt = a[9], tt = a[13], ct = a[2], xt = a[6], K = a[10], ft = a[14], nt = a[3], Et = a[7], Y = a[11], it = a[15]; return o[0] = f * I + h * L + m * ct + g * nt, o[4] = f * G + h * j + m * xt + g * Et, o[8] = f * q + h * dt + m * K + g * Y, o[12] = f * z + h * tt + m * ft + g * it, o[1] = _ * I + x * L + S * ct + M * nt, o[5] = _ * G + x * j + S * xt + M * Et, o[9] = _ * q + x * dt + S * K + M * Y, o[13] = _ * z + x * tt + S * ft + M * it, o[2] = A * I + C * L + R * ct + T * nt, o[6] = A * G + C * j + R * xt + T * Et, o[10] = A * q + C * dt + R * K + T * Y, o[14] = A * z + C * tt + R * ft + T * it, o[3] = D * I + N * L + U * ct + V * nt, o[7] = D * G + N * j + U * xt + V * Et, o[11] = D * q + N * dt + U * K + V * Y, o[15] = D * z + N * tt + U * ft + V * it, this } multiplyScalar(t) { const e = this.elements; return e[0] *= t, e[4] *= t, e[8] *= t, e[12] *= t, e[1] *= t, e[5] *= t, e[9] *= t, e[13] *= t, e[2] *= t, e[6] *= t, e[10] *= t, e[14] *= t, e[3] *= t, e[7] *= t, e[11] *= t, e[15] *= t, this } determinant() { const t = this.elements, e = t[0], n = t[4], a = t[8], o = t[12], f = t[1], h = t[5], m = t[9], g = t[13], _ = t[2], x = t[6], S = t[10], M = t[14], A = t[3], C = t[7], R = t[11], T = t[15]; return A * (+o * m * x - a * g * x - o * h * S + n * g * S + a * h * M - n * m * M) + C * (+e * m * M - e * g * S + o * f * S - a * f * M + a * g * _ - o * m * _) + R * (+e * g * x - e * h * M - o * f * x + n * f * M + o * h * _ - n * g * _) + T * (-a * h * _ - e * m * x + e * h * S + a * f * x - n * f * S + n * m * _) } transpose() { const t = this.elements; let e; return e = t[1], t[1] = t[4], t[4] = e, e = t[2], t[2] = t[8], t[8] = e, e = t[6], t[6] = t[9], t[9] = e, e = t[3], t[3] = t[12], t[12] = e, e = t[7], t[7] = t[13], t[13] = e, e = t[11], t[11] = t[14], t[14] = e, this } setPosition(t, e, n) { const a = this.elements; return t.isVector3 ? (a[12] = t.x, a[13] = t.y, a[14] = t.z) : (a[12] = t, a[13] = e, a[14] = n), this } invert() { const t = this.elements, e = t[0], n = t[1], a = t[2], o = t[3], f = t[4], h = t[5], m = t[6], g = t[7], _ = t[8], x = t[9], S = t[10], M = t[11], A = t[12], C = t[13], R = t[14], T = t[15], D = x * R * g - C * S * g + C * m * M - h * R * M - x * m * T + h * S * T, N = A * S * g - _ * R * g - A * m * M + f * R * M + _ * m * T - f * S * T, U = _ * C * g - A * x * g + A * h * M - f * C * M - _ * h * T + f * x * T, V = A * x * m - _ * C * m - A * h * S + f * C * S + _ * h * R - f * x * R, I = e * D + n * N + a * U + o * V; if (I === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); const G = 1 / I; return t[0] = D * G, t[1] = (C * S * o - x * R * o - C * a * M + n * R * M + x * a * T - n * S * T) * G, t[2] = (h * R * o - C * m * o + C * a * g - n * R * g - h * a * T + n * m * T) * G, t[3] = (x * m * o - h * S * o - x * a * g + n * S * g + h * a * M - n * m * M) * G, t[4] = N * G, t[5] = (_ * R * o - A * S * o + A * a * M - e * R * M - _ * a * T + e * S * T) * G, t[6] = (A * m * o - f * R * o - A * a * g + e * R * g + f * a * T - e * m * T) * G, t[7] = (f * S * o - _ * m * o + _ * a * g - e * S * g - f * a * M + e * m * M) * G, t[8] = U * G, t[9] = (A * x * o - _ * C * o - A * n * M + e * C * M + _ * n * T - e * x * T) * G, t[10] = (f * C * o - A * h * o + A * n * g - e * C * g - f * n * T + e * h * T) * G, t[11] = (_ * h * o - f * x * o - _ * n * g + e * x * g + f * n * M - e * h * M) * G, t[12] = V * G, t[13] = (_ * C * a - A * x * a + A * n * S - e * C * S - _ * n * R + e * x * R) * G, t[14] = (A * h * a - f * C * a - A * n * m + e * C * m + f * n * R - e * h * R) * G, t[15] = (f * x * a - _ * h * a + _ * n * m - e * x * m - f * n * S + e * h * S) * G, this } scale(t) { const e = this.elements, n = t.x, a = t.y, o = t.z; return e[0] *= n, e[4] *= a, e[8] *= o, e[1] *= n, e[5] *= a, e[9] *= o, e[2] *= n, e[6] *= a, e[10] *= o, e[3] *= n, e[7] *= a, e[11] *= o, this } getMaxScaleOnAxis() { const t = this.elements, e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2], n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6], a = t[8] * t[8] + t[9] * t[9] + t[10] * t[10]; return Math.sqrt(Math.max(e, n, a)) } makeTranslation(t, e, n) { return t.isVector3 ? this.set(1, 0, 0, t.x, 0, 1, 0, t.y, 0, 0, 1, t.z, 0, 0, 0, 1) : this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1), this } makeRotationX(t) { const e = Math.cos(t), n = Math.sin(t); return this.set(1, 0, 0, 0, 0, e, -n, 0, 0, n, e, 0, 0, 0, 0, 1), this } makeRotationY(t) { const e = Math.cos(t), n = Math.sin(t); return this.set(e, 0, n, 0, 0, 1, 0, 0, -n, 0, e, 0, 0, 0, 0, 1), this } makeRotationZ(t) { const e = Math.cos(t), n = Math.sin(t); return this.set(e, -n, 0, 0, n, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this } makeRotationAxis(t, e) { const n = Math.cos(e), a = Math.sin(e), o = 1 - n, f = t.x, h = t.y, m = t.z, g = o * f, _ = o * h; return this.set(g * f + n, g * h - a * m, g * m + a * h, 0, g * h + a * m, _ * h + n, _ * m - a * f, 0, g * m - a * h, _ * m + a * f, o * m * m + n, 0, 0, 0, 0, 1), this } makeScale(t, e, n) { return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this } makeShear(t, e, n, a, o, f) { return this.set(1, n, o, 0, t, 1, f, 0, e, a, 1, 0, 0, 0, 0, 1), this } compose(t, e, n) { const a = this.elements, o = e._x, f = e._y, h = e._z, m = e._w, g = o + o, _ = f + f, x = h + h, S = o * g, M = o * _, A = o * x, C = f * _, R = f * x, T = h * x, D = m * g, N = m * _, U = m * x, V = n.x, I = n.y, G = n.z; return a[0] = (1 - (C + T)) * V, a[1] = (M + U) * V, a[2] = (A - N) * V, a[3] = 0, a[4] = (M - U) * I, a[5] = (1 - (S + T)) * I, a[6] = (R + D) * I, a[7] = 0, a[8] = (A + N) * G, a[9] = (R - D) * G, a[10] = (1 - (S + C)) * G, a[11] = 0, a[12] = t.x, a[13] = t.y, a[14] = t.z, a[15] = 1, this } decompose(t, e, n) { const a = this.elements; let o = nh.set(a[0], a[1], a[2]).length(); const f = nh.set(a[4], a[5], a[6]).length(), h = nh.set(a[8], a[9], a[10]).length(); this.determinant() < 0 && (o = -o), t.x = a[12], t.y = a[13], t.z = a[14], Dr.copy(this); const g = 1 / o, _ = 1 / f, x = 1 / h; return Dr.elements[0] *= g, Dr.elements[1] *= g, Dr.elements[2] *= g, Dr.elements[4] *= _, Dr.elements[5] *= _, Dr.elements[6] *= _, Dr.elements[8] *= x, Dr.elements[9] *= x, Dr.elements[10] *= x, e.setFromRotationMatrix(Dr), n.x = o, n.y = f, n.z = h, this } makePerspective(t, e, n, a, o, f, h = Lr) { const m = this.elements, g = 2 * o / (e - t), _ = 2 * o / (n - a), x = (e + t) / (e - t), S = (n + a) / (n - a); let M, A; if (h === Lr) M = -(f + o) / (f - o), A = -2 * f * o / (f - o); else if (h === zp) M = -f / (f - o), A = -f * o / (f - o); else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + h); return m[0] = g, m[4] = 0, m[8] = x, m[12] = 0, m[1] = 0, m[5] = _, m[9] = S, m[13] = 0, m[2] = 0, m[6] = 0, m[10] = M, m[14] = A, m[3] = 0, m[7] = 0, m[11] = -1, m[15] = 0, this } makeOrthographic(t, e, n, a, o, f, h = Lr) { const m = this.elements, g = 1 / (e - t), _ = 1 / (n - a), x = 1 / (f - o), S = (e + t) * g, M = (n + a) * _; let A, C; if (h === Lr) A = (f + o) * x, C = -2 * x; else if (h === zp) A = o * x, C = -1 * x; else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + h); return m[0] = 2 * g, m[4] = 0, m[8] = 0, m[12] = -S, m[1] = 0, m[5] = 2 * _, m[9] = 0, m[13] = -M, m[2] = 0, m[6] = 0, m[10] = C, m[14] = -A, m[3] = 0, m[7] = 0, m[11] = 0, m[15] = 1, this } equals(t) { const e = this.elements, n = t.elements; for (let a = 0; a < 16; a++)if (e[a] !== n[a]) return !1; return !0 } fromArray(t, e = 0) { for (let n = 0; n < 16; n++)this.elements[n] = t[n + e]; return this } toArray(t = [], e = 0) { const n = this.elements; return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t[e + 9] = n[9], t[e + 10] = n[10], t[e + 11] = n[11], t[e + 12] = n[12], t[e + 13] = n[13], t[e + 14] = n[14], t[e + 15] = n[15], t } } const nh = new k, Dr = new Oe, lR = new k(0, 0, 0), oR = new k(1, 1, 1), du = new k, Fg = new k, Rs = new k, n1 = new Oe, i1 = new cs; class Ds { constructor(t = 0, e = 0, n = 0, a = Ds.DEFAULT_ORDER) { this.isEuler = !0, this._x = t, this._y = e, this._z = n, this._order = a } get x() { return this._x } set x(t) { this._x = t, this._onChangeCallback() } get y() { return this._y } set y(t) { this._y = t, this._onChangeCallback() } get z() { return this._z } set z(t) { this._z = t, this._onChangeCallback() } get order() { return this._order } set order(t) { this._order = t, this._onChangeCallback() } set(t, e, n, a = this._order) { return this._x = t, this._y = e, this._z = n, this._order = a, this._onChangeCallback(), this } clone() { return new this.constructor(this._x, this._y, this._z, this._order) } copy(t) { return this._x = t._x, this._y = t._y, this._z = t._z, this._order = t._order, this._onChangeCallback(), this } setFromRotationMatrix(t, e = this._order, n = !0) { const a = t.elements, o = a[0], f = a[4], h = a[8], m = a[1], g = a[5], _ = a[9], x = a[2], S = a[6], M = a[10]; switch (e) { case "XYZ": this._y = Math.asin(Ve(h, -1, 1)), Math.abs(h) < .9999999 ? (this._x = Math.atan2(-_, M), this._z = Math.atan2(-f, o)) : (this._x = Math.atan2(S, g), this._z = 0); break; case "YXZ": this._x = Math.asin(-Ve(_, -1, 1)), Math.abs(_) < .9999999 ? (this._y = Math.atan2(h, M), this._z = Math.atan2(m, g)) : (this._y = Math.atan2(-x, o), this._z = 0); break; case "ZXY": this._x = Math.asin(Ve(S, -1, 1)), Math.abs(S) < .9999999 ? (this._y = Math.atan2(-x, M), this._z = Math.atan2(-f, g)) : (this._y = 0, this._z = Math.atan2(m, o)); break; case "ZYX": this._y = Math.asin(-Ve(x, -1, 1)), Math.abs(x) < .9999999 ? (this._x = Math.atan2(S, M), this._z = Math.atan2(m, o)) : (this._x = 0, this._z = Math.atan2(-f, g)); break; case "YZX": this._z = Math.asin(Ve(m, -1, 1)), Math.abs(m) < .9999999 ? (this._x = Math.atan2(-_, g), this._y = Math.atan2(-x, o)) : (this._x = 0, this._y = Math.atan2(h, M)); break; case "XZY": this._z = Math.asin(-Ve(f, -1, 1)), Math.abs(f) < .9999999 ? (this._x = Math.atan2(S, g), this._y = Math.atan2(h, o)) : (this._x = Math.atan2(-_, M), this._y = 0); break; default: console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + e) }return this._order = e, n === !0 && this._onChangeCallback(), this } setFromQuaternion(t, e, n) { return n1.makeRotationFromQuaternion(t), this.setFromRotationMatrix(n1, e, n) } setFromVector3(t, e = this._order) { return this.set(t.x, t.y, t.z, e) } reorder(t) { return i1.setFromEuler(this), this.setFromQuaternion(i1, t) } equals(t) { return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order } fromArray(t) { return this._x = t[0], this._y = t[1], this._z = t[2], t[3] !== void 0 && (this._order = t[3]), this._onChangeCallback(), this } toArray(t = [], e = 0) { return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._order, t } _onChange(t) { return this._onChangeCallback = t, this } _onChangeCallback() { } *[Symbol.iterator]() { yield this._x, yield this._y, yield this._z, yield this._order } } Ds.DEFAULT_ORDER = "XYZ"; class wh { constructor() { this.mask = 1 } set(t) { this.mask = (1 << t | 0) >>> 0 } enable(t) { this.mask |= 1 << t | 0 } enableAll() { this.mask = -1 } toggle(t) { this.mask ^= 1 << t | 0 } disable(t) { this.mask &= ~(1 << t | 0) } disableAll() { this.mask = 0 } test(t) { return (this.mask & t.mask) !== 0 } isEnabled(t) { return (this.mask & (1 << t | 0)) !== 0 } } let uR = 0; const a1 = new k, ih = new cs, oo = new Oe, Vg = new k, ep = new k, cR = new k, fR = new cs, s1 = new k(1, 0, 0), r1 = new k(0, 1, 0), l1 = new k(0, 0, 1), o1 = { type: "added" }, hR = { type: "removed" }, ah = { type: "childadded", child: null }, Qy = { type: "childremoved", child: null }; class _n extends wl { constructor() { super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: uR++ }), this.uuid = Cs(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = _n.DEFAULT_UP.clone(); const t = new k, e = new Ds, n = new cs, a = new k(1, 1, 1); function o() { n.setFromEuler(e, !1) } function f() { e.setFromQuaternion(n, void 0, !1) } e._onChange(o), n._onChange(f), Object.defineProperties(this, { position: { configurable: !0, enumerable: !0, value: t }, rotation: { configurable: !0, enumerable: !0, value: e }, quaternion: { configurable: !0, enumerable: !0, value: n }, scale: { configurable: !0, enumerable: !0, value: a }, modelViewMatrix: { value: new Oe }, normalMatrix: { value: new Ge } }), this.matrix = new Oe, this.matrixWorld = new Oe, this.matrixAutoUpdate = _n.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldAutoUpdate = _n.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.layers = new wh, this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {} } onBeforeShadow() { } onAfterShadow() { } onBeforeRender() { } onAfterRender() { } applyMatrix4(t) { this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(t), this.matrix.decompose(this.position, this.quaternion, this.scale) } applyQuaternion(t) { return this.quaternion.premultiply(t), this } setRotationFromAxisAngle(t, e) { this.quaternion.setFromAxisAngle(t, e) } setRotationFromEuler(t) { this.quaternion.setFromEuler(t, !0) } setRotationFromMatrix(t) { this.quaternion.setFromRotationMatrix(t) } setRotationFromQuaternion(t) { this.quaternion.copy(t) } rotateOnAxis(t, e) { return ih.setFromAxisAngle(t, e), this.quaternion.multiply(ih), this } rotateOnWorldAxis(t, e) { return ih.setFromAxisAngle(t, e), this.quaternion.premultiply(ih), this } rotateX(t) { return this.rotateOnAxis(s1, t) } rotateY(t) { return this.rotateOnAxis(r1, t) } rotateZ(t) { return this.rotateOnAxis(l1, t) } translateOnAxis(t, e) { return a1.copy(t).applyQuaternion(this.quaternion), this.position.add(a1.multiplyScalar(e)), this } translateX(t) { return this.translateOnAxis(s1, t) } translateY(t) { return this.translateOnAxis(r1, t) } translateZ(t) { return this.translateOnAxis(l1, t) } localToWorld(t) { return this.updateWorldMatrix(!0, !1), t.applyMatrix4(this.matrixWorld) } worldToLocal(t) { return this.updateWorldMatrix(!0, !1), t.applyMatrix4(oo.copy(this.matrixWorld).invert()) } lookAt(t, e, n) { t.isVector3 ? Vg.copy(t) : Vg.set(t, e, n); const a = this.parent; this.updateWorldMatrix(!0, !1), ep.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? oo.lookAt(ep, Vg, this.up) : oo.lookAt(Vg, ep, this.up), this.quaternion.setFromRotationMatrix(oo), a && (oo.extractRotation(a.matrixWorld), ih.setFromRotationMatrix(oo), this.quaternion.premultiply(ih.invert())) } add(t) { if (arguments.length > 1) { for (let e = 0; e < arguments.length; e++)this.add(arguments[e]); return this } return t === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t), this) : (t && t.isObject3D ? (t.removeFromParent(), t.parent = this, this.children.push(t), t.dispatchEvent(o1), ah.child = t, this.dispatchEvent(ah), ah.child = null) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t), this) } remove(t) { if (arguments.length > 1) { for (let n = 0; n < arguments.length; n++)this.remove(arguments[n]); return this } const e = this.children.indexOf(t); return e !== -1 && (t.parent = null, this.children.splice(e, 1), t.dispatchEvent(hR), Qy.child = t, this.dispatchEvent(Qy), Qy.child = null), this } removeFromParent() { const t = this.parent; return t !== null && t.remove(this), this } clear() { return this.remove(...this.children) } attach(t) { return this.updateWorldMatrix(!0, !1), oo.copy(this.matrixWorld).invert(), t.parent !== null && (t.parent.updateWorldMatrix(!0, !1), oo.multiply(t.parent.matrixWorld)), t.applyMatrix4(oo), t.removeFromParent(), t.parent = this, this.children.push(t), t.updateWorldMatrix(!1, !0), t.dispatchEvent(o1), ah.child = t, this.dispatchEvent(ah), ah.child = null, this } getObjectById(t) { return this.getObjectByProperty("id", t) } getObjectByName(t) { return this.getObjectByProperty("name", t) } getObjectByProperty(t, e) { if (this[t] === e) return this; for (let n = 0, a = this.children.length; n < a; n++) { const f = this.children[n].getObjectByProperty(t, e); if (f !== void 0) return f } } getObjectsByProperty(t, e, n = []) { this[t] === e && n.push(this); const a = this.children; for (let o = 0, f = a.length; o < f; o++)a[o].getObjectsByProperty(t, e, n); return n } getWorldPosition(t) { return this.updateWorldMatrix(!0, !1), t.setFromMatrixPosition(this.matrixWorld) } getWorldQuaternion(t) { return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(ep, t, cR), t } getWorldScale(t) { return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(ep, fR, t), t } getWorldDirection(t) { this.updateWorldMatrix(!0, !1); const e = this.matrixWorld.elements; return t.set(e[8], e[9], e[10]).normalize() } raycast() { } traverse(t) { t(this); const e = this.children; for (let n = 0, a = e.length; n < a; n++)e[n].traverse(t) } traverseVisible(t) { if (this.visible === !1) return; t(this); const e = this.children; for (let n = 0, a = e.length; n < a; n++)e[n].traverseVisible(t) } traverseAncestors(t) { const e = this.parent; e !== null && (t(e), e.traverseAncestors(t)) } updateMatrix() { this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0 } updateMatrixWorld(t) { this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || t) && (this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), this.matrixWorldNeedsUpdate = !1, t = !0); const e = this.children; for (let n = 0, a = e.length; n < a; n++)e[n].updateMatrixWorld(t) } updateWorldMatrix(t, e) { const n = this.parent; if (t === !0 && n !== null && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), e === !0) { const a = this.children; for (let o = 0, f = a.length; o < f; o++)a[o].updateWorldMatrix(!1, !0) } } toJSON(t) { const e = t === void 0 || typeof t == "string", n = {}; e && (t = { geometries: {}, materials: {}, textures: {}, images: {}, shapes: {}, skeletons: {}, animations: {}, nodes: {} }, n.metadata = { version: 4.6, type: "Object", generator: "Object3D.toJSON" }); const a = {}; a.uuid = this.uuid, a.type = this.type, this.name !== "" && (a.name = this.name), this.castShadow === !0 && (a.castShadow = !0), this.receiveShadow === !0 && (a.receiveShadow = !0), this.visible === !1 && (a.visible = !1), this.frustumCulled === !1 && (a.frustumCulled = !1), this.renderOrder !== 0 && (a.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (a.userData = this.userData), a.layers = this.layers.mask, a.matrix = this.matrix.toArray(), a.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (a.matrixAutoUpdate = !1), this.isInstancedMesh && (a.type = "InstancedMesh", a.count = this.count, a.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (a.instanceColor = this.instanceColor.toJSON())), this.isBatchedMesh && (a.type = "BatchedMesh", a.perObjectFrustumCulled = this.perObjectFrustumCulled, a.sortObjects = this.sortObjects, a.drawRanges = this._drawRanges, a.reservedRanges = this._reservedRanges, a.visibility = this._visibility, a.active = this._active, a.bounds = this._bounds.map(h => ({ boxInitialized: h.boxInitialized, boxMin: h.box.min.toArray(), boxMax: h.box.max.toArray(), sphereInitialized: h.sphereInitialized, sphereRadius: h.sphere.radius, sphereCenter: h.sphere.center.toArray() })), a.maxInstanceCount = this._maxInstanceCount, a.maxVertexCount = this._maxVertexCount, a.maxIndexCount = this._maxIndexCount, a.geometryInitialized = this._geometryInitialized, a.geometryCount = this._geometryCount, a.matricesTexture = this._matricesTexture.toJSON(t), this._colorsTexture !== null && (a.colorsTexture = this._colorsTexture.toJSON(t)), this.boundingSphere !== null && (a.boundingSphere = { center: a.boundingSphere.center.toArray(), radius: a.boundingSphere.radius }), this.boundingBox !== null && (a.boundingBox = { min: a.boundingBox.min.toArray(), max: a.boundingBox.max.toArray() })); function o(h, m) { return h[m.uuid] === void 0 && (h[m.uuid] = m.toJSON(t)), m.uuid } if (this.isScene) this.background && (this.background.isColor ? a.background = this.background.toJSON() : this.background.isTexture && (a.background = this.background.toJSON(t).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (a.environment = this.environment.toJSON(t).uuid); else if (this.isMesh || this.isLine || this.isPoints) { a.geometry = o(t.geometries, this.geometry); const h = this.geometry.parameters; if (h !== void 0 && h.shapes !== void 0) { const m = h.shapes; if (Array.isArray(m)) for (let g = 0, _ = m.length; g < _; g++) { const x = m[g]; o(t.shapes, x) } else o(t.shapes, m) } } if (this.isSkinnedMesh && (a.bindMode = this.bindMode, a.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (o(t.skeletons, this.skeleton), a.skeleton = this.skeleton.uuid)), this.material !== void 0) if (Array.isArray(this.material)) { const h = []; for (let m = 0, g = this.material.length; m < g; m++)h.push(o(t.materials, this.material[m])); a.material = h } else a.material = o(t.materials, this.material); if (this.children.length > 0) { a.children = []; for (let h = 0; h < this.children.length; h++)a.children.push(this.children[h].toJSON(t).object) } if (this.animations.length > 0) { a.animations = []; for (let h = 0; h < this.animations.length; h++) { const m = this.animations[h]; a.animations.push(o(t.animations, m)) } } if (e) { const h = f(t.geometries), m = f(t.materials), g = f(t.textures), _ = f(t.images), x = f(t.shapes), S = f(t.skeletons), M = f(t.animations), A = f(t.nodes); h.length > 0 && (n.geometries = h), m.length > 0 && (n.materials = m), g.length > 0 && (n.textures = g), _.length > 0 && (n.images = _), x.length > 0 && (n.shapes = x), S.length > 0 && (n.skeletons = S), M.length > 0 && (n.animations = M), A.length > 0 && (n.nodes = A) } return n.object = a, n; function f(h) { const m = []; for (const g in h) { const _ = h[g]; delete _.metadata, m.push(_) } return m } } clone(t) { return new this.constructor().copy(this, t) } copy(t, e = !0) { if (this.name = t.name, this.up.copy(t.up), this.position.copy(t.position), this.rotation.order = t.rotation.order, this.quaternion.copy(t.quaternion), this.scale.copy(t.scale), this.matrix.copy(t.matrix), this.matrixWorld.copy(t.matrixWorld), this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrixWorldAutoUpdate = t.matrixWorldAutoUpdate, this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate, this.layers.mask = t.layers.mask, this.visible = t.visible, this.castShadow = t.castShadow, this.receiveShadow = t.receiveShadow, this.frustumCulled = t.frustumCulled, this.renderOrder = t.renderOrder, this.animations = t.animations.slice(), this.userData = JSON.parse(JSON.stringify(t.userData)), e === !0) for (let n = 0; n < t.children.length; n++) { const a = t.children[n]; this.add(a.clone()) } return this } } _n.DEFAULT_UP = new k(0, 1, 0); _n.DEFAULT_MATRIX_AUTO_UPDATE = !0; _n.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0; const Ur = new k, uo = new k, Ky = new k, co = new k, sh = new k, rh = new k, u1 = new k, Jy = new k, $y = new k, t_ = new k, e_ = new yn, n_ = new yn, i_ = new yn; class os { constructor(t = new k, e = new k, n = new k) { this.a = t, this.b = e, this.c = n } static getNormal(t, e, n, a) { a.subVectors(n, e), Ur.subVectors(t, e), a.cross(Ur); const o = a.lengthSq(); return o > 0 ? a.multiplyScalar(1 / Math.sqrt(o)) : a.set(0, 0, 0) } static getBarycoord(t, e, n, a, o) { Ur.subVectors(a, e), uo.subVectors(n, e), Ky.subVectors(t, e); const f = Ur.dot(Ur), h = Ur.dot(uo), m = Ur.dot(Ky), g = uo.dot(uo), _ = uo.dot(Ky), x = f * g - h * h; if (x === 0) return o.set(0, 0, 0), null; const S = 1 / x, M = (g * m - h * _) * S, A = (f * _ - h * m) * S; return o.set(1 - M - A, A, M) } static containsPoint(t, e, n, a) { return this.getBarycoord(t, e, n, a, co) === null ? !1 : co.x >= 0 && co.y >= 0 && co.x + co.y <= 1 } static getInterpolation(t, e, n, a, o, f, h, m) { return this.getBarycoord(t, e, n, a, co) === null ? (m.x = 0, m.y = 0, "z" in m && (m.z = 0), "w" in m && (m.w = 0), null) : (m.setScalar(0), m.addScaledVector(o, co.x), m.addScaledVector(f, co.y), m.addScaledVector(h, co.z), m) } static getInterpolatedAttribute(t, e, n, a, o, f) { return e_.setScalar(0), n_.setScalar(0), i_.setScalar(0), e_.fromBufferAttribute(t, e), n_.fromBufferAttribute(t, n), i_.fromBufferAttribute(t, a), f.setScalar(0), f.addScaledVector(e_, o.x), f.addScaledVector(n_, o.y), f.addScaledVector(i_, o.z), f } static isFrontFacing(t, e, n, a) { return Ur.subVectors(n, e), uo.subVectors(t, e), Ur.cross(uo).dot(a) < 0 } set(t, e, n) { return this.a.copy(t), this.b.copy(e), this.c.copy(n), this } setFromPointsAndIndices(t, e, n, a) { return this.a.copy(t[e]), this.b.copy(t[n]), this.c.copy(t[a]), this } setFromAttributeAndIndices(t, e, n, a) { return this.a.fromBufferAttribute(t, e), this.b.fromBufferAttribute(t, n), this.c.fromBufferAttribute(t, a), this } clone() { return new this.constructor().copy(this) } copy(t) { return this.a.copy(t.a), this.b.copy(t.b), this.c.copy(t.c), this } getArea() { return Ur.subVectors(this.c, this.b), uo.subVectors(this.a, this.b), Ur.cross(uo).length() * .5 } getMidpoint(t) { return t.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3) } getNormal(t) { return os.getNormal(this.a, this.b, this.c, t) } getPlane(t) { return t.setFromCoplanarPoints(this.a, this.b, this.c) } getBarycoord(t, e) { return os.getBarycoord(t, this.a, this.b, this.c, e) } getInterpolation(t, e, n, a, o) { return os.getInterpolation(t, this.a, this.b, this.c, e, n, a, o) } containsPoint(t) { return os.containsPoint(t, this.a, this.b, this.c) } isFrontFacing(t) { return os.isFrontFacing(this.a, this.b, this.c, t) } intersectsBox(t) { return t.intersectsTriangle(this) } closestPointToPoint(t, e) { const n = this.a, a = this.b, o = this.c; let f, h; sh.subVectors(a, n), rh.subVectors(o, n), Jy.subVectors(t, n); const m = sh.dot(Jy), g = rh.dot(Jy); if (m <= 0 && g <= 0) return e.copy(n); $y.subVectors(t, a); const _ = sh.dot($y), x = rh.dot($y); if (_ >= 0 && x <= _) return e.copy(a); const S = m * x - _ * g; if (S <= 0 && m >= 0 && _ <= 0) return f = m / (m - _), e.copy(n).addScaledVector(sh, f); t_.subVectors(t, o); const M = sh.dot(t_), A = rh.dot(t_); if (A >= 0 && M <= A) return e.copy(o); const C = M * g - m * A; if (C <= 0 && g >= 0 && A <= 0) return h = g / (g - A), e.copy(n).addScaledVector(rh, h); const R = _ * A - M * x; if (R <= 0 && x - _ >= 0 && M - A >= 0) return u1.subVectors(o, a), h = (x - _) / (x - _ + (M - A)), e.copy(a).addScaledVector(u1, h); const T = 1 / (R + C + S); return f = C * T, h = S * T, e.copy(n).addScaledVector(sh, f).addScaledVector(rh, h) } equals(t) { return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c) } } const sE = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 }, pu = { h: 0, s: 0, l: 0 }, Gg = { h: 0, s: 0, l: 0 }; function a_(r, t, e) { return e < 0 && (e += 1), e > 1 && (e -= 1), e < 1 / 6 ? r + (t - r) * 6 * e : e < 1 / 2 ? t : e < 2 / 3 ? r + (t - r) * 6 * (2 / 3 - e) : r } class ce { constructor(t, e, n) { return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(t, e, n) } set(t, e, n) { if (e === void 0 && n === void 0) { const a = t; a && a.isColor ? this.copy(a) : typeof a == "number" ? this.setHex(a) : typeof a == "string" && this.setStyle(a) } else this.setRGB(t, e, n); return this } setScalar(t) { return this.r = t, this.g = t, this.b = t, this } setHex(t, e = Ea) { return t = Math.floor(t), this.r = (t >> 16 & 255) / 255, this.g = (t >> 8 & 255) / 255, this.b = (t & 255) / 255, dn.toWorkingColorSpace(this, e), this } setRGB(t, e, n, a = dn.workingColorSpace) { return this.r = t, this.g = e, this.b = n, dn.toWorkingColorSpace(this, a), this } setHSL(t, e, n, a = dn.workingColorSpace) { if (t = Dx(t, 1), e = Ve(e, 0, 1), n = Ve(n, 0, 1), e === 0) this.r = this.g = this.b = n; else { const o = n <= .5 ? n * (1 + e) : n + e - n * e, f = 2 * n - o; this.r = a_(f, o, t + 1 / 3), this.g = a_(f, o, t), this.b = a_(f, o, t - 1 / 3) } return dn.toWorkingColorSpace(this, a), this } setStyle(t, e = Ea) { function n(o) { o !== void 0 && parseFloat(o) < 1 && console.warn("THREE.Color: Alpha component of " + t + " will be ignored.") } let a; if (a = /^(\w+)\(([^\)]*)\)/.exec(t)) { let o; const f = a[1], h = a[2]; switch (f) { case "rgb": case "rgba": if (o = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(h)) return n(o[4]), this.setRGB(Math.min(255, parseInt(o[1], 10)) / 255, Math.min(255, parseInt(o[2], 10)) / 255, Math.min(255, parseInt(o[3], 10)) / 255, e); if (o = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(h)) return n(o[4]), this.setRGB(Math.min(100, parseInt(o[1], 10)) / 100, Math.min(100, parseInt(o[2], 10)) / 100, Math.min(100, parseInt(o[3], 10)) / 100, e); break; case "hsl": case "hsla": if (o = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(h)) return n(o[4]), this.setHSL(parseFloat(o[1]) / 360, parseFloat(o[2]) / 100, parseFloat(o[3]) / 100, e); break; default: console.warn("THREE.Color: Unknown color model " + t) } } else if (a = /^\#([A-Fa-f\d]+)$/.exec(t)) { const o = a[1], f = o.length; if (f === 3) return this.setRGB(parseInt(o.charAt(0), 16) / 15, parseInt(o.charAt(1), 16) / 15, parseInt(o.charAt(2), 16) / 15, e); if (f === 6) return this.setHex(parseInt(o, 16), e); console.warn("THREE.Color: Invalid hex color " + t) } else if (t && t.length > 0) return this.setColorName(t, e); return this } setColorName(t, e = Ea) { const n = sE[t.toLowerCase()]; return n !== void 0 ? this.setHex(n, e) : console.warn("THREE.Color: Unknown color " + t), this } clone() { return new this.constructor(this.r, this.g, this.b) } copy(t) { return this.r = t.r, this.g = t.g, this.b = t.b, this } copySRGBToLinear(t) { return this.r = yo(t.r), this.g = yo(t.g), this.b = yo(t.b), this } copyLinearToSRGB(t) { return this.r = Eh(t.r), this.g = Eh(t.g), this.b = Eh(t.b), this } convertSRGBToLinear() { return this.copySRGBToLinear(this), this } convertLinearToSRGB() { return this.copyLinearToSRGB(this), this } getHex(t = Ea) { return dn.fromWorkingColorSpace(Sa.copy(this), t), Math.round(Ve(Sa.r * 255, 0, 255)) * 65536 + Math.round(Ve(Sa.g * 255, 0, 255)) * 256 + Math.round(Ve(Sa.b * 255, 0, 255)) } getHexString(t = Ea) { return ("000000" + this.getHex(t).toString(16)).slice(-6) } getHSL(t, e = dn.workingColorSpace) { dn.fromWorkingColorSpace(Sa.copy(this), e); const n = Sa.r, a = Sa.g, o = Sa.b, f = Math.max(n, a, o), h = Math.min(n, a, o); let m, g; const _ = (h + f) / 2; if (h === f) m = 0, g = 0; else { const x = f - h; switch (g = _ <= .5 ? x / (f + h) : x / (2 - f - h), f) { case n: m = (a - o) / x + (a < o ? 6 : 0); break; case a: m = (o - n) / x + 2; break; case o: m = (n - a) / x + 4; break }m /= 6 } return t.h = m, t.s = g, t.l = _, t } getRGB(t, e = dn.workingColorSpace) { return dn.fromWorkingColorSpace(Sa.copy(this), e), t.r = Sa.r, t.g = Sa.g, t.b = Sa.b, t } getStyle(t = Ea) { dn.fromWorkingColorSpace(Sa.copy(this), t); const e = Sa.r, n = Sa.g, a = Sa.b; return t !== Ea ? `color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${a.toFixed(3)})` : `rgb(${Math.round(e * 255)},${Math.round(n * 255)},${Math.round(a * 255)})` } offsetHSL(t, e, n) { return this.getHSL(pu), this.setHSL(pu.h + t, pu.s + e, pu.l + n) } add(t) { return this.r += t.r, this.g += t.g, this.b += t.b, this } addColors(t, e) { return this.r = t.r + e.r, this.g = t.g + e.g, this.b = t.b + e.b, this } addScalar(t) { return this.r += t, this.g += t, this.b += t, this } sub(t) { return this.r = Math.max(0, this.r - t.r), this.g = Math.max(0, this.g - t.g), this.b = Math.max(0, this.b - t.b), this } multiply(t) { return this.r *= t.r, this.g *= t.g, this.b *= t.b, this } multiplyScalar(t) { return this.r *= t, this.g *= t, this.b *= t, this } lerp(t, e) { return this.r += (t.r - this.r) * e, this.g += (t.g - this.g) * e, this.b += (t.b - this.b) * e, this } lerpColors(t, e, n) { return this.r = t.r + (e.r - t.r) * n, this.g = t.g + (e.g - t.g) * n, this.b = t.b + (e.b - t.b) * n, this } lerpHSL(t, e) { this.getHSL(pu), t.getHSL(Gg); const n = Mp(pu.h, Gg.h, e), a = Mp(pu.s, Gg.s, e), o = Mp(pu.l, Gg.l, e); return this.setHSL(n, a, o), this } setFromVector3(t) { return this.r = t.x, this.g = t.y, this.b = t.z, this } applyMatrix3(t) { const e = this.r, n = this.g, a = this.b, o = t.elements; return this.r = o[0] * e + o[3] * n + o[6] * a, this.g = o[1] * e + o[4] * n + o[7] * a, this.b = o[2] * e + o[5] * n + o[8] * a, this } equals(t) { return t.r === this.r && t.g === this.g && t.b === this.b } fromArray(t, e = 0) { return this.r = t[e], this.g = t[e + 1], this.b = t[e + 2], this } toArray(t = [], e = 0) { return t[e] = this.r, t[e + 1] = this.g, t[e + 2] = this.b, t } fromBufferAttribute(t, e) { return this.r = t.getX(e), this.g = t.getY(e), this.b = t.getZ(e), this } toJSON() { return this.getHex() } *[Symbol.iterator]() { yield this.r, yield this.g, yield this.b } } const Sa = new ce; ce.NAMES = sE; let dR = 0; class Ra extends wl { constructor() { super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: dR++ }), this.uuid = Cs(), this.name = "", this.type = "Material", this.blending = Hc, this.side = _o, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = z0, this.blendDst = B0, this.blendEquation = yu, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.blendColor = new ce(0, 0, 0), this.blendAlpha = 0, this.depthFunc = qc, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = $_, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = Nc, this.stencilZFail = Nc, this.stencilZPass = Nc, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0 } get alphaTest() { return this._alphaTest } set alphaTest(t) { this._alphaTest > 0 != t > 0 && this.version++, this._alphaTest = t } onBeforeRender() { } onBeforeCompile() { } customProgramCacheKey() { return this.onBeforeCompile.toString() } setValues(t) { if (t !== void 0) for (const e in t) { const n = t[e]; if (n === void 0) { console.warn(`THREE.Material: parameter '${e}' has value of undefined.`); continue } const a = this[e]; if (a === void 0) { console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`); continue } a && a.isColor ? a.set(n) : a && a.isVector3 && n && n.isVector3 ? a.copy(n) : this[e] = n } } toJSON(t) { const e = t === void 0 || typeof t == "string"; e && (t = { textures: {}, images: {} }); const n = { metadata: { version: 4.6, type: "Material", generator: "Material.toJSON" } }; n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(t).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(t).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.dispersion !== void 0 && (n.dispersion = this.dispersion), this.iridescence !== void 0 && (n.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(t).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(t).uuid), this.anisotropy !== void 0 && (n.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (n.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (n.anisotropyMap = this.anisotropyMap.toJSON(t).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(t).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(t).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(t).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(t).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(t).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(t).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(t).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(t).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(t).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(t).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(t).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(t).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(t).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(t).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapRotation !== void 0 && (n.envMapRotation = this.envMapRotation.toArray()), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(t).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(t).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(t).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== Hc && (n.blending = this.blending), this.side !== _o && (n.side = this.side), this.vertexColors === !0 && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.transparent === !0 && (n.transparent = !0), this.blendSrc !== z0 && (n.blendSrc = this.blendSrc), this.blendDst !== B0 && (n.blendDst = this.blendDst), this.blendEquation !== yu && (n.blendEquation = this.blendEquation), this.blendSrcAlpha !== null && (n.blendSrcAlpha = this.blendSrcAlpha), this.blendDstAlpha !== null && (n.blendDstAlpha = this.blendDstAlpha), this.blendEquationAlpha !== null && (n.blendEquationAlpha = this.blendEquationAlpha), this.blendColor && this.blendColor.isColor && (n.blendColor = this.blendColor.getHex()), this.blendAlpha !== 0 && (n.blendAlpha = this.blendAlpha), this.depthFunc !== qc && (n.depthFunc = this.depthFunc), this.depthTest === !1 && (n.depthTest = this.depthTest), this.depthWrite === !1 && (n.depthWrite = this.depthWrite), this.colorWrite === !1 && (n.colorWrite = this.colorWrite), this.stencilWriteMask !== 255 && (n.stencilWriteMask = this.stencilWriteMask), this.stencilFunc !== $_ && (n.stencilFunc = this.stencilFunc), this.stencilRef !== 0 && (n.stencilRef = this.stencilRef), this.stencilFuncMask !== 255 && (n.stencilFuncMask = this.stencilFuncMask), this.stencilFail !== Nc && (n.stencilFail = this.stencilFail), this.stencilZFail !== Nc && (n.stencilZFail = this.stencilZFail), this.stencilZPass !== Nc && (n.stencilZPass = this.stencilZPass), this.stencilWrite === !0 && (n.stencilWrite = this.stencilWrite), this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaHash === !0 && (n.alphaHash = !0), this.alphaToCoverage === !0 && (n.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = !0), this.forceSinglePass === !0 && (n.forceSinglePass = !0), this.wireframe === !0 && (n.wireframe = !0), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = !0), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), this.fog === !1 && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData); function a(o) { const f = []; for (const h in o) { const m = o[h]; delete m.metadata, f.push(m) } return f } if (e) { const o = a(t.textures), f = a(t.images); o.length > 0 && (n.textures = o), f.length > 0 && (n.images = f) } return n } clone() { return new this.constructor().copy(this) } copy(t) { this.name = t.name, this.blending = t.blending, this.side = t.side, this.vertexColors = t.vertexColors, this.opacity = t.opacity, this.transparent = t.transparent, this.blendSrc = t.blendSrc, this.blendDst = t.blendDst, this.blendEquation = t.blendEquation, this.blendSrcAlpha = t.blendSrcAlpha, this.blendDstAlpha = t.blendDstAlpha, this.blendEquationAlpha = t.blendEquationAlpha, this.blendColor.copy(t.blendColor), this.blendAlpha = t.blendAlpha, this.depthFunc = t.depthFunc, this.depthTest = t.depthTest, this.depthWrite = t.depthWrite, this.stencilWriteMask = t.stencilWriteMask, this.stencilFunc = t.stencilFunc, this.stencilRef = t.stencilRef, this.stencilFuncMask = t.stencilFuncMask, this.stencilFail = t.stencilFail, this.stencilZFail = t.stencilZFail, this.stencilZPass = t.stencilZPass, this.stencilWrite = t.stencilWrite; const e = t.clippingPlanes; let n = null; if (e !== null) { const a = e.length; n = new Array(a); for (let o = 0; o !== a; ++o)n[o] = e[o].clone() } return this.clippingPlanes = n, this.clipIntersection = t.clipIntersection, this.clipShadows = t.clipShadows, this.shadowSide = t.shadowSide, this.colorWrite = t.colorWrite, this.precision = t.precision, this.polygonOffset = t.polygonOffset, this.polygonOffsetFactor = t.polygonOffsetFactor, this.polygonOffsetUnits = t.polygonOffsetUnits, this.dithering = t.dithering, this.alphaTest = t.alphaTest, this.alphaHash = t.alphaHash, this.alphaToCoverage = t.alphaToCoverage, this.premultipliedAlpha = t.premultipliedAlpha, this.forceSinglePass = t.forceSinglePass, this.visible = t.visible, this.toneMapped = t.toneMapped, this.userData = JSON.parse(JSON.stringify(t.userData)), this } dispose() { this.dispatchEvent({ type: "dispose" }) } set needsUpdate(t) { t === !0 && this.version++ } onBuild() { console.warn("Material: onBuild() has been removed.") } } class Au extends Ra { constructor(t) { super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new ce(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Ds, this.combine = jp, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapRotation.copy(t.envMapRotation), this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.fog = t.fog, this } } const mo = pR(); function pR() { const r = new ArrayBuffer(4), t = new Float32Array(r), e = new Uint32Array(r), n = new Uint32Array(512), a = new Uint32Array(512); for (let m = 0; m < 256; ++m) { const g = m - 127; g < -27 ? (n[m] = 0, n[m | 256] = 32768, a[m] = 24, a[m | 256] = 24) : g < -14 ? (n[m] = 1024 >> -g - 14, n[m | 256] = 1024 >> -g - 14 | 32768, a[m] = -g - 1, a[m | 256] = -g - 1) : g <= 15 ? (n[m] = g + 15 << 10, n[m | 256] = g + 15 << 10 | 32768, a[m] = 13, a[m | 256] = 13) : g < 128 ? (n[m] = 31744, n[m | 256] = 64512, a[m] = 24, a[m | 256] = 24) : (n[m] = 31744, n[m | 256] = 64512, a[m] = 13, a[m | 256] = 13) } const o = new Uint32Array(2048), f = new Uint32Array(64), h = new Uint32Array(64); for (let m = 1; m < 1024; ++m) { let g = m << 13, _ = 0; for (; (g & 8388608) === 0;)g <<= 1, _ -= 8388608; g &= -8388609, _ += 947912704, o[m] = g | _ } for (let m = 1024; m < 2048; ++m)o[m] = 939524096 + (m - 1024 << 13); for (let m = 1; m < 31; ++m)f[m] = m << 23; f[31] = 1199570944, f[32] = 2147483648; for (let m = 33; m < 63; ++m)f[m] = 2147483648 + (m - 32 << 23); f[63] = 3347054592; for (let m = 1; m < 64; ++m)m !== 32 && (h[m] = 1024); return { floatView: t, uint32View: e, baseTable: n, shiftTable: a, mantissaTable: o, exponentTable: f, offsetTable: h } } function rs(r) { Math.abs(r) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), r = Ve(r, -65504, 65504), mo.floatView[0] = r; const t = mo.uint32View[0], e = t >> 23 & 511; return mo.baseTable[e] + ((t & 8388607) >> mo.shiftTable[e]) } function dp(r) { const t = r >> 10; return mo.uint32View[0] = mo.mantissaTable[mo.offsetTable[t] + (r & 1023)] + mo.exponentTable[t], mo.floatView[0] } class mR { static toHalfFloat(t) { return rs(t) } static fromHalfFloat(t) { return dp(t) } } const Ri = new k, Xg = new zt; let gR = 0; class Pn { constructor(t, e, n = !1) { if (Array.isArray(t)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array."); this.isBufferAttribute = !0, Object.defineProperty(this, "id", { value: gR++ }), this.name = "", this.array = t, this.itemSize = e, this.count = t !== void 0 ? t.length / e : 0, this.normalized = n, this.usage = Lp, this.updateRanges = [], this.gpuType = us, this.version = 0 } onUploadCallback() { } set needsUpdate(t) { t === !0 && this.version++ } setUsage(t) { return this.usage = t, this } addUpdateRange(t, e) { this.updateRanges.push({ start: t, count: e }) } clearUpdateRanges() { this.updateRanges.length = 0 } copy(t) { return this.name = t.name, this.array = new t.array.constructor(t.array), this.itemSize = t.itemSize, this.count = t.count, this.normalized = t.normalized, this.usage = t.usage, this.gpuType = t.gpuType, this } copyAt(t, e, n) { t *= this.itemSize, n *= e.itemSize; for (let a = 0, o = this.itemSize; a < o; a++)this.array[t + a] = e.array[n + a]; return this } copyArray(t) { return this.array.set(t), this } applyMatrix3(t) { if (this.itemSize === 2) for (let e = 0, n = this.count; e < n; e++)Xg.fromBufferAttribute(this, e), Xg.applyMatrix3(t), this.setXY(e, Xg.x, Xg.y); else if (this.itemSize === 3) for (let e = 0, n = this.count; e < n; e++)Ri.fromBufferAttribute(this, e), Ri.applyMatrix3(t), this.setXYZ(e, Ri.x, Ri.y, Ri.z); return this } applyMatrix4(t) { for (let e = 0, n = this.count; e < n; e++)Ri.fromBufferAttribute(this, e), Ri.applyMatrix4(t), this.setXYZ(e, Ri.x, Ri.y, Ri.z); return this } applyNormalMatrix(t) { for (let e = 0, n = this.count; e < n; e++)Ri.fromBufferAttribute(this, e), Ri.applyNormalMatrix(t), this.setXYZ(e, Ri.x, Ri.y, Ri.z); return this } transformDirection(t) { for (let e = 0, n = this.count; e < n; e++)Ri.fromBufferAttribute(this, e), Ri.transformDirection(t), this.setXYZ(e, Ri.x, Ri.y, Ri.z); return this } set(t, e = 0) { return this.array.set(t, e), this } getComponent(t, e) { let n = this.array[t * this.itemSize + e]; return this.normalized && (n = Fa(n, this.array)), n } setComponent(t, e, n) { return this.normalized && (n = Xe(n, this.array)), this.array[t * this.itemSize + e] = n, this } getX(t) { let e = this.array[t * this.itemSize]; return this.normalized && (e = Fa(e, this.array)), e } setX(t, e) { return this.normalized && (e = Xe(e, this.array)), this.array[t * this.itemSize] = e, this } getY(t) { let e = this.array[t * this.itemSize + 1]; return this.normalized && (e = Fa(e, this.array)), e } setY(t, e) { return this.normalized && (e = Xe(e, this.array)), this.array[t * this.itemSize + 1] = e, this } getZ(t) { let e = this.array[t * this.itemSize + 2]; return this.normalized && (e = Fa(e, this.array)), e } setZ(t, e) { return this.normalized && (e = Xe(e, this.array)), this.array[t * this.itemSize + 2] = e, this } getW(t) { let e = this.array[t * this.itemSize + 3]; return this.normalized && (e = Fa(e, this.array)), e } setW(t, e) { return this.normalized && (e = Xe(e, this.array)), this.array[t * this.itemSize + 3] = e, this } setXY(t, e, n) { return t *= this.itemSize, this.normalized && (e = Xe(e, this.array), n = Xe(n, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this } setXYZ(t, e, n, a) { return t *= this.itemSize, this.normalized && (e = Xe(e, this.array), n = Xe(n, this.array), a = Xe(a, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = a, this } setXYZW(t, e, n, a, o) { return t *= this.itemSize, this.normalized && (e = Xe(e, this.array), n = Xe(n, this.array), a = Xe(a, this.array), o = Xe(o, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = a, this.array[t + 3] = o, this } onUpload(t) { return this.onUploadCallback = t, this } clone() { return new this.constructor(this.array, this.itemSize).copy(this) } toJSON() { const t = { itemSize: this.itemSize, type: this.array.constructor.name, array: Array.from(this.array), normalized: this.normalized }; return this.name !== "" && (t.name = this.name), this.usage !== Lp && (t.usage = this.usage), t } } class vR extends Pn { constructor(t, e, n) { super(new Int8Array(t), e, n) } } class yR extends Pn { constructor(t, e, n) { super(new Uint8Array(t), e, n) } } class _R extends Pn { constructor(t, e, n) { super(new Uint8ClampedArray(t), e, n) } } class xR extends Pn { constructor(t, e, n) { super(new Int16Array(t), e, n) } } class Ux extends Pn { constructor(t, e, n) { super(new Uint16Array(t), e, n) } } class SR extends Pn { constructor(t, e, n) { super(new Int32Array(t), e, n) } } class Nx extends Pn { constructor(t, e, n) { super(new Uint32Array(t), e, n) } } class MR extends Pn { constructor(t, e, n) { super(new Uint16Array(t), e, n), this.isFloat16BufferAttribute = !0 } getX(t) { let e = dp(this.array[t * this.itemSize]); return this.normalized && (e = Fa(e, this.array)), e } setX(t, e) { return this.normalized && (e = Xe(e, this.array)), this.array[t * this.itemSize] = rs(e), this } getY(t) { let e = dp(this.array[t * this.itemSize + 1]); return this.normalized && (e = Fa(e, this.array)), e } setY(t, e) { return this.normalized && (e = Xe(e, this.array)), this.array[t * this.itemSize + 1] = rs(e), this } getZ(t) { let e = dp(this.array[t * this.itemSize + 2]); return this.normalized && (e = Fa(e, this.array)), e } setZ(t, e) { return this.normalized && (e = Xe(e, this.array)), this.array[t * this.itemSize + 2] = rs(e), this } getW(t) { let e = dp(this.array[t * this.itemSize + 3]); return this.normalized && (e = Fa(e, this.array)), e } setW(t, e) { return this.normalized && (e = Xe(e, this.array)), this.array[t * this.itemSize + 3] = rs(e), this } setXY(t, e, n) { return t *= this.itemSize, this.normalized && (e = Xe(e, this.array), n = Xe(n, this.array)), this.array[t + 0] = rs(e), this.array[t + 1] = rs(n), this } setXYZ(t, e, n, a) { return t *= this.itemSize, this.normalized && (e = Xe(e, this.array), n = Xe(n, this.array), a = Xe(a, this.array)), this.array[t + 0] = rs(e), this.array[t + 1] = rs(n), this.array[t + 2] = rs(a), this } setXYZW(t, e, n, a, o) { return t *= this.itemSize, this.normalized && (e = Xe(e, this.array), n = Xe(n, this.array), a = Xe(a, this.array), o = Xe(o, this.array)), this.array[t + 0] = rs(e), this.array[t + 1] = rs(n), this.array[t + 2] = rs(a), this.array[t + 3] = rs(o), this } } class ve extends Pn { constructor(t, e, n) { super(new Float32Array(t), e, n) } } let bR = 0; const ks = new Oe, s_ = new _n, lh = new k, ws = new Ga, np = new Ga, Qi = new k; class Qe extends wl { constructor() { super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: bR++ }), this.uuid = Cs(), this.name = "", this.type = "BufferGeometry", this.index = null, this.indirect = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {} } getIndex() { return this.index } setIndex(t) { return Array.isArray(t) ? this.index = new (nE(t) ? Nx : Ux)(t, 1) : this.index = t, this } setIndirect(t) { return this.indirect = t, this } getIndirect() { return this.indirect } getAttribute(t) { return this.attributes[t] } setAttribute(t, e) { return this.attributes[t] = e, this } deleteAttribute(t) { return delete this.attributes[t], this } hasAttribute(t) { return this.attributes[t] !== void 0 } addGroup(t, e, n = 0) { this.groups.push({ start: t, count: e, materialIndex: n }) } clearGroups() { this.groups = [] } setDrawRange(t, e) { this.drawRange.start = t, this.drawRange.count = e } applyMatrix4(t) { const e = this.attributes.position; e !== void 0 && (e.applyMatrix4(t), e.needsUpdate = !0); const n = this.attributes.normal; if (n !== void 0) { const o = new Ge().getNormalMatrix(t); n.applyNormalMatrix(o), n.needsUpdate = !0 } const a = this.attributes.tangent; return a !== void 0 && (a.transformDirection(t), a.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this } applyQuaternion(t) { return ks.makeRotationFromQuaternion(t), this.applyMatrix4(ks), this } rotateX(t) { return ks.makeRotationX(t), this.applyMatrix4(ks), this } rotateY(t) { return ks.makeRotationY(t), this.applyMatrix4(ks), this } rotateZ(t) { return ks.makeRotationZ(t), this.applyMatrix4(ks), this } translate(t, e, n) { return ks.makeTranslation(t, e, n), this.applyMatrix4(ks), this } scale(t, e, n) { return ks.makeScale(t, e, n), this.applyMatrix4(ks), this } lookAt(t) { return s_.lookAt(t), s_.updateMatrix(), this.applyMatrix4(s_.matrix), this } center() { return this.computeBoundingBox(), this.boundingBox.getCenter(lh).negate(), this.translate(lh.x, lh.y, lh.z), this } setFromPoints(t) { const e = this.getAttribute("position"); if (e === void 0) { const n = []; for (let a = 0, o = t.length; a < o; a++) { const f = t[a]; n.push(f.x, f.y, f.z || 0) } this.setAttribute("position", new ve(n, 3)) } else { const n = Math.min(t.length, e.count); for (let a = 0; a < n; a++) { const o = t[a]; e.setXYZ(a, o.x, o.y, o.z || 0) } t.length > e.count && console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."), e.needsUpdate = !0 } return this } computeBoundingBox() { this.boundingBox === null && (this.boundingBox = new Ga); const t = this.attributes.position, e = this.morphAttributes.position; if (t && t.isGLBufferAttribute) { console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this), this.boundingBox.set(new k(-1 / 0, -1 / 0, -1 / 0), new k(1 / 0, 1 / 0, 1 / 0)); return } if (t !== void 0) { if (this.boundingBox.setFromBufferAttribute(t), e) for (let n = 0, a = e.length; n < a; n++) { const o = e[n]; ws.setFromBufferAttribute(o), this.morphTargetsRelative ? (Qi.addVectors(this.boundingBox.min, ws.min), this.boundingBox.expandByPoint(Qi), Qi.addVectors(this.boundingBox.max, ws.max), this.boundingBox.expandByPoint(Qi)) : (this.boundingBox.expandByPoint(ws.min), this.boundingBox.expandByPoint(ws.max)) } } else this.boundingBox.makeEmpty(); (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this) } computeBoundingSphere() { this.boundingSphere === null && (this.boundingSphere = new Aa); const t = this.attributes.position, e = this.morphAttributes.position; if (t && t.isGLBufferAttribute) { console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this), this.boundingSphere.set(new k, 1 / 0); return } if (t) { const n = this.boundingSphere.center; if (ws.setFromBufferAttribute(t), e) for (let o = 0, f = e.length; o < f; o++) { const h = e[o]; np.setFromBufferAttribute(h), this.morphTargetsRelative ? (Qi.addVectors(ws.min, np.min), ws.expandByPoint(Qi), Qi.addVectors(ws.max, np.max), ws.expandByPoint(Qi)) : (ws.expandByPoint(np.min), ws.expandByPoint(np.max)) } ws.getCenter(n); let a = 0; for (let o = 0, f = t.count; o < f; o++)Qi.fromBufferAttribute(t, o), a = Math.max(a, n.distanceToSquared(Qi)); if (e) for (let o = 0, f = e.length; o < f; o++) { const h = e[o], m = this.morphTargetsRelative; for (let g = 0, _ = h.count; g < _; g++)Qi.fromBufferAttribute(h, g), m && (lh.fromBufferAttribute(t, g), Qi.add(lh)), a = Math.max(a, n.distanceToSquared(Qi)) } this.boundingSphere.radius = Math.sqrt(a), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this) } } computeTangents() { const t = this.index, e = this.attributes; if (t === null || e.position === void 0 || e.normal === void 0 || e.uv === void 0) { console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)"); return } const n = e.position, a = e.normal, o = e.uv; this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new Pn(new Float32Array(4 * n.count), 4)); const f = this.getAttribute("tangent"), h = [], m = []; for (let q = 0; q < n.count; q++)h[q] = new k, m[q] = new k; const g = new k, _ = new k, x = new k, S = new zt, M = new zt, A = new zt, C = new k, R = new k; function T(q, z, L) { g.fromBufferAttribute(n, q), _.fromBufferAttribute(n, z), x.fromBufferAttribute(n, L), S.fromBufferAttribute(o, q), M.fromBufferAttribute(o, z), A.fromBufferAttribute(o, L), _.sub(g), x.sub(g), M.sub(S), A.sub(S); const j = 1 / (M.x * A.y - A.x * M.y); isFinite(j) && (C.copy(_).multiplyScalar(A.y).addScaledVector(x, -M.y).multiplyScalar(j), R.copy(x).multiplyScalar(M.x).addScaledVector(_, -A.x).multiplyScalar(j), h[q].add(C), h[z].add(C), h[L].add(C), m[q].add(R), m[z].add(R), m[L].add(R)) } let D = this.groups; D.length === 0 && (D = [{ start: 0, count: t.count }]); for (let q = 0, z = D.length; q < z; ++q) { const L = D[q], j = L.start, dt = L.count; for (let tt = j, ct = j + dt; tt < ct; tt += 3)T(t.getX(tt + 0), t.getX(tt + 1), t.getX(tt + 2)) } const N = new k, U = new k, V = new k, I = new k; function G(q) { V.fromBufferAttribute(a, q), I.copy(V); const z = h[q]; N.copy(z), N.sub(V.multiplyScalar(V.dot(z))).normalize(), U.crossVectors(I, z); const j = U.dot(m[q]) < 0 ? -1 : 1; f.setXYZW(q, N.x, N.y, N.z, j) } for (let q = 0, z = D.length; q < z; ++q) { const L = D[q], j = L.start, dt = L.count; for (let tt = j, ct = j + dt; tt < ct; tt += 3)G(t.getX(tt + 0)), G(t.getX(tt + 1)), G(t.getX(tt + 2)) } } computeVertexNormals() { const t = this.index, e = this.getAttribute("position"); if (e !== void 0) { let n = this.getAttribute("normal"); if (n === void 0) n = new Pn(new Float32Array(e.count * 3), 3), this.setAttribute("normal", n); else for (let S = 0, M = n.count; S < M; S++)n.setXYZ(S, 0, 0, 0); const a = new k, o = new k, f = new k, h = new k, m = new k, g = new k, _ = new k, x = new k; if (t) for (let S = 0, M = t.count; S < M; S += 3) { const A = t.getX(S + 0), C = t.getX(S + 1), R = t.getX(S + 2); a.fromBufferAttribute(e, A), o.fromBufferAttribute(e, C), f.fromBufferAttribute(e, R), _.subVectors(f, o), x.subVectors(a, o), _.cross(x), h.fromBufferAttribute(n, A), m.fromBufferAttribute(n, C), g.fromBufferAttribute(n, R), h.add(_), m.add(_), g.add(_), n.setXYZ(A, h.x, h.y, h.z), n.setXYZ(C, m.x, m.y, m.z), n.setXYZ(R, g.x, g.y, g.z) } else for (let S = 0, M = e.count; S < M; S += 3)a.fromBufferAttribute(e, S + 0), o.fromBufferAttribute(e, S + 1), f.fromBufferAttribute(e, S + 2), _.subVectors(f, o), x.subVectors(a, o), _.cross(x), n.setXYZ(S + 0, _.x, _.y, _.z), n.setXYZ(S + 1, _.x, _.y, _.z), n.setXYZ(S + 2, _.x, _.y, _.z); this.normalizeNormals(), n.needsUpdate = !0 } } normalizeNormals() { const t = this.attributes.normal; for (let e = 0, n = t.count; e < n; e++)Qi.fromBufferAttribute(t, e), Qi.normalize(), t.setXYZ(e, Qi.x, Qi.y, Qi.z) } toNonIndexed() { function t(h, m) { const g = h.array, _ = h.itemSize, x = h.normalized, S = new g.constructor(m.length * _); let M = 0, A = 0; for (let C = 0, R = m.length; C < R; C++) { h.isInterleavedBufferAttribute ? M = m[C] * h.data.stride + h.offset : M = m[C] * _; for (let T = 0; T < _; T++)S[A++] = g[M++] } return new Pn(S, _, x) } if (this.index === null) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this; const e = new Qe, n = this.index.array, a = this.attributes; for (const h in a) { const m = a[h], g = t(m, n); e.setAttribute(h, g) } const o = this.morphAttributes; for (const h in o) { const m = [], g = o[h]; for (let _ = 0, x = g.length; _ < x; _++) { const S = g[_], M = t(S, n); m.push(M) } e.morphAttributes[h] = m } e.morphTargetsRelative = this.morphTargetsRelative; const f = this.groups; for (let h = 0, m = f.length; h < m; h++) { const g = f[h]; e.addGroup(g.start, g.count, g.materialIndex) } return e } toJSON() { const t = { metadata: { version: 4.6, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } }; if (t.uuid = this.uuid, t.type = this.type, this.name !== "" && (t.name = this.name), Object.keys(this.userData).length > 0 && (t.userData = this.userData), this.parameters !== void 0) { const m = this.parameters; for (const g in m) m[g] !== void 0 && (t[g] = m[g]); return t } t.data = { attributes: {} }; const e = this.index; e !== null && (t.data.index = { type: e.array.constructor.name, array: Array.prototype.slice.call(e.array) }); const n = this.attributes; for (const m in n) { const g = n[m]; t.data.attributes[m] = g.toJSON(t.data) } const a = {}; let o = !1; for (const m in this.morphAttributes) { const g = this.morphAttributes[m], _ = []; for (let x = 0, S = g.length; x < S; x++) { const M = g[x]; _.push(M.toJSON(t.data)) } _.length > 0 && (a[m] = _, o = !0) } o && (t.data.morphAttributes = a, t.data.morphTargetsRelative = this.morphTargetsRelative); const f = this.groups; f.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(f))); const h = this.boundingSphere; return h !== null && (t.data.boundingSphere = { center: h.center.toArray(), radius: h.radius }), t } clone() { return new this.constructor().copy(this) } copy(t) { this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null; const e = {}; this.name = t.name; const n = t.index; n !== null && this.setIndex(n.clone(e)); const a = t.attributes; for (const g in a) { const _ = a[g]; this.setAttribute(g, _.clone(e)) } const o = t.morphAttributes; for (const g in o) { const _ = [], x = o[g]; for (let S = 0, M = x.length; S < M; S++)_.push(x[S].clone(e)); this.morphAttributes[g] = _ } this.morphTargetsRelative = t.morphTargetsRelative; const f = t.groups; for (let g = 0, _ = f.length; g < _; g++) { const x = f[g]; this.addGroup(x.start, x.count, x.materialIndex) } const h = t.boundingBox; h !== null && (this.boundingBox = h.clone()); const m = t.boundingSphere; return m !== null && (this.boundingSphere = m.clone()), this.drawRange.start = t.drawRange.start, this.drawRange.count = t.drawRange.count, this.userData = t.userData, this } dispose() { this.dispatchEvent({ type: "dispose" }) } } const c1 = new Oe, xc = new Bh, qg = new Aa, f1 = new k, Yg = new k, Wg = new k, kg = new k, r_ = new k, jg = new k, h1 = new k, Zg = new k; class wi extends _n { constructor(t = new Qe, e = new Au) { super(), this.isMesh = !0, this.type = "Mesh", this.geometry = t, this.material = e, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets() } copy(t, e) { return super.copy(t, e), t.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = t.morphTargetInfluences.slice()), t.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this } updateMorphTargets() { const e = this.geometry.morphAttributes, n = Object.keys(e); if (n.length > 0) { const a = e[n[0]]; if (a !== void 0) { this.morphTargetInfluences = [], this.morphTargetDictionary = {}; for (let o = 0, f = a.length; o < f; o++) { const h = a[o].name || String(o); this.morphTargetInfluences.push(0), this.morphTargetDictionary[h] = o } } } } getVertexPosition(t, e) { const n = this.geometry, a = n.attributes.position, o = n.morphAttributes.position, f = n.morphTargetsRelative; e.fromBufferAttribute(a, t); const h = this.morphTargetInfluences; if (o && h) { jg.set(0, 0, 0); for (let m = 0, g = o.length; m < g; m++) { const _ = h[m], x = o[m]; _ !== 0 && (r_.fromBufferAttribute(x, t), f ? jg.addScaledVector(r_, _) : jg.addScaledVector(r_.sub(e), _)) } e.add(jg) } return e } raycast(t, e) { const n = this.geometry, a = this.material, o = this.matrixWorld; a !== void 0 && (n.boundingSphere === null && n.computeBoundingSphere(), qg.copy(n.boundingSphere), qg.applyMatrix4(o), xc.copy(t.ray).recast(t.near), !(qg.containsPoint(xc.origin) === !1 && (xc.intersectSphere(qg, f1) === null || xc.origin.distanceToSquared(f1) > (t.far - t.near) ** 2)) && (c1.copy(o).invert(), xc.copy(t.ray).applyMatrix4(c1), !(n.boundingBox !== null && xc.intersectsBox(n.boundingBox) === !1) && this._computeIntersections(t, e, xc))) } _computeIntersections(t, e, n) { let a; const o = this.geometry, f = this.material, h = o.index, m = o.attributes.position, g = o.attributes.uv, _ = o.attributes.uv1, x = o.attributes.normal, S = o.groups, M = o.drawRange; if (h !== null) if (Array.isArray(f)) for (let A = 0, C = S.length; A < C; A++) { const R = S[A], T = f[R.materialIndex], D = Math.max(R.start, M.start), N = Math.min(h.count, Math.min(R.start + R.count, M.start + M.count)); for (let U = D, V = N; U < V; U += 3) { const I = h.getX(U), G = h.getX(U + 1), q = h.getX(U + 2); a = Qg(this, T, t, n, g, _, x, I, G, q), a && (a.faceIndex = Math.floor(U / 3), a.face.materialIndex = R.materialIndex, e.push(a)) } } else { const A = Math.max(0, M.start), C = Math.min(h.count, M.start + M.count); for (let R = A, T = C; R < T; R += 3) { const D = h.getX(R), N = h.getX(R + 1), U = h.getX(R + 2); a = Qg(this, f, t, n, g, _, x, D, N, U), a && (a.faceIndex = Math.floor(R / 3), e.push(a)) } } else if (m !== void 0) if (Array.isArray(f)) for (let A = 0, C = S.length; A < C; A++) { const R = S[A], T = f[R.materialIndex], D = Math.max(R.start, M.start), N = Math.min(m.count, Math.min(R.start + R.count, M.start + M.count)); for (let U = D, V = N; U < V; U += 3) { const I = U, G = U + 1, q = U + 2; a = Qg(this, T, t, n, g, _, x, I, G, q), a && (a.faceIndex = Math.floor(U / 3), a.face.materialIndex = R.materialIndex, e.push(a)) } } else { const A = Math.max(0, M.start), C = Math.min(m.count, M.start + M.count); for (let R = A, T = C; R < T; R += 3) { const D = R, N = R + 1, U = R + 2; a = Qg(this, f, t, n, g, _, x, D, N, U), a && (a.faceIndex = Math.floor(R / 3), e.push(a)) } } } } function ER(r, t, e, n, a, o, f, h) { let m; if (t.side === Va ? m = n.intersectTriangle(f, o, a, !0, h) : m = n.intersectTriangle(a, o, f, t.side === _o, h), m === null) return null; Zg.copy(h), Zg.applyMatrix4(r.matrixWorld); const g = e.ray.origin.distanceTo(Zg); return g < e.near || g > e.far ? null : { distance: g, point: Zg.clone(), object: r } } function Qg(r, t, e, n, a, o, f, h, m, g) { r.getVertexPosition(h, Yg), r.getVertexPosition(m, Wg), r.getVertexPosition(g, kg); const _ = ER(r, t, e, n, Yg, Wg, kg, h1); if (_) { const x = new k; os.getBarycoord(h1, Yg, Wg, kg, x), a && (_.uv = os.getInterpolatedAttribute(a, h, m, g, x, new zt)), o && (_.uv1 = os.getInterpolatedAttribute(o, h, m, g, x, new zt)), f && (_.normal = os.getInterpolatedAttribute(f, h, m, g, x, new k), _.normal.dot(n.direction) > 0 && _.normal.multiplyScalar(-1)); const S = { a: h, b: m, c: g, normal: new k, materialIndex: 0 }; os.getNormal(Yg, Wg, kg, S.normal), _.face = S, _.barycoord = x } return _ } class Kc extends Qe { constructor(t = 1, e = 1, n = 1, a = 1, o = 1, f = 1) { super(), this.type = "BoxGeometry", this.parameters = { width: t, height: e, depth: n, widthSegments: a, heightSegments: o, depthSegments: f }; const h = this; a = Math.floor(a), o = Math.floor(o), f = Math.floor(f); const m = [], g = [], _ = [], x = []; let S = 0, M = 0; A("z", "y", "x", -1, -1, n, e, t, f, o, 0), A("z", "y", "x", 1, -1, n, e, -t, f, o, 1), A("x", "z", "y", 1, 1, t, n, e, a, f, 2), A("x", "z", "y", 1, -1, t, n, -e, a, f, 3), A("x", "y", "z", 1, -1, t, e, n, a, o, 4), A("x", "y", "z", -1, -1, t, e, -n, a, o, 5), this.setIndex(m), this.setAttribute("position", new ve(g, 3)), this.setAttribute("normal", new ve(_, 3)), this.setAttribute("uv", new ve(x, 2)); function A(C, R, T, D, N, U, V, I, G, q, z) { const L = U / G, j = V / q, dt = U / 2, tt = V / 2, ct = I / 2, xt = G + 1, K = q + 1; let ft = 0, nt = 0; const Et = new k; for (let Y = 0; Y < K; Y++) { const it = Y * j - tt; for (let Dt = 0; Dt < xt; Dt++) { const Xt = Dt * L - dt; Et[C] = Xt * D, Et[R] = it * N, Et[T] = ct, g.push(Et.x, Et.y, Et.z), Et[C] = 0, Et[R] = 0, Et[T] = I > 0 ? 1 : -1, _.push(Et.x, Et.y, Et.z), x.push(Dt / G), x.push(1 - Y / q), ft += 1 } } for (let Y = 0; Y < q; Y++)for (let it = 0; it < G; it++) { const Dt = S + it + xt * Y, Xt = S + it + xt * (Y + 1), $ = S + (it + 1) + xt * (Y + 1), Tt = S + (it + 1) + xt * Y; m.push(Dt, Xt, Tt), m.push(Xt, $, Tt), nt += 6 } h.addGroup(M, nt, z), M += nt, S += ft } } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new Kc(t.width, t.height, t.depth, t.widthSegments, t.heightSegments, t.depthSegments) } } function Ch(r) { const t = {}; for (const e in r) { t[e] = {}; for (const n in r[e]) { const a = r[e][n]; a && (a.isColor || a.isMatrix3 || a.isMatrix4 || a.isVector2 || a.isVector3 || a.isVector4 || a.isTexture || a.isQuaternion) ? a.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), t[e][n] = null) : t[e][n] = a.clone() : Array.isArray(a) ? t[e][n] = a.slice() : t[e][n] = a } } return t } function Ha(r) { const t = {}; for (let e = 0; e < r.length; e++) { const n = Ch(r[e]); for (const a in n) t[a] = n[a] } return t } function TR(r) { const t = []; for (let e = 0; e < r.length; e++)t.push(r[e].clone()); return t } function rE(r) { const t = r.getRenderTarget(); return t === null ? r.outputColorSpace : t.isXRRenderTarget === !0 ? t.texture.colorSpace : dn.workingColorSpace } const lE = { clone: Ch, merge: Ha }; var AR = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, RR = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`; class Br extends Ra { constructor(t) { super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = AR, this.fragmentShader = RR, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = { clipCullDistance: !1, multiDraw: !1 }, this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv1: [0, 0] }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, t !== void 0 && this.setValues(t) } copy(t) { return super.copy(t), this.fragmentShader = t.fragmentShader, this.vertexShader = t.vertexShader, this.uniforms = Ch(t.uniforms), this.uniformsGroups = TR(t.uniformsGroups), this.defines = Object.assign({}, t.defines), this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.fog = t.fog, this.lights = t.lights, this.clipping = t.clipping, this.extensions = Object.assign({}, t.extensions), this.glslVersion = t.glslVersion, this } toJSON(t) { const e = super.toJSON(t); e.glslVersion = this.glslVersion, e.uniforms = {}; for (const a in this.uniforms) { const f = this.uniforms[a].value; f && f.isTexture ? e.uniforms[a] = { type: "t", value: f.toJSON(t).uuid } : f && f.isColor ? e.uniforms[a] = { type: "c", value: f.getHex() } : f && f.isVector2 ? e.uniforms[a] = { type: "v2", value: f.toArray() } : f && f.isVector3 ? e.uniforms[a] = { type: "v3", value: f.toArray() } : f && f.isVector4 ? e.uniforms[a] = { type: "v4", value: f.toArray() } : f && f.isMatrix3 ? e.uniforms[a] = { type: "m3", value: f.toArray() } : f && f.isMatrix4 ? e.uniforms[a] = { type: "m4", value: f.toArray() } : e.uniforms[a] = { value: f } } Object.keys(this.defines).length > 0 && (e.defines = this.defines), e.vertexShader = this.vertexShader, e.fragmentShader = this.fragmentShader, e.lights = this.lights, e.clipping = this.clipping; const n = {}; for (const a in this.extensions) this.extensions[a] === !0 && (n[a] = !0); return Object.keys(n).length > 0 && (e.extensions = n), e } } class zv extends _n { constructor() { super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new Oe, this.projectionMatrix = new Oe, this.projectionMatrixInverse = new Oe, this.coordinateSystem = Lr } copy(t, e) { return super.copy(t, e), this.matrixWorldInverse.copy(t.matrixWorldInverse), this.projectionMatrix.copy(t.projectionMatrix), this.projectionMatrixInverse.copy(t.projectionMatrixInverse), this.coordinateSystem = t.coordinateSystem, this } getWorldDirection(t) { return super.getWorldDirection(t).negate() } updateMatrixWorld(t) { super.updateMatrixWorld(t), this.matrixWorldInverse.copy(this.matrixWorld).invert() } updateWorldMatrix(t, e) { super.updateWorldMatrix(t, e), this.matrixWorldInverse.copy(this.matrixWorld).invert() } clone() { return new this.constructor().copy(this) } } const mu = new k, d1 = new zt, p1 = new zt; class Ki extends zv { constructor(t = 50, e = 1, n = .1, a = 2e3) { super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = t, this.zoom = 1, this.near = n, this.far = a, this.focus = 10, this.aspect = e, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix() } copy(t, e) { return super.copy(t, e), this.fov = t.fov, this.zoom = t.zoom, this.near = t.near, this.far = t.far, this.focus = t.focus, this.aspect = t.aspect, this.view = t.view === null ? null : Object.assign({}, t.view), this.filmGauge = t.filmGauge, this.filmOffset = t.filmOffset, this } setFocalLength(t) { const e = .5 * this.getFilmHeight() / t; this.fov = Rh * 2 * Math.atan(e), this.updateProjectionMatrix() } getFocalLength() { const t = Math.tan(Gc * .5 * this.fov); return .5 * this.getFilmHeight() / t } getEffectiveFOV() { return Rh * 2 * Math.atan(Math.tan(Gc * .5 * this.fov) / this.zoom) } getFilmWidth() { return this.filmGauge * Math.min(this.aspect, 1) } getFilmHeight() { return this.filmGauge / Math.max(this.aspect, 1) } getViewBounds(t, e, n) { mu.set(-1, -1, .5).applyMatrix4(this.projectionMatrixInverse), e.set(mu.x, mu.y).multiplyScalar(-t / mu.z), mu.set(1, 1, .5).applyMatrix4(this.projectionMatrixInverse), n.set(mu.x, mu.y).multiplyScalar(-t / mu.z) } getViewSize(t, e) { return this.getViewBounds(t, d1, p1), e.subVectors(p1, d1) } setViewOffset(t, e, n, a, o, f) { this.aspect = t / e, this.view === null && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = a, this.view.width = o, this.view.height = f, this.updateProjectionMatrix() } clearViewOffset() { this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix() } updateProjectionMatrix() { const t = this.near; let e = t * Math.tan(Gc * .5 * this.fov) / this.zoom, n = 2 * e, a = this.aspect * n, o = -.5 * a; const f = this.view; if (this.view !== null && this.view.enabled) { const m = f.fullWidth, g = f.fullHeight; o += f.offsetX * a / m, e -= f.offsetY * n / g, a *= f.width / m, n *= f.height / g } const h = this.filmOffset; h !== 0 && (o += t * h / this.getFilmWidth()), this.projectionMatrix.makePerspective(o, o + a, e, e - n, t, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert() } toJSON(t) { const e = super.toJSON(t); return e.object.fov = this.fov, e.object.zoom = this.zoom, e.object.near = this.near, e.object.far = this.far, e.object.focus = this.focus, e.object.aspect = this.aspect, this.view !== null && (e.object.view = Object.assign({}, this.view)), e.object.filmGauge = this.filmGauge, e.object.filmOffset = this.filmOffset, e } } const oh = -90, uh = 1; class oE extends _n { constructor(t, e, n) { super(), this.type = "CubeCamera", this.renderTarget = n, this.coordinateSystem = null, this.activeMipmapLevel = 0; const a = new Ki(oh, uh, t, e); a.layers = this.layers, this.add(a); const o = new Ki(oh, uh, t, e); o.layers = this.layers, this.add(o); const f = new Ki(oh, uh, t, e); f.layers = this.layers, this.add(f); const h = new Ki(oh, uh, t, e); h.layers = this.layers, this.add(h); const m = new Ki(oh, uh, t, e); m.layers = this.layers, this.add(m); const g = new Ki(oh, uh, t, e); g.layers = this.layers, this.add(g) } updateCoordinateSystem() { const t = this.coordinateSystem, e = this.children.concat(), [n, a, o, f, h, m] = e; for (const g of e) this.remove(g); if (t === Lr) n.up.set(0, 1, 0), n.lookAt(1, 0, 0), a.up.set(0, 1, 0), a.lookAt(-1, 0, 0), o.up.set(0, 0, -1), o.lookAt(0, 1, 0), f.up.set(0, 0, 1), f.lookAt(0, -1, 0), h.up.set(0, 1, 0), h.lookAt(0, 0, 1), m.up.set(0, 1, 0), m.lookAt(0, 0, -1); else if (t === zp) n.up.set(0, -1, 0), n.lookAt(-1, 0, 0), a.up.set(0, -1, 0), a.lookAt(1, 0, 0), o.up.set(0, 0, 1), o.lookAt(0, 1, 0), f.up.set(0, 0, -1), f.lookAt(0, -1, 0), h.up.set(0, -1, 0), h.lookAt(0, 0, 1), m.up.set(0, -1, 0), m.lookAt(0, 0, -1); else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + t); for (const g of e) this.add(g), g.updateMatrixWorld() } update(t, e) { this.parent === null && this.updateMatrixWorld(); const { renderTarget: n, activeMipmapLevel: a } = this; this.coordinateSystem !== t.coordinateSystem && (this.coordinateSystem = t.coordinateSystem, this.updateCoordinateSystem()); const [o, f, h, m, g, _] = this.children, x = t.getRenderTarget(), S = t.getActiveCubeFace(), M = t.getActiveMipmapLevel(), A = t.xr.enabled; t.xr.enabled = !1; const C = n.texture.generateMipmaps; n.texture.generateMipmaps = !1, t.setRenderTarget(n, 0, a), t.render(e, o), t.setRenderTarget(n, 1, a), t.render(e, f), t.setRenderTarget(n, 2, a), t.render(e, h), t.setRenderTarget(n, 3, a), t.render(e, m), t.setRenderTarget(n, 4, a), t.render(e, g), n.texture.generateMipmaps = C, t.setRenderTarget(n, 5, a), t.render(e, _), t.setRenderTarget(x, S, M), t.xr.enabled = A, n.texture.needsPMREMUpdate = !0 } } class Kp extends yi { constructor(t, e, n, a, o, f, h, m, g, _) { t = t !== void 0 ? t : [], e = e !== void 0 ? e : xo, super(t, e, n, a, o, f, h, m, g, _), this.isCubeTexture = !0, this.flipY = !1 } get images() { return this.image } set images(t) { this.image = t } } class uE extends Rl {
	constructor(t = 1, e = {}) { super(t, t, e), this.isWebGLCubeRenderTarget = !0; const n = { width: t, height: t, depth: 1 }, a = [n, n, n, n, n, n]; this.texture = new Kp(a, e.mapping, e.wrapS, e.wrapT, e.magFilter, e.minFilter, e.format, e.type, e.anisotropy, e.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = e.generateMipmaps !== void 0 ? e.generateMipmaps : !1, this.texture.minFilter = e.minFilter !== void 0 ? e.minFilter : Li } fromEquirectangularTexture(t, e) {
		this.texture.type = e.type, this.texture.colorSpace = e.colorSpace, this.texture.generateMipmaps = e.generateMipmaps, this.texture.minFilter = e.minFilter, this.texture.magFilter = e.magFilter; const n = {
			uniforms: { tEquirect: { value: null } }, vertexShader: `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`, fragmentShader: `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`}, a = new Kc(5, 5, 5), o = new Br({ name: "CubemapFromEquirect", uniforms: Ch(n.uniforms), vertexShader: n.vertexShader, fragmentShader: n.fragmentShader, side: Va, blending: vo }); o.uniforms.tEquirect.value = e; const f = new wi(a, o), h = e.minFilter; return e.minFilter === bl && (e.minFilter = Li), new oE(1, 10, this).update(t, f), e.minFilter = h, f.geometry.dispose(), f.material.dispose(), this
	} clear(t, e, n, a) { const o = t.getRenderTarget(); for (let f = 0; f < 6; f++)t.setRenderTarget(this, f), t.clear(e, n, a); t.setRenderTarget(o) }
} class Sh extends _n { constructor() { super(), this.isGroup = !0, this.type = "Group" } } const wR = { type: "move" }; class C0 { constructor() { this._targetRay = null, this._grip = null, this._hand = null } getHandSpace() { return this._hand === null && (this._hand = new Sh, this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand } getTargetRaySpace() { return this._targetRay === null && (this._targetRay = new Sh, this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new k, this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new k), this._targetRay } getGripSpace() { return this._grip === null && (this._grip = new Sh, this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new k, this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new k), this._grip } dispatchEvent(t) { return this._targetRay !== null && this._targetRay.dispatchEvent(t), this._grip !== null && this._grip.dispatchEvent(t), this._hand !== null && this._hand.dispatchEvent(t), this } connect(t) { if (t && t.hand) { const e = this._hand; if (e) for (const n of t.hand.values()) this._getHandJoint(e, n) } return this.dispatchEvent({ type: "connected", data: t }), this } disconnect(t) { return this.dispatchEvent({ type: "disconnected", data: t }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this } update(t, e, n) { let a = null, o = null, f = null; const h = this._targetRay, m = this._grip, g = this._hand; if (t && e.session.visibilityState !== "visible-blurred") { if (g && t.hand) { f = !0; for (const C of t.hand.values()) { const R = e.getJointPose(C, n), T = this._getHandJoint(g, C); R !== null && (T.matrix.fromArray(R.transform.matrix), T.matrix.decompose(T.position, T.rotation, T.scale), T.matrixWorldNeedsUpdate = !0, T.jointRadius = R.radius), T.visible = R !== null } const _ = g.joints["index-finger-tip"], x = g.joints["thumb-tip"], S = _.position.distanceTo(x.position), M = .02, A = .005; g.inputState.pinching && S > M + A ? (g.inputState.pinching = !1, this.dispatchEvent({ type: "pinchend", handedness: t.handedness, target: this })) : !g.inputState.pinching && S <= M - A && (g.inputState.pinching = !0, this.dispatchEvent({ type: "pinchstart", handedness: t.handedness, target: this })) } else m !== null && t.gripSpace && (o = e.getPose(t.gripSpace, n), o !== null && (m.matrix.fromArray(o.transform.matrix), m.matrix.decompose(m.position, m.rotation, m.scale), m.matrixWorldNeedsUpdate = !0, o.linearVelocity ? (m.hasLinearVelocity = !0, m.linearVelocity.copy(o.linearVelocity)) : m.hasLinearVelocity = !1, o.angularVelocity ? (m.hasAngularVelocity = !0, m.angularVelocity.copy(o.angularVelocity)) : m.hasAngularVelocity = !1)); h !== null && (a = e.getPose(t.targetRaySpace, n), a === null && o !== null && (a = o), a !== null && (h.matrix.fromArray(a.transform.matrix), h.matrix.decompose(h.position, h.rotation, h.scale), h.matrixWorldNeedsUpdate = !0, a.linearVelocity ? (h.hasLinearVelocity = !0, h.linearVelocity.copy(a.linearVelocity)) : h.hasLinearVelocity = !1, a.angularVelocity ? (h.hasAngularVelocity = !0, h.angularVelocity.copy(a.angularVelocity)) : h.hasAngularVelocity = !1, this.dispatchEvent(wR))) } return h !== null && (h.visible = a !== null), m !== null && (m.visible = o !== null), g !== null && (g.visible = f !== null), this } _getHandJoint(t, e) { if (t.joints[e.jointName] === void 0) { const n = new Sh; n.matrixAutoUpdate = !1, n.visible = !1, t.joints[e.jointName] = n, t.add(n) } return t.joints[e.jointName] } } class Bv { constructor(t, e = 25e-5) { this.isFogExp2 = !0, this.name = "", this.color = new ce(t), this.density = e } clone() { return new Bv(this.color, this.density) } toJSON() { return { type: "FogExp2", name: this.name, color: this.color.getHex(), density: this.density } } } class Pv { constructor(t, e = 1, n = 1e3) { this.isFog = !0, this.name = "", this.color = new ce(t), this.near = e, this.far = n } clone() { return new Pv(this.color, this.near, this.far) } toJSON() { return { type: "Fog", name: this.name, color: this.color.getHex(), near: this.near, far: this.far } } } class Ox extends _n { constructor() { super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.backgroundRotation = new Ds, this.environmentIntensity = 1, this.environmentRotation = new Ds, this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this })) } copy(t, e) { return super.copy(t, e), t.background !== null && (this.background = t.background.clone()), t.environment !== null && (this.environment = t.environment.clone()), t.fog !== null && (this.fog = t.fog.clone()), this.backgroundBlurriness = t.backgroundBlurriness, this.backgroundIntensity = t.backgroundIntensity, this.backgroundRotation.copy(t.backgroundRotation), this.environmentIntensity = t.environmentIntensity, this.environmentRotation.copy(t.environmentRotation), t.overrideMaterial !== null && (this.overrideMaterial = t.overrideMaterial.clone()), this.matrixAutoUpdate = t.matrixAutoUpdate, this } toJSON(t) { const e = super.toJSON(t); return this.fog !== null && (e.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (e.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (e.object.backgroundIntensity = this.backgroundIntensity), e.object.backgroundRotation = this.backgroundRotation.toArray(), this.environmentIntensity !== 1 && (e.object.environmentIntensity = this.environmentIntensity), e.object.environmentRotation = this.environmentRotation.toArray(), e } } class Iv { constructor(t, e) { this.isInterleavedBuffer = !0, this.array = t, this.stride = e, this.count = t !== void 0 ? t.length / e : 0, this.usage = Lp, this.updateRanges = [], this.version = 0, this.uuid = Cs() } onUploadCallback() { } set needsUpdate(t) { t === !0 && this.version++ } setUsage(t) { return this.usage = t, this } addUpdateRange(t, e) { this.updateRanges.push({ start: t, count: e }) } clearUpdateRanges() { this.updateRanges.length = 0 } copy(t) { return this.array = new t.array.constructor(t.array), this.count = t.count, this.stride = t.stride, this.usage = t.usage, this } copyAt(t, e, n) { t *= this.stride, n *= e.stride; for (let a = 0, o = this.stride; a < o; a++)this.array[t + a] = e.array[n + a]; return this } set(t, e = 0) { return this.array.set(t, e), this } clone(t) { t.arrayBuffers === void 0 && (t.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Cs()), t.arrayBuffers[this.array.buffer._uuid] === void 0 && (t.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer); const e = new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(e, this.stride); return n.setUsage(this.usage), n } onUpload(t) { return this.onUploadCallback = t, this } toJSON(t) { return t.arrayBuffers === void 0 && (t.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Cs()), t.arrayBuffers[this.array.buffer._uuid] === void 0 && (t.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), { uuid: this.uuid, buffer: this.array.buffer._uuid, type: this.array.constructor.name, stride: this.stride } } } const Ia = new k; class kc { constructor(t, e, n, a = !1) { this.isInterleavedBufferAttribute = !0, this.name = "", this.data = t, this.itemSize = e, this.offset = n, this.normalized = a } get count() { return this.data.count } get array() { return this.data.array } set needsUpdate(t) { this.data.needsUpdate = t } applyMatrix4(t) { for (let e = 0, n = this.data.count; e < n; e++)Ia.fromBufferAttribute(this, e), Ia.applyMatrix4(t), this.setXYZ(e, Ia.x, Ia.y, Ia.z); return this } applyNormalMatrix(t) { for (let e = 0, n = this.count; e < n; e++)Ia.fromBufferAttribute(this, e), Ia.applyNormalMatrix(t), this.setXYZ(e, Ia.x, Ia.y, Ia.z); return this } transformDirection(t) { for (let e = 0, n = this.count; e < n; e++)Ia.fromBufferAttribute(this, e), Ia.transformDirection(t), this.setXYZ(e, Ia.x, Ia.y, Ia.z); return this } getComponent(t, e) { let n = this.array[t * this.data.stride + this.offset + e]; return this.normalized && (n = Fa(n, this.array)), n } setComponent(t, e, n) { return this.normalized && (n = Xe(n, this.array)), this.data.array[t * this.data.stride + this.offset + e] = n, this } setX(t, e) { return this.normalized && (e = Xe(e, this.array)), this.data.array[t * this.data.stride + this.offset] = e, this } setY(t, e) { return this.normalized && (e = Xe(e, this.array)), this.data.array[t * this.data.stride + this.offset + 1] = e, this } setZ(t, e) { return this.normalized && (e = Xe(e, this.array)), this.data.array[t * this.data.stride + this.offset + 2] = e, this } setW(t, e) { return this.normalized && (e = Xe(e, this.array)), this.data.array[t * this.data.stride + this.offset + 3] = e, this } getX(t) { let e = this.data.array[t * this.data.stride + this.offset]; return this.normalized && (e = Fa(e, this.array)), e } getY(t) { let e = this.data.array[t * this.data.stride + this.offset + 1]; return this.normalized && (e = Fa(e, this.array)), e } getZ(t) { let e = this.data.array[t * this.data.stride + this.offset + 2]; return this.normalized && (e = Fa(e, this.array)), e } getW(t) { let e = this.data.array[t * this.data.stride + this.offset + 3]; return this.normalized && (e = Fa(e, this.array)), e } setXY(t, e, n) { return t = t * this.data.stride + this.offset, this.normalized && (e = Xe(e, this.array), n = Xe(n, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = n, this } setXYZ(t, e, n, a) { return t = t * this.data.stride + this.offset, this.normalized && (e = Xe(e, this.array), n = Xe(n, this.array), a = Xe(a, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = n, this.data.array[t + 2] = a, this } setXYZW(t, e, n, a, o) { return t = t * this.data.stride + this.offset, this.normalized && (e = Xe(e, this.array), n = Xe(n, this.array), a = Xe(a, this.array), o = Xe(o, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = n, this.data.array[t + 2] = a, this.data.array[t + 3] = o, this } clone(t) { if (t === void 0) { console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data."); const e = []; for (let n = 0; n < this.count; n++) { const a = n * this.data.stride + this.offset; for (let o = 0; o < this.itemSize; o++)e.push(this.data.array[a + o]) } return new Pn(new this.array.constructor(e), this.itemSize, this.normalized) } else return t.interleavedBuffers === void 0 && (t.interleavedBuffers = {}), t.interleavedBuffers[this.data.uuid] === void 0 && (t.interleavedBuffers[this.data.uuid] = this.data.clone(t)), new kc(t.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized) } toJSON(t) { if (t === void 0) { console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data."); const e = []; for (let n = 0; n < this.count; n++) { const a = n * this.data.stride + this.offset; for (let o = 0; o < this.itemSize; o++)e.push(this.data.array[a + o]) } return { itemSize: this.itemSize, type: this.array.constructor.name, array: e, normalized: this.normalized } } else return t.interleavedBuffers === void 0 && (t.interleavedBuffers = {}), t.interleavedBuffers[this.data.uuid] === void 0 && (t.interleavedBuffers[this.data.uuid] = this.data.toJSON(t)), { isInterleavedBufferAttribute: !0, itemSize: this.itemSize, data: this.data.uuid, offset: this.offset, normalized: this.normalized } } } class Lx extends Ra { constructor(t) { super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new ce(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.color.copy(t.color), this.map = t.map, this.alphaMap = t.alphaMap, this.rotation = t.rotation, this.sizeAttenuation = t.sizeAttenuation, this.fog = t.fog, this } } let ch; const ip = new k, fh = new k, hh = new k, dh = new zt, ap = new zt, cE = new Oe, Kg = new k, sp = new k, Jg = new k, m1 = new zt, l_ = new zt, g1 = new zt; class fE extends _n { constructor(t = new Lx) { if (super(), this.isSprite = !0, this.type = "Sprite", ch === void 0) { ch = new Qe; const e = new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]), n = new Iv(e, 5); ch.setIndex([0, 1, 2, 0, 2, 3]), ch.setAttribute("position", new kc(n, 3, 0, !1)), ch.setAttribute("uv", new kc(n, 2, 3, !1)) } this.geometry = ch, this.material = t, this.center = new zt(.5, .5) } raycast(t, e) { t.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), fh.setFromMatrixScale(this.matrixWorld), cE.copy(t.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse, this.matrixWorld), hh.setFromMatrixPosition(this.modelViewMatrix), t.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && fh.multiplyScalar(-hh.z); const n = this.material.rotation; let a, o; n !== 0 && (o = Math.cos(n), a = Math.sin(n)); const f = this.center; $g(Kg.set(-.5, -.5, 0), hh, f, fh, a, o), $g(sp.set(.5, -.5, 0), hh, f, fh, a, o), $g(Jg.set(.5, .5, 0), hh, f, fh, a, o), m1.set(0, 0), l_.set(1, 0), g1.set(1, 1); let h = t.ray.intersectTriangle(Kg, sp, Jg, !1, ip); if (h === null && ($g(sp.set(-.5, .5, 0), hh, f, fh, a, o), l_.set(0, 1), h = t.ray.intersectTriangle(Kg, Jg, sp, !1, ip), h === null)) return; const m = t.ray.origin.distanceTo(ip); m < t.near || m > t.far || e.push({ distance: m, point: ip.clone(), uv: os.getInterpolation(ip, Kg, sp, Jg, m1, l_, g1, new zt), face: null, object: this }) } copy(t, e) { return super.copy(t, e), t.center !== void 0 && this.center.copy(t.center), this.material = t.material, this } } function $g(r, t, e, n, a, o) { dh.subVectors(r, e).addScalar(.5).multiply(n), a !== void 0 ? (ap.x = o * dh.x - a * dh.y, ap.y = a * dh.x + o * dh.y) : ap.copy(dh), r.copy(t), r.x += ap.x, r.y += ap.y, r.applyMatrix4(cE) } const t0 = new k, v1 = new k; class hE extends _n { constructor() { super(), this.isLOD = !0, this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, { levels: { enumerable: !0, value: [] } }), this.autoUpdate = !0 } copy(t) { super.copy(t, !1); const e = t.levels; for (let n = 0, a = e.length; n < a; n++) { const o = e[n]; this.addLevel(o.object.clone(), o.distance, o.hysteresis) } return this.autoUpdate = t.autoUpdate, this } addLevel(t, e = 0, n = 0) { e = Math.abs(e); const a = this.levels; let o; for (o = 0; o < a.length && !(e < a[o].distance); o++); return a.splice(o, 0, { distance: e, hysteresis: n, object: t }), this.add(t), this } removeLevel(t) { const e = this.levels; for (let n = 0; n < e.length; n++)if (e[n].distance === t) { const a = e.splice(n, 1); return this.remove(a[0].object), !0 } return !1 } getCurrentLevel() { return this._currentLevel } getObjectForDistance(t) { const e = this.levels; if (e.length > 0) { let n, a; for (n = 1, a = e.length; n < a; n++) { let o = e[n].distance; if (e[n].object.visible && (o -= o * e[n].hysteresis), t < o) break } return e[n - 1].object } return null } raycast(t, e) { if (this.levels.length > 0) { t0.setFromMatrixPosition(this.matrixWorld); const a = t.ray.origin.distanceTo(t0); this.getObjectForDistance(a).raycast(t, e) } } update(t) { const e = this.levels; if (e.length > 1) { t0.setFromMatrixPosition(t.matrixWorld), v1.setFromMatrixPosition(this.matrixWorld); const n = t0.distanceTo(v1) / t.zoom; e[0].object.visible = !0; let a, o; for (a = 1, o = e.length; a < o; a++) { let f = e[a].distance; if (e[a].object.visible && (f -= f * e[a].hysteresis), n >= f) e[a - 1].object.visible = !1, e[a].object.visible = !0; else break } for (this._currentLevel = a - 1; a < o; a++)e[a].object.visible = !1 } } toJSON(t) { const e = super.toJSON(t); this.autoUpdate === !1 && (e.object.autoUpdate = !1), e.object.levels = []; const n = this.levels; for (let a = 0, o = n.length; a < o; a++) { const f = n[a]; e.object.levels.push({ object: f.object.uuid, distance: f.distance, hysteresis: f.hysteresis }) } return e } } const y1 = new k, _1 = new yn, x1 = new yn, CR = new k, S1 = new Oe, e0 = new k, o_ = new Aa, M1 = new Oe, u_ = new Bh; class dE extends wi { constructor(t, e) { super(t, e), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = J_, this.bindMatrix = new Oe, this.bindMatrixInverse = new Oe, this.boundingBox = null, this.boundingSphere = null } computeBoundingBox() { const t = this.geometry; this.boundingBox === null && (this.boundingBox = new Ga), this.boundingBox.makeEmpty(); const e = t.getAttribute("position"); for (let n = 0; n < e.count; n++)this.getVertexPosition(n, e0), this.boundingBox.expandByPoint(e0) } computeBoundingSphere() { const t = this.geometry; this.boundingSphere === null && (this.boundingSphere = new Aa), this.boundingSphere.makeEmpty(); const e = t.getAttribute("position"); for (let n = 0; n < e.count; n++)this.getVertexPosition(n, e0), this.boundingSphere.expandByPoint(e0) } copy(t, e) { return super.copy(t, e), this.bindMode = t.bindMode, this.bindMatrix.copy(t.bindMatrix), this.bindMatrixInverse.copy(t.bindMatrixInverse), this.skeleton = t.skeleton, t.boundingBox !== null && (this.boundingBox = t.boundingBox.clone()), t.boundingSphere !== null && (this.boundingSphere = t.boundingSphere.clone()), this } raycast(t, e) { const n = this.material, a = this.matrixWorld; n !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), o_.copy(this.boundingSphere), o_.applyMatrix4(a), t.ray.intersectsSphere(o_) !== !1 && (M1.copy(a).invert(), u_.copy(t.ray).applyMatrix4(M1), !(this.boundingBox !== null && u_.intersectsBox(this.boundingBox) === !1) && this._computeIntersections(t, e, u_))) } getVertexPosition(t, e) { return super.getVertexPosition(t, e), this.applyBoneTransform(t, e), e } bind(t, e) { this.skeleton = t, e === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), e = this.matrixWorld), this.bindMatrix.copy(e), this.bindMatrixInverse.copy(e).invert() } pose() { this.skeleton.pose() } normalizeSkinWeights() { const t = new yn, e = this.geometry.attributes.skinWeight; for (let n = 0, a = e.count; n < a; n++) { t.fromBufferAttribute(e, n); const o = 1 / t.manhattanLength(); o !== 1 / 0 ? t.multiplyScalar(o) : t.set(1, 0, 0, 0), e.setXYZW(n, t.x, t.y, t.z, t.w) } } updateMatrixWorld(t) { super.updateMatrixWorld(t), this.bindMode === J_ ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === Gb ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode) } applyBoneTransform(t, e) { const n = this.skeleton, a = this.geometry; _1.fromBufferAttribute(a.attributes.skinIndex, t), x1.fromBufferAttribute(a.attributes.skinWeight, t), y1.copy(e).applyMatrix4(this.bindMatrix), e.set(0, 0, 0); for (let o = 0; o < 4; o++) { const f = x1.getComponent(o); if (f !== 0) { const h = _1.getComponent(o); S1.multiplyMatrices(n.bones[h].matrixWorld, n.boneInverses[h]), e.addScaledVector(CR.copy(y1).applyMatrix4(S1), f) } } return e.applyMatrix4(this.bindMatrixInverse) } } class zx extends _n { constructor() { super(), this.isBone = !0, this.type = "Bone" } } class Tl extends yi { constructor(t = null, e = 1, n = 1, a, o, f, h, m, g = ua, _ = ua, x, S) { super(null, f, h, m, g, _, a, o, x, S), this.isDataTexture = !0, this.image = { data: t, width: e, height: n }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1 } } const b1 = new Oe, DR = new Oe; class Hv { constructor(t = [], e = []) { this.uuid = Cs(), this.bones = t.slice(0), this.boneInverses = e, this.boneMatrices = null, this.boneTexture = null, this.init() } init() { const t = this.bones, e = this.boneInverses; if (this.boneMatrices = new Float32Array(t.length * 16), e.length === 0) this.calculateInverses(); else if (t.length !== e.length) { console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = []; for (let n = 0, a = this.bones.length; n < a; n++)this.boneInverses.push(new Oe) } } calculateInverses() { this.boneInverses.length = 0; for (let t = 0, e = this.bones.length; t < e; t++) { const n = new Oe; this.bones[t] && n.copy(this.bones[t].matrixWorld).invert(), this.boneInverses.push(n) } } pose() { for (let t = 0, e = this.bones.length; t < e; t++) { const n = this.bones[t]; n && n.matrixWorld.copy(this.boneInverses[t]).invert() } for (let t = 0, e = this.bones.length; t < e; t++) { const n = this.bones[t]; n && (n.parent && n.parent.isBone ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld)) : n.matrix.copy(n.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale)) } } update() { const t = this.bones, e = this.boneInverses, n = this.boneMatrices, a = this.boneTexture; for (let o = 0, f = t.length; o < f; o++) { const h = t[o] ? t[o].matrixWorld : DR; b1.multiplyMatrices(h, e[o]), b1.toArray(n, o * 16) } a !== null && (a.needsUpdate = !0) } clone() { return new Hv(this.bones, this.boneInverses) } computeBoneTexture() { let t = Math.sqrt(this.bones.length * 4); t = Math.ceil(t / 4) * 4, t = Math.max(t, 4); const e = new Float32Array(t * t * 4); e.set(this.boneMatrices); const n = new Tl(e, t, t, Ta, us); return n.needsUpdate = !0, this.boneMatrices = e, this.boneTexture = n, this } getBoneByName(t) { for (let e = 0, n = this.bones.length; e < n; e++) { const a = this.bones[e]; if (a.name === t) return a } } dispose() { this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null) } fromJSON(t, e) { this.uuid = t.uuid; for (let n = 0, a = t.bones.length; n < a; n++) { const o = t.bones[n]; let f = e[o]; f === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", o), f = new zx), this.bones.push(f), this.boneInverses.push(new Oe().fromArray(t.boneInverses[n])) } return this.init(), this } toJSON() { const t = { metadata: { version: 4.6, type: "Skeleton", generator: "Skeleton.toJSON" }, bones: [], boneInverses: [] }; t.uuid = this.uuid; const e = this.bones, n = this.boneInverses; for (let a = 0, o = e.length; a < o; a++) { const f = e[a]; t.bones.push(f.uuid); const h = n[a]; t.boneInverses.push(h.toArray()) } return t } } class Dh extends Pn { constructor(t, e, n, a = 1) { super(t, e, n), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = a } copy(t) { return super.copy(t), this.meshPerAttribute = t.meshPerAttribute, this } toJSON() { const t = super.toJSON(); return t.meshPerAttribute = this.meshPerAttribute, t.isInstancedBufferAttribute = !0, t } } const ph = new Oe, E1 = new Oe, n0 = [], T1 = new Ga, UR = new Oe, rp = new wi, lp = new Aa; class pE extends wi { constructor(t, e, n) { super(t, e), this.isInstancedMesh = !0, this.instanceMatrix = new Dh(new Float32Array(n * 16), 16), this.instanceColor = null, this.morphTexture = null, this.count = n, this.boundingBox = null, this.boundingSphere = null; for (let a = 0; a < n; a++)this.setMatrixAt(a, UR) } computeBoundingBox() { const t = this.geometry, e = this.count; this.boundingBox === null && (this.boundingBox = new Ga), t.boundingBox === null && t.computeBoundingBox(), this.boundingBox.makeEmpty(); for (let n = 0; n < e; n++)this.getMatrixAt(n, ph), T1.copy(t.boundingBox).applyMatrix4(ph), this.boundingBox.union(T1) } computeBoundingSphere() { const t = this.geometry, e = this.count; this.boundingSphere === null && (this.boundingSphere = new Aa), t.boundingSphere === null && t.computeBoundingSphere(), this.boundingSphere.makeEmpty(); for (let n = 0; n < e; n++)this.getMatrixAt(n, ph), lp.copy(t.boundingSphere).applyMatrix4(ph), this.boundingSphere.union(lp) } copy(t, e) { return super.copy(t, e), this.instanceMatrix.copy(t.instanceMatrix), t.morphTexture !== null && (this.morphTexture = t.morphTexture.clone()), t.instanceColor !== null && (this.instanceColor = t.instanceColor.clone()), this.count = t.count, t.boundingBox !== null && (this.boundingBox = t.boundingBox.clone()), t.boundingSphere !== null && (this.boundingSphere = t.boundingSphere.clone()), this } getColorAt(t, e) { e.fromArray(this.instanceColor.array, t * 3) } getMatrixAt(t, e) { e.fromArray(this.instanceMatrix.array, t * 16) } getMorphAt(t, e) { const n = e.morphTargetInfluences, a = this.morphTexture.source.data.data, o = n.length + 1, f = t * o + 1; for (let h = 0; h < n.length; h++)n[h] = a[f + h] } raycast(t, e) { const n = this.matrixWorld, a = this.count; if (rp.geometry = this.geometry, rp.material = this.material, rp.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), lp.copy(this.boundingSphere), lp.applyMatrix4(n), t.ray.intersectsSphere(lp) !== !1)) for (let o = 0; o < a; o++) { this.getMatrixAt(o, ph), E1.multiplyMatrices(n, ph), rp.matrixWorld = E1, rp.raycast(t, n0); for (let f = 0, h = n0.length; f < h; f++) { const m = n0[f]; m.instanceId = o, m.object = this, e.push(m) } n0.length = 0 } } setColorAt(t, e) { this.instanceColor === null && (this.instanceColor = new Dh(new Float32Array(this.instanceMatrix.count * 3).fill(1), 3)), e.toArray(this.instanceColor.array, t * 3) } setMatrixAt(t, e) { e.toArray(this.instanceMatrix.array, t * 16) } setMorphAt(t, e) { const n = e.morphTargetInfluences, a = n.length + 1; this.morphTexture === null && (this.morphTexture = new Tl(new Float32Array(a * this.count), a, this.count, Cv, us)); const o = this.morphTexture.source.data.data; let f = 0; for (let g = 0; g < n.length; g++)f += n[g]; const h = this.geometry.morphTargetsRelative ? 1 : 1 - f, m = a * t; o[m] = h, o.set(n, m + 1) } updateMorphTargets() { } dispose() { this.dispatchEvent({ type: "dispose" }), this.morphTexture !== null && (this.morphTexture.dispose(), this.morphTexture = null) } } const c_ = new k, NR = new k, OR = new Ge; class vu { constructor(t = new k(1, 0, 0), e = 0) { this.isPlane = !0, this.normal = t, this.constant = e } set(t, e) { return this.normal.copy(t), this.constant = e, this } setComponents(t, e, n, a) { return this.normal.set(t, e, n), this.constant = a, this } setFromNormalAndCoplanarPoint(t, e) { return this.normal.copy(t), this.constant = -e.dot(this.normal), this } setFromCoplanarPoints(t, e, n) { const a = c_.subVectors(n, e).cross(NR.subVectors(t, e)).normalize(); return this.setFromNormalAndCoplanarPoint(a, t), this } copy(t) { return this.normal.copy(t.normal), this.constant = t.constant, this } normalize() { const t = 1 / this.normal.length(); return this.normal.multiplyScalar(t), this.constant *= t, this } negate() { return this.constant *= -1, this.normal.negate(), this } distanceToPoint(t) { return this.normal.dot(t) + this.constant } distanceToSphere(t) { return this.distanceToPoint(t.center) - t.radius } projectPoint(t, e) { return e.copy(t).addScaledVector(this.normal, -this.distanceToPoint(t)) } intersectLine(t, e) { const n = t.delta(c_), a = this.normal.dot(n); if (a === 0) return this.distanceToPoint(t.start) === 0 ? e.copy(t.start) : null; const o = -(t.start.dot(this.normal) + this.constant) / a; return o < 0 || o > 1 ? null : e.copy(t.start).addScaledVector(n, o) } intersectsLine(t) { const e = this.distanceToPoint(t.start), n = this.distanceToPoint(t.end); return e < 0 && n > 0 || n < 0 && e > 0 } intersectsBox(t) { return t.intersectsPlane(this) } intersectsSphere(t) { return t.intersectsPlane(this) } coplanarPoint(t) { return t.copy(this.normal).multiplyScalar(-this.constant) } applyMatrix4(t, e) { const n = e || OR.getNormalMatrix(t), a = this.coplanarPoint(c_).applyMatrix4(t), o = this.normal.applyMatrix3(n).normalize(); return this.constant = -a.dot(o), this } translate(t) { return this.constant -= t.dot(this.normal), this } equals(t) { return t.normal.equals(this.normal) && t.constant === this.constant } clone() { return new this.constructor().copy(this) } } const Sc = new Aa, i0 = new k; class Jp { constructor(t = new vu, e = new vu, n = new vu, a = new vu, o = new vu, f = new vu) { this.planes = [t, e, n, a, o, f] } set(t, e, n, a, o, f) { const h = this.planes; return h[0].copy(t), h[1].copy(e), h[2].copy(n), h[3].copy(a), h[4].copy(o), h[5].copy(f), this } copy(t) { const e = this.planes; for (let n = 0; n < 6; n++)e[n].copy(t.planes[n]); return this } setFromProjectionMatrix(t, e = Lr) { const n = this.planes, a = t.elements, o = a[0], f = a[1], h = a[2], m = a[3], g = a[4], _ = a[5], x = a[6], S = a[7], M = a[8], A = a[9], C = a[10], R = a[11], T = a[12], D = a[13], N = a[14], U = a[15]; if (n[0].setComponents(m - o, S - g, R - M, U - T).normalize(), n[1].setComponents(m + o, S + g, R + M, U + T).normalize(), n[2].setComponents(m + f, S + _, R + A, U + D).normalize(), n[3].setComponents(m - f, S - _, R - A, U - D).normalize(), n[4].setComponents(m - h, S - x, R - C, U - N).normalize(), e === Lr) n[5].setComponents(m + h, S + x, R + C, U + N).normalize(); else if (e === zp) n[5].setComponents(h, x, C, N).normalize(); else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + e); return this } intersectsObject(t) { if (t.boundingSphere !== void 0) t.boundingSphere === null && t.computeBoundingSphere(), Sc.copy(t.boundingSphere).applyMatrix4(t.matrixWorld); else { const e = t.geometry; e.boundingSphere === null && e.computeBoundingSphere(), Sc.copy(e.boundingSphere).applyMatrix4(t.matrixWorld) } return this.intersectsSphere(Sc) } intersectsSprite(t) { return Sc.center.set(0, 0, 0), Sc.radius = .7071067811865476, Sc.applyMatrix4(t.matrixWorld), this.intersectsSphere(Sc) } intersectsSphere(t) { const e = this.planes, n = t.center, a = -t.radius; for (let o = 0; o < 6; o++)if (e[o].distanceToPoint(n) < a) return !1; return !0 } intersectsBox(t) { const e = this.planes; for (let n = 0; n < 6; n++) { const a = e[n]; if (i0.x = a.normal.x > 0 ? t.max.x : t.min.x, i0.y = a.normal.y > 0 ? t.max.y : t.min.y, i0.z = a.normal.z > 0 ? t.max.z : t.min.z, a.distanceToPoint(i0) < 0) return !1 } return !0 } containsPoint(t) { const e = this.planes; for (let n = 0; n < 6; n++)if (e[n].distanceToPoint(t) < 0) return !1; return !0 } clone() { return new this.constructor().copy(this) } } function f_(r, t) { return r - t } function LR(r, t) { return r.z - t.z } function zR(r, t) { return t.z - r.z } class BR { constructor() { this.index = 0, this.pool = [], this.list = [] } push(t, e, n, a) { const o = this.pool, f = this.list; this.index >= o.length && o.push({ start: -1, count: -1, z: -1, index: -1 }); const h = o[this.index]; f.push(h), this.index++, h.start = t, h.count = e, h.z = n, h.index = a } reset() { this.list.length = 0, this.index = 0 } } const ss = new Oe, PR = new ce(1, 1, 1), h_ = new Jp, a0 = new Ga, Mc = new Aa, op = new k, A1 = new k, IR = new k, d_ = new BR, Ma = new wi, s0 = []; function HR(r, t, e = 0) { const n = t.itemSize; if (r.isInterleavedBufferAttribute || r.array.constructor !== t.array.constructor) { const a = r.count; for (let o = 0; o < a; o++)for (let f = 0; f < n; f++)t.setComponent(o + e, f, r.getComponent(o, f)) } else t.array.set(r.array, e * n); t.needsUpdate = !0 } function bc(r, t) { if (r.constructor !== t.constructor) { const e = Math.min(r.length, t.length); for (let n = 0; n < e; n++)t[n] = r[n] } else { const e = Math.min(r.length, t.length); t.set(new r.constructor(r.buffer, 0, e)) } } class mE extends wi { constructor(t, e, n = e * 2, a) { super(new Qe, a), this.isBatchedMesh = !0, this.perObjectFrustumCulled = !0, this.sortObjects = !0, this.boundingBox = null, this.boundingSphere = null, this.customSort = null, this._instanceInfo = [], this._geometryInfo = [], this._availableInstanceIds = [], this._availableGeometryIds = [], this._nextIndexStart = 0, this._nextVertexStart = 0, this._geometryCount = 0, this._visibilityChanged = !0, this._geometryInitialized = !1, this._maxInstanceCount = t, this._maxVertexCount = e, this._maxIndexCount = n, this._multiDrawCounts = new Int32Array(t), this._multiDrawStarts = new Int32Array(t), this._multiDrawCount = 0, this._multiDrawInstances = null, this._matricesTexture = null, this._indirectTexture = null, this._colorsTexture = null, this._initMatricesTexture(), this._initIndirectTexture() } get maxInstanceCount() { return this._maxInstanceCount } get instanceCount() { return this._instanceInfo.length - this._availableInstanceIds.length } get unusedVertexCount() { return this._maxVertexCount - this._nextVertexStart } get unusedIndexCount() { return this._maxIndexCount - this._nextIndexStart } _initMatricesTexture() { let t = Math.sqrt(this._maxInstanceCount * 4); t = Math.ceil(t / 4) * 4, t = Math.max(t, 4); const e = new Float32Array(t * t * 4), n = new Tl(e, t, t, Ta, us); this._matricesTexture = n } _initIndirectTexture() { let t = Math.sqrt(this._maxInstanceCount); t = Math.ceil(t); const e = new Uint32Array(t * t), n = new Tl(e, t, t, Zp, So); this._indirectTexture = n } _initColorsTexture() { let t = Math.sqrt(this._maxInstanceCount); t = Math.ceil(t); const e = new Float32Array(t * t * 4).fill(1), n = new Tl(e, t, t, Ta, us); n.colorSpace = dn.workingColorSpace, this._colorsTexture = n } _initializeGeometry(t) { const e = this.geometry, n = this._maxVertexCount, a = this._maxIndexCount; if (this._geometryInitialized === !1) { for (const o in t.attributes) { const f = t.getAttribute(o), { array: h, itemSize: m, normalized: g } = f, _ = new h.constructor(n * m), x = new Pn(_, m, g); e.setAttribute(o, x) } if (t.getIndex() !== null) { const o = n > 65535 ? new Uint32Array(a) : new Uint16Array(a); e.setIndex(new Pn(o, 1)) } this._geometryInitialized = !0 } } _validateGeometry(t) { const e = this.geometry; if (!!t.getIndex() != !!e.getIndex()) throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".'); for (const n in e.attributes) { if (!t.hasAttribute(n)) throw new Error(`THREE.BatchedMesh: Added geometry missing "${n}". All geometries must have consistent attributes.`); const a = t.getAttribute(n), o = e.getAttribute(n); if (a.itemSize !== o.itemSize || a.normalized !== o.normalized) throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.") } } validateInstanceId(t) { const e = this._instanceInfo; if (t < 0 || t >= e.length || e[t].active === !1) throw new Error(`THREE.BatchedMesh: Invalid instanceId ${t}. Instance is either out of range or has been deleted.`) } validateGeometryId(t) { const e = this._geometryInfo; if (t < 0 || t >= e.length || e[t].active === !1) throw new Error(`THREE.BatchedMesh: Invalid geometryId ${t}. Geometry is either out of range or has been deleted.`) } setCustomSort(t) { return this.customSort = t, this } computeBoundingBox() { this.boundingBox === null && (this.boundingBox = new Ga); const t = this.boundingBox, e = this._instanceInfo; t.makeEmpty(); for (let n = 0, a = e.length; n < a; n++) { if (e[n].active === !1) continue; const o = e[n].geometryIndex; this.getMatrixAt(n, ss), this.getBoundingBoxAt(o, a0).applyMatrix4(ss), t.union(a0) } } computeBoundingSphere() { this.boundingSphere === null && (this.boundingSphere = new Aa); const t = this.boundingSphere, e = this._instanceInfo; t.makeEmpty(); for (let n = 0, a = e.length; n < a; n++) { if (e[n].active === !1) continue; const o = e[n].geometryIndex; this.getMatrixAt(n, ss), this.getBoundingSphereAt(o, Mc).applyMatrix4(ss), t.union(Mc) } } addInstance(t) { if (this._instanceInfo.length >= this.maxInstanceCount && this._availableInstanceIds.length === 0) throw new Error("THREE.BatchedMesh: Maximum item count reached."); const n = { visible: !0, active: !0, geometryIndex: t }; let a = null; this._availableInstanceIds.length > 0 ? (this._availableInstanceIds.sort(f_), a = this._availableInstanceIds.shift(), this._instanceInfo[a] = n) : (a = this._instanceInfo.length, this._instanceInfo.push(n)); const o = this._matricesTexture; ss.identity().toArray(o.image.data, a * 16), o.needsUpdate = !0; const f = this._colorsTexture; return f && (PR.toArray(f.image.data, a * 4), f.needsUpdate = !0), this._visibilityChanged = !0, a } addGeometry(t, e = -1, n = -1) { this._initializeGeometry(t), this._validateGeometry(t); const a = { vertexStart: -1, vertexCount: -1, reservedVertexCount: -1, indexStart: -1, indexCount: -1, reservedIndexCount: -1, start: -1, count: -1, boundingBox: null, boundingSphere: null, active: !0 }, o = this._geometryInfo; a.vertexStart = this._nextVertexStart, a.reservedVertexCount = e === -1 ? t.getAttribute("position").count : e; const f = t.getIndex(); if (f !== null && (a.indexStart = this._nextIndexStart, a.reservedIndexCount = n === -1 ? f.count : n), a.indexStart !== -1 && a.indexStart + a.reservedIndexCount > this._maxIndexCount || a.vertexStart + a.reservedVertexCount > this._maxVertexCount) throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size."); let m; return this._availableGeometryIds.length > 0 ? (this._availableGeometryIds.sort(f_), m = this._availableGeometryIds.shift(), o[m] = a) : (m = this._geometryCount, this._geometryCount++, o.push(a)), this.setGeometryAt(m, t), this._nextIndexStart = a.indexStart + a.reservedIndexCount, this._nextVertexStart = a.vertexStart + a.reservedVertexCount, m } setGeometryAt(t, e) { if (t >= this._geometryCount) throw new Error("THREE.BatchedMesh: Maximum geometry count reached."); this._validateGeometry(e); const n = this.geometry, a = n.getIndex() !== null, o = n.getIndex(), f = e.getIndex(), h = this._geometryInfo[t]; if (a && f.count > h.reservedIndexCount || e.attributes.position.count > h.reservedVertexCount) throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry."); const m = h.vertexStart, g = h.reservedVertexCount; h.vertexCount = e.getAttribute("position").count; for (const _ in n.attributes) { const x = e.getAttribute(_), S = n.getAttribute(_); HR(x, S, m); const M = x.itemSize; for (let A = x.count, C = g; A < C; A++) { const R = m + A; for (let T = 0; T < M; T++)S.setComponent(R, T, 0) } S.needsUpdate = !0, S.addUpdateRange(m * M, g * M) } if (a) { const _ = h.indexStart, x = h.reservedIndexCount; h.indexCount = e.getIndex().count; for (let S = 0; S < f.count; S++)o.setX(_ + S, m + f.getX(S)); for (let S = f.count, M = x; S < M; S++)o.setX(_ + S, m); o.needsUpdate = !0, o.addUpdateRange(_, h.reservedIndexCount) } return h.start = a ? h.indexStart : h.vertexStart, h.count = a ? h.indexCount : h.vertexCount, h.boundingBox = null, e.boundingBox !== null && (h.boundingBox = e.boundingBox.clone()), h.boundingSphere = null, e.boundingSphere !== null && (h.boundingSphere = e.boundingSphere.clone()), this._visibilityChanged = !0, t } deleteGeometry(t) { const e = this._geometryInfo; if (t >= e.length || e[t].active === !1) return this; const n = this._instanceInfo; for (let a = 0, o = n.length; a < o; a++)n[a].active && n[a].geometryIndex === t && this.deleteInstance(a); return e[t].active = !1, this._availableGeometryIds.push(t), this._visibilityChanged = !0, this } deleteInstance(t) { return this.validateInstanceId(t), this._instanceInfo[t].active = !1, this._availableInstanceIds.push(t), this._visibilityChanged = !0, this } optimize() { let t = 0, e = 0; const n = this._geometryInfo, a = n.map((f, h) => h).sort((f, h) => n[f].vertexStart - n[h].vertexStart), o = this.geometry; for (let f = 0, h = n.length; f < h; f++) { const m = a[f], g = n[m]; if (g.active !== !1) { if (o.index !== null) { if (g.indexStart !== e) { const { indexStart: _, vertexStart: x, reservedIndexCount: S } = g, M = o.index, A = M.array, C = t - x; for (let R = _; R < _ + S; R++)A[R] = A[R] + C; M.array.copyWithin(e, _, _ + S), M.addUpdateRange(e, S), g.indexStart = e } e += g.reservedIndexCount } if (g.vertexStart !== t) { const { vertexStart: _, reservedVertexCount: x } = g, S = o.attributes; for (const M in S) { const A = S[M], { array: C, itemSize: R } = A; C.copyWithin(t * R, _ * R, (_ + x) * R), A.addUpdateRange(t * R, x * R) } g.vertexStart = t } t += g.reservedVertexCount, g.start = o.index ? g.indexStart : g.vertexStart, this._nextIndexStart = o.index ? g.indexStart + g.reservedIndexCount : 0, this._nextVertexStart = g.vertexStart + g.reservedVertexCount } } return this } getBoundingBoxAt(t, e) { if (t >= this._geometryCount) return null; const n = this.geometry, a = this._geometryInfo[t]; if (a.boundingBox === null) { const o = new Ga, f = n.index, h = n.attributes.position; for (let m = a.start, g = a.start + a.count; m < g; m++) { let _ = m; f && (_ = f.getX(_)), o.expandByPoint(op.fromBufferAttribute(h, _)) } a.boundingBox = o } return e.copy(a.boundingBox), e } getBoundingSphereAt(t, e) { if (t >= this._geometryCount) return null; const n = this.geometry, a = this._geometryInfo[t]; if (a.boundingSphere === null) { const o = new Aa; this.getBoundingBoxAt(t, a0), a0.getCenter(o.center); const f = n.index, h = n.attributes.position; let m = 0; for (let g = a.start, _ = a.start + a.count; g < _; g++) { let x = g; f && (x = f.getX(x)), op.fromBufferAttribute(h, x), m = Math.max(m, o.center.distanceToSquared(op)) } o.radius = Math.sqrt(m), a.boundingSphere = o } return e.copy(a.boundingSphere), e } setMatrixAt(t, e) { this.validateInstanceId(t); const n = this._matricesTexture, a = this._matricesTexture.image.data; return e.toArray(a, t * 16), n.needsUpdate = !0, this } getMatrixAt(t, e) { return this.validateInstanceId(t), e.fromArray(this._matricesTexture.image.data, t * 16) } setColorAt(t, e) { return this.validateInstanceId(t), this._colorsTexture === null && this._initColorsTexture(), e.toArray(this._colorsTexture.image.data, t * 4), this._colorsTexture.needsUpdate = !0, this } getColorAt(t, e) { return this.validateInstanceId(t), e.fromArray(this._colorsTexture.image.data, t * 4) } setVisibleAt(t, e) { return this.validateInstanceId(t), this._instanceInfo[t].visible === e ? this : (this._instanceInfo[t].visible = e, this._visibilityChanged = !0, this) } getVisibleAt(t) { return this.validateInstanceId(t), this._instanceInfo[t].visible } setGeometryIdAt(t, e) { return this.validateInstanceId(t), this.validateGeometryId(e), this._instanceInfo[t].geometryIndex = e, this } getGeometryIdAt(t) { return this.validateInstanceId(t), this._instanceInfo[t].geometryIndex } getGeometryRangeAt(t, e = {}) { this.validateGeometryId(t); const n = this._geometryInfo[t]; return e.vertexStart = n.vertexStart, e.vertexCount = n.vertexCount, e.reservedVertexCount = n.reservedVertexCount, e.indexStart = n.indexStart, e.indexCount = n.indexCount, e.reservedIndexCount = n.reservedIndexCount, e.start = n.start, e.count = n.count, e } setInstanceCount(t) { const e = this._availableInstanceIds, n = this._instanceInfo; for (e.sort(f_); e[e.length - 1] === n.length;)n.pop(), e.pop(); if (t < n.length) throw new Error(`BatchedMesh: Instance ids outside the range ${t} are being used. Cannot shrink instance count.`); const a = new Int32Array(t), o = new Int32Array(t); bc(this._multiDrawCounts, a), bc(this._multiDrawStarts, o), this._multiDrawCounts = a, this._multiDrawStarts = o, this._maxInstanceCount = t; const f = this._indirectTexture, h = this._matricesTexture, m = this._colorsTexture; f.dispose(), this._initIndirectTexture(), bc(f.image.data, this._indirectTexture.image.data), h.dispose(), this._initMatricesTexture(), bc(h.image.data, this._matricesTexture.image.data), m && (m.dispose(), this._initColorsTexture(), bc(m.image.data, this._colorsTexture.image.data)) } setGeometrySize(t, e) { const n = [...this._geometryInfo].filter(h => h.active); if (Math.max(...n.map(h => h.vertexStart + h.reservedVertexCount)) > t) throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${e}. Cannot shrink further.`); if (this.geometry.index && Math.max(...n.map(m => m.indexStart + m.reservedIndexCount)) > e) throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${e}. Cannot shrink further.`); const o = this.geometry; o.dispose(), this._maxVertexCount = t, this._maxIndexCount = e, this._geometryInitialized && (this._geometryInitialized = !1, this.geometry = new Qe, this._initializeGeometry(o)); const f = this.geometry; o.index && bc(o.index.array, f.index.array); for (const h in o.attributes) bc(o.attributes[h].array, f.attributes[h].array) } raycast(t, e) { const n = this._instanceInfo, a = this._geometryInfo, o = this.matrixWorld, f = this.geometry; Ma.material = this.material, Ma.geometry.index = f.index, Ma.geometry.attributes = f.attributes, Ma.geometry.boundingBox === null && (Ma.geometry.boundingBox = new Ga), Ma.geometry.boundingSphere === null && (Ma.geometry.boundingSphere = new Aa); for (let h = 0, m = n.length; h < m; h++) { if (!n[h].visible || !n[h].active) continue; const g = n[h].geometryIndex, _ = a[g]; Ma.geometry.setDrawRange(_.start, _.count), this.getMatrixAt(h, Ma.matrixWorld).premultiply(o), this.getBoundingBoxAt(g, Ma.geometry.boundingBox), this.getBoundingSphereAt(g, Ma.geometry.boundingSphere), Ma.raycast(t, s0); for (let x = 0, S = s0.length; x < S; x++) { const M = s0[x]; M.object = this, M.batchId = h, e.push(M) } s0.length = 0 } Ma.material = null, Ma.geometry.index = null, Ma.geometry.attributes = {}, Ma.geometry.setDrawRange(0, 1 / 0) } copy(t) { return super.copy(t), this.geometry = t.geometry.clone(), this.perObjectFrustumCulled = t.perObjectFrustumCulled, this.sortObjects = t.sortObjects, this.boundingBox = t.boundingBox !== null ? t.boundingBox.clone() : null, this.boundingSphere = t.boundingSphere !== null ? t.boundingSphere.clone() : null, this._geometryInfo = t._geometryInfo.map(e => ({ ...e, boundingBox: e.boundingBox !== null ? e.boundingBox.clone() : null, boundingSphere: e.boundingSphere !== null ? e.boundingSphere.clone() : null })), this._instanceInfo = t._instanceInfo.map(e => ({ ...e })), this._maxInstanceCount = t._maxInstanceCount, this._maxVertexCount = t._maxVertexCount, this._maxIndexCount = t._maxIndexCount, this._geometryInitialized = t._geometryInitialized, this._geometryCount = t._geometryCount, this._multiDrawCounts = t._multiDrawCounts.slice(), this._multiDrawStarts = t._multiDrawStarts.slice(), this._matricesTexture = t._matricesTexture.clone(), this._matricesTexture.image.data = this._matricesTexture.image.data.slice(), this._colorsTexture !== null && (this._colorsTexture = t._colorsTexture.clone(), this._colorsTexture.image.data = this._colorsTexture.image.data.slice()), this } dispose() { this.geometry.dispose(), this._matricesTexture.dispose(), this._matricesTexture = null, this._indirectTexture.dispose(), this._indirectTexture = null, this._colorsTexture !== null && (this._colorsTexture.dispose(), this._colorsTexture = null) } onBeforeRender(t, e, n, a, o) { if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects) return; const f = a.getIndex(), h = f === null ? 1 : f.array.BYTES_PER_ELEMENT, m = this._instanceInfo, g = this._multiDrawStarts, _ = this._multiDrawCounts, x = this._geometryInfo, S = this.perObjectFrustumCulled, M = this._indirectTexture, A = M.image.data; S && (ss.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse).multiply(this.matrixWorld), h_.setFromProjectionMatrix(ss, t.coordinateSystem)); let C = 0; if (this.sortObjects) { ss.copy(this.matrixWorld).invert(), op.setFromMatrixPosition(n.matrixWorld).applyMatrix4(ss), A1.set(0, 0, -1).transformDirection(n.matrixWorld).transformDirection(ss); for (let D = 0, N = m.length; D < N; D++)if (m[D].visible && m[D].active) { const U = m[D].geometryIndex; this.getMatrixAt(D, ss), this.getBoundingSphereAt(U, Mc).applyMatrix4(ss); let V = !1; if (S && (V = !h_.intersectsSphere(Mc)), !V) { const I = x[U], G = IR.subVectors(Mc.center, op).dot(A1); d_.push(I.start, I.count, G, D) } } const R = d_.list, T = this.customSort; T === null ? R.sort(o.transparent ? zR : LR) : T.call(this, R, n); for (let D = 0, N = R.length; D < N; D++) { const U = R[D]; g[C] = U.start * h, _[C] = U.count, A[C] = U.index, C++ } d_.reset() } else for (let R = 0, T = m.length; R < T; R++)if (m[R].visible && m[R].active) { const D = m[R].geometryIndex; let N = !1; if (S && (this.getMatrixAt(R, ss), this.getBoundingSphereAt(D, Mc).applyMatrix4(ss), N = !h_.intersectsSphere(Mc)), !N) { const U = x[D]; g[C] = U.start * h, _[C] = U.count, A[C] = R, C++ } } M.needsUpdate = !0, this._multiDrawCount = C, this._visibilityChanged = !1 } onBeforeShadow(t, e, n, a, o, f) { this.onBeforeRender(t, null, a, o, f) } } class Xa extends Ra { constructor(t) { super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new ce(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.color.copy(t.color), this.map = t.map, this.linewidth = t.linewidth, this.linecap = t.linecap, this.linejoin = t.linejoin, this.fog = t.fog, this } } const vv = new k, yv = new k, R1 = new Oe, up = new Bh, r0 = new Aa, p_ = new k, w1 = new k; class Eu extends _n { constructor(t = new Qe, e = new Xa) { super(), this.isLine = !0, this.type = "Line", this.geometry = t, this.material = e, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets() } copy(t, e) { return super.copy(t, e), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this } computeLineDistances() { const t = this.geometry; if (t.index === null) { const e = t.attributes.position, n = [0]; for (let a = 1, o = e.count; a < o; a++)vv.fromBufferAttribute(e, a - 1), yv.fromBufferAttribute(e, a), n[a] = n[a - 1], n[a] += vv.distanceTo(yv); t.setAttribute("lineDistance", new ve(n, 1)) } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry."); return this } raycast(t, e) { const n = this.geometry, a = this.matrixWorld, o = t.params.Line.threshold, f = n.drawRange; if (n.boundingSphere === null && n.computeBoundingSphere(), r0.copy(n.boundingSphere), r0.applyMatrix4(a), r0.radius += o, t.ray.intersectsSphere(r0) === !1) return; R1.copy(a).invert(), up.copy(t.ray).applyMatrix4(R1); const h = o / ((this.scale.x + this.scale.y + this.scale.z) / 3), m = h * h, g = this.isLineSegments ? 2 : 1, _ = n.index, S = n.attributes.position; if (_ !== null) { const M = Math.max(0, f.start), A = Math.min(_.count, f.start + f.count); for (let C = M, R = A - 1; C < R; C += g) { const T = _.getX(C), D = _.getX(C + 1), N = l0(this, t, up, m, T, D, C); N && e.push(N) } if (this.isLineLoop) { const C = _.getX(A - 1), R = _.getX(M), T = l0(this, t, up, m, C, R, A - 1); T && e.push(T) } } else { const M = Math.max(0, f.start), A = Math.min(S.count, f.start + f.count); for (let C = M, R = A - 1; C < R; C += g) { const T = l0(this, t, up, m, C, C + 1, C); T && e.push(T) } if (this.isLineLoop) { const C = l0(this, t, up, m, A - 1, M, A - 1); C && e.push(C) } } } updateMorphTargets() { const e = this.geometry.morphAttributes, n = Object.keys(e); if (n.length > 0) { const a = e[n[0]]; if (a !== void 0) { this.morphTargetInfluences = [], this.morphTargetDictionary = {}; for (let o = 0, f = a.length; o < f; o++) { const h = a[o].name || String(o); this.morphTargetInfluences.push(0), this.morphTargetDictionary[h] = o } } } } } function l0(r, t, e, n, a, o, f) { const h = r.geometry.attributes.position; if (vv.fromBufferAttribute(h, a), yv.fromBufferAttribute(h, o), e.distanceSqToSegment(vv, yv, p_, w1) > n) return; p_.applyMatrix4(r.matrixWorld); const g = t.ray.origin.distanceTo(p_); if (!(g < t.near || g > t.far)) return { distance: g, point: w1.clone().applyMatrix4(r.matrixWorld), index: f, face: null, faceIndex: null, barycoord: null, object: r } } const C1 = new k, D1 = new k; class Cl extends Eu { constructor(t, e) { super(t, e), this.isLineSegments = !0, this.type = "LineSegments" } computeLineDistances() { const t = this.geometry; if (t.index === null) { const e = t.attributes.position, n = []; for (let a = 0, o = e.count; a < o; a += 2)C1.fromBufferAttribute(e, a), D1.fromBufferAttribute(e, a + 1), n[a] = a === 0 ? 0 : n[a - 1], n[a + 1] = n[a] + C1.distanceTo(D1); t.setAttribute("lineDistance", new ve(n, 1)) } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry."); return this } } class gE extends Eu { constructor(t, e) { super(t, e), this.isLineLoop = !0, this.type = "LineLoop" } } class Fv extends Ra { constructor(t) { super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new ce(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.color.copy(t.color), this.map = t.map, this.alphaMap = t.alphaMap, this.size = t.size, this.sizeAttenuation = t.sizeAttenuation, this.fog = t.fog, this } } const U1 = new Oe, ex = new Bh, o0 = new Aa, u0 = new k; let vE = class extends _n { constructor(t = new Qe, e = new Fv) { super(), this.isPoints = !0, this.type = "Points", this.geometry = t, this.material = e, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets() } copy(t, e) { return super.copy(t, e), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this } raycast(t, e) { const n = this.geometry, a = this.matrixWorld, o = t.params.Points.threshold, f = n.drawRange; if (n.boundingSphere === null && n.computeBoundingSphere(), o0.copy(n.boundingSphere), o0.applyMatrix4(a), o0.radius += o, t.ray.intersectsSphere(o0) === !1) return; U1.copy(a).invert(), ex.copy(t.ray).applyMatrix4(U1); const h = o / ((this.scale.x + this.scale.y + this.scale.z) / 3), m = h * h, g = n.index, x = n.attributes.position; if (g !== null) { const S = Math.max(0, f.start), M = Math.min(g.count, f.start + f.count); for (let A = S, C = M; A < C; A++) { const R = g.getX(A); u0.fromBufferAttribute(x, R), N1(u0, R, m, a, t, e, this) } } else { const S = Math.max(0, f.start), M = Math.min(x.count, f.start + f.count); for (let A = S, C = M; A < C; A++)u0.fromBufferAttribute(x, A), N1(u0, A, m, a, t, e, this) } } updateMorphTargets() { const e = this.geometry.morphAttributes, n = Object.keys(e); if (n.length > 0) { const a = e[n[0]]; if (a !== void 0) { this.morphTargetInfluences = [], this.morphTargetDictionary = {}; for (let o = 0, f = a.length; o < f; o++) { const h = a[o].name || String(o); this.morphTargetInfluences.push(0), this.morphTargetDictionary[h] = o } } } } }; function N1(r, t, e, n, a, o, f) { const h = ex.distanceSqToPoint(r); if (h < e) { const m = new k; ex.closestPointToPoint(r, m), m.applyMatrix4(n); const g = a.ray.origin.distanceTo(m); if (g < a.near || g > a.far) return; o.push({ distance: g, distanceToRay: Math.sqrt(h), point: m, index: t, face: null, faceIndex: null, barycoord: null, object: f }) } } class yE extends yi { constructor(t, e, n, a, o, f, h, m, g) { super(t, e, n, a, o, f, h, m, g), this.isVideoTexture = !0, this.minFilter = f !== void 0 ? f : Li, this.magFilter = o !== void 0 ? o : Li, this.generateMipmaps = !1; const _ = this; function x() { _.needsUpdate = !0, t.requestVideoFrameCallback(x) } "requestVideoFrameCallback" in t && t.requestVideoFrameCallback(x) } clone() { return new this.constructor(this.image).copy(this) } update() { const t = this.image; "requestVideoFrameCallback" in t === !1 && t.readyState >= t.HAVE_CURRENT_DATA && (this.needsUpdate = !0) } } class FR extends yE { constructor(t, e, n, a, o, f, h, m) { super({}, t, e, n, a, o, f, h, m), this.isVideoFrameTexture = !0 } update() { } clone() { return new this.constructor().copy(this) } setFrame(t) { this.image = t, this.needsUpdate = !0 } } class VR extends yi { constructor(t, e) { super({ width: t, height: e }), this.isFramebufferTexture = !0, this.magFilter = ua, this.minFilter = ua, this.generateMipmaps = !1, this.needsUpdate = !0 } } class Vv extends yi { constructor(t, e, n, a, o, f, h, m, g, _, x, S) { super(null, f, h, m, g, _, a, o, x, S), this.isCompressedTexture = !0, this.image = { width: e, height: n }, this.mipmaps = t, this.flipY = !1, this.generateMipmaps = !1 } } class GR extends Vv { constructor(t, e, n, a, o, f) { super(t, e, n, o, f), this.isCompressedArrayTexture = !0, this.image.depth = a, this.wrapR = Zs, this.layerUpdates = new Set } addLayerUpdate(t) { this.layerUpdates.add(t) } clearLayerUpdates() { this.layerUpdates.clear() } } class XR extends Vv { constructor(t, e, n) { super(void 0, t[0].width, t[0].height, e, n, xo), this.isCompressedCubeTexture = !0, this.isCubeTexture = !0, this.image = t } } class qR extends yi { constructor(t, e, n, a, o, f, h, m, g) { super(t, e, n, a, o, f, h, m, g), this.isCanvasTexture = !0, this.needsUpdate = !0 } } class Bx extends yi { constructor(t, e, n, a, o, f, h, m, g, _ = Fc) { if (_ !== Fc && _ !== Wc) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat"); n === void 0 && _ === Fc && (n = So), n === void 0 && _ === Wc && (n = Yc), super(null, a, o, f, h, m, _, n, g), this.isDepthTexture = !0, this.image = { width: t, height: e }, this.magFilter = h !== void 0 ? h : ua, this.minFilter = m !== void 0 ? m : ua, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null } copy(t) { return super.copy(t), this.source = new xu(Object.assign({}, t.image)), this.compareFunction = t.compareFunction, this } toJSON(t) { const e = super.toJSON(t); return this.compareFunction !== null && (e.compareFunction = this.compareFunction), e } } class Pr { constructor() { this.type = "Curve", this.arcLengthDivisions = 200, this.needsUpdate = !1, this.cacheArcLengths = null } getPoint() { console.warn("THREE.Curve: .getPoint() not implemented.") } getPointAt(t, e) { const n = this.getUtoTmapping(t); return this.getPoint(n, e) } getPoints(t = 5) { const e = []; for (let n = 0; n <= t; n++)e.push(this.getPoint(n / t)); return e } getSpacedPoints(t = 5) { const e = []; for (let n = 0; n <= t; n++)e.push(this.getPointAt(n / t)); return e } getLength() { const t = this.getLengths(); return t[t.length - 1] } getLengths(t = this.arcLengthDivisions) { if (this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate) return this.cacheArcLengths; this.needsUpdate = !1; const e = []; let n, a = this.getPoint(0), o = 0; e.push(0); for (let f = 1; f <= t; f++)n = this.getPoint(f / t), o += n.distanceTo(a), e.push(o), a = n; return this.cacheArcLengths = e, e } updateArcLengths() { this.needsUpdate = !0, this.getLengths() } getUtoTmapping(t, e = null) { const n = this.getLengths(); let a = 0; const o = n.length; let f; e ? f = e : f = t * n[o - 1]; let h = 0, m = o - 1, g; for (; h <= m;)if (a = Math.floor(h + (m - h) / 2), g = n[a] - f, g < 0) h = a + 1; else if (g > 0) m = a - 1; else { m = a; break } if (a = m, n[a] === f) return a / (o - 1); const _ = n[a], S = n[a + 1] - _, M = (f - _) / S; return (a + M) / (o - 1) } getTangent(t, e) { let a = t - 1e-4, o = t + 1e-4; a < 0 && (a = 0), o > 1 && (o = 1); const f = this.getPoint(a), h = this.getPoint(o), m = e || (f.isVector2 ? new zt : new k); return m.copy(h).sub(f).normalize(), m } getTangentAt(t, e) { const n = this.getUtoTmapping(t); return this.getTangent(n, e) } computeFrenetFrames(t, e = !1) { const n = new k, a = [], o = [], f = [], h = new k, m = new Oe; for (let M = 0; M <= t; M++) { const A = M / t; a[M] = this.getTangentAt(A, new k) } o[0] = new k, f[0] = new k; let g = Number.MAX_VALUE; const _ = Math.abs(a[0].x), x = Math.abs(a[0].y), S = Math.abs(a[0].z); _ <= g && (g = _, n.set(1, 0, 0)), x <= g && (g = x, n.set(0, 1, 0)), S <= g && n.set(0, 0, 1), h.crossVectors(a[0], n).normalize(), o[0].crossVectors(a[0], h), f[0].crossVectors(a[0], o[0]); for (let M = 1; M <= t; M++) { if (o[M] = o[M - 1].clone(), f[M] = f[M - 1].clone(), h.crossVectors(a[M - 1], a[M]), h.length() > Number.EPSILON) { h.normalize(); const A = Math.acos(Ve(a[M - 1].dot(a[M]), -1, 1)); o[M].applyMatrix4(m.makeRotationAxis(h, A)) } f[M].crossVectors(a[M], o[M]) } if (e === !0) { let M = Math.acos(Ve(o[0].dot(o[t]), -1, 1)); M /= t, a[0].dot(h.crossVectors(o[0], o[t])) > 0 && (M = -M); for (let A = 1; A <= t; A++)o[A].applyMatrix4(m.makeRotationAxis(a[A], M * A)), f[A].crossVectors(a[A], o[A]) } return { tangents: a, normals: o, binormals: f } } clone() { return new this.constructor().copy(this) } copy(t) { return this.arcLengthDivisions = t.arcLengthDivisions, this } toJSON() { const t = { metadata: { version: 4.6, type: "Curve", generator: "Curve.toJSON" } }; return t.arcLengthDivisions = this.arcLengthDivisions, t.type = this.type, t } fromJSON(t) { return this.arcLengthDivisions = t.arcLengthDivisions, this } } class Gv extends Pr { constructor(t = 0, e = 0, n = 1, a = 1, o = 0, f = Math.PI * 2, h = !1, m = 0) { super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = t, this.aY = e, this.xRadius = n, this.yRadius = a, this.aStartAngle = o, this.aEndAngle = f, this.aClockwise = h, this.aRotation = m } getPoint(t, e = new zt) { const n = e, a = Math.PI * 2; let o = this.aEndAngle - this.aStartAngle; const f = Math.abs(o) < Number.EPSILON; for (; o < 0;)o += a; for (; o > a;)o -= a; o < Number.EPSILON && (f ? o = 0 : o = a), this.aClockwise === !0 && !f && (o === a ? o = -a : o = o - a); const h = this.aStartAngle + t * o; let m = this.aX + this.xRadius * Math.cos(h), g = this.aY + this.yRadius * Math.sin(h); if (this.aRotation !== 0) { const _ = Math.cos(this.aRotation), x = Math.sin(this.aRotation), S = m - this.aX, M = g - this.aY; m = S * _ - M * x + this.aX, g = S * x + M * _ + this.aY } return n.set(m, g) } copy(t) { return super.copy(t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this } toJSON() { const t = super.toJSON(); return t.aX = this.aX, t.aY = this.aY, t.xRadius = this.xRadius, t.yRadius = this.yRadius, t.aStartAngle = this.aStartAngle, t.aEndAngle = this.aEndAngle, t.aClockwise = this.aClockwise, t.aRotation = this.aRotation, t } fromJSON(t) { return super.fromJSON(t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this } } class _E extends Gv { constructor(t, e, n, a, o, f) { super(t, e, n, n, a, o, f), this.isArcCurve = !0, this.type = "ArcCurve" } } function Px() { let r = 0, t = 0, e = 0, n = 0; function a(o, f, h, m) { r = o, t = h, e = -3 * o + 3 * f - 2 * h - m, n = 2 * o - 2 * f + h + m } return { initCatmullRom: function (o, f, h, m, g) { a(f, h, g * (h - o), g * (m - f)) }, initNonuniformCatmullRom: function (o, f, h, m, g, _, x) { let S = (f - o) / g - (h - o) / (g + _) + (h - f) / _, M = (h - f) / _ - (m - f) / (_ + x) + (m - h) / x; S *= _, M *= _, a(f, h, S, M) }, calc: function (o) { const f = o * o, h = f * o; return r + t * o + e * f + n * h } } } const c0 = new k, m_ = new Px, g_ = new Px, v_ = new Px; class xE extends Pr { constructor(t = [], e = !1, n = "centripetal", a = .5) { super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = t, this.closed = e, this.curveType = n, this.tension = a } getPoint(t, e = new k) { const n = e, a = this.points, o = a.length, f = (o - (this.closed ? 0 : 1)) * t; let h = Math.floor(f), m = f - h; this.closed ? h += h > 0 ? 0 : (Math.floor(Math.abs(h) / o) + 1) * o : m === 0 && h === o - 1 && (h = o - 2, m = 1); let g, _; this.closed || h > 0 ? g = a[(h - 1) % o] : (c0.subVectors(a[0], a[1]).add(a[0]), g = c0); const x = a[h % o], S = a[(h + 1) % o]; if (this.closed || h + 2 < o ? _ = a[(h + 2) % o] : (c0.subVectors(a[o - 1], a[o - 2]).add(a[o - 1]), _ = c0), this.curveType === "centripetal" || this.curveType === "chordal") { const M = this.curveType === "chordal" ? .5 : .25; let A = Math.pow(g.distanceToSquared(x), M), C = Math.pow(x.distanceToSquared(S), M), R = Math.pow(S.distanceToSquared(_), M); C < 1e-4 && (C = 1), A < 1e-4 && (A = C), R < 1e-4 && (R = C), m_.initNonuniformCatmullRom(g.x, x.x, S.x, _.x, A, C, R), g_.initNonuniformCatmullRom(g.y, x.y, S.y, _.y, A, C, R), v_.initNonuniformCatmullRom(g.z, x.z, S.z, _.z, A, C, R) } else this.curveType === "catmullrom" && (m_.initCatmullRom(g.x, x.x, S.x, _.x, this.tension), g_.initCatmullRom(g.y, x.y, S.y, _.y, this.tension), v_.initCatmullRom(g.z, x.z, S.z, _.z, this.tension)); return n.set(m_.calc(m), g_.calc(m), v_.calc(m)), n } copy(t) { super.copy(t), this.points = []; for (let e = 0, n = t.points.length; e < n; e++) { const a = t.points[e]; this.points.push(a.clone()) } return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this } toJSON() { const t = super.toJSON(); t.points = []; for (let e = 0, n = this.points.length; e < n; e++) { const a = this.points[e]; t.points.push(a.toArray()) } return t.closed = this.closed, t.curveType = this.curveType, t.tension = this.tension, t } fromJSON(t) { super.fromJSON(t), this.points = []; for (let e = 0, n = t.points.length; e < n; e++) { const a = t.points[e]; this.points.push(new k().fromArray(a)) } return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this } } function O1(r, t, e, n, a) { const o = (n - t) * .5, f = (a - e) * .5, h = r * r, m = r * h; return (2 * e - 2 * n + o + f) * m + (-3 * e + 3 * n - 2 * o - f) * h + o * r + e } function YR(r, t) { const e = 1 - r; return e * e * t } function WR(r, t) { return 2 * (1 - r) * r * t } function kR(r, t) { return r * r * t } function bp(r, t, e, n) { return YR(r, t) + WR(r, e) + kR(r, n) } function jR(r, t) { const e = 1 - r; return e * e * e * t } function ZR(r, t) { const e = 1 - r; return 3 * e * e * r * t } function QR(r, t) { return 3 * (1 - r) * r * r * t } function KR(r, t) { return r * r * r * t } function Ep(r, t, e, n, a) { return jR(r, t) + ZR(r, e) + QR(r, n) + KR(r, a) } class Ix extends Pr { constructor(t = new zt, e = new zt, n = new zt, a = new zt) { super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = t, this.v1 = e, this.v2 = n, this.v3 = a } getPoint(t, e = new zt) { const n = e, a = this.v0, o = this.v1, f = this.v2, h = this.v3; return n.set(Ep(t, a.x, o.x, f.x, h.x), Ep(t, a.y, o.y, f.y, h.y)), n } copy(t) { return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this } toJSON() { const t = super.toJSON(); return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this } } class SE extends Pr { constructor(t = new k, e = new k, n = new k, a = new k) { super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = t, this.v1 = e, this.v2 = n, this.v3 = a } getPoint(t, e = new k) { const n = e, a = this.v0, o = this.v1, f = this.v2, h = this.v3; return n.set(Ep(t, a.x, o.x, f.x, h.x), Ep(t, a.y, o.y, f.y, h.y), Ep(t, a.z, o.z, f.z, h.z)), n } copy(t) { return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this } toJSON() { const t = super.toJSON(); return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this } } class Hx extends Pr { constructor(t = new zt, e = new zt) { super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = t, this.v2 = e } getPoint(t, e = new zt) { const n = e; return t === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n } getPointAt(t, e) { return this.getPoint(t, e) } getTangent(t, e = new zt) { return e.subVectors(this.v2, this.v1).normalize() } getTangentAt(t, e) { return this.getTangent(t, e) } copy(t) { return super.copy(t), this.v1.copy(t.v1), this.v2.copy(t.v2), this } toJSON() { const t = super.toJSON(); return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this } } class ME extends Pr { constructor(t = new k, e = new k) { super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = t, this.v2 = e } getPoint(t, e = new k) { const n = e; return t === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n } getPointAt(t, e) { return this.getPoint(t, e) } getTangent(t, e = new k) { return e.subVectors(this.v2, this.v1).normalize() } getTangentAt(t, e) { return this.getTangent(t, e) } copy(t) { return super.copy(t), this.v1.copy(t.v1), this.v2.copy(t.v2), this } toJSON() { const t = super.toJSON(); return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this } } class Fx extends Pr { constructor(t = new zt, e = new zt, n = new zt) { super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = t, this.v1 = e, this.v2 = n } getPoint(t, e = new zt) { const n = e, a = this.v0, o = this.v1, f = this.v2; return n.set(bp(t, a.x, o.x, f.x), bp(t, a.y, o.y, f.y)), n } copy(t) { return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this } toJSON() { const t = super.toJSON(); return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this } } class Vx extends Pr { constructor(t = new k, e = new k, n = new k) { super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = t, this.v1 = e, this.v2 = n } getPoint(t, e = new k) { const n = e, a = this.v0, o = this.v1, f = this.v2; return n.set(bp(t, a.x, o.x, f.x), bp(t, a.y, o.y, f.y), bp(t, a.z, o.z, f.z)), n } copy(t) { return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this } toJSON() { const t = super.toJSON(); return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this } } class Gx extends Pr { constructor(t = []) { super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = t } getPoint(t, e = new zt) { const n = e, a = this.points, o = (a.length - 1) * t, f = Math.floor(o), h = o - f, m = a[f === 0 ? f : f - 1], g = a[f], _ = a[f > a.length - 2 ? a.length - 1 : f + 1], x = a[f > a.length - 3 ? a.length - 1 : f + 2]; return n.set(O1(h, m.x, g.x, _.x, x.x), O1(h, m.y, g.y, _.y, x.y)), n } copy(t) { super.copy(t), this.points = []; for (let e = 0, n = t.points.length; e < n; e++) { const a = t.points[e]; this.points.push(a.clone()) } return this } toJSON() { const t = super.toJSON(); t.points = []; for (let e = 0, n = this.points.length; e < n; e++) { const a = this.points[e]; t.points.push(a.toArray()) } return t } fromJSON(t) { super.fromJSON(t), this.points = []; for (let e = 0, n = t.points.length; e < n; e++) { const a = t.points[e]; this.points.push(new zt().fromArray(a)) } return this } } var _v = Object.freeze({ __proto__: null, ArcCurve: _E, CatmullRomCurve3: xE, CubicBezierCurve: Ix, CubicBezierCurve3: SE, EllipseCurve: Gv, LineCurve: Hx, LineCurve3: ME, QuadraticBezierCurve: Fx, QuadraticBezierCurve3: Vx, SplineCurve: Gx }); class bE extends Pr { constructor() { super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1 } add(t) { this.curves.push(t) } closePath() { const t = this.curves[0].getPoint(0), e = this.curves[this.curves.length - 1].getPoint(1); if (!t.equals(e)) { const n = t.isVector2 === !0 ? "LineCurve" : "LineCurve3"; this.curves.push(new _v[n](e, t)) } return this } getPoint(t, e) { const n = t * this.getLength(), a = this.getCurveLengths(); let o = 0; for (; o < a.length;) { if (a[o] >= n) { const f = a[o] - n, h = this.curves[o], m = h.getLength(), g = m === 0 ? 0 : 1 - f / m; return h.getPointAt(g, e) } o++ } return null } getLength() { const t = this.getCurveLengths(); return t[t.length - 1] } updateArcLengths() { this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths() } getCurveLengths() { if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths; const t = []; let e = 0; for (let n = 0, a = this.curves.length; n < a; n++)e += this.curves[n].getLength(), t.push(e); return this.cacheLengths = t, t } getSpacedPoints(t = 40) { const e = []; for (let n = 0; n <= t; n++)e.push(this.getPoint(n / t)); return this.autoClose && e.push(e[0]), e } getPoints(t = 12) { const e = []; let n; for (let a = 0, o = this.curves; a < o.length; a++) { const f = o[a], h = f.isEllipseCurve ? t * 2 : f.isLineCurve || f.isLineCurve3 ? 1 : f.isSplineCurve ? t * f.points.length : t, m = f.getPoints(h); for (let g = 0; g < m.length; g++) { const _ = m[g]; n && n.equals(_) || (e.push(_), n = _) } } return this.autoClose && e.length > 1 && !e[e.length - 1].equals(e[0]) && e.push(e[0]), e } copy(t) { super.copy(t), this.curves = []; for (let e = 0, n = t.curves.length; e < n; e++) { const a = t.curves[e]; this.curves.push(a.clone()) } return this.autoClose = t.autoClose, this } toJSON() { const t = super.toJSON(); t.autoClose = this.autoClose, t.curves = []; for (let e = 0, n = this.curves.length; e < n; e++) { const a = this.curves[e]; t.curves.push(a.toJSON()) } return t } fromJSON(t) { super.fromJSON(t), this.autoClose = t.autoClose, this.curves = []; for (let e = 0, n = t.curves.length; e < n; e++) { const a = t.curves[e]; this.curves.push(new _v[a.type]().fromJSON(a)) } return this } } class Pp extends bE { constructor(t) { super(), this.type = "Path", this.currentPoint = new zt, t && this.setFromPoints(t) } setFromPoints(t) { this.moveTo(t[0].x, t[0].y); for (let e = 1, n = t.length; e < n; e++)this.lineTo(t[e].x, t[e].y); return this } moveTo(t, e) { return this.currentPoint.set(t, e), this } lineTo(t, e) { const n = new Hx(this.currentPoint.clone(), new zt(t, e)); return this.curves.push(n), this.currentPoint.set(t, e), this } quadraticCurveTo(t, e, n, a) { const o = new Fx(this.currentPoint.clone(), new zt(t, e), new zt(n, a)); return this.curves.push(o), this.currentPoint.set(n, a), this } bezierCurveTo(t, e, n, a, o, f) { const h = new Ix(this.currentPoint.clone(), new zt(t, e), new zt(n, a), new zt(o, f)); return this.curves.push(h), this.currentPoint.set(o, f), this } splineThru(t) { const e = [this.currentPoint.clone()].concat(t), n = new Gx(e); return this.curves.push(n), this.currentPoint.copy(t[t.length - 1]), this } arc(t, e, n, a, o, f) { const h = this.currentPoint.x, m = this.currentPoint.y; return this.absarc(t + h, e + m, n, a, o, f), this } absarc(t, e, n, a, o, f) { return this.absellipse(t, e, n, n, a, o, f), this } ellipse(t, e, n, a, o, f, h, m) { const g = this.currentPoint.x, _ = this.currentPoint.y; return this.absellipse(t + g, e + _, n, a, o, f, h, m), this } absellipse(t, e, n, a, o, f, h, m) { const g = new Gv(t, e, n, a, o, f, h, m); if (this.curves.length > 0) { const x = g.getPoint(0); x.equals(this.currentPoint) || this.lineTo(x.x, x.y) } this.curves.push(g); const _ = g.getPoint(1); return this.currentPoint.copy(_), this } copy(t) { return super.copy(t), this.currentPoint.copy(t.currentPoint), this } toJSON() { const t = super.toJSON(); return t.currentPoint = this.currentPoint.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.currentPoint.fromArray(t.currentPoint), this } } class $p extends Qe { constructor(t = [new zt(0, -.5), new zt(.5, 0), new zt(0, .5)], e = 12, n = 0, a = Math.PI * 2) { super(), this.type = "LatheGeometry", this.parameters = { points: t, segments: e, phiStart: n, phiLength: a }, e = Math.floor(e), a = Ve(a, 0, Math.PI * 2); const o = [], f = [], h = [], m = [], g = [], _ = 1 / e, x = new k, S = new zt, M = new k, A = new k, C = new k; let R = 0, T = 0; for (let D = 0; D <= t.length - 1; D++)switch (D) { case 0: R = t[D + 1].x - t[D].x, T = t[D + 1].y - t[D].y, M.x = T * 1, M.y = -R, M.z = T * 0, C.copy(M), M.normalize(), m.push(M.x, M.y, M.z); break; case t.length - 1: m.push(C.x, C.y, C.z); break; default: R = t[D + 1].x - t[D].x, T = t[D + 1].y - t[D].y, M.x = T * 1, M.y = -R, M.z = T * 0, A.copy(M), M.x += C.x, M.y += C.y, M.z += C.z, M.normalize(), m.push(M.x, M.y, M.z), C.copy(A) }for (let D = 0; D <= e; D++) { const N = n + D * _ * a, U = Math.sin(N), V = Math.cos(N); for (let I = 0; I <= t.length - 1; I++) { x.x = t[I].x * U, x.y = t[I].y, x.z = t[I].x * V, f.push(x.x, x.y, x.z), S.x = D / e, S.y = I / (t.length - 1), h.push(S.x, S.y); const G = m[3 * I + 0] * U, q = m[3 * I + 1], z = m[3 * I + 0] * V; g.push(G, q, z) } } for (let D = 0; D < e; D++)for (let N = 0; N < t.length - 1; N++) { const U = N + D * t.length, V = U, I = U + t.length, G = U + t.length + 1, q = U + 1; o.push(V, I, q), o.push(G, q, I) } this.setIndex(o), this.setAttribute("position", new ve(f, 3)), this.setAttribute("uv", new ve(h, 2)), this.setAttribute("normal", new ve(g, 3)) } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new $p(t.points, t.segments, t.phiStart, t.phiLength) } } class Xv extends $p { constructor(t = 1, e = 1, n = 4, a = 8) { const o = new Pp; o.absarc(0, -e / 2, t, Math.PI * 1.5, 0), o.absarc(0, e / 2, t, 0, Math.PI * .5), super(o.getPoints(n), a), this.type = "CapsuleGeometry", this.parameters = { radius: t, length: e, capSegments: n, radialSegments: a } } static fromJSON(t) { return new Xv(t.radius, t.length, t.capSegments, t.radialSegments) } } class qv extends Qe { constructor(t = 1, e = 32, n = 0, a = Math.PI * 2) { super(), this.type = "CircleGeometry", this.parameters = { radius: t, segments: e, thetaStart: n, thetaLength: a }, e = Math.max(3, e); const o = [], f = [], h = [], m = [], g = new k, _ = new zt; f.push(0, 0, 0), h.push(0, 0, 1), m.push(.5, .5); for (let x = 0, S = 3; x <= e; x++, S += 3) { const M = n + x / e * a; g.x = t * Math.cos(M), g.y = t * Math.sin(M), f.push(g.x, g.y, g.z), h.push(0, 0, 1), _.x = (f[S] / t + 1) / 2, _.y = (f[S + 1] / t + 1) / 2, m.push(_.x, _.y) } for (let x = 1; x <= e; x++)o.push(x, x + 1, 0); this.setIndex(o), this.setAttribute("position", new ve(f, 3)), this.setAttribute("normal", new ve(h, 3)), this.setAttribute("uv", new ve(m, 2)) } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new qv(t.radius, t.segments, t.thetaStart, t.thetaLength) } } class Ph extends Qe { constructor(t = 1, e = 1, n = 1, a = 32, o = 1, f = !1, h = 0, m = Math.PI * 2) { super(), this.type = "CylinderGeometry", this.parameters = { radiusTop: t, radiusBottom: e, height: n, radialSegments: a, heightSegments: o, openEnded: f, thetaStart: h, thetaLength: m }; const g = this; a = Math.floor(a), o = Math.floor(o); const _ = [], x = [], S = [], M = []; let A = 0; const C = [], R = n / 2; let T = 0; D(), f === !1 && (t > 0 && N(!0), e > 0 && N(!1)), this.setIndex(_), this.setAttribute("position", new ve(x, 3)), this.setAttribute("normal", new ve(S, 3)), this.setAttribute("uv", new ve(M, 2)); function D() { const U = new k, V = new k; let I = 0; const G = (e - t) / n; for (let q = 0; q <= o; q++) { const z = [], L = q / o, j = L * (e - t) + t; for (let dt = 0; dt <= a; dt++) { const tt = dt / a, ct = tt * m + h, xt = Math.sin(ct), K = Math.cos(ct); V.x = j * xt, V.y = -L * n + R, V.z = j * K, x.push(V.x, V.y, V.z), U.set(xt, G, K).normalize(), S.push(U.x, U.y, U.z), M.push(tt, 1 - L), z.push(A++) } C.push(z) } for (let q = 0; q < a; q++)for (let z = 0; z < o; z++) { const L = C[z][q], j = C[z + 1][q], dt = C[z + 1][q + 1], tt = C[z][q + 1]; (t > 0 || z !== 0) && (_.push(L, j, tt), I += 3), (e > 0 || z !== o - 1) && (_.push(j, dt, tt), I += 3) } g.addGroup(T, I, 0), T += I } function N(U) { const V = A, I = new zt, G = new k; let q = 0; const z = U === !0 ? t : e, L = U === !0 ? 1 : -1; for (let dt = 1; dt <= a; dt++)x.push(0, R * L, 0), S.push(0, L, 0), M.push(.5, .5), A++; const j = A; for (let dt = 0; dt <= a; dt++) { const ct = dt / a * m + h, xt = Math.cos(ct), K = Math.sin(ct); G.x = z * K, G.y = R * L, G.z = z * xt, x.push(G.x, G.y, G.z), S.push(0, L, 0), I.x = xt * .5 + .5, I.y = K * .5 * L + .5, M.push(I.x, I.y), A++ } for (let dt = 0; dt < a; dt++) { const tt = V + dt, ct = j + dt; U === !0 ? _.push(ct, ct + 1, tt) : _.push(ct + 1, ct, tt), q += 3 } g.addGroup(T, q, U === !0 ? 1 : 2), T += q } } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new Ph(t.radiusTop, t.radiusBottom, t.height, t.radialSegments, t.heightSegments, t.openEnded, t.thetaStart, t.thetaLength) } } class Yv extends Ph { constructor(t = 1, e = 1, n = 32, a = 1, o = !1, f = 0, h = Math.PI * 2) { super(0, t, e, n, a, o, f, h), this.type = "ConeGeometry", this.parameters = { radius: t, height: e, radialSegments: n, heightSegments: a, openEnded: o, thetaStart: f, thetaLength: h } } static fromJSON(t) { return new Yv(t.radius, t.height, t.radialSegments, t.heightSegments, t.openEnded, t.thetaStart, t.thetaLength) } } class Ru extends Qe { constructor(t = [], e = [], n = 1, a = 0) { super(), this.type = "PolyhedronGeometry", this.parameters = { vertices: t, indices: e, radius: n, detail: a }; const o = [], f = []; h(a), g(n), _(), this.setAttribute("position", new ve(o, 3)), this.setAttribute("normal", new ve(o.slice(), 3)), this.setAttribute("uv", new ve(f, 2)), a === 0 ? this.computeVertexNormals() : this.normalizeNormals(); function h(D) { const N = new k, U = new k, V = new k; for (let I = 0; I < e.length; I += 3)M(e[I + 0], N), M(e[I + 1], U), M(e[I + 2], V), m(N, U, V, D) } function m(D, N, U, V) { const I = V + 1, G = []; for (let q = 0; q <= I; q++) { G[q] = []; const z = D.clone().lerp(U, q / I), L = N.clone().lerp(U, q / I), j = I - q; for (let dt = 0; dt <= j; dt++)dt === 0 && q === I ? G[q][dt] = z : G[q][dt] = z.clone().lerp(L, dt / j) } for (let q = 0; q < I; q++)for (let z = 0; z < 2 * (I - q) - 1; z++) { const L = Math.floor(z / 2); z % 2 === 0 ? (S(G[q][L + 1]), S(G[q + 1][L]), S(G[q][L])) : (S(G[q][L + 1]), S(G[q + 1][L + 1]), S(G[q + 1][L])) } } function g(D) { const N = new k; for (let U = 0; U < o.length; U += 3)N.x = o[U + 0], N.y = o[U + 1], N.z = o[U + 2], N.normalize().multiplyScalar(D), o[U + 0] = N.x, o[U + 1] = N.y, o[U + 2] = N.z } function _() { const D = new k; for (let N = 0; N < o.length; N += 3) { D.x = o[N + 0], D.y = o[N + 1], D.z = o[N + 2]; const U = R(D) / 2 / Math.PI + .5, V = T(D) / Math.PI + .5; f.push(U, 1 - V) } A(), x() } function x() { for (let D = 0; D < f.length; D += 6) { const N = f[D + 0], U = f[D + 2], V = f[D + 4], I = Math.max(N, U, V), G = Math.min(N, U, V); I > .9 && G < .1 && (N < .2 && (f[D + 0] += 1), U < .2 && (f[D + 2] += 1), V < .2 && (f[D + 4] += 1)) } } function S(D) { o.push(D.x, D.y, D.z) } function M(D, N) { const U = D * 3; N.x = t[U + 0], N.y = t[U + 1], N.z = t[U + 2] } function A() { const D = new k, N = new k, U = new k, V = new k, I = new zt, G = new zt, q = new zt; for (let z = 0, L = 0; z < o.length; z += 9, L += 6) { D.set(o[z + 0], o[z + 1], o[z + 2]), N.set(o[z + 3], o[z + 4], o[z + 5]), U.set(o[z + 6], o[z + 7], o[z + 8]), I.set(f[L + 0], f[L + 1]), G.set(f[L + 2], f[L + 3]), q.set(f[L + 4], f[L + 5]), V.copy(D).add(N).add(U).divideScalar(3); const j = R(V); C(I, L + 0, D, j), C(G, L + 2, N, j), C(q, L + 4, U, j) } } function C(D, N, U, V) { V < 0 && D.x === 1 && (f[N] = D.x - 1), U.x === 0 && U.z === 0 && (f[N] = V / 2 / Math.PI + .5) } function R(D) { return Math.atan2(D.z, -D.x) } function T(D) { return Math.atan2(-D.y, Math.sqrt(D.x * D.x + D.z * D.z)) } } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new Ru(t.vertices, t.indices, t.radius, t.details) } } class Wv extends Ru { constructor(t = 1, e = 0) { const n = (1 + Math.sqrt(5)) / 2, a = 1 / n, o = [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -a, -n, 0, -a, n, 0, a, -n, 0, a, n, -a, -n, 0, -a, n, 0, a, -n, 0, a, n, 0, -n, 0, -a, n, 0, -a, -n, 0, a, n, 0, a], f = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9]; super(o, f, t, e), this.type = "DodecahedronGeometry", this.parameters = { radius: t, detail: e } } static fromJSON(t) { return new Wv(t.radius, t.detail) } } const f0 = new k, h0 = new k, y_ = new k, d0 = new os; class EE extends Qe { constructor(t = null, e = 1) { if (super(), this.type = "EdgesGeometry", this.parameters = { geometry: t, thresholdAngle: e }, t !== null) { const a = Math.pow(10, 4), o = Math.cos(Gc * e), f = t.getIndex(), h = t.getAttribute("position"), m = f ? f.count : h.count, g = [0, 0, 0], _ = ["a", "b", "c"], x = new Array(3), S = {}, M = []; for (let A = 0; A < m; A += 3) { f ? (g[0] = f.getX(A), g[1] = f.getX(A + 1), g[2] = f.getX(A + 2)) : (g[0] = A, g[1] = A + 1, g[2] = A + 2); const { a: C, b: R, c: T } = d0; if (C.fromBufferAttribute(h, g[0]), R.fromBufferAttribute(h, g[1]), T.fromBufferAttribute(h, g[2]), d0.getNormal(y_), x[0] = `${Math.round(C.x * a)},${Math.round(C.y * a)},${Math.round(C.z * a)}`, x[1] = `${Math.round(R.x * a)},${Math.round(R.y * a)},${Math.round(R.z * a)}`, x[2] = `${Math.round(T.x * a)},${Math.round(T.y * a)},${Math.round(T.z * a)}`, !(x[0] === x[1] || x[1] === x[2] || x[2] === x[0])) for (let D = 0; D < 3; D++) { const N = (D + 1) % 3, U = x[D], V = x[N], I = d0[_[D]], G = d0[_[N]], q = `${U}_${V}`, z = `${V}_${U}`; z in S && S[z] ? (y_.dot(S[z].normal) <= o && (M.push(I.x, I.y, I.z), M.push(G.x, G.y, G.z)), S[z] = null) : q in S || (S[q] = { index0: g[D], index1: g[N], normal: y_.clone() }) } } for (const A in S) if (S[A]) { const { index0: C, index1: R } = S[A]; f0.fromBufferAttribute(h, C), h0.fromBufferAttribute(h, R), M.push(f0.x, f0.y, f0.z), M.push(h0.x, h0.y, h0.z) } this.setAttribute("position", new ve(M, 3)) } } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } } class Xc extends Pp { constructor(t) { super(t), this.uuid = Cs(), this.type = "Shape", this.holes = [] } getPointsHoles(t) { const e = []; for (let n = 0, a = this.holes.length; n < a; n++)e[n] = this.holes[n].getPoints(t); return e } extractPoints(t) { return { shape: this.getPoints(t), holes: this.getPointsHoles(t) } } copy(t) { super.copy(t), this.holes = []; for (let e = 0, n = t.holes.length; e < n; e++) { const a = t.holes[e]; this.holes.push(a.clone()) } return this } toJSON() { const t = super.toJSON(); t.uuid = this.uuid, t.holes = []; for (let e = 0, n = this.holes.length; e < n; e++) { const a = this.holes[e]; t.holes.push(a.toJSON()) } return t } fromJSON(t) { super.fromJSON(t), this.uuid = t.uuid, this.holes = []; for (let e = 0, n = t.holes.length; e < n; e++) { const a = t.holes[e]; this.holes.push(new Pp().fromJSON(a)) } return this } } class JR { static triangulate(t, e, n = 2) { const a = e && e.length, o = a ? e[0] * n : t.length; let f = TE(t, 0, o, n, !0); const h = []; if (!f || f.next === f.prev) return h; let m, g, _, x, S, M, A; if (a && (f = iw(t, e, f, n)), t.length > 80 * n) { m = _ = t[0], g = x = t[1]; for (let C = n; C < o; C += n)S = t[C], M = t[C + 1], S < m && (m = S), M < g && (g = M), S > _ && (_ = S), M > x && (x = M); A = Math.max(_ - m, x - g), A = A !== 0 ? 32767 / A : 0 } return Ip(f, h, n, m, g, A, 0), h } } function TE(r, t, e, n, a) { let o, f; if (a === pw(r, t, e, n) > 0) for (o = t; o < e; o += n)f = L1(o, r[o], r[o + 1], f); else for (o = e - n; o >= t; o -= n)f = L1(o, r[o], r[o + 1], f); return f && kv(f, f.next) && (Fp(f), f = f.next), f } function jc(r, t) { if (!r) return r; t || (t = r); let e = r, n; do if (n = !1, !e.steiner && (kv(e, e.next) || li(e.prev, e, e.next) === 0)) { if (Fp(e), e = t = e.prev, e === e.next) break; n = !0 } else e = e.next; while (n || e !== t); return t } function Ip(r, t, e, n, a, o, f) { if (!r) return; !f && o && ow(r, n, a, o); let h = r, m, g; for (; r.prev !== r.next;) { if (m = r.prev, g = r.next, o ? tw(r, n, a, o) : $R(r)) { t.push(m.i / e | 0), t.push(r.i / e | 0), t.push(g.i / e | 0), Fp(r), r = g.next, h = g.next; continue } if (r = g, r === h) { f ? f === 1 ? (r = ew(jc(r), t, e), Ip(r, t, e, n, a, o, 2)) : f === 2 && nw(r, t, e, n, a, o) : Ip(jc(r), t, e, n, a, o, 1); break } } } function $R(r) { const t = r.prev, e = r, n = r.next; if (li(t, e, n) >= 0) return !1; const a = t.x, o = e.x, f = n.x, h = t.y, m = e.y, g = n.y, _ = a < o ? a < f ? a : f : o < f ? o : f, x = h < m ? h < g ? h : g : m < g ? m : g, S = a > o ? a > f ? a : f : o > f ? o : f, M = h > m ? h > g ? h : g : m > g ? m : g; let A = n.next; for (; A !== t;) { if (A.x >= _ && A.x <= S && A.y >= x && A.y <= M && Mh(a, h, o, m, f, g, A.x, A.y) && li(A.prev, A, A.next) >= 0) return !1; A = A.next } return !0 } function tw(r, t, e, n) { const a = r.prev, o = r, f = r.next; if (li(a, o, f) >= 0) return !1; const h = a.x, m = o.x, g = f.x, _ = a.y, x = o.y, S = f.y, M = h < m ? h < g ? h : g : m < g ? m : g, A = _ < x ? _ < S ? _ : S : x < S ? x : S, C = h > m ? h > g ? h : g : m > g ? m : g, R = _ > x ? _ > S ? _ : S : x > S ? x : S, T = nx(M, A, t, e, n), D = nx(C, R, t, e, n); let N = r.prevZ, U = r.nextZ; for (; N && N.z >= T && U && U.z <= D;) { if (N.x >= M && N.x <= C && N.y >= A && N.y <= R && N !== a && N !== f && Mh(h, _, m, x, g, S, N.x, N.y) && li(N.prev, N, N.next) >= 0 || (N = N.prevZ, U.x >= M && U.x <= C && U.y >= A && U.y <= R && U !== a && U !== f && Mh(h, _, m, x, g, S, U.x, U.y) && li(U.prev, U, U.next) >= 0)) return !1; U = U.nextZ } for (; N && N.z >= T;) { if (N.x >= M && N.x <= C && N.y >= A && N.y <= R && N !== a && N !== f && Mh(h, _, m, x, g, S, N.x, N.y) && li(N.prev, N, N.next) >= 0) return !1; N = N.prevZ } for (; U && U.z <= D;) { if (U.x >= M && U.x <= C && U.y >= A && U.y <= R && U !== a && U !== f && Mh(h, _, m, x, g, S, U.x, U.y) && li(U.prev, U, U.next) >= 0) return !1; U = U.nextZ } return !0 } function ew(r, t, e) { let n = r; do { const a = n.prev, o = n.next.next; !kv(a, o) && AE(a, n, n.next, o) && Hp(a, o) && Hp(o, a) && (t.push(a.i / e | 0), t.push(n.i / e | 0), t.push(o.i / e | 0), Fp(n), Fp(n.next), n = r = o), n = n.next } while (n !== r); return jc(n) } function nw(r, t, e, n, a, o) { let f = r; do { let h = f.next.next; for (; h !== f.prev;) { if (f.i !== h.i && fw(f, h)) { let m = RE(f, h); f = jc(f, f.next), m = jc(m, m.next), Ip(f, t, e, n, a, o, 0), Ip(m, t, e, n, a, o, 0); return } h = h.next } f = f.next } while (f !== r) } function iw(r, t, e, n) { const a = []; let o, f, h, m, g; for (o = 0, f = t.length; o < f; o++)h = t[o] * n, m = o < f - 1 ? t[o + 1] * n : r.length, g = TE(r, h, m, n, !1), g === g.next && (g.steiner = !0), a.push(cw(g)); for (a.sort(aw), o = 0; o < a.length; o++)e = sw(a[o], e); return e } function aw(r, t) { return r.x - t.x } function sw(r, t) { const e = rw(r, t); if (!e) return t; const n = RE(e, r); return jc(n, n.next), jc(e, e.next) } function rw(r, t) { let e = t, n = -1 / 0, a; const o = r.x, f = r.y; do { if (f <= e.y && f >= e.next.y && e.next.y !== e.y) { const S = e.x + (f - e.y) * (e.next.x - e.x) / (e.next.y - e.y); if (S <= o && S > n && (n = S, a = e.x < e.next.x ? e : e.next, S === o)) return a } e = e.next } while (e !== t); if (!a) return null; const h = a, m = a.x, g = a.y; let _ = 1 / 0, x; e = a; do o >= e.x && e.x >= m && o !== e.x && Mh(f < g ? o : n, f, m, g, f < g ? n : o, f, e.x, e.y) && (x = Math.abs(f - e.y) / (o - e.x), Hp(e, r) && (x < _ || x === _ && (e.x > a.x || e.x === a.x && lw(a, e))) && (a = e, _ = x)), e = e.next; while (e !== h); return a } function lw(r, t) { return li(r.prev, r, t.prev) < 0 && li(t.next, r, r.next) < 0 } function ow(r, t, e, n) { let a = r; do a.z === 0 && (a.z = nx(a.x, a.y, t, e, n)), a.prevZ = a.prev, a.nextZ = a.next, a = a.next; while (a !== r); a.prevZ.nextZ = null, a.prevZ = null, uw(a) } function uw(r) { let t, e, n, a, o, f, h, m, g = 1; do { for (e = r, r = null, o = null, f = 0; e;) { for (f++, n = e, h = 0, t = 0; t < g && (h++, n = n.nextZ, !!n); t++); for (m = g; h > 0 || m > 0 && n;)h !== 0 && (m === 0 || !n || e.z <= n.z) ? (a = e, e = e.nextZ, h--) : (a = n, n = n.nextZ, m--), o ? o.nextZ = a : r = a, a.prevZ = o, o = a; e = n } o.nextZ = null, g *= 2 } while (f > 1); return r } function nx(r, t, e, n, a) { return r = (r - e) * a | 0, t = (t - n) * a | 0, r = (r | r << 8) & 16711935, r = (r | r << 4) & 252645135, r = (r | r << 2) & 858993459, r = (r | r << 1) & 1431655765, t = (t | t << 8) & 16711935, t = (t | t << 4) & 252645135, t = (t | t << 2) & 858993459, t = (t | t << 1) & 1431655765, r | t << 1 } function cw(r) { let t = r, e = r; do (t.x < e.x || t.x === e.x && t.y < e.y) && (e = t), t = t.next; while (t !== r); return e } function Mh(r, t, e, n, a, o, f, h) { return (a - f) * (t - h) >= (r - f) * (o - h) && (r - f) * (n - h) >= (e - f) * (t - h) && (e - f) * (o - h) >= (a - f) * (n - h) } function fw(r, t) { return r.next.i !== t.i && r.prev.i !== t.i && !hw(r, t) && (Hp(r, t) && Hp(t, r) && dw(r, t) && (li(r.prev, r, t.prev) || li(r, t.prev, t)) || kv(r, t) && li(r.prev, r, r.next) > 0 && li(t.prev, t, t.next) > 0) } function li(r, t, e) { return (t.y - r.y) * (e.x - t.x) - (t.x - r.x) * (e.y - t.y) } function kv(r, t) { return r.x === t.x && r.y === t.y } function AE(r, t, e, n) { const a = m0(li(r, t, e)), o = m0(li(r, t, n)), f = m0(li(e, n, r)), h = m0(li(e, n, t)); return !!(a !== o && f !== h || a === 0 && p0(r, e, t) || o === 0 && p0(r, n, t) || f === 0 && p0(e, r, n) || h === 0 && p0(e, t, n)) } function p0(r, t, e) { return t.x <= Math.max(r.x, e.x) && t.x >= Math.min(r.x, e.x) && t.y <= Math.max(r.y, e.y) && t.y >= Math.min(r.y, e.y) } function m0(r) { return r > 0 ? 1 : r < 0 ? -1 : 0 } function hw(r, t) { let e = r; do { if (e.i !== r.i && e.next.i !== r.i && e.i !== t.i && e.next.i !== t.i && AE(e, e.next, r, t)) return !0; e = e.next } while (e !== r); return !1 } function Hp(r, t) { return li(r.prev, r, r.next) < 0 ? li(r, t, r.next) >= 0 && li(r, r.prev, t) >= 0 : li(r, t, r.prev) < 0 || li(r, r.next, t) < 0 } function dw(r, t) { let e = r, n = !1; const a = (r.x + t.x) / 2, o = (r.y + t.y) / 2; do e.y > o != e.next.y > o && e.next.y !== e.y && a < (e.next.x - e.x) * (o - e.y) / (e.next.y - e.y) + e.x && (n = !n), e = e.next; while (e !== r); return n } function RE(r, t) { const e = new ix(r.i, r.x, r.y), n = new ix(t.i, t.x, t.y), a = r.next, o = t.prev; return r.next = t, t.prev = r, e.next = a, a.prev = e, n.next = e, e.prev = n, o.next = n, n.prev = o, n } function L1(r, t, e, n) { const a = new ix(r, t, e); return n ? (a.next = n.next, a.prev = n, n.next.prev = a, n.next = a) : (a.prev = a, a.next = a), a } function Fp(r) { r.next.prev = r.prev, r.prev.next = r.next, r.prevZ && (r.prevZ.nextZ = r.nextZ), r.nextZ && (r.nextZ.prevZ = r.prevZ) } function ix(r, t, e) { this.i = r, this.x = t, this.y = e, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = !1 } function pw(r, t, e, n) { let a = 0; for (let o = t, f = e - n; o < e; o += n)a += (r[f] - r[o]) * (r[o + 1] + r[f + 1]), f = o; return a } class Al { static area(t) { const e = t.length; let n = 0; for (let a = e - 1, o = 0; o < e; a = o++)n += t[a].x * t[o].y - t[o].x * t[a].y; return n * .5 } static isClockWise(t) { return Al.area(t) < 0 } static triangulateShape(t, e) { const n = [], a = [], o = []; z1(t), B1(n, t); let f = t.length; e.forEach(z1); for (let m = 0; m < e.length; m++)a.push(f), f += e[m].length, B1(n, e[m]); const h = JR.triangulate(n, a); for (let m = 0; m < h.length; m += 3)o.push(h.slice(m, m + 3)); return o } } function z1(r) { const t = r.length; t > 2 && r[t - 1].equals(r[0]) && r.pop() } function B1(r, t) { for (let e = 0; e < t.length; e++)r.push(t[e].x), r.push(t[e].y) } class jv extends Qe { constructor(t = new Xc([new zt(.5, .5), new zt(-.5, .5), new zt(-.5, -.5), new zt(.5, -.5)]), e = {}) { super(), this.type = "ExtrudeGeometry", this.parameters = { shapes: t, options: e }, t = Array.isArray(t) ? t : [t]; const n = this, a = [], o = []; for (let h = 0, m = t.length; h < m; h++) { const g = t[h]; f(g) } this.setAttribute("position", new ve(a, 3)), this.setAttribute("uv", new ve(o, 2)), this.computeVertexNormals(); function f(h) { const m = [], g = e.curveSegments !== void 0 ? e.curveSegments : 12, _ = e.steps !== void 0 ? e.steps : 1, x = e.depth !== void 0 ? e.depth : 1; let S = e.bevelEnabled !== void 0 ? e.bevelEnabled : !0, M = e.bevelThickness !== void 0 ? e.bevelThickness : .2, A = e.bevelSize !== void 0 ? e.bevelSize : M - .1, C = e.bevelOffset !== void 0 ? e.bevelOffset : 0, R = e.bevelSegments !== void 0 ? e.bevelSegments : 3; const T = e.extrudePath, D = e.UVGenerator !== void 0 ? e.UVGenerator : mw; let N, U = !1, V, I, G, q; T && (N = T.getSpacedPoints(_), U = !0, S = !1, V = T.computeFrenetFrames(_, !1), I = new k, G = new k, q = new k), S || (R = 0, M = 0, A = 0, C = 0); const z = h.extractPoints(g); let L = z.shape; const j = z.holes; if (!Al.isClockWise(L)) { L = L.reverse(); for (let Bt = 0, Ut = j.length; Bt < Ut; Bt++) { const W = j[Bt]; Al.isClockWise(W) && (j[Bt] = W.reverse()) } } const tt = Al.triangulateShape(L, j), ct = L; for (let Bt = 0, Ut = j.length; Bt < Ut; Bt++) { const W = j[Bt]; L = L.concat(W) } function xt(Bt, Ut, W) { return Ut || console.error("THREE.ExtrudeGeometry: vec does not exist"), Bt.clone().addScaledVector(Ut, W) } const K = L.length, ft = tt.length; function nt(Bt, Ut, W) { let de, Ht, ee; const jt = Bt.x - Ut.x, be = Bt.y - Ut.y, Qt = W.x - Bt.x, X = W.y - Bt.y, B = jt * jt + be * be, mt = jt * X - be * Qt; if (Math.abs(mt) > Number.EPSILON) { const bt = Math.sqrt(B), Pt = Math.sqrt(Qt * Qt + X * X), Ct = Ut.x - be / bt, pe = Ut.y + jt / bt, te = W.x - X / Pt, oe = W.y + Qt / Pt, qe = ((te - Ct) * X - (oe - pe) * Qt) / (jt * X - be * Qt); de = Ct + jt * qe - Bt.x, Ht = pe + be * qe - Bt.y; const Yt = de * de + Ht * Ht; if (Yt <= 2) return new zt(de, Ht); ee = Math.sqrt(Yt / 2) } else { let bt = !1; jt > Number.EPSILON ? Qt > Number.EPSILON && (bt = !0) : jt < -Number.EPSILON ? Qt < -Number.EPSILON && (bt = !0) : Math.sign(be) === Math.sign(X) && (bt = !0), bt ? (de = -be, Ht = jt, ee = Math.sqrt(B)) : (de = jt, Ht = be, ee = Math.sqrt(B / 2)) } return new zt(de / ee, Ht / ee) } const Et = []; for (let Bt = 0, Ut = ct.length, W = Ut - 1, de = Bt + 1; Bt < Ut; Bt++, W++, de++)W === Ut && (W = 0), de === Ut && (de = 0), Et[Bt] = nt(ct[Bt], ct[W], ct[de]); const Y = []; let it, Dt = Et.concat(); for (let Bt = 0, Ut = j.length; Bt < Ut; Bt++) { const W = j[Bt]; it = []; for (let de = 0, Ht = W.length, ee = Ht - 1, jt = de + 1; de < Ht; de++, ee++, jt++)ee === Ht && (ee = 0), jt === Ht && (jt = 0), it[de] = nt(W[de], W[ee], W[jt]); Y.push(it), Dt = Dt.concat(it) } for (let Bt = 0; Bt < R; Bt++) { const Ut = Bt / R, W = M * Math.cos(Ut * Math.PI / 2), de = A * Math.sin(Ut * Math.PI / 2) + C; for (let Ht = 0, ee = ct.length; Ht < ee; Ht++) { const jt = xt(ct[Ht], Et[Ht], de); Vt(jt.x, jt.y, -W) } for (let Ht = 0, ee = j.length; Ht < ee; Ht++) { const jt = j[Ht]; it = Y[Ht]; for (let be = 0, Qt = jt.length; be < Qt; be++) { const X = xt(jt[be], it[be], de); Vt(X.x, X.y, -W) } } } const Xt = A + C; for (let Bt = 0; Bt < K; Bt++) { const Ut = S ? xt(L[Bt], Dt[Bt], Xt) : L[Bt]; U ? (G.copy(V.normals[0]).multiplyScalar(Ut.x), I.copy(V.binormals[0]).multiplyScalar(Ut.y), q.copy(N[0]).add(G).add(I), Vt(q.x, q.y, q.z)) : Vt(Ut.x, Ut.y, 0) } for (let Bt = 1; Bt <= _; Bt++)for (let Ut = 0; Ut < K; Ut++) { const W = S ? xt(L[Ut], Dt[Ut], Xt) : L[Ut]; U ? (G.copy(V.normals[Bt]).multiplyScalar(W.x), I.copy(V.binormals[Bt]).multiplyScalar(W.y), q.copy(N[Bt]).add(G).add(I), Vt(q.x, q.y, q.z)) : Vt(W.x, W.y, x / _ * Bt) } for (let Bt = R - 1; Bt >= 0; Bt--) { const Ut = Bt / R, W = M * Math.cos(Ut * Math.PI / 2), de = A * Math.sin(Ut * Math.PI / 2) + C; for (let Ht = 0, ee = ct.length; Ht < ee; Ht++) { const jt = xt(ct[Ht], Et[Ht], de); Vt(jt.x, jt.y, x + W) } for (let Ht = 0, ee = j.length; Ht < ee; Ht++) { const jt = j[Ht]; it = Y[Ht]; for (let be = 0, Qt = jt.length; be < Qt; be++) { const X = xt(jt[be], it[be], de); U ? Vt(X.x, X.y + N[_ - 1].y, N[_ - 1].x + W) : Vt(X.x, X.y, x + W) } } } $(), Tt(); function $() { const Bt = a.length / 3; if (S) { let Ut = 0, W = K * Ut; for (let de = 0; de < ft; de++) { const Ht = tt[de]; kt(Ht[2] + W, Ht[1] + W, Ht[0] + W) } Ut = _ + R * 2, W = K * Ut; for (let de = 0; de < ft; de++) { const Ht = tt[de]; kt(Ht[0] + W, Ht[1] + W, Ht[2] + W) } } else { for (let Ut = 0; Ut < ft; Ut++) { const W = tt[Ut]; kt(W[2], W[1], W[0]) } for (let Ut = 0; Ut < ft; Ut++) { const W = tt[Ut]; kt(W[0] + K * _, W[1] + K * _, W[2] + K * _) } } n.addGroup(Bt, a.length / 3 - Bt, 0) } function Tt() { const Bt = a.length / 3; let Ut = 0; Lt(ct, Ut), Ut += ct.length; for (let W = 0, de = j.length; W < de; W++) { const Ht = j[W]; Lt(Ht, Ut), Ut += Ht.length } n.addGroup(Bt, a.length / 3 - Bt, 1) } function Lt(Bt, Ut) { let W = Bt.length; for (; --W >= 0;) { const de = W; let Ht = W - 1; Ht < 0 && (Ht = Bt.length - 1); for (let ee = 0, jt = _ + R * 2; ee < jt; ee++) { const be = K * ee, Qt = K * (ee + 1), X = Ut + de + be, B = Ut + Ht + be, mt = Ut + Ht + Qt, bt = Ut + de + Qt; Me(X, B, mt, bt) } } } function Vt(Bt, Ut, W) { m.push(Bt), m.push(Ut), m.push(W) } function kt(Bt, Ut, W) { Jt(Bt), Jt(Ut), Jt(W); const de = a.length / 3, Ht = D.generateTopUV(n, a, de - 3, de - 2, de - 1); Le(Ht[0]), Le(Ht[1]), Le(Ht[2]) } function Me(Bt, Ut, W, de) { Jt(Bt), Jt(Ut), Jt(de), Jt(Ut), Jt(W), Jt(de); const Ht = a.length / 3, ee = D.generateSideWallUV(n, a, Ht - 6, Ht - 3, Ht - 2, Ht - 1); Le(ee[0]), Le(ee[1]), Le(ee[3]), Le(ee[1]), Le(ee[2]), Le(ee[3]) } function Jt(Bt) { a.push(m[Bt * 3 + 0]), a.push(m[Bt * 3 + 1]), a.push(m[Bt * 3 + 2]) } function Le(Bt) { o.push(Bt.x), o.push(Bt.y) } } } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } toJSON() { const t = super.toJSON(), e = this.parameters.shapes, n = this.parameters.options; return gw(e, n, t) } static fromJSON(t, e) { const n = []; for (let o = 0, f = t.shapes.length; o < f; o++) { const h = e[t.shapes[o]]; n.push(h) } const a = t.options.extrudePath; return a !== void 0 && (t.options.extrudePath = new _v[a.type]().fromJSON(a)), new jv(n, t.options) } } const mw = { generateTopUV: function (r, t, e, n, a) { const o = t[e * 3], f = t[e * 3 + 1], h = t[n * 3], m = t[n * 3 + 1], g = t[a * 3], _ = t[a * 3 + 1]; return [new zt(o, f), new zt(h, m), new zt(g, _)] }, generateSideWallUV: function (r, t, e, n, a, o) { const f = t[e * 3], h = t[e * 3 + 1], m = t[e * 3 + 2], g = t[n * 3], _ = t[n * 3 + 1], x = t[n * 3 + 2], S = t[a * 3], M = t[a * 3 + 1], A = t[a * 3 + 2], C = t[o * 3], R = t[o * 3 + 1], T = t[o * 3 + 2]; return Math.abs(h - _) < Math.abs(f - g) ? [new zt(f, 1 - m), new zt(g, 1 - x), new zt(S, 1 - A), new zt(C, 1 - T)] : [new zt(h, 1 - m), new zt(_, 1 - x), new zt(M, 1 - A), new zt(R, 1 - T)] } }; function gw(r, t, e) { if (e.shapes = [], Array.isArray(r)) for (let n = 0, a = r.length; n < a; n++) { const o = r[n]; e.shapes.push(o.uuid) } else e.shapes.push(r.uuid); return e.options = Object.assign({}, t), t.extrudePath !== void 0 && (e.options.extrudePath = t.extrudePath.toJSON()), e } class Zv extends Ru { constructor(t = 1, e = 0) { const n = (1 + Math.sqrt(5)) / 2, a = [-1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, 0, 0, -1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, n, 0, -1, n, 0, 1, -n, 0, -1, -n, 0, 1], o = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1]; super(a, o, t, e), this.type = "IcosahedronGeometry", this.parameters = { radius: t, detail: e } } static fromJSON(t) { return new Zv(t.radius, t.detail) } } class tm extends Ru { constructor(t = 1, e = 0) { const n = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], a = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2]; super(n, a, t, e), this.type = "OctahedronGeometry", this.parameters = { radius: t, detail: e } } static fromJSON(t) { return new tm(t.radius, t.detail) } } class Ih extends Qe { constructor(t = 1, e = 1, n = 1, a = 1) { super(), this.type = "PlaneGeometry", this.parameters = { width: t, height: e, widthSegments: n, heightSegments: a }; const o = t / 2, f = e / 2, h = Math.floor(n), m = Math.floor(a), g = h + 1, _ = m + 1, x = t / h, S = e / m, M = [], A = [], C = [], R = []; for (let T = 0; T < _; T++) { const D = T * S - f; for (let N = 0; N < g; N++) { const U = N * x - o; A.push(U, -D, 0), C.push(0, 0, 1), R.push(N / h), R.push(1 - T / m) } } for (let T = 0; T < m; T++)for (let D = 0; D < h; D++) { const N = D + g * T, U = D + g * (T + 1), V = D + 1 + g * (T + 1), I = D + 1 + g * T; M.push(N, U, I), M.push(U, V, I) } this.setIndex(M), this.setAttribute("position", new ve(A, 3)), this.setAttribute("normal", new ve(C, 3)), this.setAttribute("uv", new ve(R, 2)) } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new Ih(t.width, t.height, t.widthSegments, t.heightSegments) } } class Qv extends Qe { constructor(t = .5, e = 1, n = 32, a = 1, o = 0, f = Math.PI * 2) { super(), this.type = "RingGeometry", this.parameters = { innerRadius: t, outerRadius: e, thetaSegments: n, phiSegments: a, thetaStart: o, thetaLength: f }, n = Math.max(3, n), a = Math.max(1, a); const h = [], m = [], g = [], _ = []; let x = t; const S = (e - t) / a, M = new k, A = new zt; for (let C = 0; C <= a; C++) { for (let R = 0; R <= n; R++) { const T = o + R / n * f; M.x = x * Math.cos(T), M.y = x * Math.sin(T), m.push(M.x, M.y, M.z), g.push(0, 0, 1), A.x = (M.x / e + 1) / 2, A.y = (M.y / e + 1) / 2, _.push(A.x, A.y) } x += S } for (let C = 0; C < a; C++) { const R = C * (n + 1); for (let T = 0; T < n; T++) { const D = T + R, N = D, U = D + n + 1, V = D + n + 2, I = D + 1; h.push(N, U, I), h.push(U, V, I) } } this.setIndex(h), this.setAttribute("position", new ve(m, 3)), this.setAttribute("normal", new ve(g, 3)), this.setAttribute("uv", new ve(_, 2)) } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new Qv(t.innerRadius, t.outerRadius, t.thetaSegments, t.phiSegments, t.thetaStart, t.thetaLength) } } class Kv extends Qe { constructor(t = new Xc([new zt(0, .5), new zt(-.5, -.5), new zt(.5, -.5)]), e = 12) { super(), this.type = "ShapeGeometry", this.parameters = { shapes: t, curveSegments: e }; const n = [], a = [], o = [], f = []; let h = 0, m = 0; if (Array.isArray(t) === !1) g(t); else for (let _ = 0; _ < t.length; _++)g(t[_]), this.addGroup(h, m, _), h += m, m = 0; this.setIndex(n), this.setAttribute("position", new ve(a, 3)), this.setAttribute("normal", new ve(o, 3)), this.setAttribute("uv", new ve(f, 2)); function g(_) { const x = a.length / 3, S = _.extractPoints(e); let M = S.shape; const A = S.holes; Al.isClockWise(M) === !1 && (M = M.reverse()); for (let R = 0, T = A.length; R < T; R++) { const D = A[R]; Al.isClockWise(D) === !0 && (A[R] = D.reverse()) } const C = Al.triangulateShape(M, A); for (let R = 0, T = A.length; R < T; R++) { const D = A[R]; M = M.concat(D) } for (let R = 0, T = M.length; R < T; R++) { const D = M[R]; a.push(D.x, D.y, 0), o.push(0, 0, 1), f.push(D.x, D.y) } for (let R = 0, T = C.length; R < T; R++) { const D = C[R], N = D[0] + x, U = D[1] + x, V = D[2] + x; n.push(N, U, V), m += 3 } } } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } toJSON() { const t = super.toJSON(), e = this.parameters.shapes; return vw(e, t) } static fromJSON(t, e) { const n = []; for (let a = 0, o = t.shapes.length; a < o; a++) { const f = e[t.shapes[a]]; n.push(f) } return new Kv(n, t.curveSegments) } } function vw(r, t) { if (t.shapes = [], Array.isArray(r)) for (let e = 0, n = r.length; e < n; e++) { const a = r[e]; t.shapes.push(a.uuid) } else t.shapes.push(r.uuid); return t } class em extends Qe { constructor(t = 1, e = 32, n = 16, a = 0, o = Math.PI * 2, f = 0, h = Math.PI) { super(), this.type = "SphereGeometry", this.parameters = { radius: t, widthSegments: e, heightSegments: n, phiStart: a, phiLength: o, thetaStart: f, thetaLength: h }, e = Math.max(3, Math.floor(e)), n = Math.max(2, Math.floor(n)); const m = Math.min(f + h, Math.PI); let g = 0; const _ = [], x = new k, S = new k, M = [], A = [], C = [], R = []; for (let T = 0; T <= n; T++) { const D = [], N = T / n; let U = 0; T === 0 && f === 0 ? U = .5 / e : T === n && m === Math.PI && (U = -.5 / e); for (let V = 0; V <= e; V++) { const I = V / e; x.x = -t * Math.cos(a + I * o) * Math.sin(f + N * h), x.y = t * Math.cos(f + N * h), x.z = t * Math.sin(a + I * o) * Math.sin(f + N * h), A.push(x.x, x.y, x.z), S.copy(x).normalize(), C.push(S.x, S.y, S.z), R.push(I + U, 1 - N), D.push(g++) } _.push(D) } for (let T = 0; T < n; T++)for (let D = 0; D < e; D++) { const N = _[T][D + 1], U = _[T][D], V = _[T + 1][D], I = _[T + 1][D + 1]; (T !== 0 || f > 0) && M.push(N, U, I), (T !== n - 1 || m < Math.PI) && M.push(U, V, I) } this.setIndex(M), this.setAttribute("position", new ve(A, 3)), this.setAttribute("normal", new ve(C, 3)), this.setAttribute("uv", new ve(R, 2)) } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new em(t.radius, t.widthSegments, t.heightSegments, t.phiStart, t.phiLength, t.thetaStart, t.thetaLength) } } class Jv extends Ru { constructor(t = 1, e = 0) { const n = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], a = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1]; super(n, a, t, e), this.type = "TetrahedronGeometry", this.parameters = { radius: t, detail: e } } static fromJSON(t) { return new Jv(t.radius, t.detail) } } class $v extends Qe { constructor(t = 1, e = .4, n = 12, a = 48, o = Math.PI * 2) { super(), this.type = "TorusGeometry", this.parameters = { radius: t, tube: e, radialSegments: n, tubularSegments: a, arc: o }, n = Math.floor(n), a = Math.floor(a); const f = [], h = [], m = [], g = [], _ = new k, x = new k, S = new k; for (let M = 0; M <= n; M++)for (let A = 0; A <= a; A++) { const C = A / a * o, R = M / n * Math.PI * 2; x.x = (t + e * Math.cos(R)) * Math.cos(C), x.y = (t + e * Math.cos(R)) * Math.sin(C), x.z = e * Math.sin(R), h.push(x.x, x.y, x.z), _.x = t * Math.cos(C), _.y = t * Math.sin(C), S.subVectors(x, _).normalize(), m.push(S.x, S.y, S.z), g.push(A / a), g.push(M / n) } for (let M = 1; M <= n; M++)for (let A = 1; A <= a; A++) { const C = (a + 1) * M + A - 1, R = (a + 1) * (M - 1) + A - 1, T = (a + 1) * (M - 1) + A, D = (a + 1) * M + A; f.push(C, R, D), f.push(R, T, D) } this.setIndex(f), this.setAttribute("position", new ve(h, 3)), this.setAttribute("normal", new ve(m, 3)), this.setAttribute("uv", new ve(g, 2)) } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new $v(t.radius, t.tube, t.radialSegments, t.tubularSegments, t.arc) } } class ty extends Qe { constructor(t = 1, e = .4, n = 64, a = 8, o = 2, f = 3) { super(), this.type = "TorusKnotGeometry", this.parameters = { radius: t, tube: e, tubularSegments: n, radialSegments: a, p: o, q: f }, n = Math.floor(n), a = Math.floor(a); const h = [], m = [], g = [], _ = [], x = new k, S = new k, M = new k, A = new k, C = new k, R = new k, T = new k; for (let N = 0; N <= n; ++N) { const U = N / n * o * Math.PI * 2; D(U, o, f, t, M), D(U + .01, o, f, t, A), R.subVectors(A, M), T.addVectors(A, M), C.crossVectors(R, T), T.crossVectors(C, R), C.normalize(), T.normalize(); for (let V = 0; V <= a; ++V) { const I = V / a * Math.PI * 2, G = -e * Math.cos(I), q = e * Math.sin(I); x.x = M.x + (G * T.x + q * C.x), x.y = M.y + (G * T.y + q * C.y), x.z = M.z + (G * T.z + q * C.z), m.push(x.x, x.y, x.z), S.subVectors(x, M).normalize(), g.push(S.x, S.y, S.z), _.push(N / n), _.push(V / a) } } for (let N = 1; N <= n; N++)for (let U = 1; U <= a; U++) { const V = (a + 1) * (N - 1) + (U - 1), I = (a + 1) * N + (U - 1), G = (a + 1) * N + U, q = (a + 1) * (N - 1) + U; h.push(V, I, q), h.push(I, G, q) } this.setIndex(h), this.setAttribute("position", new ve(m, 3)), this.setAttribute("normal", new ve(g, 3)), this.setAttribute("uv", new ve(_, 2)); function D(N, U, V, I, G) { const q = Math.cos(N), z = Math.sin(N), L = V / U * N, j = Math.cos(L); G.x = I * (2 + j) * .5 * q, G.y = I * (2 + j) * z * .5, G.z = I * Math.sin(L) * .5 } } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new ty(t.radius, t.tube, t.tubularSegments, t.radialSegments, t.p, t.q) } } class ey extends Qe { constructor(t = new Vx(new k(-1, -1, 0), new k(-1, 1, 0), new k(1, 1, 0)), e = 64, n = 1, a = 8, o = !1) { super(), this.type = "TubeGeometry", this.parameters = { path: t, tubularSegments: e, radius: n, radialSegments: a, closed: o }; const f = t.computeFrenetFrames(e, o); this.tangents = f.tangents, this.normals = f.normals, this.binormals = f.binormals; const h = new k, m = new k, g = new zt; let _ = new k; const x = [], S = [], M = [], A = []; C(), this.setIndex(A), this.setAttribute("position", new ve(x, 3)), this.setAttribute("normal", new ve(S, 3)), this.setAttribute("uv", new ve(M, 2)); function C() { for (let N = 0; N < e; N++)R(N); R(o === !1 ? e : 0), D(), T() } function R(N) { _ = t.getPointAt(N / e, _); const U = f.normals[N], V = f.binormals[N]; for (let I = 0; I <= a; I++) { const G = I / a * Math.PI * 2, q = Math.sin(G), z = -Math.cos(G); m.x = z * U.x + q * V.x, m.y = z * U.y + q * V.y, m.z = z * U.z + q * V.z, m.normalize(), S.push(m.x, m.y, m.z), h.x = _.x + n * m.x, h.y = _.y + n * m.y, h.z = _.z + n * m.z, x.push(h.x, h.y, h.z) } } function T() { for (let N = 1; N <= e; N++)for (let U = 1; U <= a; U++) { const V = (a + 1) * (N - 1) + (U - 1), I = (a + 1) * N + (U - 1), G = (a + 1) * N + U, q = (a + 1) * (N - 1) + U; A.push(V, I, q), A.push(I, G, q) } } function D() { for (let N = 0; N <= e; N++)for (let U = 0; U <= a; U++)g.x = N / e, g.y = U / a, M.push(g.x, g.y) } } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } toJSON() { const t = super.toJSON(); return t.path = this.parameters.path.toJSON(), t } static fromJSON(t) { return new ey(new _v[t.path.type]().fromJSON(t.path), t.tubularSegments, t.radius, t.radialSegments, t.closed) } } class wE extends Qe { constructor(t = null) { if (super(), this.type = "WireframeGeometry", this.parameters = { geometry: t }, t !== null) { const e = [], n = new Set, a = new k, o = new k; if (t.index !== null) { const f = t.attributes.position, h = t.index; let m = t.groups; m.length === 0 && (m = [{ start: 0, count: h.count, materialIndex: 0 }]); for (let g = 0, _ = m.length; g < _; ++g) { const x = m[g], S = x.start, M = x.count; for (let A = S, C = S + M; A < C; A += 3)for (let R = 0; R < 3; R++) { const T = h.getX(A + R), D = h.getX(A + (R + 1) % 3); a.fromBufferAttribute(f, T), o.fromBufferAttribute(f, D), P1(a, o, n) === !0 && (e.push(a.x, a.y, a.z), e.push(o.x, o.y, o.z)) } } } else { const f = t.attributes.position; for (let h = 0, m = f.count / 3; h < m; h++)for (let g = 0; g < 3; g++) { const _ = 3 * h + g, x = 3 * h + (g + 1) % 3; a.fromBufferAttribute(f, _), o.fromBufferAttribute(f, x), P1(a, o, n) === !0 && (e.push(a.x, a.y, a.z), e.push(o.x, o.y, o.z)) } } this.setAttribute("position", new ve(e, 3)) } } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } } function P1(r, t, e) { const n = `${r.x},${r.y},${r.z}-${t.x},${t.y},${t.z}`, a = `${t.x},${t.y},${t.z}-${r.x},${r.y},${r.z}`; return e.has(n) === !0 || e.has(a) === !0 ? !1 : (e.add(n), e.add(a), !0) } var I1 = Object.freeze({ __proto__: null, BoxGeometry: Kc, CapsuleGeometry: Xv, CircleGeometry: qv, ConeGeometry: Yv, CylinderGeometry: Ph, DodecahedronGeometry: Wv, EdgesGeometry: EE, ExtrudeGeometry: jv, IcosahedronGeometry: Zv, LatheGeometry: $p, OctahedronGeometry: tm, PlaneGeometry: Ih, PolyhedronGeometry: Ru, RingGeometry: Qv, ShapeGeometry: Kv, SphereGeometry: em, TetrahedronGeometry: Jv, TorusGeometry: $v, TorusKnotGeometry: ty, TubeGeometry: ey, WireframeGeometry: wE }); class CE extends Ra { constructor(t) { super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new ce(0), this.transparent = !0, this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.color.copy(t.color), this.fog = t.fog, this } } class DE extends Br { constructor(t) { super(t), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial" } } class Xx extends Ra { constructor(t) { super(), this.isMeshStandardMaterial = !0, this.type = "MeshStandardMaterial", this.defines = { STANDARD: "" }, this.color = new ce(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ce(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Tu, this.normalScale = new zt(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Ds, this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.defines = { STANDARD: "" }, this.color.copy(t.color), this.roughness = t.roughness, this.metalness = t.metalness, this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.roughnessMap = t.roughnessMap, this.metalnessMap = t.metalnessMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapRotation.copy(t.envMapRotation), this.envMapIntensity = t.envMapIntensity, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this } } class UE extends Xx { constructor(t) { super(), this.isMeshPhysicalMaterial = !0, this.defines = { STANDARD: "", PHYSICAL: "" }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new zt(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", { get: function () { return Ve(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1) }, set: function (e) { this.ior = (1 + .4 * e) / (1 - .4 * e) } }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new ce(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new ce(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new ce(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._dispersion = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(t) } get anisotropy() { return this._anisotropy } set anisotropy(t) { this._anisotropy > 0 != t > 0 && this.version++, this._anisotropy = t } get clearcoat() { return this._clearcoat } set clearcoat(t) { this._clearcoat > 0 != t > 0 && this.version++, this._clearcoat = t } get iridescence() { return this._iridescence } set iridescence(t) { this._iridescence > 0 != t > 0 && this.version++, this._iridescence = t } get dispersion() { return this._dispersion } set dispersion(t) { this._dispersion > 0 != t > 0 && this.version++, this._dispersion = t } get sheen() { return this._sheen } set sheen(t) { this._sheen > 0 != t > 0 && this.version++, this._sheen = t } get transmission() { return this._transmission } set transmission(t) { this._transmission > 0 != t > 0 && this.version++, this._transmission = t } copy(t) { return super.copy(t), this.defines = { STANDARD: "", PHYSICAL: "" }, this.anisotropy = t.anisotropy, this.anisotropyRotation = t.anisotropyRotation, this.anisotropyMap = t.anisotropyMap, this.clearcoat = t.clearcoat, this.clearcoatMap = t.clearcoatMap, this.clearcoatRoughness = t.clearcoatRoughness, this.clearcoatRoughnessMap = t.clearcoatRoughnessMap, this.clearcoatNormalMap = t.clearcoatNormalMap, this.clearcoatNormalScale.copy(t.clearcoatNormalScale), this.dispersion = t.dispersion, this.ior = t.ior, this.iridescence = t.iridescence, this.iridescenceMap = t.iridescenceMap, this.iridescenceIOR = t.iridescenceIOR, this.iridescenceThicknessRange = [...t.iridescenceThicknessRange], this.iridescenceThicknessMap = t.iridescenceThicknessMap, this.sheen = t.sheen, this.sheenColor.copy(t.sheenColor), this.sheenColorMap = t.sheenColorMap, this.sheenRoughness = t.sheenRoughness, this.sheenRoughnessMap = t.sheenRoughnessMap, this.transmission = t.transmission, this.transmissionMap = t.transmissionMap, this.thickness = t.thickness, this.thicknessMap = t.thicknessMap, this.attenuationDistance = t.attenuationDistance, this.attenuationColor.copy(t.attenuationColor), this.specularIntensity = t.specularIntensity, this.specularIntensityMap = t.specularIntensityMap, this.specularColor.copy(t.specularColor), this.specularColorMap = t.specularColorMap, this } } class NE extends Ra { constructor(t) { super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new ce(16777215), this.specular = new ce(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ce(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Tu, this.normalScale = new zt(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Ds, this.combine = jp, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.color.copy(t.color), this.specular.copy(t.specular), this.shininess = t.shininess, this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapRotation.copy(t.envMapRotation), this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this } } class OE extends Ra { constructor(t) { super(), this.isMeshToonMaterial = !0, this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new ce(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ce(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Tu, this.normalScale = new zt(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.color.copy(t.color), this.map = t.map, this.gradientMap = t.gradientMap, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.alphaMap = t.alphaMap, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.fog = t.fog, this } } class LE extends Ra { constructor(t) { super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Tu, this.normalScale = new zt(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(t) } copy(t) { return super.copy(t), this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.flatShading = t.flatShading, this } } class zE extends Ra { constructor(t) { super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new ce(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ce(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Tu, this.normalScale = new zt(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Ds, this.combine = jp, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapRotation.copy(t.envMapRotation), this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this } } class qx extends Ra { constructor(t) { super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = Wb, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(t) } copy(t) { return super.copy(t), this.depthPacking = t.depthPacking, this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this } } class Yx extends Ra { constructor(t) { super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(t) } copy(t) { return super.copy(t), this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this } } class BE extends Ra { constructor(t) { super(), this.isMeshMatcapMaterial = !0, this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new ce(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Tu, this.normalScale = new zt(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.defines = { MATCAP: "" }, this.color.copy(t.color), this.matcap = t.matcap, this.map = t.map, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.alphaMap = t.alphaMap, this.flatShading = t.flatShading, this.fog = t.fog, this } } class PE extends Xa { constructor(t) { super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(t) } copy(t) { return super.copy(t), this.scale = t.scale, this.dashSize = t.dashSize, this.gapSize = t.gapSize, this } } function Ic(r, t, e) { return !r || !e && r.constructor === t ? r : typeof t.BYTES_PER_ELEMENT == "number" ? new t(r) : Array.prototype.slice.call(r) } function IE(r) { return ArrayBuffer.isView(r) && !(r instanceof DataView) } function HE(r) { function t(a, o) { return r[a] - r[o] } const e = r.length, n = new Array(e); for (let a = 0; a !== e; ++a)n[a] = a; return n.sort(t), n } function ax(r, t, e) { const n = r.length, a = new r.constructor(n); for (let o = 0, f = 0; f !== n; ++o) { const h = e[o] * t; for (let m = 0; m !== t; ++m)a[f++] = r[h + m] } return a } function Wx(r, t, e, n) { let a = 1, o = r[0]; for (; o !== void 0 && o[n] === void 0;)o = r[a++]; if (o === void 0) return; let f = o[n]; if (f !== void 0) if (Array.isArray(f)) do f = o[n], f !== void 0 && (t.push(o.time), e.push(...f)), o = r[a++]; while (o !== void 0); else if (f.toArray !== void 0) do f = o[n], f !== void 0 && (t.push(o.time), f.toArray(e, e.length)), o = r[a++]; while (o !== void 0); else do f = o[n], f !== void 0 && (t.push(o.time), e.push(f)), o = r[a++]; while (o !== void 0) } function yw(r, t, e, n, a = 30) { const o = r.clone(); o.name = t; const f = []; for (let m = 0; m < o.tracks.length; ++m) { const g = o.tracks[m], _ = g.getValueSize(), x = [], S = []; for (let M = 0; M < g.times.length; ++M) { const A = g.times[M] * a; if (!(A < e || A >= n)) { x.push(g.times[M]); for (let C = 0; C < _; ++C)S.push(g.values[M * _ + C]) } } x.length !== 0 && (g.times = Ic(x, g.times.constructor), g.values = Ic(S, g.values.constructor), f.push(g)) } o.tracks = f; let h = 1 / 0; for (let m = 0; m < o.tracks.length; ++m)h > o.tracks[m].times[0] && (h = o.tracks[m].times[0]); for (let m = 0; m < o.tracks.length; ++m)o.tracks[m].shift(-1 * h); return o.resetDuration(), o } function _w(r, t = 0, e = r, n = 30) { n <= 0 && (n = 30); const a = e.tracks.length, o = t / n; for (let f = 0; f < a; ++f) { const h = e.tracks[f], m = h.ValueTypeName; if (m === "bool" || m === "string") continue; const g = r.tracks.find(function (T) { return T.name === h.name && T.ValueTypeName === m }); if (g === void 0) continue; let _ = 0; const x = h.getValueSize(); h.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (_ = x / 3); let S = 0; const M = g.getValueSize(); g.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (S = M / 3); const A = h.times.length - 1; let C; if (o <= h.times[0]) { const T = _, D = x - _; C = h.values.slice(T, D) } else if (o >= h.times[A]) { const T = A * x + _, D = T + x - _; C = h.values.slice(T, D) } else { const T = h.createInterpolant(), D = _, N = x - _; T.evaluate(o), C = T.resultBuffer.slice(D, N) } m === "quaternion" && new cs().fromArray(C).normalize().conjugate().toArray(C); const R = g.times.length; for (let T = 0; T < R; ++T) { const D = T * M + S; if (m === "quaternion") cs.multiplyQuaternionsFlat(g.values, D, C, 0, g.values, D); else { const N = M - S * 2; for (let U = 0; U < N; ++U)g.values[D + U] -= C[U] } } } return r.blendMode = wx, r } const xw = { convertArray: Ic, isTypedArray: IE, getKeyframeOrder: HE, sortedArray: ax, flattenJSON: Wx, subclip: yw, makeClipAdditive: _w }; class nm { constructor(t, e, n, a) { this.parameterPositions = t, this._cachedIndex = 0, this.resultBuffer = a !== void 0 ? a : new e.constructor(n), this.sampleValues = e, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {} } evaluate(t) { const e = this.parameterPositions; let n = this._cachedIndex, a = e[n], o = e[n - 1]; t: { e: { let f; n: { i: if (!(t < a)) { for (let h = n + 2; ;) { if (a === void 0) { if (t < o) break i; return n = e.length, this._cachedIndex = n, this.copySampleValue_(n - 1) } if (n === h) break; if (o = a, a = e[++n], t < a) break e } f = e.length; break n } if (!(t >= o)) { const h = e[1]; t < h && (n = 2, o = h); for (let m = n - 2; ;) { if (o === void 0) return this._cachedIndex = 0, this.copySampleValue_(0); if (n === m) break; if (a = o, o = e[--n - 1], t >= o) break e } f = n, n = 0; break n } break t } for (; n < f;) { const h = n + f >>> 1; t < e[h] ? f = h : n = h + 1 } if (a = e[n], o = e[n - 1], o === void 0) return this._cachedIndex = 0, this.copySampleValue_(0); if (a === void 0) return n = e.length, this._cachedIndex = n, this.copySampleValue_(n - 1) } this._cachedIndex = n, this.intervalChanged_(n, o, a) } return this.interpolate_(n, o, t, a) } getSettings_() { return this.settings || this.DefaultSettings_ } copySampleValue_(t) { const e = this.resultBuffer, n = this.sampleValues, a = this.valueSize, o = t * a; for (let f = 0; f !== a; ++f)e[f] = n[o + f]; return e } interpolate_() { throw new Error("call to abstract method") } intervalChanged_() { } } class FE extends nm { constructor(t, e, n, a) { super(t, e, n, a), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = { endingStart: Bc, endingEnd: Bc } } intervalChanged_(t, e, n) { const a = this.parameterPositions; let o = t - 2, f = t + 1, h = a[o], m = a[f]; if (h === void 0) switch (this.getSettings_().endingStart) { case Pc: o = t, h = 2 * e - n; break; case Np: o = a.length - 2, h = e + a[o] - a[o + 1]; break; default: o = t, h = n }if (m === void 0) switch (this.getSettings_().endingEnd) { case Pc: f = t, m = 2 * n - e; break; case Np: f = 1, m = n + a[1] - a[0]; break; default: f = t - 1, m = e }const g = (n - e) * .5, _ = this.valueSize; this._weightPrev = g / (e - h), this._weightNext = g / (m - n), this._offsetPrev = o * _, this._offsetNext = f * _ } interpolate_(t, e, n, a) { const o = this.resultBuffer, f = this.sampleValues, h = this.valueSize, m = t * h, g = m - h, _ = this._offsetPrev, x = this._offsetNext, S = this._weightPrev, M = this._weightNext, A = (n - e) / (a - e), C = A * A, R = C * A, T = -S * R + 2 * S * C - S * A, D = (1 + S) * R + (-1.5 - 2 * S) * C + (-.5 + S) * A + 1, N = (-1 - M) * R + (1.5 + M) * C + .5 * A, U = M * R - M * C; for (let V = 0; V !== h; ++V)o[V] = T * f[_ + V] + D * f[g + V] + N * f[m + V] + U * f[x + V]; return o } } class kx extends nm { constructor(t, e, n, a) { super(t, e, n, a) } interpolate_(t, e, n, a) { const o = this.resultBuffer, f = this.sampleValues, h = this.valueSize, m = t * h, g = m - h, _ = (n - e) / (a - e), x = 1 - _; for (let S = 0; S !== h; ++S)o[S] = f[g + S] * x + f[m + S] * _; return o } } class VE extends nm { constructor(t, e, n, a) { super(t, e, n, a) } interpolate_(t) { return this.copySampleValue_(t - 1) } } class Ir { constructor(t, e, n, a) { if (t === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined"); if (e === void 0 || e.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t); this.name = t, this.times = Ic(e, this.TimeBufferType), this.values = Ic(n, this.ValueBufferType), this.setInterpolation(a || this.DefaultInterpolation) } static toJSON(t) { const e = t.constructor; let n; if (e.toJSON !== this.toJSON) n = e.toJSON(t); else { n = { name: t.name, times: Ic(t.times, Array), values: Ic(t.values, Array) }; const a = t.getInterpolation(); a !== t.DefaultInterpolation && (n.interpolation = a) } return n.type = t.ValueTypeName, n } InterpolantFactoryMethodDiscrete(t) { return new VE(this.times, this.values, this.getValueSize(), t) } InterpolantFactoryMethodLinear(t) { return new kx(this.times, this.values, this.getValueSize(), t) } InterpolantFactoryMethodSmooth(t) { return new FE(this.times, this.values, this.getValueSize(), t) } setInterpolation(t) { let e; switch (t) { case Up: e = this.InterpolantFactoryMethodDiscrete; break; case gv: e = this.InterpolantFactoryMethodLinear; break; case w0: e = this.InterpolantFactoryMethodSmooth; break }if (e === void 0) { const n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name; if (this.createInterpolant === void 0) if (t !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation); else throw new Error(n); return console.warn("THREE.KeyframeTrack:", n), this } return this.createInterpolant = e, this } getInterpolation() { switch (this.createInterpolant) { case this.InterpolantFactoryMethodDiscrete: return Up; case this.InterpolantFactoryMethodLinear: return gv; case this.InterpolantFactoryMethodSmooth: return w0 } } getValueSize() { return this.values.length / this.times.length } shift(t) { if (t !== 0) { const e = this.times; for (let n = 0, a = e.length; n !== a; ++n)e[n] += t } return this } scale(t) { if (t !== 1) { const e = this.times; for (let n = 0, a = e.length; n !== a; ++n)e[n] *= t } return this } trim(t, e) { const n = this.times, a = n.length; let o = 0, f = a - 1; for (; o !== a && n[o] < t;)++o; for (; f !== -1 && n[f] > e;)--f; if (++f, o !== 0 || f !== a) { o >= f && (f = Math.max(f, 1), o = f - 1); const h = this.getValueSize(); this.times = n.slice(o, f), this.values = this.values.slice(o * h, f * h) } return this } validate() { let t = !0; const e = this.getValueSize(); e - Math.floor(e) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), t = !1); const n = this.times, a = this.values, o = n.length; o === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), t = !1); let f = null; for (let h = 0; h !== o; h++) { const m = n[h]; if (typeof m == "number" && isNaN(m)) { console.error("THREE.KeyframeTrack: Time is not a valid number.", this, h, m), t = !1; break } if (f !== null && f > m) { console.error("THREE.KeyframeTrack: Out of order keys.", this, h, m, f), t = !1; break } f = m } if (a !== void 0 && IE(a)) for (let h = 0, m = a.length; h !== m; ++h) { const g = a[h]; if (isNaN(g)) { console.error("THREE.KeyframeTrack: Value is not a valid number.", this, h, g), t = !1; break } } return t } optimize() { const t = this.times.slice(), e = this.values.slice(), n = this.getValueSize(), a = this.getInterpolation() === w0, o = t.length - 1; let f = 1; for (let h = 1; h < o; ++h) { let m = !1; const g = t[h], _ = t[h + 1]; if (g !== _ && (h !== 1 || g !== t[0])) if (a) m = !0; else { const x = h * n, S = x - n, M = x + n; for (let A = 0; A !== n; ++A) { const C = e[x + A]; if (C !== e[S + A] || C !== e[M + A]) { m = !0; break } } } if (m) { if (h !== f) { t[f] = t[h]; const x = h * n, S = f * n; for (let M = 0; M !== n; ++M)e[S + M] = e[x + M] } ++f } } if (o > 0) { t[f] = t[o]; for (let h = o * n, m = f * n, g = 0; g !== n; ++g)e[m + g] = e[h + g]; ++f } return f !== t.length ? (this.times = t.slice(0, f), this.values = e.slice(0, f * n)) : (this.times = t, this.values = e), this } clone() { const t = this.times.slice(), e = this.values.slice(), n = this.constructor, a = new n(this.name, t, e); return a.createInterpolant = this.createInterpolant, a } } Ir.prototype.TimeBufferType = Float32Array; Ir.prototype.ValueBufferType = Float32Array; Ir.prototype.DefaultInterpolation = gv; class Jc extends Ir { constructor(t, e, n) { super(t, e, n) } } Jc.prototype.ValueTypeName = "bool"; Jc.prototype.ValueBufferType = Array; Jc.prototype.DefaultInterpolation = Up; Jc.prototype.InterpolantFactoryMethodLinear = void 0; Jc.prototype.InterpolantFactoryMethodSmooth = void 0; class jx extends Ir { } jx.prototype.ValueTypeName = "color"; class Vp extends Ir { } Vp.prototype.ValueTypeName = "number"; class GE extends nm { constructor(t, e, n, a) { super(t, e, n, a) } interpolate_(t, e, n, a) { const o = this.resultBuffer, f = this.sampleValues, h = this.valueSize, m = (n - e) / (a - e); let g = t * h; for (let _ = g + h; g !== _; g += 4)cs.slerpFlat(o, 0, f, g - h, f, g, m); return o } } class im extends Ir { InterpolantFactoryMethodLinear(t) { return new GE(this.times, this.values, this.getValueSize(), t) } } im.prototype.ValueTypeName = "quaternion"; im.prototype.InterpolantFactoryMethodSmooth = void 0; class $c extends Ir { constructor(t, e, n) { super(t, e, n) } } $c.prototype.ValueTypeName = "string"; $c.prototype.ValueBufferType = Array; $c.prototype.DefaultInterpolation = Up; $c.prototype.InterpolantFactoryMethodLinear = void 0; $c.prototype.InterpolantFactoryMethodSmooth = void 0; class Gp extends Ir { } Gp.prototype.ValueTypeName = "vector"; class Xp { constructor(t = "", e = -1, n = [], a = Nv) { this.name = t, this.tracks = n, this.duration = e, this.blendMode = a, this.uuid = Cs(), this.duration < 0 && this.resetDuration() } static parse(t) { const e = [], n = t.tracks, a = 1 / (t.fps || 1); for (let f = 0, h = n.length; f !== h; ++f)e.push(Mw(n[f]).scale(a)); const o = new this(t.name, t.duration, e, t.blendMode); return o.uuid = t.uuid, o } static toJSON(t) { const e = [], n = t.tracks, a = { name: t.name, duration: t.duration, tracks: e, uuid: t.uuid, blendMode: t.blendMode }; for (let o = 0, f = n.length; o !== f; ++o)e.push(Ir.toJSON(n[o])); return a } static CreateFromMorphTargetSequence(t, e, n, a) { const o = e.length, f = []; for (let h = 0; h < o; h++) { let m = [], g = []; m.push((h + o - 1) % o, h, (h + 1) % o), g.push(0, 1, 0); const _ = HE(m); m = ax(m, 1, _), g = ax(g, 1, _), !a && m[0] === 0 && (m.push(o), g.push(g[0])), f.push(new Vp(".morphTargetInfluences[" + e[h].name + "]", m, g).scale(1 / n)) } return new this(t, -1, f) } static findByName(t, e) { let n = t; if (!Array.isArray(t)) { const a = t; n = a.geometry && a.geometry.animations || a.animations } for (let a = 0; a < n.length; a++)if (n[a].name === e) return n[a]; return null } static CreateClipsFromMorphTargetSequences(t, e, n) { const a = {}, o = /^([\w-]*?)([\d]+)$/; for (let h = 0, m = t.length; h < m; h++) { const g = t[h], _ = g.name.match(o); if (_ && _.length > 1) { const x = _[1]; let S = a[x]; S || (a[x] = S = []), S.push(g) } } const f = []; for (const h in a) f.push(this.CreateFromMorphTargetSequence(h, a[h], e, n)); return f } static parseAnimation(t, e) { if (!t) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null; const n = function (x, S, M, A, C) { if (M.length !== 0) { const R = [], T = []; Wx(M, R, T, A), R.length !== 0 && C.push(new x(S, R, T)) } }, a = [], o = t.name || "default", f = t.fps || 30, h = t.blendMode; let m = t.length || -1; const g = t.hierarchy || []; for (let x = 0; x < g.length; x++) { const S = g[x].keys; if (!(!S || S.length === 0)) if (S[0].morphTargets) { const M = {}; let A; for (A = 0; A < S.length; A++)if (S[A].morphTargets) for (let C = 0; C < S[A].morphTargets.length; C++)M[S[A].morphTargets[C]] = -1; for (const C in M) { const R = [], T = []; for (let D = 0; D !== S[A].morphTargets.length; ++D) { const N = S[A]; R.push(N.time), T.push(N.morphTarget === C ? 1 : 0) } a.push(new Vp(".morphTargetInfluence[" + C + "]", R, T)) } m = M.length * f } else { const M = ".bones[" + e[x].name + "]"; n(Gp, M + ".position", S, "pos", a), n(im, M + ".quaternion", S, "rot", a), n(Gp, M + ".scale", S, "scl", a) } } return a.length === 0 ? null : new this(o, m, a, h) } resetDuration() { const t = this.tracks; let e = 0; for (let n = 0, a = t.length; n !== a; ++n) { const o = this.tracks[n]; e = Math.max(e, o.times[o.times.length - 1]) } return this.duration = e, this } trim() { for (let t = 0; t < this.tracks.length; t++)this.tracks[t].trim(0, this.duration); return this } validate() { let t = !0; for (let e = 0; e < this.tracks.length; e++)t = t && this.tracks[e].validate(); return t } optimize() { for (let t = 0; t < this.tracks.length; t++)this.tracks[t].optimize(); return this } clone() { const t = []; for (let e = 0; e < this.tracks.length; e++)t.push(this.tracks[e].clone()); return new this.constructor(this.name, this.duration, t, this.blendMode) } toJSON() { return this.constructor.toJSON(this) } } function Sw(r) { switch (r.toLowerCase()) { case "scalar": case "double": case "float": case "number": case "integer": return Vp; case "vector": case "vector2": case "vector3": case "vector4": return Gp; case "color": return jx; case "quaternion": return im; case "bool": case "boolean": return Jc; case "string": return $c }throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + r) } function Mw(r) { if (r.type === void 0) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse"); const t = Sw(r.type); if (r.times === void 0) { const e = [], n = []; Wx(r.keys, e, n, "value"), r.times = e, r.values = n } return t.parse !== void 0 ? t.parse(r) : new t(r.name, r.times, r.values, r.interpolation) } const go = { enabled: !1, files: {}, add: function (r, t) { this.enabled !== !1 && (this.files[r] = t) }, get: function (r) { if (this.enabled !== !1) return this.files[r] }, remove: function (r) { delete this.files[r] }, clear: function () { this.files = {} } }; class Zx { constructor(t, e, n) { const a = this; let o = !1, f = 0, h = 0, m; const g = []; this.onStart = void 0, this.onLoad = t, this.onProgress = e, this.onError = n, this.itemStart = function (_) { h++, o === !1 && a.onStart !== void 0 && a.onStart(_, f, h), o = !0 }, this.itemEnd = function (_) { f++, a.onProgress !== void 0 && a.onProgress(_, f, h), f === h && (o = !1, a.onLoad !== void 0 && a.onLoad()) }, this.itemError = function (_) { a.onError !== void 0 && a.onError(_) }, this.resolveURL = function (_) { return m ? m(_) : _ }, this.setURLModifier = function (_) { return m = _, this }, this.addHandler = function (_, x) { return g.push(_, x), this }, this.removeHandler = function (_) { const x = g.indexOf(_); return x !== -1 && g.splice(x, 2), this }, this.getHandler = function (_) { for (let x = 0, S = g.length; x < S; x += 2) { const M = g[x], A = g[x + 1]; if (M.global && (M.lastIndex = 0), M.test(_)) return A } return null } } } const XE = new Zx; class fs { constructor(t) { this.manager = t !== void 0 ? t : XE, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {} } load() { } loadAsync(t, e) { const n = this; return new Promise(function (a, o) { n.load(t, a, e, o) }) } parse() { } setCrossOrigin(t) { return this.crossOrigin = t, this } setWithCredentials(t) { return this.withCredentials = t, this } setPath(t) { return this.path = t, this } setResourcePath(t) { return this.resourcePath = t, this } setRequestHeader(t) { return this.requestHeader = t, this } } fs.DEFAULT_MATERIAL_NAME = "__DEFAULT"; const fo = {}; class bw extends Error { constructor(t, e) { super(t), this.response = e } } class Mo extends fs { constructor(t) { super(t) } load(t, e, n, a) { t === void 0 && (t = ""), this.path !== void 0 && (t = this.path + t), t = this.manager.resolveURL(t); const o = go.get(t); if (o !== void 0) return this.manager.itemStart(t), setTimeout(() => { e && e(o), this.manager.itemEnd(t) }, 0), o; if (fo[t] !== void 0) { fo[t].push({ onLoad: e, onProgress: n, onError: a }); return } fo[t] = [], fo[t].push({ onLoad: e, onProgress: n, onError: a }); const f = new Request(t, { headers: new Headers(this.requestHeader), credentials: this.withCredentials ? "include" : "same-origin" }), h = this.mimeType, m = this.responseType; fetch(f).then(g => { if (g.status === 200 || g.status === 0) { if (g.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || g.body === void 0 || g.body.getReader === void 0) return g; const _ = fo[t], x = g.body.getReader(), S = g.headers.get("X-File-Size") || g.headers.get("Content-Length"), M = S ? parseInt(S) : 0, A = M !== 0; let C = 0; const R = new ReadableStream({ start(T) { D(); function D() { x.read().then(({ done: N, value: U }) => { if (N) T.close(); else { C += U.byteLength; const V = new ProgressEvent("progress", { lengthComputable: A, loaded: C, total: M }); for (let I = 0, G = _.length; I < G; I++) { const q = _[I]; q.onProgress && q.onProgress(V) } T.enqueue(U), D() } }, N => { T.error(N) }) } } }); return new Response(R) } else throw new bw(`fetch for "${g.url}" responded with ${g.status}: ${g.statusText}`, g) }).then(g => { switch (m) { case "arraybuffer": return g.arrayBuffer(); case "blob": return g.blob(); case "document": return g.text().then(_ => new DOMParser().parseFromString(_, h)); case "json": return g.json(); default: if (h === void 0) return g.text(); { const x = /charset="?([^;"\s]*)"?/i.exec(h), S = x && x[1] ? x[1].toLowerCase() : void 0, M = new TextDecoder(S); return g.arrayBuffer().then(A => M.decode(A)) } } }).then(g => { go.add(t, g); const _ = fo[t]; delete fo[t]; for (let x = 0, S = _.length; x < S; x++) { const M = _[x]; M.onLoad && M.onLoad(g) } }).catch(g => { const _ = fo[t]; if (_ === void 0) throw this.manager.itemError(t), g; delete fo[t]; for (let x = 0, S = _.length; x < S; x++) { const M = _[x]; M.onError && M.onError(g) } this.manager.itemError(t) }).finally(() => { this.manager.itemEnd(t) }), this.manager.itemStart(t) } setResponseType(t) { return this.responseType = t, this } setMimeType(t) { return this.mimeType = t, this } } class Ew extends fs { constructor(t) { super(t) } load(t, e, n, a) { const o = this, f = new Mo(this.manager); f.setPath(this.path), f.setRequestHeader(this.requestHeader), f.setWithCredentials(this.withCredentials), f.load(t, function (h) { try { e(o.parse(JSON.parse(h))) } catch (m) { a ? a(m) : console.error(m), o.manager.itemError(t) } }, n, a) } parse(t) { const e = []; for (let n = 0; n < t.length; n++) { const a = Xp.parse(t[n]); e.push(a) } return e } } class Tw extends fs { constructor(t) { super(t) } load(t, e, n, a) { const o = this, f = [], h = new Vv, m = new Mo(this.manager); m.setPath(this.path), m.setResponseType("arraybuffer"), m.setRequestHeader(this.requestHeader), m.setWithCredentials(o.withCredentials); let g = 0; function _(x) { m.load(t[x], function (S) { const M = o.parse(S, !0); f[x] = { width: M.width, height: M.height, format: M.format, mipmaps: M.mipmaps }, g += 1, g === 6 && (M.mipmapCount === 1 && (h.minFilter = Li), h.image = f, h.format = M.format, h.needsUpdate = !0, e && e(h)) }, n, a) } if (Array.isArray(t)) for (let x = 0, S = t.length; x < S; ++x)_(x); else m.load(t, function (x) { const S = o.parse(x, !0); if (S.isCubemap) { const M = S.mipmaps.length / S.mipmapCount; for (let A = 0; A < M; A++) { f[A] = { mipmaps: [] }; for (let C = 0; C < S.mipmapCount; C++)f[A].mipmaps.push(S.mipmaps[A * S.mipmapCount + C]), f[A].format = S.format, f[A].width = S.width, f[A].height = S.height } h.image = f } else h.image.width = S.width, h.image.height = S.height, h.mipmaps = S.mipmaps; S.mipmapCount === 1 && (h.minFilter = Li), h.format = S.format, h.needsUpdate = !0, e && e(h) }, n, a); return h } } class qp extends fs { constructor(t) { super(t) } load(t, e, n, a) { this.path !== void 0 && (t = this.path + t), t = this.manager.resolveURL(t); const o = this, f = go.get(t); if (f !== void 0) return o.manager.itemStart(t), setTimeout(function () { e && e(f), o.manager.itemEnd(t) }, 0), f; const h = Bp("img"); function m() { _(), go.add(t, this), e && e(this), o.manager.itemEnd(t) } function g(x) { _(), a && a(x), o.manager.itemError(t), o.manager.itemEnd(t) } function _() { h.removeEventListener("load", m, !1), h.removeEventListener("error", g, !1) } return h.addEventListener("load", m, !1), h.addEventListener("error", g, !1), t.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (h.crossOrigin = this.crossOrigin), o.manager.itemStart(t), h.src = t, h } } class Aw extends fs { constructor(t) { super(t) } load(t, e, n, a) { const o = new Kp; o.colorSpace = Ea; const f = new qp(this.manager); f.setCrossOrigin(this.crossOrigin), f.setPath(this.path); let h = 0; function m(g) { f.load(t[g], function (_) { o.images[g] = _, h++, h === 6 && (o.needsUpdate = !0, e && e(o)) }, void 0, a) } for (let g = 0; g < t.length; ++g)m(g); return o } } class Rw extends fs { constructor(t) { super(t) } load(t, e, n, a) { const o = this, f = new Tl, h = new Mo(this.manager); return h.setResponseType("arraybuffer"), h.setRequestHeader(this.requestHeader), h.setPath(this.path), h.setWithCredentials(o.withCredentials), h.load(t, function (m) { let g; try { g = o.parse(m) } catch (_) { if (a !== void 0) a(_); else { console.error(_); return } } g.image !== void 0 ? f.image = g.image : g.data !== void 0 && (f.image.width = g.width, f.image.height = g.height, f.image.data = g.data), f.wrapS = g.wrapS !== void 0 ? g.wrapS : Zs, f.wrapT = g.wrapT !== void 0 ? g.wrapT : Zs, f.magFilter = g.magFilter !== void 0 ? g.magFilter : Li, f.minFilter = g.minFilter !== void 0 ? g.minFilter : Li, f.anisotropy = g.anisotropy !== void 0 ? g.anisotropy : 1, g.colorSpace !== void 0 && (f.colorSpace = g.colorSpace), g.flipY !== void 0 && (f.flipY = g.flipY), g.format !== void 0 && (f.format = g.format), g.type !== void 0 && (f.type = g.type), g.mipmaps !== void 0 && (f.mipmaps = g.mipmaps, f.minFilter = bl), g.mipmapCount === 1 && (f.minFilter = Li), g.generateMipmaps !== void 0 && (f.generateMipmaps = g.generateMipmaps), f.needsUpdate = !0, e && e(f, g) }, n, a), f } } class ww extends fs { constructor(t) { super(t) } load(t, e, n, a) { const o = new yi, f = new qp(this.manager); return f.setCrossOrigin(this.crossOrigin), f.setPath(this.path), f.load(t, function (h) { o.image = h, o.needsUpdate = !0, e !== void 0 && e(o) }, n, a), o } } class wu extends _n { constructor(t, e = 1) { super(), this.isLight = !0, this.type = "Light", this.color = new ce(t), this.intensity = e } dispose() { } copy(t, e) { return super.copy(t, e), this.color.copy(t.color), this.intensity = t.intensity, this } toJSON(t) { const e = super.toJSON(t); return e.object.color = this.color.getHex(), e.object.intensity = this.intensity, this.groundColor !== void 0 && (e.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (e.object.distance = this.distance), this.angle !== void 0 && (e.object.angle = this.angle), this.decay !== void 0 && (e.object.decay = this.decay), this.penumbra !== void 0 && (e.object.penumbra = this.penumbra), this.shadow !== void 0 && (e.object.shadow = this.shadow.toJSON()), this.target !== void 0 && (e.object.target = this.target.uuid), e } } class qE extends wu { constructor(t, e, n) { super(t, n), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(_n.DEFAULT_UP), this.updateMatrix(), this.groundColor = new ce(e) } copy(t, e) { return super.copy(t, e), this.groundColor.copy(t.groundColor), this } } const __ = new Oe, H1 = new k, F1 = new k; class Qx { constructor(t) { this.camera = t, this.intensity = 1, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new zt(512, 512), this.map = null, this.mapPass = null, this.matrix = new Oe, this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Jp, this._frameExtents = new zt(1, 1), this._viewportCount = 1, this._viewports = [new yn(0, 0, 1, 1)] } getViewportCount() { return this._viewportCount } getFrustum() { return this._frustum } updateMatrices(t) { const e = this.camera, n = this.matrix; H1.setFromMatrixPosition(t.matrixWorld), e.position.copy(H1), F1.setFromMatrixPosition(t.target.matrixWorld), e.lookAt(F1), e.updateMatrixWorld(), __.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse), this._frustum.setFromProjectionMatrix(__), n.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), n.multiply(__) } getViewport(t) { return this._viewports[t] } getFrameExtents() { return this._frameExtents } dispose() { this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose() } copy(t) { return this.camera = t.camera.clone(), this.intensity = t.intensity, this.bias = t.bias, this.radius = t.radius, this.mapSize.copy(t.mapSize), this } clone() { return new this.constructor().copy(this) } toJSON() { const t = {}; return this.intensity !== 1 && (t.intensity = this.intensity), this.bias !== 0 && (t.bias = this.bias), this.normalBias !== 0 && (t.normalBias = this.normalBias), this.radius !== 1 && (t.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (t.mapSize = this.mapSize.toArray()), t.camera = this.camera.toJSON(!1).object, delete t.camera.matrix, t } } class Cw extends Qx { constructor() { super(new Ki(50, 1, .5, 500)), this.isSpotLightShadow = !0, this.focus = 1 } updateMatrices(t) { const e = this.camera, n = Rh * 2 * t.angle * this.focus, a = this.mapSize.width / this.mapSize.height, o = t.distance || e.far; (n !== e.fov || a !== e.aspect || o !== e.far) && (e.fov = n, e.aspect = a, e.far = o, e.updateProjectionMatrix()), super.updateMatrices(t) } copy(t) { return super.copy(t), this.focus = t.focus, this } } class YE extends wu { constructor(t, e, n = 0, a = Math.PI / 3, o = 0, f = 2) { super(t, e), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(_n.DEFAULT_UP), this.updateMatrix(), this.target = new _n, this.distance = n, this.angle = a, this.penumbra = o, this.decay = f, this.map = null, this.shadow = new Cw } get power() { return this.intensity * Math.PI } set power(t) { this.intensity = t / Math.PI } dispose() { this.shadow.dispose() } copy(t, e) { return super.copy(t, e), this.distance = t.distance, this.angle = t.angle, this.penumbra = t.penumbra, this.decay = t.decay, this.target = t.target.clone(), this.shadow = t.shadow.clone(), this } } const V1 = new Oe, cp = new k, x_ = new k; class Dw extends Qx { constructor() { super(new Ki(90, 1, .5, 500)), this.isPointLightShadow = !0, this._frameExtents = new zt(4, 2), this._viewportCount = 6, this._viewports = [new yn(2, 1, 1, 1), new yn(0, 1, 1, 1), new yn(3, 1, 1, 1), new yn(1, 1, 1, 1), new yn(3, 0, 1, 1), new yn(1, 0, 1, 1)], this._cubeDirections = [new k(1, 0, 0), new k(-1, 0, 0), new k(0, 0, 1), new k(0, 0, -1), new k(0, 1, 0), new k(0, -1, 0)], this._cubeUps = [new k(0, 1, 0), new k(0, 1, 0), new k(0, 1, 0), new k(0, 1, 0), new k(0, 0, 1), new k(0, 0, -1)] } updateMatrices(t, e = 0) { const n = this.camera, a = this.matrix, o = t.distance || n.far; o !== n.far && (n.far = o, n.updateProjectionMatrix()), cp.setFromMatrixPosition(t.matrixWorld), n.position.copy(cp), x_.copy(n.position), x_.add(this._cubeDirections[e]), n.up.copy(this._cubeUps[e]), n.lookAt(x_), n.updateMatrixWorld(), a.makeTranslation(-cp.x, -cp.y, -cp.z), V1.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(V1) } } class WE extends wu { constructor(t, e, n = 0, a = 2) { super(t, e), this.isPointLight = !0, this.type = "PointLight", this.distance = n, this.decay = a, this.shadow = new Dw } get power() { return this.intensity * 4 * Math.PI } set power(t) { this.intensity = t / (4 * Math.PI) } dispose() { this.shadow.dispose() } copy(t, e) { return super.copy(t, e), this.distance = t.distance, this.decay = t.decay, this.shadow = t.shadow.clone(), this } } class am extends zv { constructor(t = -1, e = 1, n = 1, a = -1, o = .1, f = 2e3) { super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = t, this.right = e, this.top = n, this.bottom = a, this.near = o, this.far = f, this.updateProjectionMatrix() } copy(t, e) { return super.copy(t, e), this.left = t.left, this.right = t.right, this.top = t.top, this.bottom = t.bottom, this.near = t.near, this.far = t.far, this.zoom = t.zoom, this.view = t.view === null ? null : Object.assign({}, t.view), this } setViewOffset(t, e, n, a, o, f) { this.view === null && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = a, this.view.width = o, this.view.height = f, this.updateProjectionMatrix() } clearViewOffset() { this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix() } updateProjectionMatrix() { const t = (this.right - this.left) / (2 * this.zoom), e = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, a = (this.top + this.bottom) / 2; let o = n - t, f = n + t, h = a + e, m = a - e; if (this.view !== null && this.view.enabled) { const g = (this.right - this.left) / this.view.fullWidth / this.zoom, _ = (this.top - this.bottom) / this.view.fullHeight / this.zoom; o += g * this.view.offsetX, f = o + g * this.view.width, h -= _ * this.view.offsetY, m = h - _ * this.view.height } this.projectionMatrix.makeOrthographic(o, f, h, m, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert() } toJSON(t) { const e = super.toJSON(t); return e.object.zoom = this.zoom, e.object.left = this.left, e.object.right = this.right, e.object.top = this.top, e.object.bottom = this.bottom, e.object.near = this.near, e.object.far = this.far, this.view !== null && (e.object.view = Object.assign({}, this.view)), e } } class Uw extends Qx { constructor() { super(new am(-5, 5, 5, -5, .5, 500)), this.isDirectionalLightShadow = !0 } } class kE extends wu { constructor(t, e) { super(t, e), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(_n.DEFAULT_UP), this.updateMatrix(), this.target = new _n, this.shadow = new Uw } dispose() { this.shadow.dispose() } copy(t) { return super.copy(t), this.target = t.target.clone(), this.shadow = t.shadow.clone(), this } } class jE extends wu { constructor(t, e) { super(t, e), this.isAmbientLight = !0, this.type = "AmbientLight" } } class ZE extends wu { constructor(t, e, n = 10, a = 10) { super(t, e), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = n, this.height = a } get power() { return this.intensity * this.width * this.height * Math.PI } set power(t) { this.intensity = t / (this.width * this.height * Math.PI) } copy(t) { return super.copy(t), this.width = t.width, this.height = t.height, this } toJSON(t) { const e = super.toJSON(t); return e.object.width = this.width, e.object.height = this.height, e } } class QE { constructor() { this.isSphericalHarmonics3 = !0, this.coefficients = []; for (let t = 0; t < 9; t++)this.coefficients.push(new k) } set(t) { for (let e = 0; e < 9; e++)this.coefficients[e].copy(t[e]); return this } zero() { for (let t = 0; t < 9; t++)this.coefficients[t].set(0, 0, 0); return this } getAt(t, e) { const n = t.x, a = t.y, o = t.z, f = this.coefficients; return e.copy(f[0]).multiplyScalar(.282095), e.addScaledVector(f[1], .488603 * a), e.addScaledVector(f[2], .488603 * o), e.addScaledVector(f[3], .488603 * n), e.addScaledVector(f[4], 1.092548 * (n * a)), e.addScaledVector(f[5], 1.092548 * (a * o)), e.addScaledVector(f[6], .315392 * (3 * o * o - 1)), e.addScaledVector(f[7], 1.092548 * (n * o)), e.addScaledVector(f[8], .546274 * (n * n - a * a)), e } getIrradianceAt(t, e) { const n = t.x, a = t.y, o = t.z, f = this.coefficients; return e.copy(f[0]).multiplyScalar(.886227), e.addScaledVector(f[1], 2 * .511664 * a), e.addScaledVector(f[2], 2 * .511664 * o), e.addScaledVector(f[3], 2 * .511664 * n), e.addScaledVector(f[4], 2 * .429043 * n * a), e.addScaledVector(f[5], 2 * .429043 * a * o), e.addScaledVector(f[6], .743125 * o * o - .247708), e.addScaledVector(f[7], 2 * .429043 * n * o), e.addScaledVector(f[8], .429043 * (n * n - a * a)), e } add(t) { for (let e = 0; e < 9; e++)this.coefficients[e].add(t.coefficients[e]); return this } addScaledSH(t, e) { for (let n = 0; n < 9; n++)this.coefficients[n].addScaledVector(t.coefficients[n], e); return this } scale(t) { for (let e = 0; e < 9; e++)this.coefficients[e].multiplyScalar(t); return this } lerp(t, e) { for (let n = 0; n < 9; n++)this.coefficients[n].lerp(t.coefficients[n], e); return this } equals(t) { for (let e = 0; e < 9; e++)if (!this.coefficients[e].equals(t.coefficients[e])) return !1; return !0 } copy(t) { return this.set(t.coefficients) } clone() { return new this.constructor().copy(this) } fromArray(t, e = 0) { const n = this.coefficients; for (let a = 0; a < 9; a++)n[a].fromArray(t, e + a * 3); return this } toArray(t = [], e = 0) { const n = this.coefficients; for (let a = 0; a < 9; a++)n[a].toArray(t, e + a * 3); return t } static getBasisAt(t, e) { const n = t.x, a = t.y, o = t.z; e[0] = .282095, e[1] = .488603 * a, e[2] = .488603 * o, e[3] = .488603 * n, e[4] = 1.092548 * n * a, e[5] = 1.092548 * a * o, e[6] = .315392 * (3 * o * o - 1), e[7] = 1.092548 * n * o, e[8] = .546274 * (n * n - a * a) } } class KE extends wu { constructor(t = new QE, e = 1) { super(void 0, e), this.isLightProbe = !0, this.sh = t } copy(t) { return super.copy(t), this.sh.copy(t.sh), this } fromJSON(t) { return this.intensity = t.intensity, this.sh.fromArray(t.sh), this } toJSON(t) { const e = super.toJSON(t); return e.object.sh = this.sh.toArray(), e } } class ny extends fs { constructor(t) { super(t), this.textures = {} } load(t, e, n, a) { const o = this, f = new Mo(o.manager); f.setPath(o.path), f.setRequestHeader(o.requestHeader), f.setWithCredentials(o.withCredentials), f.load(t, function (h) { try { e(o.parse(JSON.parse(h))) } catch (m) { a ? a(m) : console.error(m), o.manager.itemError(t) } }, n, a) } parse(t) { const e = this.textures; function n(o) { return e[o] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", o), e[o] } const a = this.createMaterialFromType(t.type); if (t.uuid !== void 0 && (a.uuid = t.uuid), t.name !== void 0 && (a.name = t.name), t.color !== void 0 && a.color !== void 0 && a.color.setHex(t.color), t.roughness !== void 0 && (a.roughness = t.roughness), t.metalness !== void 0 && (a.metalness = t.metalness), t.sheen !== void 0 && (a.sheen = t.sheen), t.sheenColor !== void 0 && (a.sheenColor = new ce().setHex(t.sheenColor)), t.sheenRoughness !== void 0 && (a.sheenRoughness = t.sheenRoughness), t.emissive !== void 0 && a.emissive !== void 0 && a.emissive.setHex(t.emissive), t.specular !== void 0 && a.specular !== void 0 && a.specular.setHex(t.specular), t.specularIntensity !== void 0 && (a.specularIntensity = t.specularIntensity), t.specularColor !== void 0 && a.specularColor !== void 0 && a.specularColor.setHex(t.specularColor), t.shininess !== void 0 && (a.shininess = t.shininess), t.clearcoat !== void 0 && (a.clearcoat = t.clearcoat), t.clearcoatRoughness !== void 0 && (a.clearcoatRoughness = t.clearcoatRoughness), t.dispersion !== void 0 && (a.dispersion = t.dispersion), t.iridescence !== void 0 && (a.iridescence = t.iridescence), t.iridescenceIOR !== void 0 && (a.iridescenceIOR = t.iridescenceIOR), t.iridescenceThicknessRange !== void 0 && (a.iridescenceThicknessRange = t.iridescenceThicknessRange), t.transmission !== void 0 && (a.transmission = t.transmission), t.thickness !== void 0 && (a.thickness = t.thickness), t.attenuationDistance !== void 0 && (a.attenuationDistance = t.attenuationDistance), t.attenuationColor !== void 0 && a.attenuationColor !== void 0 && a.attenuationColor.setHex(t.attenuationColor), t.anisotropy !== void 0 && (a.anisotropy = t.anisotropy), t.anisotropyRotation !== void 0 && (a.anisotropyRotation = t.anisotropyRotation), t.fog !== void 0 && (a.fog = t.fog), t.flatShading !== void 0 && (a.flatShading = t.flatShading), t.blending !== void 0 && (a.blending = t.blending), t.combine !== void 0 && (a.combine = t.combine), t.side !== void 0 && (a.side = t.side), t.shadowSide !== void 0 && (a.shadowSide = t.shadowSide), t.opacity !== void 0 && (a.opacity = t.opacity), t.transparent !== void 0 && (a.transparent = t.transparent), t.alphaTest !== void 0 && (a.alphaTest = t.alphaTest), t.alphaHash !== void 0 && (a.alphaHash = t.alphaHash), t.depthFunc !== void 0 && (a.depthFunc = t.depthFunc), t.depthTest !== void 0 && (a.depthTest = t.depthTest), t.depthWrite !== void 0 && (a.depthWrite = t.depthWrite), t.colorWrite !== void 0 && (a.colorWrite = t.colorWrite), t.blendSrc !== void 0 && (a.blendSrc = t.blendSrc), t.blendDst !== void 0 && (a.blendDst = t.blendDst), t.blendEquation !== void 0 && (a.blendEquation = t.blendEquation), t.blendSrcAlpha !== void 0 && (a.blendSrcAlpha = t.blendSrcAlpha), t.blendDstAlpha !== void 0 && (a.blendDstAlpha = t.blendDstAlpha), t.blendEquationAlpha !== void 0 && (a.blendEquationAlpha = t.blendEquationAlpha), t.blendColor !== void 0 && a.blendColor !== void 0 && a.blendColor.setHex(t.blendColor), t.blendAlpha !== void 0 && (a.blendAlpha = t.blendAlpha), t.stencilWriteMask !== void 0 && (a.stencilWriteMask = t.stencilWriteMask), t.stencilFunc !== void 0 && (a.stencilFunc = t.stencilFunc), t.stencilRef !== void 0 && (a.stencilRef = t.stencilRef), t.stencilFuncMask !== void 0 && (a.stencilFuncMask = t.stencilFuncMask), t.stencilFail !== void 0 && (a.stencilFail = t.stencilFail), t.stencilZFail !== void 0 && (a.stencilZFail = t.stencilZFail), t.stencilZPass !== void 0 && (a.stencilZPass = t.stencilZPass), t.stencilWrite !== void 0 && (a.stencilWrite = t.stencilWrite), t.wireframe !== void 0 && (a.wireframe = t.wireframe), t.wireframeLinewidth !== void 0 && (a.wireframeLinewidth = t.wireframeLinewidth), t.wireframeLinecap !== void 0 && (a.wireframeLinecap = t.wireframeLinecap), t.wireframeLinejoin !== void 0 && (a.wireframeLinejoin = t.wireframeLinejoin), t.rotation !== void 0 && (a.rotation = t.rotation), t.linewidth !== void 0 && (a.linewidth = t.linewidth), t.dashSize !== void 0 && (a.dashSize = t.dashSize), t.gapSize !== void 0 && (a.gapSize = t.gapSize), t.scale !== void 0 && (a.scale = t.scale), t.polygonOffset !== void 0 && (a.polygonOffset = t.polygonOffset), t.polygonOffsetFactor !== void 0 && (a.polygonOffsetFactor = t.polygonOffsetFactor), t.polygonOffsetUnits !== void 0 && (a.polygonOffsetUnits = t.polygonOffsetUnits), t.dithering !== void 0 && (a.dithering = t.dithering), t.alphaToCoverage !== void 0 && (a.alphaToCoverage = t.alphaToCoverage), t.premultipliedAlpha !== void 0 && (a.premultipliedAlpha = t.premultipliedAlpha), t.forceSinglePass !== void 0 && (a.forceSinglePass = t.forceSinglePass), t.visible !== void 0 && (a.visible = t.visible), t.toneMapped !== void 0 && (a.toneMapped = t.toneMapped), t.userData !== void 0 && (a.userData = t.userData), t.vertexColors !== void 0 && (typeof t.vertexColors == "number" ? a.vertexColors = t.vertexColors > 0 : a.vertexColors = t.vertexColors), t.uniforms !== void 0) for (const o in t.uniforms) { const f = t.uniforms[o]; switch (a.uniforms[o] = {}, f.type) { case "t": a.uniforms[o].value = n(f.value); break; case "c": a.uniforms[o].value = new ce().setHex(f.value); break; case "v2": a.uniforms[o].value = new zt().fromArray(f.value); break; case "v3": a.uniforms[o].value = new k().fromArray(f.value); break; case "v4": a.uniforms[o].value = new yn().fromArray(f.value); break; case "m3": a.uniforms[o].value = new Ge().fromArray(f.value); break; case "m4": a.uniforms[o].value = new Oe().fromArray(f.value); break; default: a.uniforms[o].value = f.value } } if (t.defines !== void 0 && (a.defines = t.defines), t.vertexShader !== void 0 && (a.vertexShader = t.vertexShader), t.fragmentShader !== void 0 && (a.fragmentShader = t.fragmentShader), t.glslVersion !== void 0 && (a.glslVersion = t.glslVersion), t.extensions !== void 0) for (const o in t.extensions) a.extensions[o] = t.extensions[o]; if (t.lights !== void 0 && (a.lights = t.lights), t.clipping !== void 0 && (a.clipping = t.clipping), t.size !== void 0 && (a.size = t.size), t.sizeAttenuation !== void 0 && (a.sizeAttenuation = t.sizeAttenuation), t.map !== void 0 && (a.map = n(t.map)), t.matcap !== void 0 && (a.matcap = n(t.matcap)), t.alphaMap !== void 0 && (a.alphaMap = n(t.alphaMap)), t.bumpMap !== void 0 && (a.bumpMap = n(t.bumpMap)), t.bumpScale !== void 0 && (a.bumpScale = t.bumpScale), t.normalMap !== void 0 && (a.normalMap = n(t.normalMap)), t.normalMapType !== void 0 && (a.normalMapType = t.normalMapType), t.normalScale !== void 0) { let o = t.normalScale; Array.isArray(o) === !1 && (o = [o, o]), a.normalScale = new zt().fromArray(o) } return t.displacementMap !== void 0 && (a.displacementMap = n(t.displacementMap)), t.displacementScale !== void 0 && (a.displacementScale = t.displacementScale), t.displacementBias !== void 0 && (a.displacementBias = t.displacementBias), t.roughnessMap !== void 0 && (a.roughnessMap = n(t.roughnessMap)), t.metalnessMap !== void 0 && (a.metalnessMap = n(t.metalnessMap)), t.emissiveMap !== void 0 && (a.emissiveMap = n(t.emissiveMap)), t.emissiveIntensity !== void 0 && (a.emissiveIntensity = t.emissiveIntensity), t.specularMap !== void 0 && (a.specularMap = n(t.specularMap)), t.specularIntensityMap !== void 0 && (a.specularIntensityMap = n(t.specularIntensityMap)), t.specularColorMap !== void 0 && (a.specularColorMap = n(t.specularColorMap)), t.envMap !== void 0 && (a.envMap = n(t.envMap)), t.envMapRotation !== void 0 && a.envMapRotation.fromArray(t.envMapRotation), t.envMapIntensity !== void 0 && (a.envMapIntensity = t.envMapIntensity), t.reflectivity !== void 0 && (a.reflectivity = t.reflectivity), t.refractionRatio !== void 0 && (a.refractionRatio = t.refractionRatio), t.lightMap !== void 0 && (a.lightMap = n(t.lightMap)), t.lightMapIntensity !== void 0 && (a.lightMapIntensity = t.lightMapIntensity), t.aoMap !== void 0 && (a.aoMap = n(t.aoMap)), t.aoMapIntensity !== void 0 && (a.aoMapIntensity = t.aoMapIntensity), t.gradientMap !== void 0 && (a.gradientMap = n(t.gradientMap)), t.clearcoatMap !== void 0 && (a.clearcoatMap = n(t.clearcoatMap)), t.clearcoatRoughnessMap !== void 0 && (a.clearcoatRoughnessMap = n(t.clearcoatRoughnessMap)), t.clearcoatNormalMap !== void 0 && (a.clearcoatNormalMap = n(t.clearcoatNormalMap)), t.clearcoatNormalScale !== void 0 && (a.clearcoatNormalScale = new zt().fromArray(t.clearcoatNormalScale)), t.iridescenceMap !== void 0 && (a.iridescenceMap = n(t.iridescenceMap)), t.iridescenceThicknessMap !== void 0 && (a.iridescenceThicknessMap = n(t.iridescenceThicknessMap)), t.transmissionMap !== void 0 && (a.transmissionMap = n(t.transmissionMap)), t.thicknessMap !== void 0 && (a.thicknessMap = n(t.thicknessMap)), t.anisotropyMap !== void 0 && (a.anisotropyMap = n(t.anisotropyMap)), t.sheenColorMap !== void 0 && (a.sheenColorMap = n(t.sheenColorMap)), t.sheenRoughnessMap !== void 0 && (a.sheenRoughnessMap = n(t.sheenRoughnessMap)), a } setTextures(t) { return this.textures = t, this } createMaterialFromType(t) { return ny.createMaterialFromType(t) } static createMaterialFromType(t) { const e = { ShadowMaterial: CE, SpriteMaterial: Lx, RawShaderMaterial: DE, ShaderMaterial: Br, PointsMaterial: Fv, MeshPhysicalMaterial: UE, MeshStandardMaterial: Xx, MeshPhongMaterial: NE, MeshToonMaterial: OE, MeshNormalMaterial: LE, MeshLambertMaterial: zE, MeshDepthMaterial: qx, MeshDistanceMaterial: Yx, MeshBasicMaterial: Au, MeshMatcapMaterial: BE, LineDashedMaterial: PE, LineBasicMaterial: Xa, Material: Ra }; return new e[t] } } class sx { static decodeText(t) { if (console.warn("THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead."), typeof TextDecoder < "u") return new TextDecoder().decode(t); let e = ""; for (let n = 0, a = t.length; n < a; n++)e += String.fromCharCode(t[n]); try { return decodeURIComponent(escape(e)) } catch { return e } } static extractUrlBase(t) { const e = t.lastIndexOf("/"); return e === -1 ? "./" : t.slice(0, e + 1) } static resolveURL(t, e) { return typeof t != "string" || t === "" ? "" : (/^https?:\/\//i.test(e) && /^\//.test(t) && (e = e.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(t) || /^data:.*,.*$/i.test(t) || /^blob:.*$/i.test(t) ? t : e + t) } } class JE extends Qe { constructor() { super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0 } copy(t) { return super.copy(t), this.instanceCount = t.instanceCount, this } toJSON() { const t = super.toJSON(); return t.instanceCount = this.instanceCount, t.isInstancedBufferGeometry = !0, t } } class $E extends fs { constructor(t) { super(t) } load(t, e, n, a) { const o = this, f = new Mo(o.manager); f.setPath(o.path), f.setRequestHeader(o.requestHeader), f.setWithCredentials(o.withCredentials), f.load(t, function (h) { try { e(o.parse(JSON.parse(h))) } catch (m) { a ? a(m) : console.error(m), o.manager.itemError(t) } }, n, a) } parse(t) { const e = {}, n = {}; function a(M, A) { if (e[A] !== void 0) return e[A]; const R = M.interleavedBuffers[A], T = o(M, R.buffer), D = xh(R.type, T), N = new Iv(D, R.stride); return N.uuid = R.uuid, e[A] = N, N } function o(M, A) { if (n[A] !== void 0) return n[A]; const R = M.arrayBuffers[A], T = new Uint32Array(R).buffer; return n[A] = T, T } const f = t.isInstancedBufferGeometry ? new JE : new Qe, h = t.data.index; if (h !== void 0) { const M = xh(h.type, h.array); f.setIndex(new Pn(M, 1)) } const m = t.data.attributes; for (const M in m) { const A = m[M]; let C; if (A.isInterleavedBufferAttribute) { const R = a(t.data, A.data); C = new kc(R, A.itemSize, A.offset, A.normalized) } else { const R = xh(A.type, A.array), T = A.isInstancedBufferAttribute ? Dh : Pn; C = new T(R, A.itemSize, A.normalized) } A.name !== void 0 && (C.name = A.name), A.usage !== void 0 && C.setUsage(A.usage), f.setAttribute(M, C) } const g = t.data.morphAttributes; if (g) for (const M in g) { const A = g[M], C = []; for (let R = 0, T = A.length; R < T; R++) { const D = A[R]; let N; if (D.isInterleavedBufferAttribute) { const U = a(t.data, D.data); N = new kc(U, D.itemSize, D.offset, D.normalized) } else { const U = xh(D.type, D.array); N = new Pn(U, D.itemSize, D.normalized) } D.name !== void 0 && (N.name = D.name), C.push(N) } f.morphAttributes[M] = C } t.data.morphTargetsRelative && (f.morphTargetsRelative = !0); const x = t.data.groups || t.data.drawcalls || t.data.offsets; if (x !== void 0) for (let M = 0, A = x.length; M !== A; ++M) { const C = x[M]; f.addGroup(C.start, C.count, C.materialIndex) } const S = t.data.boundingSphere; if (S !== void 0) { const M = new k; S.center !== void 0 && M.fromArray(S.center), f.boundingSphere = new Aa(M, S.radius) } return t.name && (f.name = t.name), t.userData && (f.userData = t.userData), f } } class Nw extends fs { constructor(t) { super(t) } load(t, e, n, a) { const o = this, f = this.path === "" ? sx.extractUrlBase(t) : this.path; this.resourcePath = this.resourcePath || f; const h = new Mo(this.manager); h.setPath(this.path), h.setRequestHeader(this.requestHeader), h.setWithCredentials(this.withCredentials), h.load(t, function (m) { let g = null; try { g = JSON.parse(m) } catch (x) { a !== void 0 && a(x), console.error("THREE:ObjectLoader: Can't parse " + t + ".", x.message); return } const _ = g.metadata; if (_ === void 0 || _.type === void 0 || _.type.toLowerCase() === "geometry") { a !== void 0 && a(new Error("THREE.ObjectLoader: Can't load " + t)), console.error("THREE.ObjectLoader: Can't load " + t); return } o.parse(g, e) }, n, a) } async loadAsync(t, e) { const n = this, a = this.path === "" ? sx.extractUrlBase(t) : this.path; this.resourcePath = this.resourcePath || a; const o = new Mo(this.manager); o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials); const f = await o.loadAsync(t, e), h = JSON.parse(f), m = h.metadata; if (m === void 0 || m.type === void 0 || m.type.toLowerCase() === "geometry") throw new Error("THREE.ObjectLoader: Can't load " + t); return await n.parseAsync(h) } parse(t, e) { const n = this.parseAnimations(t.animations), a = this.parseShapes(t.shapes), o = this.parseGeometries(t.geometries, a), f = this.parseImages(t.images, function () { e !== void 0 && e(g) }), h = this.parseTextures(t.textures, f), m = this.parseMaterials(t.materials, h), g = this.parseObject(t.object, o, m, h, n), _ = this.parseSkeletons(t.skeletons, g); if (this.bindSkeletons(g, _), this.bindLightTargets(g), e !== void 0) { let x = !1; for (const S in f) if (f[S].data instanceof HTMLImageElement) { x = !0; break } x === !1 && e(g) } return g } async parseAsync(t) { const e = this.parseAnimations(t.animations), n = this.parseShapes(t.shapes), a = this.parseGeometries(t.geometries, n), o = await this.parseImagesAsync(t.images), f = this.parseTextures(t.textures, o), h = this.parseMaterials(t.materials, f), m = this.parseObject(t.object, a, h, f, e), g = this.parseSkeletons(t.skeletons, m); return this.bindSkeletons(m, g), this.bindLightTargets(m), m } parseShapes(t) { const e = {}; if (t !== void 0) for (let n = 0, a = t.length; n < a; n++) { const o = new Xc().fromJSON(t[n]); e[o.uuid] = o } return e } parseSkeletons(t, e) { const n = {}, a = {}; if (e.traverse(function (o) { o.isBone && (a[o.uuid] = o) }), t !== void 0) for (let o = 0, f = t.length; o < f; o++) { const h = new Hv().fromJSON(t[o], a); n[h.uuid] = h } return n } parseGeometries(t, e) { const n = {}; if (t !== void 0) { const a = new $E; for (let o = 0, f = t.length; o < f; o++) { let h; const m = t[o]; switch (m.type) { case "BufferGeometry": case "InstancedBufferGeometry": h = a.parse(m); break; default: m.type in I1 ? h = I1[m.type].fromJSON(m, e) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${m.type}"`) }h.uuid = m.uuid, m.name !== void 0 && (h.name = m.name), m.userData !== void 0 && (h.userData = m.userData), n[m.uuid] = h } } return n } parseMaterials(t, e) { const n = {}, a = {}; if (t !== void 0) { const o = new ny; o.setTextures(e); for (let f = 0, h = t.length; f < h; f++) { const m = t[f]; n[m.uuid] === void 0 && (n[m.uuid] = o.parse(m)), a[m.uuid] = n[m.uuid] } } return a } parseAnimations(t) { const e = {}; if (t !== void 0) for (let n = 0; n < t.length; n++) { const a = t[n], o = Xp.parse(a); e[o.uuid] = o } return e } parseImages(t, e) { const n = this, a = {}; let o; function f(m) { return n.manager.itemStart(m), o.load(m, function () { n.manager.itemEnd(m) }, void 0, function () { n.manager.itemError(m), n.manager.itemEnd(m) }) } function h(m) { if (typeof m == "string") { const g = m, _ = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(g) ? g : n.resourcePath + g; return f(_) } else return m.data ? { data: xh(m.type, m.data), width: m.width, height: m.height } : null } if (t !== void 0 && t.length > 0) { const m = new Zx(e); o = new qp(m), o.setCrossOrigin(this.crossOrigin); for (let g = 0, _ = t.length; g < _; g++) { const x = t[g], S = x.url; if (Array.isArray(S)) { const M = []; for (let A = 0, C = S.length; A < C; A++) { const R = S[A], T = h(R); T !== null && (T instanceof HTMLImageElement ? M.push(T) : M.push(new Tl(T.data, T.width, T.height))) } a[x.uuid] = new xu(M) } else { const M = h(x.url); a[x.uuid] = new xu(M) } } } return a } async parseImagesAsync(t) { const e = this, n = {}; let a; async function o(f) { if (typeof f == "string") { const h = f, m = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(h) ? h : e.resourcePath + h; return await a.loadAsync(m) } else return f.data ? { data: xh(f.type, f.data), width: f.width, height: f.height } : null } if (t !== void 0 && t.length > 0) { a = new qp(this.manager), a.setCrossOrigin(this.crossOrigin); for (let f = 0, h = t.length; f < h; f++) { const m = t[f], g = m.url; if (Array.isArray(g)) { const _ = []; for (let x = 0, S = g.length; x < S; x++) { const M = g[x], A = await o(M); A !== null && (A instanceof HTMLImageElement ? _.push(A) : _.push(new Tl(A.data, A.width, A.height))) } n[m.uuid] = new xu(_) } else { const _ = await o(m.url); n[m.uuid] = new xu(_) } } } return n } parseTextures(t, e) { function n(o, f) { return typeof o == "number" ? o : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", o), f[o]) } const a = {}; if (t !== void 0) for (let o = 0, f = t.length; o < f; o++) { const h = t[o]; h.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', h.uuid), e[h.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", h.image); const m = e[h.image], g = m.data; let _; Array.isArray(g) ? (_ = new Kp, g.length === 6 && (_.needsUpdate = !0)) : (g && g.data ? _ = new Tl : _ = new yi, g && (_.needsUpdate = !0)), _.source = m, _.uuid = h.uuid, h.name !== void 0 && (_.name = h.name), h.mapping !== void 0 && (_.mapping = n(h.mapping, Ow)), h.channel !== void 0 && (_.channel = h.channel), h.offset !== void 0 && _.offset.fromArray(h.offset), h.repeat !== void 0 && _.repeat.fromArray(h.repeat), h.center !== void 0 && _.center.fromArray(h.center), h.rotation !== void 0 && (_.rotation = h.rotation), h.wrap !== void 0 && (_.wrapS = n(h.wrap[0], G1), _.wrapT = n(h.wrap[1], G1)), h.format !== void 0 && (_.format = h.format), h.internalFormat !== void 0 && (_.internalFormat = h.internalFormat), h.type !== void 0 && (_.type = h.type), h.colorSpace !== void 0 && (_.colorSpace = h.colorSpace), h.minFilter !== void 0 && (_.minFilter = n(h.minFilter, X1)), h.magFilter !== void 0 && (_.magFilter = n(h.magFilter, X1)), h.anisotropy !== void 0 && (_.anisotropy = h.anisotropy), h.flipY !== void 0 && (_.flipY = h.flipY), h.generateMipmaps !== void 0 && (_.generateMipmaps = h.generateMipmaps), h.premultiplyAlpha !== void 0 && (_.premultiplyAlpha = h.premultiplyAlpha), h.unpackAlignment !== void 0 && (_.unpackAlignment = h.unpackAlignment), h.compareFunction !== void 0 && (_.compareFunction = h.compareFunction), h.userData !== void 0 && (_.userData = h.userData), a[h.uuid] = _ } return a } parseObject(t, e, n, a, o) { let f; function h(S) { return e[S] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", S), e[S] } function m(S) { if (S !== void 0) { if (Array.isArray(S)) { const M = []; for (let A = 0, C = S.length; A < C; A++) { const R = S[A]; n[R] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", R), M.push(n[R]) } return M } return n[S] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", S), n[S] } } function g(S) { return a[S] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", S), a[S] } let _, x; switch (t.type) { case "Scene": f = new Ox, t.background !== void 0 && (Number.isInteger(t.background) ? f.background = new ce(t.background) : f.background = g(t.background)), t.environment !== void 0 && (f.environment = g(t.environment)), t.fog !== void 0 && (t.fog.type === "Fog" ? f.fog = new Pv(t.fog.color, t.fog.near, t.fog.far) : t.fog.type === "FogExp2" && (f.fog = new Bv(t.fog.color, t.fog.density)), t.fog.name !== "" && (f.fog.name = t.fog.name)), t.backgroundBlurriness !== void 0 && (f.backgroundBlurriness = t.backgroundBlurriness), t.backgroundIntensity !== void 0 && (f.backgroundIntensity = t.backgroundIntensity), t.backgroundRotation !== void 0 && f.backgroundRotation.fromArray(t.backgroundRotation), t.environmentIntensity !== void 0 && (f.environmentIntensity = t.environmentIntensity), t.environmentRotation !== void 0 && f.environmentRotation.fromArray(t.environmentRotation); break; case "PerspectiveCamera": f = new Ki(t.fov, t.aspect, t.near, t.far), t.focus !== void 0 && (f.focus = t.focus), t.zoom !== void 0 && (f.zoom = t.zoom), t.filmGauge !== void 0 && (f.filmGauge = t.filmGauge), t.filmOffset !== void 0 && (f.filmOffset = t.filmOffset), t.view !== void 0 && (f.view = Object.assign({}, t.view)); break; case "OrthographicCamera": f = new am(t.left, t.right, t.top, t.bottom, t.near, t.far), t.zoom !== void 0 && (f.zoom = t.zoom), t.view !== void 0 && (f.view = Object.assign({}, t.view)); break; case "AmbientLight": f = new jE(t.color, t.intensity); break; case "DirectionalLight": f = new kE(t.color, t.intensity), f.target = t.target || ""; break; case "PointLight": f = new WE(t.color, t.intensity, t.distance, t.decay); break; case "RectAreaLight": f = new ZE(t.color, t.intensity, t.width, t.height); break; case "SpotLight": f = new YE(t.color, t.intensity, t.distance, t.angle, t.penumbra, t.decay), f.target = t.target || ""; break; case "HemisphereLight": f = new qE(t.color, t.groundColor, t.intensity); break; case "LightProbe": f = new KE().fromJSON(t); break; case "SkinnedMesh": _ = h(t.geometry), x = m(t.material), f = new dE(_, x), t.bindMode !== void 0 && (f.bindMode = t.bindMode), t.bindMatrix !== void 0 && f.bindMatrix.fromArray(t.bindMatrix), t.skeleton !== void 0 && (f.skeleton = t.skeleton); break; case "Mesh": _ = h(t.geometry), x = m(t.material), f = new wi(_, x); break; case "InstancedMesh": _ = h(t.geometry), x = m(t.material); const S = t.count, M = t.instanceMatrix, A = t.instanceColor; f = new pE(_, x, S), f.instanceMatrix = new Dh(new Float32Array(M.array), 16), A !== void 0 && (f.instanceColor = new Dh(new Float32Array(A.array), A.itemSize)); break; case "BatchedMesh": _ = h(t.geometry), x = m(t.material), f = new mE(t.maxInstanceCount, t.maxVertexCount, t.maxIndexCount, x), f.geometry = _, f.perObjectFrustumCulled = t.perObjectFrustumCulled, f.sortObjects = t.sortObjects, f._drawRanges = t.drawRanges, f._reservedRanges = t.reservedRanges, f._visibility = t.visibility, f._active = t.active, f._bounds = t.bounds.map(C => { const R = new Ga; R.min.fromArray(C.boxMin), R.max.fromArray(C.boxMax); const T = new Aa; return T.radius = C.sphereRadius, T.center.fromArray(C.sphereCenter), { boxInitialized: C.boxInitialized, box: R, sphereInitialized: C.sphereInitialized, sphere: T } }), f._maxInstanceCount = t.maxInstanceCount, f._maxVertexCount = t.maxVertexCount, f._maxIndexCount = t.maxIndexCount, f._geometryInitialized = t.geometryInitialized, f._geometryCount = t.geometryCount, f._matricesTexture = g(t.matricesTexture.uuid), t.colorsTexture !== void 0 && (f._colorsTexture = g(t.colorsTexture.uuid)); break; case "LOD": f = new hE; break; case "Line": f = new Eu(h(t.geometry), m(t.material)); break; case "LineLoop": f = new gE(h(t.geometry), m(t.material)); break; case "LineSegments": f = new Cl(h(t.geometry), m(t.material)); break; case "PointCloud": case "Points": f = new vE(h(t.geometry), m(t.material)); break; case "Sprite": f = new fE(m(t.material)); break; case "Group": f = new Sh; break; case "Bone": f = new zx; break; default: f = new _n }if (f.uuid = t.uuid, t.name !== void 0 && (f.name = t.name), t.matrix !== void 0 ? (f.matrix.fromArray(t.matrix), t.matrixAutoUpdate !== void 0 && (f.matrixAutoUpdate = t.matrixAutoUpdate), f.matrixAutoUpdate && f.matrix.decompose(f.position, f.quaternion, f.scale)) : (t.position !== void 0 && f.position.fromArray(t.position), t.rotation !== void 0 && f.rotation.fromArray(t.rotation), t.quaternion !== void 0 && f.quaternion.fromArray(t.quaternion), t.scale !== void 0 && f.scale.fromArray(t.scale)), t.up !== void 0 && f.up.fromArray(t.up), t.castShadow !== void 0 && (f.castShadow = t.castShadow), t.receiveShadow !== void 0 && (f.receiveShadow = t.receiveShadow), t.shadow && (t.shadow.intensity !== void 0 && (f.shadow.intensity = t.shadow.intensity), t.shadow.bias !== void 0 && (f.shadow.bias = t.shadow.bias), t.shadow.normalBias !== void 0 && (f.shadow.normalBias = t.shadow.normalBias), t.shadow.radius !== void 0 && (f.shadow.radius = t.shadow.radius), t.shadow.mapSize !== void 0 && f.shadow.mapSize.fromArray(t.shadow.mapSize), t.shadow.camera !== void 0 && (f.shadow.camera = this.parseObject(t.shadow.camera))), t.visible !== void 0 && (f.visible = t.visible), t.frustumCulled !== void 0 && (f.frustumCulled = t.frustumCulled), t.renderOrder !== void 0 && (f.renderOrder = t.renderOrder), t.userData !== void 0 && (f.userData = t.userData), t.layers !== void 0 && (f.layers.mask = t.layers), t.children !== void 0) { const S = t.children; for (let M = 0; M < S.length; M++)f.add(this.parseObject(S[M], e, n, a, o)) } if (t.animations !== void 0) { const S = t.animations; for (let M = 0; M < S.length; M++) { const A = S[M]; f.animations.push(o[A]) } } if (t.type === "LOD") { t.autoUpdate !== void 0 && (f.autoUpdate = t.autoUpdate); const S = t.levels; for (let M = 0; M < S.length; M++) { const A = S[M], C = f.getObjectByProperty("uuid", A.object); C !== void 0 && f.addLevel(C, A.distance, A.hysteresis) } } return f } bindSkeletons(t, e) { Object.keys(e).length !== 0 && t.traverse(function (n) { if (n.isSkinnedMesh === !0 && n.skeleton !== void 0) { const a = e[n.skeleton]; a === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton) : n.bind(a, n.bindMatrix) } }) } bindLightTargets(t) { t.traverse(function (e) { if (e.isDirectionalLight || e.isSpotLight) { const n = e.target, a = t.getObjectByProperty("uuid", n); a !== void 0 ? e.target = a : e.target = new _n } }) } } const Ow = { UVMapping: Tv, CubeReflectionMapping: xo, CubeRefractionMapping: Mu, EquirectangularReflectionMapping: Rp, EquirectangularRefractionMapping: wp, CubeUVReflectionMapping: Lh }, G1 = { RepeatWrapping: Cp, ClampToEdgeWrapping: Zs, MirroredRepeatWrapping: Dp }, X1 = { NearestFilter: ua, NearestMipmapNearestFilter: yx, NearestMipmapLinearFilter: _h, LinearFilter: Li, LinearMipmapNearestFilter: gp, LinearMipmapLinearFilter: bl }; class Lw extends fs { constructor(t) { super(t), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" } } setOptions(t) { return this.options = t, this } load(t, e, n, a) { t === void 0 && (t = ""), this.path !== void 0 && (t = this.path + t), t = this.manager.resolveURL(t); const o = this, f = go.get(t); if (f !== void 0) { if (o.manager.itemStart(t), f.then) { f.then(g => { e && e(g), o.manager.itemEnd(t) }).catch(g => { a && a(g) }); return } return setTimeout(function () { e && e(f), o.manager.itemEnd(t) }, 0), f } const h = {}; h.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", h.headers = this.requestHeader; const m = fetch(t, h).then(function (g) { return g.blob() }).then(function (g) { return createImageBitmap(g, Object.assign(o.options, { colorSpaceConversion: "none" })) }).then(function (g) { return go.add(t, g), e && e(g), o.manager.itemEnd(t), g }).catch(function (g) { a && a(g), go.remove(t), o.manager.itemError(t), o.manager.itemEnd(t) }); go.add(t, m), o.manager.itemStart(t) } } let g0; class Kx { static getContext() { return g0 === void 0 && (g0 = new (window.AudioContext || window.webkitAudioContext)), g0 } static setContext(t) { g0 = t } } class zw extends fs { constructor(t) { super(t) } load(t, e, n, a) { const o = this, f = new Mo(this.manager); f.setResponseType("arraybuffer"), f.setPath(this.path), f.setRequestHeader(this.requestHeader), f.setWithCredentials(this.withCredentials), f.load(t, function (m) { try { const g = m.slice(0); Kx.getContext().decodeAudioData(g, function (x) { e(x) }).catch(h) } catch (g) { h(g) } }, n, a); function h(m) { a ? a(m) : console.error(m), o.manager.itemError(t) } } } const q1 = new Oe, Y1 = new Oe, Ec = new Oe; class Bw { constructor() { this.type = "StereoCamera", this.aspect = 1, this.eyeSep = .064, this.cameraL = new Ki, this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new Ki, this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = { focus: null, fov: null, aspect: null, near: null, far: null, zoom: null, eyeSep: null } } update(t) { const e = this._cache; if (e.focus !== t.focus || e.fov !== t.fov || e.aspect !== t.aspect * this.aspect || e.near !== t.near || e.far !== t.far || e.zoom !== t.zoom || e.eyeSep !== this.eyeSep) { e.focus = t.focus, e.fov = t.fov, e.aspect = t.aspect * this.aspect, e.near = t.near, e.far = t.far, e.zoom = t.zoom, e.eyeSep = this.eyeSep, Ec.copy(t.projectionMatrix); const a = e.eyeSep / 2, o = a * e.near / e.focus, f = e.near * Math.tan(Gc * e.fov * .5) / e.zoom; let h, m; Y1.elements[12] = -a, q1.elements[12] = a, h = -f * e.aspect + o, m = f * e.aspect + o, Ec.elements[0] = 2 * e.near / (m - h), Ec.elements[8] = (m + h) / (m - h), this.cameraL.projectionMatrix.copy(Ec), h = -f * e.aspect - o, m = f * e.aspect - o, Ec.elements[0] = 2 * e.near / (m - h), Ec.elements[8] = (m + h) / (m - h), this.cameraR.projectionMatrix.copy(Ec) } this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Y1), this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(q1) } } class tT extends Ki { constructor(t = []) { super(), this.isArrayCamera = !0, this.cameras = t, this.index = 0 } } class Jx { constructor(t = !0) { this.autoStart = t, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1 } start() { this.startTime = W1(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0 } stop() { this.getElapsedTime(), this.running = !1, this.autoStart = !1 } getElapsedTime() { return this.getDelta(), this.elapsedTime } getDelta() { let t = 0; if (this.autoStart && !this.running) return this.start(), 0; if (this.running) { const e = W1(); t = (e - this.oldTime) / 1e3, this.oldTime = e, this.elapsedTime += t } return t } } function W1() { return performance.now() } const Tc = new k, k1 = new cs, Pw = new k, Ac = new k; class Iw extends _n { constructor() { super(), this.type = "AudioListener", this.context = Kx.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new Jx } getInput() { return this.gain } removeFilter() { return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this } getFilter() { return this.filter } setFilter(t) { return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = t, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this } getMasterVolume() { return this.gain.gain.value } setMasterVolume(t) { return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01), this } updateMatrixWorld(t) { super.updateMatrixWorld(t); const e = this.context.listener, n = this.up; if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Tc, k1, Pw), Ac.set(0, 0, -1).applyQuaternion(k1), e.positionX) { const a = this.context.currentTime + this.timeDelta; e.positionX.linearRampToValueAtTime(Tc.x, a), e.positionY.linearRampToValueAtTime(Tc.y, a), e.positionZ.linearRampToValueAtTime(Tc.z, a), e.forwardX.linearRampToValueAtTime(Ac.x, a), e.forwardY.linearRampToValueAtTime(Ac.y, a), e.forwardZ.linearRampToValueAtTime(Ac.z, a), e.upX.linearRampToValueAtTime(n.x, a), e.upY.linearRampToValueAtTime(n.y, a), e.upZ.linearRampToValueAtTime(n.z, a) } else e.setPosition(Tc.x, Tc.y, Tc.z), e.setOrientation(Ac.x, Ac.y, Ac.z, n.x, n.y, n.z) } } class eT extends _n { constructor(t) { super(), this.type = "Audio", this.listener = t, this.context = t.context, this.gain = this.context.createGain(), this.gain.connect(t.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [] } getOutput() { return this.gain } setNodeSource(t) { return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = t, this.connect(), this } setMediaElementSource(t) { return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(t), this.connect(), this } setMediaStreamSource(t) { return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(t), this.connect(), this } setBuffer(t) { return this.buffer = t, this.sourceType = "buffer", this.autoplay && this.play(), this } play(t = 0) { if (this.isPlaying === !0) { console.warn("THREE.Audio: Audio is already playing."); return } if (this.hasPlaybackControl === !1) { console.warn("THREE.Audio: this Audio has no playback control."); return } this._startedAt = this.context.currentTime + t; const e = this.context.createBufferSource(); return e.buffer = this.buffer, e.loop = this.loop, e.loopStart = this.loopStart, e.loopEnd = this.loopEnd, e.onended = this.onEnded.bind(this), e.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = e, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect() } pause() { if (this.hasPlaybackControl === !1) { console.warn("THREE.Audio: this Audio has no playback control."); return } return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this } stop(t = 0) { if (this.hasPlaybackControl === !1) { console.warn("THREE.Audio: this Audio has no playback control."); return } return this._progress = 0, this.source !== null && (this.source.stop(this.context.currentTime + t), this.source.onended = null), this.isPlaying = !1, this } connect() { if (this.filters.length > 0) { this.source.connect(this.filters[0]); for (let t = 1, e = this.filters.length; t < e; t++)this.filters[t - 1].connect(this.filters[t]); this.filters[this.filters.length - 1].connect(this.getOutput()) } else this.source.connect(this.getOutput()); return this._connected = !0, this } disconnect() { if (this._connected !== !1) { if (this.filters.length > 0) { this.source.disconnect(this.filters[0]); for (let t = 1, e = this.filters.length; t < e; t++)this.filters[t - 1].disconnect(this.filters[t]); this.filters[this.filters.length - 1].disconnect(this.getOutput()) } else this.source.disconnect(this.getOutput()); return this._connected = !1, this } } getFilters() { return this.filters } setFilters(t) { return t || (t = []), this._connected === !0 ? (this.disconnect(), this.filters = t.slice(), this.connect()) : this.filters = t.slice(), this } setDetune(t) { return this.detune = t, this.isPlaying === !0 && this.source.detune !== void 0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this } getDetune() { return this.detune } getFilter() { return this.getFilters()[0] } setFilter(t) { return this.setFilters(t ? [t] : []) } setPlaybackRate(t) { if (this.hasPlaybackControl === !1) { console.warn("THREE.Audio: this Audio has no playback control."); return } return this.playbackRate = t, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this } getPlaybackRate() { return this.playbackRate } onEnded() { this.isPlaying = !1, this._progress = 0 } getLoop() { return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop } setLoop(t) { if (this.hasPlaybackControl === !1) { console.warn("THREE.Audio: this Audio has no playback control."); return } return this.loop = t, this.isPlaying === !0 && (this.source.loop = this.loop), this } setLoopStart(t) { return this.loopStart = t, this } setLoopEnd(t) { return this.loopEnd = t, this } getVolume() { return this.gain.gain.value } setVolume(t) { return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01), this } copy(t, e) { return super.copy(t, e), t.sourceType !== "buffer" ? (console.warn("THREE.Audio: Audio source type cannot be copied."), this) : (this.autoplay = t.autoplay, this.buffer = t.buffer, this.detune = t.detune, this.loop = t.loop, this.loopStart = t.loopStart, this.loopEnd = t.loopEnd, this.offset = t.offset, this.duration = t.duration, this.playbackRate = t.playbackRate, this.hasPlaybackControl = t.hasPlaybackControl, this.sourceType = t.sourceType, this.filters = t.filters.slice(), this) } clone(t) { return new this.constructor(this.listener).copy(this, t) } } const Rc = new k, j1 = new cs, Hw = new k, wc = new k; class Fw extends eT { constructor(t) { super(t), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain) } connect() { return super.connect(), this.panner.connect(this.gain), this } disconnect() { return super.disconnect(), this.panner.disconnect(this.gain), this } getOutput() { return this.panner } getRefDistance() { return this.panner.refDistance } setRefDistance(t) { return this.panner.refDistance = t, this } getRolloffFactor() { return this.panner.rolloffFactor } setRolloffFactor(t) { return this.panner.rolloffFactor = t, this } getDistanceModel() { return this.panner.distanceModel } setDistanceModel(t) { return this.panner.distanceModel = t, this } getMaxDistance() { return this.panner.maxDistance } setMaxDistance(t) { return this.panner.maxDistance = t, this } setDirectionalCone(t, e, n) { return this.panner.coneInnerAngle = t, this.panner.coneOuterAngle = e, this.panner.coneOuterGain = n, this } updateMatrixWorld(t) { if (super.updateMatrixWorld(t), this.hasPlaybackControl === !0 && this.isPlaying === !1) return; this.matrixWorld.decompose(Rc, j1, Hw), wc.set(0, 0, 1).applyQuaternion(j1); const e = this.panner; if (e.positionX) { const n = this.context.currentTime + this.listener.timeDelta; e.positionX.linearRampToValueAtTime(Rc.x, n), e.positionY.linearRampToValueAtTime(Rc.y, n), e.positionZ.linearRampToValueAtTime(Rc.z, n), e.orientationX.linearRampToValueAtTime(wc.x, n), e.orientationY.linearRampToValueAtTime(wc.y, n), e.orientationZ.linearRampToValueAtTime(wc.z, n) } else e.setPosition(Rc.x, Rc.y, Rc.z), e.setOrientation(wc.x, wc.y, wc.z) } } class Vw { constructor(t, e = 2048) { this.analyser = t.context.createAnalyser(), this.analyser.fftSize = e, this.data = new Uint8Array(this.analyser.frequencyBinCount), t.getOutput().connect(this.analyser) } getFrequencyData() { return this.analyser.getByteFrequencyData(this.data), this.data } getAverageFrequency() { let t = 0; const e = this.getFrequencyData(); for (let n = 0; n < e.length; n++)t += e[n]; return t / e.length } } class nT { constructor(t, e, n) { this.binding = t, this.valueSize = n; let a, o, f; switch (e) { case "quaternion": a = this._slerp, o = this._slerpAdditive, f = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(n * 6), this._workIndex = 5; break; case "string": case "bool": a = this._select, o = this._select, f = this._setAdditiveIdentityOther, this.buffer = new Array(n * 5); break; default: a = this._lerp, o = this._lerpAdditive, f = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(n * 5) }this._mixBufferRegion = a, this._mixBufferRegionAdditive = o, this._setIdentity = f, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0 } accumulate(t, e) { const n = this.buffer, a = this.valueSize, o = t * a + a; let f = this.cumulativeWeight; if (f === 0) { for (let h = 0; h !== a; ++h)n[o + h] = n[h]; f = e } else { f += e; const h = e / f; this._mixBufferRegion(n, o, 0, h, a) } this.cumulativeWeight = f } accumulateAdditive(t) { const e = this.buffer, n = this.valueSize, a = n * this._addIndex; this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(e, a, 0, t, n), this.cumulativeWeightAdditive += t } apply(t) { const e = this.valueSize, n = this.buffer, a = t * e + e, o = this.cumulativeWeight, f = this.cumulativeWeightAdditive, h = this.binding; if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, o < 1) { const m = e * this._origIndex; this._mixBufferRegion(n, a, m, 1 - o, e) } f > 0 && this._mixBufferRegionAdditive(n, a, this._addIndex * e, 1, e); for (let m = e, g = e + e; m !== g; ++m)if (n[m] !== n[m + e]) { h.setValue(n, a); break } } saveOriginalState() { const t = this.binding, e = this.buffer, n = this.valueSize, a = n * this._origIndex; t.getValue(e, a); for (let o = n, f = a; o !== f; ++o)e[o] = e[a + o % n]; this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0 } restoreOriginalState() { const t = this.valueSize * 3; this.binding.setValue(this.buffer, t) } _setAdditiveIdentityNumeric() { const t = this._addIndex * this.valueSize, e = t + this.valueSize; for (let n = t; n < e; n++)this.buffer[n] = 0 } _setAdditiveIdentityQuaternion() { this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1 } _setAdditiveIdentityOther() { const t = this._origIndex * this.valueSize, e = this._addIndex * this.valueSize; for (let n = 0; n < this.valueSize; n++)this.buffer[e + n] = this.buffer[t + n] } _select(t, e, n, a, o) { if (a >= .5) for (let f = 0; f !== o; ++f)t[e + f] = t[n + f] } _slerp(t, e, n, a) { cs.slerpFlat(t, e, t, e, t, n, a) } _slerpAdditive(t, e, n, a, o) { const f = this._workIndex * o; cs.multiplyQuaternionsFlat(t, f, t, e, t, n), cs.slerpFlat(t, e, t, e, t, f, a) } _lerp(t, e, n, a, o) { const f = 1 - a; for (let h = 0; h !== o; ++h) { const m = e + h; t[m] = t[m] * f + t[n + h] * a } } _lerpAdditive(t, e, n, a, o) { for (let f = 0; f !== o; ++f) { const h = e + f; t[h] = t[h] + t[n + f] * a } } } const $x = "\\[\\]\\.:\\/", Gw = new RegExp("[" + $x + "]", "g"), tS = "[^" + $x + "]", Xw = "[^" + $x.replace("\\.", "") + "]", qw = /((?:WC+[\/:])*)/.source.replace("WC", tS), Yw = /(WCOD+)?/.source.replace("WCOD", Xw), Ww = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", tS), kw = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", tS), jw = new RegExp("^" + qw + Yw + Ww + kw + "$"), Zw = ["material", "materials", "bones", "map"]; class Qw { constructor(t, e, n) { const a = n || vn.parseTrackName(e); this._targetGroup = t, this._bindings = t.subscribe_(e, a) } getValue(t, e) { this.bind(); const n = this._targetGroup.nCachedObjects_, a = this._bindings[n]; a !== void 0 && a.getValue(t, e) } setValue(t, e) { const n = this._bindings; for (let a = this._targetGroup.nCachedObjects_, o = n.length; a !== o; ++a)n[a].setValue(t, e) } bind() { const t = this._bindings; for (let e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e)t[e].bind() } unbind() { const t = this._bindings; for (let e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e)t[e].unbind() } } class vn { constructor(t, e, n) { this.path = e, this.parsedPath = n || vn.parseTrackName(e), this.node = vn.findNode(t, this.parsedPath.nodeName), this.rootNode = t, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound } static create(t, e, n) { return t && t.isAnimationObjectGroup ? new vn.Composite(t, e, n) : new vn(t, e, n) } static sanitizeNodeName(t) { return t.replace(/\s/g, "_").replace(Gw, "") } static parseTrackName(t) { const e = jw.exec(t); if (e === null) throw new Error("PropertyBinding: Cannot parse trackName: " + t); const n = { nodeName: e[2], objectName: e[3], objectIndex: e[4], propertyName: e[5], propertyIndex: e[6] }, a = n.nodeName && n.nodeName.lastIndexOf("."); if (a !== void 0 && a !== -1) { const o = n.nodeName.substring(a + 1); Zw.indexOf(o) !== -1 && (n.nodeName = n.nodeName.substring(0, a), n.objectName = o) } if (n.propertyName === null || n.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t); return n } static findNode(t, e) { if (e === void 0 || e === "" || e === "." || e === -1 || e === t.name || e === t.uuid) return t; if (t.skeleton) { const n = t.skeleton.getBoneByName(e); if (n !== void 0) return n } if (t.children) { const n = function (o) { for (let f = 0; f < o.length; f++) { const h = o[f]; if (h.name === e || h.uuid === e) return h; const m = n(h.children); if (m) return m } return null }, a = n(t.children); if (a) return a } return null } _getValue_unavailable() { } _setValue_unavailable() { } _getValue_direct(t, e) { t[e] = this.targetObject[this.propertyName] } _getValue_array(t, e) { const n = this.resolvedProperty; for (let a = 0, o = n.length; a !== o; ++a)t[e++] = n[a] } _getValue_arrayElement(t, e) { t[e] = this.resolvedProperty[this.propertyIndex] } _getValue_toArray(t, e) { this.resolvedProperty.toArray(t, e) } _setValue_direct(t, e) { this.targetObject[this.propertyName] = t[e] } _setValue_direct_setNeedsUpdate(t, e) { this.targetObject[this.propertyName] = t[e], this.targetObject.needsUpdate = !0 } _setValue_direct_setMatrixWorldNeedsUpdate(t, e) { this.targetObject[this.propertyName] = t[e], this.targetObject.matrixWorldNeedsUpdate = !0 } _setValue_array(t, e) { const n = this.resolvedProperty; for (let a = 0, o = n.length; a !== o; ++a)n[a] = t[e++] } _setValue_array_setNeedsUpdate(t, e) { const n = this.resolvedProperty; for (let a = 0, o = n.length; a !== o; ++a)n[a] = t[e++]; this.targetObject.needsUpdate = !0 } _setValue_array_setMatrixWorldNeedsUpdate(t, e) { const n = this.resolvedProperty; for (let a = 0, o = n.length; a !== o; ++a)n[a] = t[e++]; this.targetObject.matrixWorldNeedsUpdate = !0 } _setValue_arrayElement(t, e) { this.resolvedProperty[this.propertyIndex] = t[e] } _setValue_arrayElement_setNeedsUpdate(t, e) { this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.needsUpdate = !0 } _setValue_arrayElement_setMatrixWorldNeedsUpdate(t, e) { this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.matrixWorldNeedsUpdate = !0 } _setValue_fromArray(t, e) { this.resolvedProperty.fromArray(t, e) } _setValue_fromArray_setNeedsUpdate(t, e) { this.resolvedProperty.fromArray(t, e), this.targetObject.needsUpdate = !0 } _setValue_fromArray_setMatrixWorldNeedsUpdate(t, e) { this.resolvedProperty.fromArray(t, e), this.targetObject.matrixWorldNeedsUpdate = !0 } _getValue_unbound(t, e) { this.bind(), this.getValue(t, e) } _setValue_unbound(t, e) { this.bind(), this.setValue(t, e) } bind() { let t = this.node; const e = this.parsedPath, n = e.objectName, a = e.propertyName; let o = e.propertyIndex; if (t || (t = vn.findNode(this.rootNode, e.nodeName), this.node = t), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !t) { console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + "."); return } if (n) { let g = e.objectIndex; switch (n) { case "materials": if (!t.material) { console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this); return } if (!t.material.materials) { console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this); return } t = t.material.materials; break; case "bones": if (!t.skeleton) { console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this); return } t = t.skeleton.bones; for (let _ = 0; _ < t.length; _++)if (t[_].name === g) { g = _; break } break; case "map": if ("map" in t) { t = t.map; break } if (!t.material) { console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this); return } if (!t.material.map) { console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this); return } t = t.material.map; break; default: if (t[n] === void 0) { console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this); return } t = t[n] }if (g !== void 0) { if (t[g] === void 0) { console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t); return } t = t[g] } } const f = t[a]; if (f === void 0) { const g = e.nodeName; console.error("THREE.PropertyBinding: Trying to update property for track: " + g + "." + a + " but it wasn't found.", t); return } let h = this.Versioning.None; this.targetObject = t, t.isMaterial === !0 ? h = this.Versioning.NeedsUpdate : t.isObject3D === !0 && (h = this.Versioning.MatrixWorldNeedsUpdate); let m = this.BindingType.Direct; if (o !== void 0) { if (a === "morphTargetInfluences") { if (!t.geometry) { console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this); return } if (!t.geometry.morphAttributes) { console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this); return } t.morphTargetDictionary[o] !== void 0 && (o = t.morphTargetDictionary[o]) } m = this.BindingType.ArrayElement, this.resolvedProperty = f, this.propertyIndex = o } else f.fromArray !== void 0 && f.toArray !== void 0 ? (m = this.BindingType.HasFromToArray, this.resolvedProperty = f) : Array.isArray(f) ? (m = this.BindingType.EntireArray, this.resolvedProperty = f) : this.propertyName = a; this.getValue = this.GetterByBindingType[m], this.setValue = this.SetterByBindingTypeAndVersioning[m][h] } unbind() { this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound } } vn.Composite = Qw; vn.prototype.BindingType = { Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3 }; vn.prototype.Versioning = { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 }; vn.prototype.GetterByBindingType = [vn.prototype._getValue_direct, vn.prototype._getValue_array, vn.prototype._getValue_arrayElement, vn.prototype._getValue_toArray]; vn.prototype.SetterByBindingTypeAndVersioning = [[vn.prototype._setValue_direct, vn.prototype._setValue_direct_setNeedsUpdate, vn.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [vn.prototype._setValue_array, vn.prototype._setValue_array_setNeedsUpdate, vn.prototype._setValue_array_setMatrixWorldNeedsUpdate], [vn.prototype._setValue_arrayElement, vn.prototype._setValue_arrayElement_setNeedsUpdate, vn.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [vn.prototype._setValue_fromArray, vn.prototype._setValue_fromArray_setNeedsUpdate, vn.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]]; class Kw { constructor() { this.isAnimationObjectGroup = !0, this.uuid = Cs(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0; const t = {}; this._indicesByUUID = t; for (let n = 0, a = arguments.length; n !== a; ++n)t[arguments[n].uuid] = n; this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {}; const e = this; this.stats = { objects: { get total() { return e._objects.length }, get inUse() { return this.total - e.nCachedObjects_ } }, get bindingsPerObject() { return e._bindings.length } } } add() { const t = this._objects, e = this._indicesByUUID, n = this._paths, a = this._parsedPaths, o = this._bindings, f = o.length; let h, m = t.length, g = this.nCachedObjects_; for (let _ = 0, x = arguments.length; _ !== x; ++_) { const S = arguments[_], M = S.uuid; let A = e[M]; if (A === void 0) { A = m++, e[M] = A, t.push(S); for (let C = 0, R = f; C !== R; ++C)o[C].push(new vn(S, n[C], a[C])) } else if (A < g) { h = t[A]; const C = --g, R = t[C]; e[R.uuid] = A, t[A] = R, e[M] = C, t[C] = S; for (let T = 0, D = f; T !== D; ++T) { const N = o[T], U = N[C]; let V = N[A]; N[A] = U, V === void 0 && (V = new vn(S, n[T], a[T])), N[C] = V } } else t[A] !== h && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.") } this.nCachedObjects_ = g } remove() { const t = this._objects, e = this._indicesByUUID, n = this._bindings, a = n.length; let o = this.nCachedObjects_; for (let f = 0, h = arguments.length; f !== h; ++f) { const m = arguments[f], g = m.uuid, _ = e[g]; if (_ !== void 0 && _ >= o) { const x = o++, S = t[x]; e[S.uuid] = _, t[_] = S, e[g] = x, t[x] = m; for (let M = 0, A = a; M !== A; ++M) { const C = n[M], R = C[x], T = C[_]; C[_] = R, C[x] = T } } } this.nCachedObjects_ = o } uncache() { const t = this._objects, e = this._indicesByUUID, n = this._bindings, a = n.length; let o = this.nCachedObjects_, f = t.length; for (let h = 0, m = arguments.length; h !== m; ++h) { const g = arguments[h], _ = g.uuid, x = e[_]; if (x !== void 0) if (delete e[_], x < o) { const S = --o, M = t[S], A = --f, C = t[A]; e[M.uuid] = x, t[x] = M, e[C.uuid] = S, t[S] = C, t.pop(); for (let R = 0, T = a; R !== T; ++R) { const D = n[R], N = D[S], U = D[A]; D[x] = N, D[S] = U, D.pop() } } else { const S = --f, M = t[S]; S > 0 && (e[M.uuid] = x), t[x] = M, t.pop(); for (let A = 0, C = a; A !== C; ++A) { const R = n[A]; R[x] = R[S], R.pop() } } } this.nCachedObjects_ = o } subscribe_(t, e) { const n = this._bindingsIndicesByPath; let a = n[t]; const o = this._bindings; if (a !== void 0) return o[a]; const f = this._paths, h = this._parsedPaths, m = this._objects, g = m.length, _ = this.nCachedObjects_, x = new Array(g); a = o.length, n[t] = a, f.push(t), h.push(e), o.push(x); for (let S = _, M = m.length; S !== M; ++S) { const A = m[S]; x[S] = new vn(A, t, e) } return x } unsubscribe_(t) { const e = this._bindingsIndicesByPath, n = e[t]; if (n !== void 0) { const a = this._paths, o = this._parsedPaths, f = this._bindings, h = f.length - 1, m = f[h], g = t[h]; e[g] = n, f[n] = m, f.pop(), o[n] = o[h], o.pop(), a[n] = a[h], a.pop() } } } class iT { constructor(t, e, n = null, a = e.blendMode) { this._mixer = t, this._clip = e, this._localRoot = n, this.blendMode = a; const o = e.tracks, f = o.length, h = new Array(f), m = { endingStart: Bc, endingEnd: Bc }; for (let g = 0; g !== f; ++g) { const _ = o[g].createInterpolant(null); h[g] = _, _.settings = m } this._interpolantSettings = m, this._interpolants = h, this._propertyBindings = new Array(f), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = qb, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0 } play() { return this._mixer._activateAction(this), this } stop() { return this._mixer._deactivateAction(this), this.reset() } reset() { return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping() } isRunning() { return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this) } isScheduled() { return this._mixer._isActiveAction(this) } startAt(t) { return this._startTime = t, this } setLoop(t, e) { return this.loop = t, this.repetitions = e, this } setEffectiveWeight(t) { return this.weight = t, this._effectiveWeight = this.enabled ? t : 0, this.stopFading() } getEffectiveWeight() { return this._effectiveWeight } fadeIn(t) { return this._scheduleFading(t, 0, 1) } fadeOut(t) { return this._scheduleFading(t, 1, 0) } crossFadeFrom(t, e, n) { if (t.fadeOut(e), this.fadeIn(e), n) { const a = this._clip.duration, o = t._clip.duration, f = o / a, h = a / o; t.warp(1, f, e), this.warp(h, 1, e) } return this } crossFadeTo(t, e, n) { return t.crossFadeFrom(this, e, n) } stopFading() { const t = this._weightInterpolant; return t !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(t)), this } setEffectiveTimeScale(t) { return this.timeScale = t, this._effectiveTimeScale = this.paused ? 0 : t, this.stopWarping() } getEffectiveTimeScale() { return this._effectiveTimeScale } setDuration(t) { return this.timeScale = this._clip.duration / t, this.stopWarping() } syncWith(t) { return this.time = t.time, this.timeScale = t.timeScale, this.stopWarping() } halt(t) { return this.warp(this._effectiveTimeScale, 0, t) } warp(t, e, n) { const a = this._mixer, o = a.time, f = this.timeScale; let h = this._timeScaleInterpolant; h === null && (h = a._lendControlInterpolant(), this._timeScaleInterpolant = h); const m = h.parameterPositions, g = h.sampleValues; return m[0] = o, m[1] = o + n, g[0] = t / f, g[1] = e / f, this } stopWarping() { const t = this._timeScaleInterpolant; return t !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(t)), this } getMixer() { return this._mixer } getClip() { return this._clip } getRoot() { return this._localRoot || this._mixer._root } _update(t, e, n, a) { if (!this.enabled) { this._updateWeight(t); return } const o = this._startTime; if (o !== null) { const m = (t - o) * n; m < 0 || n === 0 ? e = 0 : (this._startTime = null, e = n * m) } e *= this._updateTimeScale(t); const f = this._updateTime(e), h = this._updateWeight(t); if (h > 0) { const m = this._interpolants, g = this._propertyBindings; switch (this.blendMode) { case wx: for (let _ = 0, x = m.length; _ !== x; ++_)m[_].evaluate(f), g[_].accumulateAdditive(h); break; case Nv: default: for (let _ = 0, x = m.length; _ !== x; ++_)m[_].evaluate(f), g[_].accumulate(a, h) } } } _updateWeight(t) { let e = 0; if (this.enabled) { e = this.weight; const n = this._weightInterpolant; if (n !== null) { const a = n.evaluate(t)[0]; e *= a, t > n.parameterPositions[1] && (this.stopFading(), a === 0 && (this.enabled = !1)) } } return this._effectiveWeight = e, e } _updateTimeScale(t) { let e = 0; if (!this.paused) { e = this.timeScale; const n = this._timeScaleInterpolant; if (n !== null) { const a = n.evaluate(t)[0]; e *= a, t > n.parameterPositions[1] && (this.stopWarping(), e === 0 ? this.paused = !0 : this.timeScale = e) } } return this._effectiveTimeScale = e, e } _updateTime(t) { const e = this._clip.duration, n = this.loop; let a = this.time + t, o = this._loopCount; const f = n === Yb; if (t === 0) return o === -1 ? a : f && (o & 1) === 1 ? e - a : a; if (n === Xb) { o === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1)); t: { if (a >= e) a = e; else if (a < 0) a = 0; else { this.time = a; break t } this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = a, this._mixer.dispatchEvent({ type: "finished", action: this, direction: t < 0 ? -1 : 1 }) } } else { if (o === -1 && (t >= 0 ? (o = 0, this._setEndings(!0, this.repetitions === 0, f)) : this._setEndings(this.repetitions === 0, !0, f)), a >= e || a < 0) { const h = Math.floor(a / e); a -= e * h, o += Math.abs(h); const m = this.repetitions - o; if (m <= 0) this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, a = t > 0 ? e : 0, this.time = a, this._mixer.dispatchEvent({ type: "finished", action: this, direction: t > 0 ? 1 : -1 }); else { if (m === 1) { const g = t < 0; this._setEndings(g, !g, f) } else this._setEndings(!1, !1, f); this._loopCount = o, this.time = a, this._mixer.dispatchEvent({ type: "loop", action: this, loopDelta: h }) } } else this.time = a; if (f && (o & 1) === 1) return e - a } return a } _setEndings(t, e, n) { const a = this._interpolantSettings; n ? (a.endingStart = Pc, a.endingEnd = Pc) : (t ? a.endingStart = this.zeroSlopeAtStart ? Pc : Bc : a.endingStart = Np, e ? a.endingEnd = this.zeroSlopeAtEnd ? Pc : Bc : a.endingEnd = Np) } _scheduleFading(t, e, n) { const a = this._mixer, o = a.time; let f = this._weightInterpolant; f === null && (f = a._lendControlInterpolant(), this._weightInterpolant = f); const h = f.parameterPositions, m = f.sampleValues; return h[0] = o, m[0] = e, h[1] = o + t, m[1] = n, this } } const Jw = new Float32Array(1); class $w extends wl { constructor(t) { super(), this._root = t, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1 } _bindAction(t, e) { const n = t._localRoot || this._root, a = t._clip.tracks, o = a.length, f = t._propertyBindings, h = t._interpolants, m = n.uuid, g = this._bindingsByRootAndName; let _ = g[m]; _ === void 0 && (_ = {}, g[m] = _); for (let x = 0; x !== o; ++x) { const S = a[x], M = S.name; let A = _[M]; if (A !== void 0) ++A.referenceCount, f[x] = A; else { if (A = f[x], A !== void 0) { A._cacheIndex === null && (++A.referenceCount, this._addInactiveBinding(A, m, M)); continue } const C = e && e._propertyBindings[x].binding.parsedPath; A = new nT(vn.create(n, M, C), S.ValueTypeName, S.getValueSize()), ++A.referenceCount, this._addInactiveBinding(A, m, M), f[x] = A } h[x].resultBuffer = A.buffer } } _activateAction(t) { if (!this._isActiveAction(t)) { if (t._cacheIndex === null) { const n = (t._localRoot || this._root).uuid, a = t._clip.uuid, o = this._actionsByClip[a]; this._bindAction(t, o && o.knownActions[0]), this._addInactiveAction(t, a, n) } const e = t._propertyBindings; for (let n = 0, a = e.length; n !== a; ++n) { const o = e[n]; o.useCount++ === 0 && (this._lendBinding(o), o.saveOriginalState()) } this._lendAction(t) } } _deactivateAction(t) { if (this._isActiveAction(t)) { const e = t._propertyBindings; for (let n = 0, a = e.length; n !== a; ++n) { const o = e[n]; --o.useCount === 0 && (o.restoreOriginalState(), this._takeBackBinding(o)) } this._takeBackAction(t) } } _initMemoryManager() { this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0; const t = this; this.stats = { actions: { get total() { return t._actions.length }, get inUse() { return t._nActiveActions } }, bindings: { get total() { return t._bindings.length }, get inUse() { return t._nActiveBindings } }, controlInterpolants: { get total() { return t._controlInterpolants.length }, get inUse() { return t._nActiveControlInterpolants } } } } _isActiveAction(t) { const e = t._cacheIndex; return e !== null && e < this._nActiveActions } _addInactiveAction(t, e, n) { const a = this._actions, o = this._actionsByClip; let f = o[e]; if (f === void 0) f = { knownActions: [t], actionByRoot: {} }, t._byClipCacheIndex = 0, o[e] = f; else { const h = f.knownActions; t._byClipCacheIndex = h.length, h.push(t) } t._cacheIndex = a.length, a.push(t), f.actionByRoot[n] = t } _removeInactiveAction(t) { const e = this._actions, n = e[e.length - 1], a = t._cacheIndex; n._cacheIndex = a, e[a] = n, e.pop(), t._cacheIndex = null; const o = t._clip.uuid, f = this._actionsByClip, h = f[o], m = h.knownActions, g = m[m.length - 1], _ = t._byClipCacheIndex; g._byClipCacheIndex = _, m[_] = g, m.pop(), t._byClipCacheIndex = null; const x = h.actionByRoot, S = (t._localRoot || this._root).uuid; delete x[S], m.length === 0 && delete f[o], this._removeInactiveBindingsForAction(t) } _removeInactiveBindingsForAction(t) { const e = t._propertyBindings; for (let n = 0, a = e.length; n !== a; ++n) { const o = e[n]; --o.referenceCount === 0 && this._removeInactiveBinding(o) } } _lendAction(t) { const e = this._actions, n = t._cacheIndex, a = this._nActiveActions++, o = e[a]; t._cacheIndex = a, e[a] = t, o._cacheIndex = n, e[n] = o } _takeBackAction(t) { const e = this._actions, n = t._cacheIndex, a = --this._nActiveActions, o = e[a]; t._cacheIndex = a, e[a] = t, o._cacheIndex = n, e[n] = o } _addInactiveBinding(t, e, n) { const a = this._bindingsByRootAndName, o = this._bindings; let f = a[e]; f === void 0 && (f = {}, a[e] = f), f[n] = t, t._cacheIndex = o.length, o.push(t) } _removeInactiveBinding(t) { const e = this._bindings, n = t.binding, a = n.rootNode.uuid, o = n.path, f = this._bindingsByRootAndName, h = f[a], m = e[e.length - 1], g = t._cacheIndex; m._cacheIndex = g, e[g] = m, e.pop(), delete h[o], Object.keys(h).length === 0 && delete f[a] } _lendBinding(t) { const e = this._bindings, n = t._cacheIndex, a = this._nActiveBindings++, o = e[a]; t._cacheIndex = a, e[a] = t, o._cacheIndex = n, e[n] = o } _takeBackBinding(t) { const e = this._bindings, n = t._cacheIndex, a = --this._nActiveBindings, o = e[a]; t._cacheIndex = a, e[a] = t, o._cacheIndex = n, e[n] = o } _lendControlInterpolant() { const t = this._controlInterpolants, e = this._nActiveControlInterpolants++; let n = t[e]; return n === void 0 && (n = new kx(new Float32Array(2), new Float32Array(2), 1, Jw), n.__cacheIndex = e, t[e] = n), n } _takeBackControlInterpolant(t) { const e = this._controlInterpolants, n = t.__cacheIndex, a = --this._nActiveControlInterpolants, o = e[a]; t.__cacheIndex = a, e[a] = t, o.__cacheIndex = n, e[n] = o } clipAction(t, e, n) { const a = e || this._root, o = a.uuid; let f = typeof t == "string" ? Xp.findByName(a, t) : t; const h = f !== null ? f.uuid : t, m = this._actionsByClip[h]; let g = null; if (n === void 0 && (f !== null ? n = f.blendMode : n = Nv), m !== void 0) { const x = m.actionByRoot[o]; if (x !== void 0 && x.blendMode === n) return x; g = m.knownActions[0], f === null && (f = g._clip) } if (f === null) return null; const _ = new iT(this, f, e, n); return this._bindAction(_, g), this._addInactiveAction(_, h, o), _ } existingAction(t, e) { const n = e || this._root, a = n.uuid, o = typeof t == "string" ? Xp.findByName(n, t) : t, f = o ? o.uuid : t, h = this._actionsByClip[f]; return h !== void 0 && h.actionByRoot[a] || null } stopAllAction() { const t = this._actions, e = this._nActiveActions; for (let n = e - 1; n >= 0; --n)t[n].stop(); return this } update(t) { t *= this.timeScale; const e = this._actions, n = this._nActiveActions, a = this.time += t, o = Math.sign(t), f = this._accuIndex ^= 1; for (let g = 0; g !== n; ++g)e[g]._update(a, t, o, f); const h = this._bindings, m = this._nActiveBindings; for (let g = 0; g !== m; ++g)h[g].apply(f); return this } setTime(t) { this.time = 0; for (let e = 0; e < this._actions.length; e++)this._actions[e].time = 0; return this.update(t) } getRoot() { return this._root } uncacheClip(t) { const e = this._actions, n = t.uuid, a = this._actionsByClip, o = a[n]; if (o !== void 0) { const f = o.knownActions; for (let h = 0, m = f.length; h !== m; ++h) { const g = f[h]; this._deactivateAction(g); const _ = g._cacheIndex, x = e[e.length - 1]; g._cacheIndex = null, g._byClipCacheIndex = null, x._cacheIndex = _, e[_] = x, e.pop(), this._removeInactiveBindingsForAction(g) } delete a[n] } } uncacheRoot(t) { const e = t.uuid, n = this._actionsByClip; for (const f in n) { const h = n[f].actionByRoot, m = h[e]; m !== void 0 && (this._deactivateAction(m), this._removeInactiveAction(m)) } const a = this._bindingsByRootAndName, o = a[e]; if (o !== void 0) for (const f in o) { const h = o[f]; h.restoreOriginalState(), this._removeInactiveBinding(h) } } uncacheAction(t, e) { const n = this.existingAction(t, e); n !== null && (this._deactivateAction(n), this._removeInactiveAction(n)) } } class tC extends Ov { constructor(t = 1, e = 1, n = 1, a = {}) { super(t, e, a), this.isRenderTarget3D = !0, this.depth = n, this.texture = new Lv(null, t, e, n), this.texture.isRenderTargetTexture = !0 } } class eC extends Ov { constructor(t = 1, e = 1, n = 1, a = {}) { super(t, e, a), this.isRenderTargetArray = !0, this.depth = n, this.texture = new Qp(null, t, e, n), this.texture.isRenderTargetTexture = !0 } } class eS { constructor(t) { this.value = t } clone() { return new eS(this.value.clone === void 0 ? this.value : this.value.clone()) } } let nC = 0; class iC extends wl { constructor() { super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", { value: nC++ }), this.name = "", this.usage = Lp, this.uniforms = [] } add(t) { return this.uniforms.push(t), this } remove(t) { const e = this.uniforms.indexOf(t); return e !== -1 && this.uniforms.splice(e, 1), this } setName(t) { return this.name = t, this } setUsage(t) { return this.usage = t, this } dispose() { return this.dispatchEvent({ type: "dispose" }), this } copy(t) { this.name = t.name, this.usage = t.usage; const e = t.uniforms; this.uniforms.length = 0; for (let n = 0, a = e.length; n < a; n++) { const o = Array.isArray(e[n]) ? e[n] : [e[n]]; for (let f = 0; f < o.length; f++)this.uniforms.push(o[f].clone()) } return this } clone() { return new this.constructor().copy(this) } } class aC extends Iv { constructor(t, e, n = 1) { super(t, e), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = n } copy(t) { return super.copy(t), this.meshPerAttribute = t.meshPerAttribute, this } clone(t) { const e = super.clone(t); return e.meshPerAttribute = this.meshPerAttribute, e } toJSON(t) { const e = super.toJSON(t); return e.isInstancedInterleavedBuffer = !0, e.meshPerAttribute = this.meshPerAttribute, e } } class sC { constructor(t, e, n, a, o) { this.isGLBufferAttribute = !0, this.name = "", this.buffer = t, this.type = e, this.itemSize = n, this.elementSize = a, this.count = o, this.version = 0 } set needsUpdate(t) { t === !0 && this.version++ } setBuffer(t) { return this.buffer = t, this } setType(t, e) { return this.type = t, this.elementSize = e, this } setItemSize(t) { return this.itemSize = t, this } setCount(t) { return this.count = t, this } } const Z1 = new Oe; class aT { constructor(t, e, n = 0, a = 1 / 0) { this.ray = new Bh(t, e), this.near = n, this.far = a, this.camera = null, this.layers = new wh, this.params = { Mesh: {}, Line: { threshold: 1 }, LOD: {}, Points: { threshold: 1 }, Sprite: {} } } set(t, e) { this.ray.set(t, e) } setFromCamera(t, e) { e.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(t.x, t.y, .5).unproject(e).sub(this.ray.origin).normalize(), this.camera = e) : e.isOrthographicCamera ? (this.ray.origin.set(t.x, t.y, (e.near + e.far) / (e.near - e.far)).unproject(e), this.ray.direction.set(0, 0, -1).transformDirection(e.matrixWorld), this.camera = e) : console.error("THREE.Raycaster: Unsupported camera type: " + e.type) } setFromXRController(t) { return Z1.identity().extractRotation(t.matrixWorld), this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(0, 0, -1).applyMatrix4(Z1), this } intersectObject(t, e = !0, n = []) { return rx(t, this, n, e), n.sort(Q1), n } intersectObjects(t, e = !0, n = []) { for (let a = 0, o = t.length; a < o; a++)rx(t[a], this, n, e); return n.sort(Q1), n } } function Q1(r, t) { return r.distance - t.distance } function rx(r, t, e, n) { let a = !0; if (r.layers.test(t.layers) && r.raycast(t, e) === !1 && (a = !1), a === !0 && n === !0) { const o = r.children; for (let f = 0, h = o.length; f < h; f++)rx(o[f], t, e, !0) } } class rC { constructor(t = 1, e = 0, n = 0) { this.radius = t, this.phi = e, this.theta = n } set(t, e, n) { return this.radius = t, this.phi = e, this.theta = n, this } copy(t) { return this.radius = t.radius, this.phi = t.phi, this.theta = t.theta, this } makeSafe() { return this.phi = Ve(this.phi, 1e-6, Math.PI - 1e-6), this } setFromVector3(t) { return this.setFromCartesianCoords(t.x, t.y, t.z) } setFromCartesianCoords(t, e, n) { return this.radius = Math.sqrt(t * t + e * e + n * n), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(t, n), this.phi = Math.acos(Ve(e / this.radius, -1, 1))), this } clone() { return new this.constructor().copy(this) } } class lC { constructor(t = 1, e = 0, n = 0) { this.radius = t, this.theta = e, this.y = n } set(t, e, n) { return this.radius = t, this.theta = e, this.y = n, this } copy(t) { return this.radius = t.radius, this.theta = t.theta, this.y = t.y, this } setFromVector3(t) { return this.setFromCartesianCoords(t.x, t.y, t.z) } setFromCartesianCoords(t, e, n) { return this.radius = Math.sqrt(t * t + n * n), this.theta = Math.atan2(t, n), this.y = e, this } clone() { return new this.constructor().copy(this) } } class nS { constructor(t, e, n, a) { nS.prototype.isMatrix2 = !0, this.elements = [1, 0, 0, 1], t !== void 0 && this.set(t, e, n, a) } identity() { return this.set(1, 0, 0, 1), this } fromArray(t, e = 0) { for (let n = 0; n < 4; n++)this.elements[n] = t[n + e]; return this } set(t, e, n, a) { const o = this.elements; return o[0] = t, o[2] = e, o[1] = n, o[3] = a, this } } const K1 = new zt; class oC { constructor(t = new zt(1 / 0, 1 / 0), e = new zt(-1 / 0, -1 / 0)) { this.isBox2 = !0, this.min = t, this.max = e } set(t, e) { return this.min.copy(t), this.max.copy(e), this } setFromPoints(t) { this.makeEmpty(); for (let e = 0, n = t.length; e < n; e++)this.expandByPoint(t[e]); return this } setFromCenterAndSize(t, e) { const n = K1.copy(e).multiplyScalar(.5); return this.min.copy(t).sub(n), this.max.copy(t).add(n), this } clone() { return new this.constructor().copy(this) } copy(t) { return this.min.copy(t.min), this.max.copy(t.max), this } makeEmpty() { return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this } isEmpty() { return this.max.x < this.min.x || this.max.y < this.min.y } getCenter(t) { return this.isEmpty() ? t.set(0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5) } getSize(t) { return this.isEmpty() ? t.set(0, 0) : t.subVectors(this.max, this.min) } expandByPoint(t) { return this.min.min(t), this.max.max(t), this } expandByVector(t) { return this.min.sub(t), this.max.add(t), this } expandByScalar(t) { return this.min.addScalar(-t), this.max.addScalar(t), this } containsPoint(t) { return t.x >= this.min.x && t.x <= this.max.x && t.y >= this.min.y && t.y <= this.max.y } containsBox(t) { return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y } getParameter(t, e) { return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y)) } intersectsBox(t) { return t.max.x >= this.min.x && t.min.x <= this.max.x && t.max.y >= this.min.y && t.min.y <= this.max.y } clampPoint(t, e) { return e.copy(t).clamp(this.min, this.max) } distanceToPoint(t) { return this.clampPoint(t, K1).distanceTo(t) } intersect(t) { return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this } union(t) { return this.min.min(t.min), this.max.max(t.max), this } translate(t) { return this.min.add(t), this.max.add(t), this } equals(t) { return t.min.equals(this.min) && t.max.equals(this.max) } } const J1 = new k, v0 = new k; class uC { constructor(t = new k, e = new k) { this.start = t, this.end = e } set(t, e) { return this.start.copy(t), this.end.copy(e), this } copy(t) { return this.start.copy(t.start), this.end.copy(t.end), this } getCenter(t) { return t.addVectors(this.start, this.end).multiplyScalar(.5) } delta(t) { return t.subVectors(this.end, this.start) } distanceSq() { return this.start.distanceToSquared(this.end) } distance() { return this.start.distanceTo(this.end) } at(t, e) { return this.delta(e).multiplyScalar(t).add(this.start) } closestPointToPointParameter(t, e) { J1.subVectors(t, this.start), v0.subVectors(this.end, this.start); const n = v0.dot(v0); let o = v0.dot(J1) / n; return e && (o = Ve(o, 0, 1)), o } closestPointToPoint(t, e, n) { const a = this.closestPointToPointParameter(t, e); return this.delta(n).multiplyScalar(a).add(this.start) } applyMatrix4(t) { return this.start.applyMatrix4(t), this.end.applyMatrix4(t), this } equals(t) { return t.start.equals(this.start) && t.end.equals(this.end) } clone() { return new this.constructor().copy(this) } } const $1 = new k; class cC extends _n { constructor(t, e) { super(), this.light = t, this.matrixAutoUpdate = !1, this.color = e, this.type = "SpotLightHelper"; const n = new Qe, a = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1]; for (let f = 0, h = 1, m = 32; f < m; f++, h++) { const g = f / m * Math.PI * 2, _ = h / m * Math.PI * 2; a.push(Math.cos(g), Math.sin(g), 1, Math.cos(_), Math.sin(_), 1) } n.setAttribute("position", new ve(a, 3)); const o = new Xa({ fog: !1, toneMapped: !1 }); this.cone = new Cl(n, o), this.add(this.cone), this.update() } dispose() { this.cone.geometry.dispose(), this.cone.material.dispose() } update() { this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), this.parent ? (this.parent.updateWorldMatrix(!0), this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)) : this.matrix.copy(this.light.matrixWorld), this.matrixWorld.copy(this.light.matrixWorld); const t = this.light.distance ? this.light.distance : 1e3, e = t * Math.tan(this.light.angle); this.cone.scale.set(e, e, t), $1.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt($1), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color) } } const gu = new k, y0 = new Oe, S_ = new Oe; class fC extends Cl { constructor(t) { const e = sT(t), n = new Qe, a = [], o = [], f = new ce(0, 0, 1), h = new ce(0, 1, 0); for (let g = 0; g < e.length; g++) { const _ = e[g]; _.parent && _.parent.isBone && (a.push(0, 0, 0), a.push(0, 0, 0), o.push(f.r, f.g, f.b), o.push(h.r, h.g, h.b)) } n.setAttribute("position", new ve(a, 3)), n.setAttribute("color", new ve(o, 3)); const m = new Xa({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 }); super(n, m), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = t, this.bones = e, this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1 } updateMatrixWorld(t) { const e = this.bones, n = this.geometry, a = n.getAttribute("position"); S_.copy(this.root.matrixWorld).invert(); for (let o = 0, f = 0; o < e.length; o++) { const h = e[o]; h.parent && h.parent.isBone && (y0.multiplyMatrices(S_, h.matrixWorld), gu.setFromMatrixPosition(y0), a.setXYZ(f, gu.x, gu.y, gu.z), y0.multiplyMatrices(S_, h.parent.matrixWorld), gu.setFromMatrixPosition(y0), a.setXYZ(f + 1, gu.x, gu.y, gu.z), f += 2) } n.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(t) } dispose() { this.geometry.dispose(), this.material.dispose() } } function sT(r) { const t = []; r.isBone === !0 && t.push(r); for (let e = 0; e < r.children.length; e++)t.push(...sT(r.children[e])); return t } class hC extends wi { constructor(t, e, n) { const a = new em(e, 4, 2), o = new Au({ wireframe: !0, fog: !1, toneMapped: !1 }); super(a, o), this.light = t, this.color = n, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update() } dispose() { this.geometry.dispose(), this.material.dispose() } update() { this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color) } } const dC = new k, tM = new ce, eM = new ce; class pC extends _n { constructor(t, e, n) { super(), this.light = t, this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "HemisphereLightHelper"; const a = new tm(e); a.rotateY(Math.PI * .5), this.material = new Au({ wireframe: !0, fog: !1, toneMapped: !1 }), this.color === void 0 && (this.material.vertexColors = !0); const o = a.getAttribute("position"), f = new Float32Array(o.count * 3); a.setAttribute("color", new Pn(f, 3)), this.add(new wi(a, this.material)), this.update() } dispose() { this.children[0].geometry.dispose(), this.children[0].material.dispose() } update() { const t = this.children[0]; if (this.color !== void 0) this.material.color.set(this.color); else { const e = t.geometry.getAttribute("color"); tM.copy(this.light.color), eM.copy(this.light.groundColor); for (let n = 0, a = e.count; n < a; n++) { const o = n < a / 2 ? tM : eM; e.setXYZ(n, o.r, o.g, o.b) } e.needsUpdate = !0 } this.light.updateWorldMatrix(!0, !1), t.lookAt(dC.setFromMatrixPosition(this.light.matrixWorld).negate()) } } class mC extends Cl { constructor(t = 10, e = 10, n = 4473924, a = 8947848) { n = new ce(n), a = new ce(a); const o = e / 2, f = t / e, h = t / 2, m = [], g = []; for (let S = 0, M = 0, A = -h; S <= e; S++, A += f) { m.push(-h, 0, A, h, 0, A), m.push(A, 0, -h, A, 0, h); const C = S === o ? n : a; C.toArray(g, M), M += 3, C.toArray(g, M), M += 3, C.toArray(g, M), M += 3, C.toArray(g, M), M += 3 } const _ = new Qe; _.setAttribute("position", new ve(m, 3)), _.setAttribute("color", new ve(g, 3)); const x = new Xa({ vertexColors: !0, toneMapped: !1 }); super(_, x), this.type = "GridHelper" } dispose() { this.geometry.dispose(), this.material.dispose() } } class gC extends Cl { constructor(t = 10, e = 16, n = 8, a = 64, o = 4473924, f = 8947848) { o = new ce(o), f = new ce(f); const h = [], m = []; if (e > 1) for (let x = 0; x < e; x++) { const S = x / e * (Math.PI * 2), M = Math.sin(S) * t, A = Math.cos(S) * t; h.push(0, 0, 0), h.push(M, 0, A); const C = x & 1 ? o : f; m.push(C.r, C.g, C.b), m.push(C.r, C.g, C.b) } for (let x = 0; x < n; x++) { const S = x & 1 ? o : f, M = t - t / n * x; for (let A = 0; A < a; A++) { let C = A / a * (Math.PI * 2), R = Math.sin(C) * M, T = Math.cos(C) * M; h.push(R, 0, T), m.push(S.r, S.g, S.b), C = (A + 1) / a * (Math.PI * 2), R = Math.sin(C) * M, T = Math.cos(C) * M, h.push(R, 0, T), m.push(S.r, S.g, S.b) } } const g = new Qe; g.setAttribute("position", new ve(h, 3)), g.setAttribute("color", new ve(m, 3)); const _ = new Xa({ vertexColors: !0, toneMapped: !1 }); super(g, _), this.type = "PolarGridHelper" } dispose() { this.geometry.dispose(), this.material.dispose() } } const nM = new k, _0 = new k, iM = new k; class vC extends _n { constructor(t, e, n) { super(), this.light = t, this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "DirectionalLightHelper", e === void 0 && (e = 1); let a = new Qe; a.setAttribute("position", new ve([-e, e, 0, e, e, 0, e, -e, 0, -e, -e, 0, -e, e, 0], 3)); const o = new Xa({ fog: !1, toneMapped: !1 }); this.lightPlane = new Eu(a, o), this.add(this.lightPlane), a = new Qe, a.setAttribute("position", new ve([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new Eu(a, o), this.add(this.targetLine), this.update() } dispose() { this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose() } update() { this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), nM.setFromMatrixPosition(this.light.matrixWorld), _0.setFromMatrixPosition(this.light.target.matrixWorld), iM.subVectors(_0, nM), this.lightPlane.lookAt(_0), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(_0), this.targetLine.scale.z = iM.length() } } const x0 = new k, vi = new zv; class yC extends Cl { constructor(t) { const e = new Qe, n = new Xa({ color: 16777215, vertexColors: !0, toneMapped: !1 }), a = [], o = [], f = {}; h("n1", "n2"), h("n2", "n4"), h("n4", "n3"), h("n3", "n1"), h("f1", "f2"), h("f2", "f4"), h("f4", "f3"), h("f3", "f1"), h("n1", "f1"), h("n2", "f2"), h("n3", "f3"), h("n4", "f4"), h("p", "n1"), h("p", "n2"), h("p", "n3"), h("p", "n4"), h("u1", "u2"), h("u2", "u3"), h("u3", "u1"), h("c", "t"), h("p", "c"), h("cn1", "cn2"), h("cn3", "cn4"), h("cf1", "cf2"), h("cf3", "cf4"); function h(A, C) { m(A), m(C) } function m(A) { a.push(0, 0, 0), o.push(0, 0, 0), f[A] === void 0 && (f[A] = []), f[A].push(a.length / 3 - 1) } e.setAttribute("position", new ve(a, 3)), e.setAttribute("color", new ve(o, 3)), super(e, n), this.type = "CameraHelper", this.camera = t, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = f, this.update(); const g = new ce(16755200), _ = new ce(16711680), x = new ce(43775), S = new ce(16777215), M = new ce(3355443); this.setColors(g, _, x, S, M) } setColors(t, e, n, a, o) { const h = this.geometry.getAttribute("color"); h.setXYZ(0, t.r, t.g, t.b), h.setXYZ(1, t.r, t.g, t.b), h.setXYZ(2, t.r, t.g, t.b), h.setXYZ(3, t.r, t.g, t.b), h.setXYZ(4, t.r, t.g, t.b), h.setXYZ(5, t.r, t.g, t.b), h.setXYZ(6, t.r, t.g, t.b), h.setXYZ(7, t.r, t.g, t.b), h.setXYZ(8, t.r, t.g, t.b), h.setXYZ(9, t.r, t.g, t.b), h.setXYZ(10, t.r, t.g, t.b), h.setXYZ(11, t.r, t.g, t.b), h.setXYZ(12, t.r, t.g, t.b), h.setXYZ(13, t.r, t.g, t.b), h.setXYZ(14, t.r, t.g, t.b), h.setXYZ(15, t.r, t.g, t.b), h.setXYZ(16, t.r, t.g, t.b), h.setXYZ(17, t.r, t.g, t.b), h.setXYZ(18, t.r, t.g, t.b), h.setXYZ(19, t.r, t.g, t.b), h.setXYZ(20, t.r, t.g, t.b), h.setXYZ(21, t.r, t.g, t.b), h.setXYZ(22, t.r, t.g, t.b), h.setXYZ(23, t.r, t.g, t.b), h.setXYZ(24, e.r, e.g, e.b), h.setXYZ(25, e.r, e.g, e.b), h.setXYZ(26, e.r, e.g, e.b), h.setXYZ(27, e.r, e.g, e.b), h.setXYZ(28, e.r, e.g, e.b), h.setXYZ(29, e.r, e.g, e.b), h.setXYZ(30, e.r, e.g, e.b), h.setXYZ(31, e.r, e.g, e.b), h.setXYZ(32, n.r, n.g, n.b), h.setXYZ(33, n.r, n.g, n.b), h.setXYZ(34, n.r, n.g, n.b), h.setXYZ(35, n.r, n.g, n.b), h.setXYZ(36, n.r, n.g, n.b), h.setXYZ(37, n.r, n.g, n.b), h.setXYZ(38, a.r, a.g, a.b), h.setXYZ(39, a.r, a.g, a.b), h.setXYZ(40, o.r, o.g, o.b), h.setXYZ(41, o.r, o.g, o.b), h.setXYZ(42, o.r, o.g, o.b), h.setXYZ(43, o.r, o.g, o.b), h.setXYZ(44, o.r, o.g, o.b), h.setXYZ(45, o.r, o.g, o.b), h.setXYZ(46, o.r, o.g, o.b), h.setXYZ(47, o.r, o.g, o.b), h.setXYZ(48, o.r, o.g, o.b), h.setXYZ(49, o.r, o.g, o.b), h.needsUpdate = !0 } update() { const t = this.geometry, e = this.pointMap, n = 1, a = 1; vi.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); const o = this.camera.coordinateSystem === Lr ? -1 : 0; Mi("c", e, t, vi, 0, 0, o), Mi("t", e, t, vi, 0, 0, 1), Mi("n1", e, t, vi, -1, -1, o), Mi("n2", e, t, vi, n, -1, o), Mi("n3", e, t, vi, -1, a, o), Mi("n4", e, t, vi, n, a, o), Mi("f1", e, t, vi, -1, -1, 1), Mi("f2", e, t, vi, n, -1, 1), Mi("f3", e, t, vi, -1, a, 1), Mi("f4", e, t, vi, n, a, 1), Mi("u1", e, t, vi, n * .7, a * 1.1, o), Mi("u2", e, t, vi, -1 * .7, a * 1.1, o), Mi("u3", e, t, vi, 0, a * 2, o), Mi("cf1", e, t, vi, -1, 0, 1), Mi("cf2", e, t, vi, n, 0, 1), Mi("cf3", e, t, vi, 0, -1, 1), Mi("cf4", e, t, vi, 0, a, 1), Mi("cn1", e, t, vi, -1, 0, o), Mi("cn2", e, t, vi, n, 0, o), Mi("cn3", e, t, vi, 0, -1, o), Mi("cn4", e, t, vi, 0, a, o), t.getAttribute("position").needsUpdate = !0 } dispose() { this.geometry.dispose(), this.material.dispose() } } function Mi(r, t, e, n, a, o, f) { x0.set(a, o, f).unproject(n); const h = t[r]; if (h !== void 0) { const m = e.getAttribute("position"); for (let g = 0, _ = h.length; g < _; g++)m.setXYZ(h[g], x0.x, x0.y, x0.z) } } const S0 = new Ga; class _C extends Cl { constructor(t, e = 16776960) { const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), a = new Float32Array(8 * 3), o = new Qe; o.setIndex(new Pn(n, 1)), o.setAttribute("position", new Pn(a, 3)), super(o, new Xa({ color: e, toneMapped: !1 })), this.object = t, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update() } update() { if (this.object !== void 0 && S0.setFromObject(this.object), S0.isEmpty()) return; const t = S0.min, e = S0.max, n = this.geometry.attributes.position, a = n.array; a[0] = e.x, a[1] = e.y, a[2] = e.z, a[3] = t.x, a[4] = e.y, a[5] = e.z, a[6] = t.x, a[7] = t.y, a[8] = e.z, a[9] = e.x, a[10] = t.y, a[11] = e.z, a[12] = e.x, a[13] = e.y, a[14] = t.z, a[15] = t.x, a[16] = e.y, a[17] = t.z, a[18] = t.x, a[19] = t.y, a[20] = t.z, a[21] = e.x, a[22] = t.y, a[23] = t.z, n.needsUpdate = !0, this.geometry.computeBoundingSphere() } setFromObject(t) { return this.object = t, this.update(), this } copy(t, e) { return super.copy(t, e), this.object = t.object, this } dispose() { this.geometry.dispose(), this.material.dispose() } } class xC extends Cl { constructor(t, e = 16776960) { const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), a = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], o = new Qe; o.setIndex(new Pn(n, 1)), o.setAttribute("position", new ve(a, 3)), super(o, new Xa({ color: e, toneMapped: !1 })), this.box = t, this.type = "Box3Helper", this.geometry.computeBoundingSphere() } updateMatrixWorld(t) { const e = this.box; e.isEmpty() || (e.getCenter(this.position), e.getSize(this.scale), this.scale.multiplyScalar(.5), super.updateMatrixWorld(t)) } dispose() { this.geometry.dispose(), this.material.dispose() } } class SC extends Eu { constructor(t, e = 1, n = 16776960) { const a = n, o = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], f = new Qe; f.setAttribute("position", new ve(o, 3)), f.computeBoundingSphere(), super(f, new Xa({ color: a, toneMapped: !1 })), this.type = "PlaneHelper", this.plane = t, this.size = e; const h = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], m = new Qe; m.setAttribute("position", new ve(h, 3)), m.computeBoundingSphere(), this.add(new wi(m, new Au({ color: a, opacity: .2, transparent: !0, depthWrite: !1, toneMapped: !1 }))) } updateMatrixWorld(t) { this.position.set(0, 0, 0), this.scale.set(.5 * this.size, .5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(t) } dispose() { this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose() } } const aM = new k; let M0, M_; class MC extends _n { constructor(t = new k(0, 0, 1), e = new k(0, 0, 0), n = 1, a = 16776960, o = n * .2, f = o * .2) { super(), this.type = "ArrowHelper", M0 === void 0 && (M0 = new Qe, M0.setAttribute("position", new ve([0, 0, 0, 0, 1, 0], 3)), M_ = new Ph(0, .5, 1, 5, 1), M_.translate(0, -.5, 0)), this.position.copy(e), this.line = new Eu(M0, new Xa({ color: a, toneMapped: !1 })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new wi(M_, new Au({ color: a, toneMapped: !1 })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(t), this.setLength(n, o, f) } setDirection(t) { if (t.y > .99999) this.quaternion.set(0, 0, 0, 1); else if (t.y < -.99999) this.quaternion.set(1, 0, 0, 0); else { aM.set(t.z, 0, -t.x).normalize(); const e = Math.acos(t.y); this.quaternion.setFromAxisAngle(aM, e) } } setLength(t, e = t * .2, n = e * .2) { this.line.scale.set(1, Math.max(1e-4, t - e), 1), this.line.updateMatrix(), this.cone.scale.set(n, e, n), this.cone.position.y = t, this.cone.updateMatrix() } setColor(t) { this.line.material.color.set(t), this.cone.material.color.set(t) } copy(t) { return super.copy(t, !1), this.line.copy(t.line), this.cone.copy(t.cone), this } dispose() { this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose() } } class bC extends Cl { constructor(t = 1) { const e = [0, 0, 0, t, 0, 0, 0, 0, 0, 0, t, 0, 0, 0, 0, 0, 0, t], n = [1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1], a = new Qe; a.setAttribute("position", new ve(e, 3)), a.setAttribute("color", new ve(n, 3)); const o = new Xa({ vertexColors: !0, toneMapped: !1 }); super(a, o), this.type = "AxesHelper" } setColors(t, e, n) { const a = new ce, o = this.geometry.attributes.color.array; return a.set(t), a.toArray(o, 0), a.toArray(o, 3), a.set(e), a.toArray(o, 6), a.toArray(o, 9), a.set(n), a.toArray(o, 12), a.toArray(o, 15), this.geometry.attributes.color.needsUpdate = !0, this } dispose() { this.geometry.dispose(), this.material.dispose() } } class EC { constructor() { this.type = "ShapePath", this.color = new ce, this.subPaths = [], this.currentPath = null } moveTo(t, e) { return this.currentPath = new Pp, this.subPaths.push(this.currentPath), this.currentPath.moveTo(t, e), this } lineTo(t, e) { return this.currentPath.lineTo(t, e), this } quadraticCurveTo(t, e, n, a) { return this.currentPath.quadraticCurveTo(t, e, n, a), this } bezierCurveTo(t, e, n, a, o, f) { return this.currentPath.bezierCurveTo(t, e, n, a, o, f), this } splineThru(t) { return this.currentPath.splineThru(t), this } toShapes(t) { function e(T) { const D = []; for (let N = 0, U = T.length; N < U; N++) { const V = T[N], I = new Xc; I.curves = V.curves, D.push(I) } return D } function n(T, D) { const N = D.length; let U = !1; for (let V = N - 1, I = 0; I < N; V = I++) { let G = D[V], q = D[I], z = q.x - G.x, L = q.y - G.y; if (Math.abs(L) > Number.EPSILON) { if (L < 0 && (G = D[I], z = -z, q = D[V], L = -L), T.y < G.y || T.y > q.y) continue; if (T.y === G.y) { if (T.x === G.x) return !0 } else { const j = L * (T.x - G.x) - z * (T.y - G.y); if (j === 0) return !0; if (j < 0) continue; U = !U } } else { if (T.y !== G.y) continue; if (q.x <= T.x && T.x <= G.x || G.x <= T.x && T.x <= q.x) return !0 } } return U } const a = Al.isClockWise, o = this.subPaths; if (o.length === 0) return []; let f, h, m; const g = []; if (o.length === 1) return h = o[0], m = new Xc, m.curves = h.curves, g.push(m), g; let _ = !a(o[0].getPoints()); _ = t ? !_ : _; const x = [], S = []; let M = [], A = 0, C; S[A] = void 0, M[A] = []; for (let T = 0, D = o.length; T < D; T++)h = o[T], C = h.getPoints(), f = a(C), f = t ? !f : f, f ? (!_ && S[A] && A++, S[A] = { s: new Xc, p: C }, S[A].s.curves = h.curves, _ && A++, M[A] = []) : M[A].push({ h, p: C[0] }); if (!S[0]) return e(o); if (S.length > 1) { let T = !1, D = 0; for (let N = 0, U = S.length; N < U; N++)x[N] = []; for (let N = 0, U = S.length; N < U; N++) { const V = M[N]; for (let I = 0; I < V.length; I++) { const G = V[I]; let q = !0; for (let z = 0; z < S.length; z++)n(G.p, S[z].p) && (N !== z && D++, q ? (q = !1, x[z].push(G)) : T = !0); q && x[N].push(G) } } D > 0 && T === !1 && (M = x) } let R; for (let T = 0, D = S.length; T < D; T++) { m = S[T].s, g.push(m), R = M[T]; for (let N = 0, U = R.length; N < U; N++)m.holes.push(R[N].h) } return g } } class TC extends wl { constructor(t, e = null) { super(), this.object = t, this.domElement = e, this.enabled = !0, this.state = -1, this.keys = {}, this.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null }, this.touches = { ONE: null, TWO: null } } connect() { } disconnect() { } dispose() { } update() { } } function AC(r, t) { const e = r.image && r.image.width ? r.image.width / r.image.height : 1; return e > t ? (r.repeat.x = 1, r.repeat.y = e / t, r.offset.x = 0, r.offset.y = (1 - r.repeat.y) / 2) : (r.repeat.x = t / e, r.repeat.y = 1, r.offset.x = (1 - r.repeat.x) / 2, r.offset.y = 0), r } function RC(r, t) { const e = r.image && r.image.width ? r.image.width / r.image.height : 1; return e > t ? (r.repeat.x = t / e, r.repeat.y = 1, r.offset.x = (1 - r.repeat.x) / 2, r.offset.y = 0) : (r.repeat.x = 1, r.repeat.y = e / t, r.offset.x = 0, r.offset.y = (1 - r.repeat.y) / 2), r } function wC(r) { return r.repeat.x = 1, r.repeat.y = 1, r.offset.x = 0, r.offset.y = 0, r } function lx(r, t, e, n) { const a = CC(n); switch (e) { case Mx: return r * t; case Ex: return r * t; case Tx: return r * t * 2; case Cv: return r * t / a.components * a.byteLength; case Zp: return r * t / a.components * a.byteLength; case Ax: return r * t * 2 / a.components * a.byteLength; case Dv: return r * t * 2 / a.components * a.byteLength; case bx: return r * t * 3 / a.components * a.byteLength; case Ta: return r * t * 4 / a.components * a.byteLength; case Uv: return r * t * 4 / a.components * a.byteLength; case vp: case yp: return Math.floor((r + 3) / 4) * Math.floor((t + 3) / 4) * 8; case _p: case xp: return Math.floor((r + 3) / 4) * Math.floor((t + 3) / 4) * 16; case Y0: case k0: return Math.max(r, 16) * Math.max(t, 8) / 4; case q0: case W0: return Math.max(r, 8) * Math.max(t, 8) / 2; case j0: case Z0: return Math.floor((r + 3) / 4) * Math.floor((t + 3) / 4) * 8; case Q0: return Math.floor((r + 3) / 4) * Math.floor((t + 3) / 4) * 16; case K0: return Math.floor((r + 3) / 4) * Math.floor((t + 3) / 4) * 16; case J0: return Math.floor((r + 4) / 5) * Math.floor((t + 3) / 4) * 16; case $0: return Math.floor((r + 4) / 5) * Math.floor((t + 4) / 5) * 16; case tv: return Math.floor((r + 5) / 6) * Math.floor((t + 4) / 5) * 16; case ev: return Math.floor((r + 5) / 6) * Math.floor((t + 5) / 6) * 16; case nv: return Math.floor((r + 7) / 8) * Math.floor((t + 4) / 5) * 16; case iv: return Math.floor((r + 7) / 8) * Math.floor((t + 5) / 6) * 16; case av: return Math.floor((r + 7) / 8) * Math.floor((t + 7) / 8) * 16; case sv: return Math.floor((r + 9) / 10) * Math.floor((t + 4) / 5) * 16; case rv: return Math.floor((r + 9) / 10) * Math.floor((t + 5) / 6) * 16; case lv: return Math.floor((r + 9) / 10) * Math.floor((t + 7) / 8) * 16; case ov: return Math.floor((r + 9) / 10) * Math.floor((t + 9) / 10) * 16; case uv: return Math.floor((r + 11) / 12) * Math.floor((t + 9) / 10) * 16; case cv: return Math.floor((r + 11) / 12) * Math.floor((t + 11) / 12) * 16; case Sp: case fv: case hv: return Math.ceil(r / 4) * Math.ceil(t / 4) * 16; case Rx: case dv: return Math.ceil(r / 4) * Math.ceil(t / 4) * 8; case pv: case mv: return Math.ceil(r / 4) * Math.ceil(t / 4) * 16 }throw new Error(`Unable to determine texture byte length for ${e} format.`) } function CC(r) { switch (r) { case zr: case _x: return { byteLength: 1, components: 1 }; case Ah: case xx: case zh: return { byteLength: 2, components: 1 }; case Rv: case wv: return { byteLength: 2, components: 4 }; case So: case Av: case us: return { byteLength: 4, components: 1 }; case Sx: return { byteLength: 4, components: 3 } }throw new Error(`Unknown texture type ${r}.`) } class DC { static contain(t, e) { return AC(t, e) } static cover(t, e) { return RC(t, e) } static fill(t) { return wC(t) } static getByteLength(t, e, n, a) { return lx(t, e, n, a) } } typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: { revision: kp } })); typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = kp);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function rT() { let r = null, t = !1, e = null, n = null; function a(o, f) { e(o, f), n = r.requestAnimationFrame(a) } return { start: function () { t !== !0 && e !== null && (n = r.requestAnimationFrame(a), t = !0) }, stop: function () { r.cancelAnimationFrame(n), t = !1 }, setAnimationLoop: function (o) { e = o }, setContext: function (o) { r = o } } } function UC(r) { const t = new WeakMap; function e(h, m) { const g = h.array, _ = h.usage, x = g.byteLength, S = r.createBuffer(); r.bindBuffer(m, S), r.bufferData(m, g, _), h.onUploadCallback(); let M; if (g instanceof Float32Array) M = r.FLOAT; else if (g instanceof Uint16Array) h.isFloat16BufferAttribute ? M = r.HALF_FLOAT : M = r.UNSIGNED_SHORT; else if (g instanceof Int16Array) M = r.SHORT; else if (g instanceof Uint32Array) M = r.UNSIGNED_INT; else if (g instanceof Int32Array) M = r.INT; else if (g instanceof Int8Array) M = r.BYTE; else if (g instanceof Uint8Array) M = r.UNSIGNED_BYTE; else if (g instanceof Uint8ClampedArray) M = r.UNSIGNED_BYTE; else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + g); return { buffer: S, type: M, bytesPerElement: g.BYTES_PER_ELEMENT, version: h.version, size: x } } function n(h, m, g) { const _ = m.array, x = m.updateRanges; if (r.bindBuffer(g, h), x.length === 0) r.bufferSubData(g, 0, _); else { x.sort((M, A) => M.start - A.start); let S = 0; for (let M = 1; M < x.length; M++) { const A = x[S], C = x[M]; C.start <= A.start + A.count + 1 ? A.count = Math.max(A.count, C.start + C.count - A.start) : (++S, x[S] = C) } x.length = S + 1; for (let M = 0, A = x.length; M < A; M++) { const C = x[M]; r.bufferSubData(g, C.start * _.BYTES_PER_ELEMENT, _, C.start, C.count) } m.clearUpdateRanges() } m.onUploadCallback() } function a(h) { return h.isInterleavedBufferAttribute && (h = h.data), t.get(h) } function o(h) { h.isInterleavedBufferAttribute && (h = h.data); const m = t.get(h); m && (r.deleteBuffer(m.buffer), t.delete(h)) } function f(h, m) { if (h.isInterleavedBufferAttribute && (h = h.data), h.isGLBufferAttribute) { const _ = t.get(h); (!_ || _.version < h.version) && t.set(h, { buffer: h.buffer, type: h.type, bytesPerElement: h.elementSize, version: h.version }); return } const g = t.get(h); if (g === void 0) t.set(h, e(h, m)); else if (g.version < h.version) { if (g.size !== h.array.byteLength) throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported."); n(g.buffer, h, m), g.version = h.version } } return { get: a, remove: o, update: f } } var NC = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, OC = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, LC = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, zC = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, BC = `#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`, PC = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, IC = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, HC = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, FC = `#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`, VC = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`, GC = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, XC = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, qC = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, YC = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, WC = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, kC = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`, jC = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, ZC = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, QC = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, KC = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, JC = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, $C = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`, t3 = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`, e3 = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, n3 = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, i3 = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, a3 = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, s3 = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, r3 = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, l3 = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, o3 = "gl_FragColor = linearToOutputTexel( gl_FragColor );", u3 = `vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`, c3 = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, f3 = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, h3 = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, d3 = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, p3 = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, m3 = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, g3 = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, v3 = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, y3 = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, _3 = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, x3 = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, S3 = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, M3 = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, b3 = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, E3 = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, T3 = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, A3 = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, R3 = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, w3 = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, C3 = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`, D3 = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, U3 = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, N3 = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, O3 = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, L3 = `#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, z3 = `#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, B3 = `#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, P3 = `#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`, I3 = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, H3 = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, F3 = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, V3 = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, G3 = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, X3 = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, q3 = `#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`, Y3 = `#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, W3 = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, k3 = `#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`, j3 = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, Z3 = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, Q3 = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, K3 = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, J3 = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, $3 = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, tD = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, eD = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, nD = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, iD = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, aD = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, sD = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, rD = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, lD = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, oD = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, uD = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, cD = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, fD = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, hD = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, dD = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`, pD = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, mD = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, gD = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, vD = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, yD = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, _D = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, xD = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, SD = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, MD = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, bD = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, ED = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, TD = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, AD = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, RD = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, wD = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, CD = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, DD = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`; const UD = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, ND = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, OD = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, LD = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, zD = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, BD = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, PD = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, ID = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`, HD = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, FD = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, VD = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, GD = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, XD = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, qD = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, YD = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, WD = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, kD = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, jD = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, ZD = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, QD = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, KD = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, JD = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, $D = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, tU = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, eU = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, nU = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, iU = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, aU = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, sU = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, rU = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, lU = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, oU = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, uU = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, cU = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, Ze = { alphahash_fragment: NC, alphahash_pars_fragment: OC, alphamap_fragment: LC, alphamap_pars_fragment: zC, alphatest_fragment: BC, alphatest_pars_fragment: PC, aomap_fragment: IC, aomap_pars_fragment: HC, batching_pars_vertex: FC, batching_vertex: VC, begin_vertex: GC, beginnormal_vertex: XC, bsdfs: qC, iridescence_fragment: YC, bumpmap_pars_fragment: WC, clipping_planes_fragment: kC, clipping_planes_pars_fragment: jC, clipping_planes_pars_vertex: ZC, clipping_planes_vertex: QC, color_fragment: KC, color_pars_fragment: JC, color_pars_vertex: $C, color_vertex: t3, common: e3, cube_uv_reflection_fragment: n3, defaultnormal_vertex: i3, displacementmap_pars_vertex: a3, displacementmap_vertex: s3, emissivemap_fragment: r3, emissivemap_pars_fragment: l3, colorspace_fragment: o3, colorspace_pars_fragment: u3, envmap_fragment: c3, envmap_common_pars_fragment: f3, envmap_pars_fragment: h3, envmap_pars_vertex: d3, envmap_physical_pars_fragment: E3, envmap_vertex: p3, fog_vertex: m3, fog_pars_vertex: g3, fog_fragment: v3, fog_pars_fragment: y3, gradientmap_pars_fragment: _3, lightmap_pars_fragment: x3, lights_lambert_fragment: S3, lights_lambert_pars_fragment: M3, lights_pars_begin: b3, lights_toon_fragment: T3, lights_toon_pars_fragment: A3, lights_phong_fragment: R3, lights_phong_pars_fragment: w3, lights_physical_fragment: C3, lights_physical_pars_fragment: D3, lights_fragment_begin: U3, lights_fragment_maps: N3, lights_fragment_end: O3, logdepthbuf_fragment: L3, logdepthbuf_pars_fragment: z3, logdepthbuf_pars_vertex: B3, logdepthbuf_vertex: P3, map_fragment: I3, map_pars_fragment: H3, map_particle_fragment: F3, map_particle_pars_fragment: V3, metalnessmap_fragment: G3, metalnessmap_pars_fragment: X3, morphinstance_vertex: q3, morphcolor_vertex: Y3, morphnormal_vertex: W3, morphtarget_pars_vertex: k3, morphtarget_vertex: j3, normal_fragment_begin: Z3, normal_fragment_maps: Q3, normal_pars_fragment: K3, normal_pars_vertex: J3, normal_vertex: $3, normalmap_pars_fragment: tD, clearcoat_normal_fragment_begin: eD, clearcoat_normal_fragment_maps: nD, clearcoat_pars_fragment: iD, iridescence_pars_fragment: aD, opaque_fragment: sD, packing: rD, premultiplied_alpha_fragment: lD, project_vertex: oD, dithering_fragment: uD, dithering_pars_fragment: cD, roughnessmap_fragment: fD, roughnessmap_pars_fragment: hD, shadowmap_pars_fragment: dD, shadowmap_pars_vertex: pD, shadowmap_vertex: mD, shadowmask_pars_fragment: gD, skinbase_vertex: vD, skinning_pars_vertex: yD, skinning_vertex: _D, skinnormal_vertex: xD, specularmap_fragment: SD, specularmap_pars_fragment: MD, tonemapping_fragment: bD, tonemapping_pars_fragment: ED, transmission_fragment: TD, transmission_pars_fragment: AD, uv_pars_fragment: RD, uv_pars_vertex: wD, uv_vertex: CD, worldpos_vertex: DD, background_vert: UD, background_frag: ND, backgroundCube_vert: OD, backgroundCube_frag: LD, cube_vert: zD, cube_frag: BD, depth_vert: PD, depth_frag: ID, distanceRGBA_vert: HD, distanceRGBA_frag: FD, equirect_vert: VD, equirect_frag: GD, linedashed_vert: XD, linedashed_frag: qD, meshbasic_vert: YD, meshbasic_frag: WD, meshlambert_vert: kD, meshlambert_frag: jD, meshmatcap_vert: ZD, meshmatcap_frag: QD, meshnormal_vert: KD, meshnormal_frag: JD, meshphong_vert: $D, meshphong_frag: tU, meshphysical_vert: eU, meshphysical_frag: nU, meshtoon_vert: iU, meshtoon_frag: aU, points_vert: sU, points_frag: rU, shadow_vert: lU, shadow_frag: oU, sprite_vert: uU, sprite_frag: cU }, le = { common: { diffuse: { value: new ce(16777215) }, opacity: { value: 1 }, map: { value: null }, mapTransform: { value: new Ge }, alphaMap: { value: null }, alphaMapTransform: { value: new Ge }, alphaTest: { value: 0 } }, specularmap: { specularMap: { value: null }, specularMapTransform: { value: new Ge } }, envmap: { envMap: { value: null }, envMapRotation: { value: new Ge }, flipEnvMap: { value: -1 }, reflectivity: { value: 1 }, ior: { value: 1.5 }, refractionRatio: { value: .98 } }, aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 }, aoMapTransform: { value: new Ge } }, lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 }, lightMapTransform: { value: new Ge } }, bumpmap: { bumpMap: { value: null }, bumpMapTransform: { value: new Ge }, bumpScale: { value: 1 } }, normalmap: { normalMap: { value: null }, normalMapTransform: { value: new Ge }, normalScale: { value: new zt(1, 1) } }, displacementmap: { displacementMap: { value: null }, displacementMapTransform: { value: new Ge }, displacementScale: { value: 1 }, displacementBias: { value: 0 } }, emissivemap: { emissiveMap: { value: null }, emissiveMapTransform: { value: new Ge } }, metalnessmap: { metalnessMap: { value: null }, metalnessMapTransform: { value: new Ge } }, roughnessmap: { roughnessMap: { value: null }, roughnessMapTransform: { value: new Ge } }, gradientmap: { gradientMap: { value: null } }, fog: { fogDensity: { value: 25e-5 }, fogNear: { value: 1 }, fogFar: { value: 2e3 }, fogColor: { value: new ce(16777215) } }, lights: { ambientLightColor: { value: [] }, lightProbe: { value: [] }, directionalLights: { value: [], properties: { direction: {}, color: {} } }, directionalLightShadows: { value: [], properties: { shadowIntensity: 1, shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} } }, directionalShadowMap: { value: [] }, directionalShadowMatrix: { value: [] }, spotLights: { value: [], properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {} } }, spotLightShadows: { value: [], properties: { shadowIntensity: 1, shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} } }, spotLightMap: { value: [] }, spotShadowMap: { value: [] }, spotLightMatrix: { value: [] }, pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {} } }, pointLightShadows: { value: [], properties: { shadowIntensity: 1, shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {}, shadowCameraNear: {}, shadowCameraFar: {} } }, pointShadowMap: { value: [] }, pointShadowMatrix: { value: [] }, hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } }, rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } }, ltc_1: { value: null }, ltc_2: { value: null } }, points: { diffuse: { value: new ce(16777215) }, opacity: { value: 1 }, size: { value: 1 }, scale: { value: 1 }, map: { value: null }, alphaMap: { value: null }, alphaMapTransform: { value: new Ge }, alphaTest: { value: 0 }, uvTransform: { value: new Ge } }, sprite: { diffuse: { value: new ce(16777215) }, opacity: { value: 1 }, center: { value: new zt(.5, .5) }, rotation: { value: 0 }, map: { value: null }, mapTransform: { value: new Ge }, alphaMap: { value: null }, alphaMapTransform: { value: new Ge }, alphaTest: { value: 0 } } }, Or = { basic: { uniforms: Ha([le.common, le.specularmap, le.envmap, le.aomap, le.lightmap, le.fog]), vertexShader: Ze.meshbasic_vert, fragmentShader: Ze.meshbasic_frag }, lambert: { uniforms: Ha([le.common, le.specularmap, le.envmap, le.aomap, le.lightmap, le.emissivemap, le.bumpmap, le.normalmap, le.displacementmap, le.fog, le.lights, { emissive: { value: new ce(0) } }]), vertexShader: Ze.meshlambert_vert, fragmentShader: Ze.meshlambert_frag }, phong: { uniforms: Ha([le.common, le.specularmap, le.envmap, le.aomap, le.lightmap, le.emissivemap, le.bumpmap, le.normalmap, le.displacementmap, le.fog, le.lights, { emissive: { value: new ce(0) }, specular: { value: new ce(1118481) }, shininess: { value: 30 } }]), vertexShader: Ze.meshphong_vert, fragmentShader: Ze.meshphong_frag }, standard: { uniforms: Ha([le.common, le.envmap, le.aomap, le.lightmap, le.emissivemap, le.bumpmap, le.normalmap, le.displacementmap, le.roughnessmap, le.metalnessmap, le.fog, le.lights, { emissive: { value: new ce(0) }, roughness: { value: 1 }, metalness: { value: 0 }, envMapIntensity: { value: 1 } }]), vertexShader: Ze.meshphysical_vert, fragmentShader: Ze.meshphysical_frag }, toon: { uniforms: Ha([le.common, le.aomap, le.lightmap, le.emissivemap, le.bumpmap, le.normalmap, le.displacementmap, le.gradientmap, le.fog, le.lights, { emissive: { value: new ce(0) } }]), vertexShader: Ze.meshtoon_vert, fragmentShader: Ze.meshtoon_frag }, matcap: { uniforms: Ha([le.common, le.bumpmap, le.normalmap, le.displacementmap, le.fog, { matcap: { value: null } }]), vertexShader: Ze.meshmatcap_vert, fragmentShader: Ze.meshmatcap_frag }, points: { uniforms: Ha([le.points, le.fog]), vertexShader: Ze.points_vert, fragmentShader: Ze.points_frag }, dashed: { uniforms: Ha([le.common, le.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]), vertexShader: Ze.linedashed_vert, fragmentShader: Ze.linedashed_frag }, depth: { uniforms: Ha([le.common, le.displacementmap]), vertexShader: Ze.depth_vert, fragmentShader: Ze.depth_frag }, normal: { uniforms: Ha([le.common, le.bumpmap, le.normalmap, le.displacementmap, { opacity: { value: 1 } }]), vertexShader: Ze.meshnormal_vert, fragmentShader: Ze.meshnormal_frag }, sprite: { uniforms: Ha([le.sprite, le.fog]), vertexShader: Ze.sprite_vert, fragmentShader: Ze.sprite_frag }, background: { uniforms: { uvTransform: { value: new Ge }, t2D: { value: null }, backgroundIntensity: { value: 1 } }, vertexShader: Ze.background_vert, fragmentShader: Ze.background_frag }, backgroundCube: { uniforms: { envMap: { value: null }, flipEnvMap: { value: -1 }, backgroundBlurriness: { value: 0 }, backgroundIntensity: { value: 1 }, backgroundRotation: { value: new Ge } }, vertexShader: Ze.backgroundCube_vert, fragmentShader: Ze.backgroundCube_frag }, cube: { uniforms: { tCube: { value: null }, tFlip: { value: -1 }, opacity: { value: 1 } }, vertexShader: Ze.cube_vert, fragmentShader: Ze.cube_frag }, equirect: { uniforms: { tEquirect: { value: null } }, vertexShader: Ze.equirect_vert, fragmentShader: Ze.equirect_frag }, distanceRGBA: { uniforms: Ha([le.common, le.displacementmap, { referencePosition: { value: new k }, nearDistance: { value: 1 }, farDistance: { value: 1e3 } }]), vertexShader: Ze.distanceRGBA_vert, fragmentShader: Ze.distanceRGBA_frag }, shadow: { uniforms: Ha([le.lights, le.fog, { color: { value: new ce(0) }, opacity: { value: 1 } }]), vertexShader: Ze.shadow_vert, fragmentShader: Ze.shadow_frag } }; Or.physical = { uniforms: Ha([Or.standard.uniforms, { clearcoat: { value: 0 }, clearcoatMap: { value: null }, clearcoatMapTransform: { value: new Ge }, clearcoatNormalMap: { value: null }, clearcoatNormalMapTransform: { value: new Ge }, clearcoatNormalScale: { value: new zt(1, 1) }, clearcoatRoughness: { value: 0 }, clearcoatRoughnessMap: { value: null }, clearcoatRoughnessMapTransform: { value: new Ge }, dispersion: { value: 0 }, iridescence: { value: 0 }, iridescenceMap: { value: null }, iridescenceMapTransform: { value: new Ge }, iridescenceIOR: { value: 1.3 }, iridescenceThicknessMinimum: { value: 100 }, iridescenceThicknessMaximum: { value: 400 }, iridescenceThicknessMap: { value: null }, iridescenceThicknessMapTransform: { value: new Ge }, sheen: { value: 0 }, sheenColor: { value: new ce(0) }, sheenColorMap: { value: null }, sheenColorMapTransform: { value: new Ge }, sheenRoughness: { value: 1 }, sheenRoughnessMap: { value: null }, sheenRoughnessMapTransform: { value: new Ge }, transmission: { value: 0 }, transmissionMap: { value: null }, transmissionMapTransform: { value: new Ge }, transmissionSamplerSize: { value: new zt }, transmissionSamplerMap: { value: null }, thickness: { value: 0 }, thicknessMap: { value: null }, thicknessMapTransform: { value: new Ge }, attenuationDistance: { value: 0 }, attenuationColor: { value: new ce(0) }, specularColor: { value: new ce(1, 1, 1) }, specularColorMap: { value: null }, specularColorMapTransform: { value: new Ge }, specularIntensity: { value: 1 }, specularIntensityMap: { value: null }, specularIntensityMapTransform: { value: new Ge }, anisotropyVector: { value: new zt }, anisotropyMap: { value: null }, anisotropyMapTransform: { value: new Ge } }]), vertexShader: Ze.meshphysical_vert, fragmentShader: Ze.meshphysical_frag }; const b0 = { r: 0, b: 0, g: 0 }, Cc = new Ds, fU = new Oe; function hU(r, t, e, n, a, o, f) { const h = new ce(0); let m = o === !0 ? 0 : 1, g, _, x = null, S = 0, M = null; function A(N) { let U = N.isScene === !0 ? N.background : null; return U && U.isTexture && (U = (N.backgroundBlurriness > 0 ? e : t).get(U)), U } function C(N) { let U = !1; const V = A(N); V === null ? T(h, m) : V && V.isColor && (T(V, 1), U = !0); const I = r.xr.getEnvironmentBlendMode(); I === "additive" ? n.buffers.color.setClear(0, 0, 0, 1, f) : I === "alpha-blend" && n.buffers.color.setClear(0, 0, 0, 0, f), (r.autoClear || U) && (n.buffers.depth.setTest(!0), n.buffers.depth.setMask(!0), n.buffers.color.setMask(!0), r.clear(r.autoClearColor, r.autoClearDepth, r.autoClearStencil)) } function R(N, U) { const V = A(U); V && (V.isCubeTexture || V.mapping === Lh) ? (_ === void 0 && (_ = new wi(new Kc(1, 1, 1), new Br({ name: "BackgroundCubeMaterial", uniforms: Ch(Or.backgroundCube.uniforms), vertexShader: Or.backgroundCube.vertexShader, fragmentShader: Or.backgroundCube.fragmentShader, side: Va, depthTest: !1, depthWrite: !1, fog: !1 })), _.geometry.deleteAttribute("normal"), _.geometry.deleteAttribute("uv"), _.onBeforeRender = function (I, G, q) { this.matrixWorld.copyPosition(q.matrixWorld) }, Object.defineProperty(_.material, "envMap", { get: function () { return this.uniforms.envMap.value } }), a.update(_)), Cc.copy(U.backgroundRotation), Cc.x *= -1, Cc.y *= -1, Cc.z *= -1, V.isCubeTexture && V.isRenderTargetTexture === !1 && (Cc.y *= -1, Cc.z *= -1), _.material.uniforms.envMap.value = V, _.material.uniforms.flipEnvMap.value = V.isCubeTexture && V.isRenderTargetTexture === !1 ? -1 : 1, _.material.uniforms.backgroundBlurriness.value = U.backgroundBlurriness, _.material.uniforms.backgroundIntensity.value = U.backgroundIntensity, _.material.uniforms.backgroundRotation.value.setFromMatrix4(fU.makeRotationFromEuler(Cc)), _.material.toneMapped = dn.getTransfer(V.colorSpace) !== Nn, (x !== V || S !== V.version || M !== r.toneMapping) && (_.material.needsUpdate = !0, x = V, S = V.version, M = r.toneMapping), _.layers.enableAll(), N.unshift(_, _.geometry, _.material, 0, 0, null)) : V && V.isTexture && (g === void 0 && (g = new wi(new Ih(2, 2), new Br({ name: "BackgroundMaterial", uniforms: Ch(Or.background.uniforms), vertexShader: Or.background.vertexShader, fragmentShader: Or.background.fragmentShader, side: _o, depthTest: !1, depthWrite: !1, fog: !1 })), g.geometry.deleteAttribute("normal"), Object.defineProperty(g.material, "map", { get: function () { return this.uniforms.t2D.value } }), a.update(g)), g.material.uniforms.t2D.value = V, g.material.uniforms.backgroundIntensity.value = U.backgroundIntensity, g.material.toneMapped = dn.getTransfer(V.colorSpace) !== Nn, V.matrixAutoUpdate === !0 && V.updateMatrix(), g.material.uniforms.uvTransform.value.copy(V.matrix), (x !== V || S !== V.version || M !== r.toneMapping) && (g.material.needsUpdate = !0, x = V, S = V.version, M = r.toneMapping), g.layers.enableAll(), N.unshift(g, g.geometry, g.material, 0, 0, null)) } function T(N, U) { N.getRGB(b0, rE(r)), n.buffers.color.setClear(b0.r, b0.g, b0.b, U, f) } function D() { _ !== void 0 && (_.geometry.dispose(), _.material.dispose(), _ = void 0), g !== void 0 && (g.geometry.dispose(), g.material.dispose(), g = void 0) } return { getClearColor: function () { return h }, setClearColor: function (N, U = 1) { h.set(N), m = U, T(h, m) }, getClearAlpha: function () { return m }, setClearAlpha: function (N) { m = N, T(h, m) }, render: C, addToRenderList: R, dispose: D } } function dU(r, t) { const e = r.getParameter(r.MAX_VERTEX_ATTRIBS), n = {}, a = S(null); let o = a, f = !1; function h(L, j, dt, tt, ct) { let xt = !1; const K = x(tt, dt, j); o !== K && (o = K, g(o.object)), xt = M(L, tt, dt, ct), xt && A(L, tt, dt, ct), ct !== null && t.update(ct, r.ELEMENT_ARRAY_BUFFER), (xt || f) && (f = !1, U(L, j, dt, tt), ct !== null && r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, t.get(ct).buffer)) } function m() { return r.createVertexArray() } function g(L) { return r.bindVertexArray(L) } function _(L) { return r.deleteVertexArray(L) } function x(L, j, dt) { const tt = dt.wireframe === !0; let ct = n[L.id]; ct === void 0 && (ct = {}, n[L.id] = ct); let xt = ct[j.id]; xt === void 0 && (xt = {}, ct[j.id] = xt); let K = xt[tt]; return K === void 0 && (K = S(m()), xt[tt] = K), K } function S(L) { const j = [], dt = [], tt = []; for (let ct = 0; ct < e; ct++)j[ct] = 0, dt[ct] = 0, tt[ct] = 0; return { geometry: null, program: null, wireframe: !1, newAttributes: j, enabledAttributes: dt, attributeDivisors: tt, object: L, attributes: {}, index: null } } function M(L, j, dt, tt) { const ct = o.attributes, xt = j.attributes; let K = 0; const ft = dt.getAttributes(); for (const nt in ft) if (ft[nt].location >= 0) { const Y = ct[nt]; let it = xt[nt]; if (it === void 0 && (nt === "instanceMatrix" && L.instanceMatrix && (it = L.instanceMatrix), nt === "instanceColor" && L.instanceColor && (it = L.instanceColor)), Y === void 0 || Y.attribute !== it || it && Y.data !== it.data) return !0; K++ } return o.attributesNum !== K || o.index !== tt } function A(L, j, dt, tt) { const ct = {}, xt = j.attributes; let K = 0; const ft = dt.getAttributes(); for (const nt in ft) if (ft[nt].location >= 0) { let Y = xt[nt]; Y === void 0 && (nt === "instanceMatrix" && L.instanceMatrix && (Y = L.instanceMatrix), nt === "instanceColor" && L.instanceColor && (Y = L.instanceColor)); const it = {}; it.attribute = Y, Y && Y.data && (it.data = Y.data), ct[nt] = it, K++ } o.attributes = ct, o.attributesNum = K, o.index = tt } function C() { const L = o.newAttributes; for (let j = 0, dt = L.length; j < dt; j++)L[j] = 0 } function R(L) { T(L, 0) } function T(L, j) { const dt = o.newAttributes, tt = o.enabledAttributes, ct = o.attributeDivisors; dt[L] = 1, tt[L] === 0 && (r.enableVertexAttribArray(L), tt[L] = 1), ct[L] !== j && (r.vertexAttribDivisor(L, j), ct[L] = j) } function D() { const L = o.newAttributes, j = o.enabledAttributes; for (let dt = 0, tt = j.length; dt < tt; dt++)j[dt] !== L[dt] && (r.disableVertexAttribArray(dt), j[dt] = 0) } function N(L, j, dt, tt, ct, xt, K) { K === !0 ? r.vertexAttribIPointer(L, j, dt, ct, xt) : r.vertexAttribPointer(L, j, dt, tt, ct, xt) } function U(L, j, dt, tt) { C(); const ct = tt.attributes, xt = dt.getAttributes(), K = j.defaultAttributeValues; for (const ft in xt) { const nt = xt[ft]; if (nt.location >= 0) { let Et = ct[ft]; if (Et === void 0 && (ft === "instanceMatrix" && L.instanceMatrix && (Et = L.instanceMatrix), ft === "instanceColor" && L.instanceColor && (Et = L.instanceColor)), Et !== void 0) { const Y = Et.normalized, it = Et.itemSize, Dt = t.get(Et); if (Dt === void 0) continue; const Xt = Dt.buffer, $ = Dt.type, Tt = Dt.bytesPerElement, Lt = $ === r.INT || $ === r.UNSIGNED_INT || Et.gpuType === Av; if (Et.isInterleavedBufferAttribute) { const Vt = Et.data, kt = Vt.stride, Me = Et.offset; if (Vt.isInstancedInterleavedBuffer) { for (let Jt = 0; Jt < nt.locationSize; Jt++)T(nt.location + Jt, Vt.meshPerAttribute); L.isInstancedMesh !== !0 && tt._maxInstanceCount === void 0 && (tt._maxInstanceCount = Vt.meshPerAttribute * Vt.count) } else for (let Jt = 0; Jt < nt.locationSize; Jt++)R(nt.location + Jt); r.bindBuffer(r.ARRAY_BUFFER, Xt); for (let Jt = 0; Jt < nt.locationSize; Jt++)N(nt.location + Jt, it / nt.locationSize, $, Y, kt * Tt, (Me + it / nt.locationSize * Jt) * Tt, Lt) } else { if (Et.isInstancedBufferAttribute) { for (let Vt = 0; Vt < nt.locationSize; Vt++)T(nt.location + Vt, Et.meshPerAttribute); L.isInstancedMesh !== !0 && tt._maxInstanceCount === void 0 && (tt._maxInstanceCount = Et.meshPerAttribute * Et.count) } else for (let Vt = 0; Vt < nt.locationSize; Vt++)R(nt.location + Vt); r.bindBuffer(r.ARRAY_BUFFER, Xt); for (let Vt = 0; Vt < nt.locationSize; Vt++)N(nt.location + Vt, it / nt.locationSize, $, Y, it * Tt, it / nt.locationSize * Vt * Tt, Lt) } } else if (K !== void 0) { const Y = K[ft]; if (Y !== void 0) switch (Y.length) { case 2: r.vertexAttrib2fv(nt.location, Y); break; case 3: r.vertexAttrib3fv(nt.location, Y); break; case 4: r.vertexAttrib4fv(nt.location, Y); break; default: r.vertexAttrib1fv(nt.location, Y) } } } } D() } function V() { q(); for (const L in n) { const j = n[L]; for (const dt in j) { const tt = j[dt]; for (const ct in tt) _(tt[ct].object), delete tt[ct]; delete j[dt] } delete n[L] } } function I(L) { if (n[L.id] === void 0) return; const j = n[L.id]; for (const dt in j) { const tt = j[dt]; for (const ct in tt) _(tt[ct].object), delete tt[ct]; delete j[dt] } delete n[L.id] } function G(L) { for (const j in n) { const dt = n[j]; if (dt[L.id] === void 0) continue; const tt = dt[L.id]; for (const ct in tt) _(tt[ct].object), delete tt[ct]; delete dt[L.id] } } function q() { z(), f = !0, o !== a && (o = a, g(o.object)) } function z() { a.geometry = null, a.program = null, a.wireframe = !1 } return { setup: h, reset: q, resetDefaultState: z, dispose: V, releaseStatesOfGeometry: I, releaseStatesOfProgram: G, initAttributes: C, enableAttribute: R, disableUnusedAttributes: D } } function pU(r, t, e) { let n; function a(g) { n = g } function o(g, _) { r.drawArrays(n, g, _), e.update(_, n, 1) } function f(g, _, x) { x !== 0 && (r.drawArraysInstanced(n, g, _, x), e.update(_, n, x)) } function h(g, _, x) { if (x === 0) return; t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n, g, 0, _, 0, x); let M = 0; for (let A = 0; A < x; A++)M += _[A]; e.update(M, n, 1) } function m(g, _, x, S) { if (x === 0) return; const M = t.get("WEBGL_multi_draw"); if (M === null) for (let A = 0; A < g.length; A++)f(g[A], _[A], S[A]); else { M.multiDrawArraysInstancedWEBGL(n, g, 0, _, 0, S, 0, x); let A = 0; for (let C = 0; C < x; C++)A += _[C] * S[C]; e.update(A, n, 1) } } this.setMode = a, this.render = o, this.renderInstances = f, this.renderMultiDraw = h, this.renderMultiDrawInstances = m } function mU(r, t, e, n) { let a; function o() { if (a !== void 0) return a; if (t.has("EXT_texture_filter_anisotropic") === !0) { const G = t.get("EXT_texture_filter_anisotropic"); a = r.getParameter(G.MAX_TEXTURE_MAX_ANISOTROPY_EXT) } else a = 0; return a } function f(G) { return !(G !== Ta && n.convert(G) !== r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT)) } function h(G) { const q = G === zh && (t.has("EXT_color_buffer_half_float") || t.has("EXT_color_buffer_float")); return !(G !== zr && n.convert(G) !== r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE) && G !== us && !q) } function m(G) { if (G === "highp") { if (r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.HIGH_FLOAT).precision > 0 && r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.HIGH_FLOAT).precision > 0) return "highp"; G = "mediump" } return G === "mediump" && r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.MEDIUM_FLOAT).precision > 0 && r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp" } let g = e.precision !== void 0 ? e.precision : "highp"; const _ = m(g); _ !== g && (console.warn("THREE.WebGLRenderer:", g, "not supported, using", _, "instead."), g = _); const x = e.logarithmicDepthBuffer === !0, S = e.reverseDepthBuffer === !0 && t.has("EXT_clip_control"), M = r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS), A = r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS), C = r.getParameter(r.MAX_TEXTURE_SIZE), R = r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE), T = r.getParameter(r.MAX_VERTEX_ATTRIBS), D = r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS), N = r.getParameter(r.MAX_VARYING_VECTORS), U = r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS), V = A > 0, I = r.getParameter(r.MAX_SAMPLES); return { isWebGL2: !0, getMaxAnisotropy: o, getMaxPrecision: m, textureFormatReadable: f, textureTypeReadable: h, precision: g, logarithmicDepthBuffer: x, reverseDepthBuffer: S, maxTextures: M, maxVertexTextures: A, maxTextureSize: C, maxCubemapSize: R, maxAttributes: T, maxVertexUniforms: D, maxVaryings: N, maxFragmentUniforms: U, vertexTextures: V, maxSamples: I } } function gU(r) { const t = this; let e = null, n = 0, a = !1, o = !1; const f = new vu, h = new Ge, m = { value: null, needsUpdate: !1 }; this.uniform = m, this.numPlanes = 0, this.numIntersection = 0, this.init = function (x, S) { const M = x.length !== 0 || S || n !== 0 || a; return a = S, n = x.length, M }, this.beginShadows = function () { o = !0, _(null) }, this.endShadows = function () { o = !1 }, this.setGlobalState = function (x, S) { e = _(x, S, 0) }, this.setState = function (x, S, M) { const A = x.clippingPlanes, C = x.clipIntersection, R = x.clipShadows, T = r.get(x); if (!a || A === null || A.length === 0 || o && !R) o ? _(null) : g(); else { const D = o ? 0 : n, N = D * 4; let U = T.clippingState || null; m.value = U, U = _(A, S, N, M); for (let V = 0; V !== N; ++V)U[V] = e[V]; T.clippingState = U, this.numIntersection = C ? this.numPlanes : 0, this.numPlanes += D } }; function g() { m.value !== e && (m.value = e, m.needsUpdate = n > 0), t.numPlanes = n, t.numIntersection = 0 } function _(x, S, M, A) { const C = x !== null ? x.length : 0; let R = null; if (C !== 0) { if (R = m.value, A !== !0 || R === null) { const T = M + C * 4, D = S.matrixWorldInverse; h.getNormalMatrix(D), (R === null || R.length < T) && (R = new Float32Array(T)); for (let N = 0, U = M; N !== C; ++N, U += 4)f.copy(x[N]).applyMatrix4(D, h), f.normal.toArray(R, U), R[U + 3] = f.constant } m.value = R, m.needsUpdate = !0 } return t.numPlanes = C, t.numIntersection = 0, R } } function vU(r) { let t = new WeakMap; function e(f, h) { return h === Rp ? f.mapping = xo : h === wp && (f.mapping = Mu), f } function n(f) { if (f && f.isTexture) { const h = f.mapping; if (h === Rp || h === wp) if (t.has(f)) { const m = t.get(f).texture; return e(m, f.mapping) } else { const m = f.image; if (m && m.height > 0) { const g = new uE(m.height); return g.fromEquirectangularTexture(r, f), t.set(f, g), f.addEventListener("dispose", a), e(g.texture, f.mapping) } else return null } } return f } function a(f) { const h = f.target; h.removeEventListener("dispose", a); const m = t.get(h); m !== void 0 && (t.delete(h), m.dispose()) } function o() { t = new WeakMap } return { get: n, dispose: o } } const bh = 4, sM = [.125, .215, .35, .446, .526, .582], zc = 20, b_ = new am, rM = new ce; let E_ = null, T_ = 0, A_ = 0, R_ = !1; const Lc = (1 + Math.sqrt(5)) / 2, mh = 1 / Lc, lM = [new k(-Lc, mh, 0), new k(Lc, mh, 0), new k(-mh, 0, Lc), new k(mh, 0, Lc), new k(0, Lc, -mh), new k(0, Lc, mh), new k(-1, 1, -1), new k(1, 1, -1), new k(-1, 1, 1), new k(1, 1, 1)], yU = new k; class ox { constructor(t) { this._renderer = t, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial) } fromScene(t, e = 0, n = .1, a = 100, o = {}) { const { size: f = 256, position: h = yU } = o; E_ = this._renderer.getRenderTarget(), T_ = this._renderer.getActiveCubeFace(), A_ = this._renderer.getActiveMipmapLevel(), R_ = this._renderer.xr.enabled, this._renderer.xr.enabled = !1, this._setSize(f); const m = this._allocateTargets(); return m.depthBuffer = !0, this._sceneToCubeUV(t, n, a, m, h), e > 0 && this._blur(m, 0, 0, e), this._applyPMREM(m), this._cleanup(m), m } fromEquirectangular(t, e = null) { return this._fromTexture(t, e) } fromCubemap(t, e = null) { return this._fromTexture(t, e) } compileCubemapShader() { this._cubemapMaterial === null && (this._cubemapMaterial = cM(), this._compileMaterial(this._cubemapMaterial)) } compileEquirectangularShader() { this._equirectMaterial === null && (this._equirectMaterial = uM(), this._compileMaterial(this._equirectMaterial)) } dispose() { this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose() } _setSize(t) { this._lodMax = Math.floor(Math.log2(t)), this._cubeSize = Math.pow(2, this._lodMax) } _dispose() { this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose(); for (let t = 0; t < this._lodPlanes.length; t++)this._lodPlanes[t].dispose() } _cleanup(t) { this._renderer.setRenderTarget(E_, T_, A_), this._renderer.xr.enabled = R_, t.scissorTest = !1, E0(t, 0, 0, t.width, t.height) } _fromTexture(t, e) { t.mapping === xo || t.mapping === Mu ? this._setSize(t.image.length === 0 ? 16 : t.image[0].width || t.image[0].image.width) : this._setSize(t.image.width / 4), E_ = this._renderer.getRenderTarget(), T_ = this._renderer.getActiveCubeFace(), A_ = this._renderer.getActiveMipmapLevel(), R_ = this._renderer.xr.enabled, this._renderer.xr.enabled = !1; const n = e || this._allocateTargets(); return this._textureToCubeUV(t, n), this._applyPMREM(n), this._cleanup(n), n } _allocateTargets() { const t = 3 * Math.max(this._cubeSize, 112), e = 4 * this._cubeSize, n = { magFilter: Li, minFilter: Li, generateMipmaps: !1, type: zh, format: Ta, colorSpace: bu, depthBuffer: !1 }, a = oM(t, e, n); if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== t || this._pingPongRenderTarget.height !== e) { this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = oM(t, e, n); const { _lodMax: o } = this; ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _U(o)), this._blurMaterial = xU(o, t, e) } return a } _compileMaterial(t) { const e = new wi(this._lodPlanes[0], t); this._renderer.compile(e, b_) } _sceneToCubeUV(t, e, n, a, o) { const m = new Ki(90, 1, e, n), g = [1, -1, 1, 1, 1, 1], _ = [1, 1, 1, -1, -1, -1], x = this._renderer, S = x.autoClear, M = x.toneMapping; x.getClearColor(rM), x.toneMapping = El, x.autoClear = !1; const A = new Au({ name: "PMREM.Background", side: Va, depthWrite: !1, depthTest: !1 }), C = new wi(new Kc, A); let R = !1; const T = t.background; T ? T.isColor && (A.color.copy(T), t.background = null, R = !0) : (A.color.copy(rM), R = !0); for (let D = 0; D < 6; D++) { const N = D % 3; N === 0 ? (m.up.set(0, g[D], 0), m.position.set(o.x, o.y, o.z), m.lookAt(o.x + _[D], o.y, o.z)) : N === 1 ? (m.up.set(0, 0, g[D]), m.position.set(o.x, o.y, o.z), m.lookAt(o.x, o.y + _[D], o.z)) : (m.up.set(0, g[D], 0), m.position.set(o.x, o.y, o.z), m.lookAt(o.x, o.y, o.z + _[D])); const U = this._cubeSize; E0(a, N * U, D > 2 ? U : 0, U, U), x.setRenderTarget(a), R && x.render(C, m), x.render(t, m) } C.geometry.dispose(), C.material.dispose(), x.toneMapping = M, x.autoClear = S, t.background = T } _textureToCubeUV(t, e) { const n = this._renderer, a = t.mapping === xo || t.mapping === Mu; a ? (this._cubemapMaterial === null && (this._cubemapMaterial = cM()), this._cubemapMaterial.uniforms.flipEnvMap.value = t.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = uM()); const o = a ? this._cubemapMaterial : this._equirectMaterial, f = new wi(this._lodPlanes[0], o), h = o.uniforms; h.envMap.value = t; const m = this._cubeSize; E0(e, 0, 0, 3 * m, 2 * m), n.setRenderTarget(e), n.render(f, b_) } _applyPMREM(t) { const e = this._renderer, n = e.autoClear; e.autoClear = !1; const a = this._lodPlanes.length; for (let o = 1; o < a; o++) { const f = Math.sqrt(this._sigmas[o] * this._sigmas[o] - this._sigmas[o - 1] * this._sigmas[o - 1]), h = lM[(a - o - 1) % lM.length]; this._blur(t, o - 1, o, f, h) } e.autoClear = n } _blur(t, e, n, a, o) { const f = this._pingPongRenderTarget; this._halfBlur(t, f, e, n, a, "latitudinal", o), this._halfBlur(f, t, n, n, a, "longitudinal", o) } _halfBlur(t, e, n, a, o, f, h) { const m = this._renderer, g = this._blurMaterial; f !== "latitudinal" && f !== "longitudinal" && console.error("blur direction must be either latitudinal or longitudinal!"); const _ = 3, x = new wi(this._lodPlanes[a], g), S = g.uniforms, M = this._sizeLods[n] - 1, A = isFinite(o) ? Math.PI / (2 * M) : 2 * Math.PI / (2 * zc - 1), C = o / A, R = isFinite(o) ? 1 + Math.floor(_ * C) : zc; R > zc && console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${R} samples when the maximum is set to ${zc}`); const T = []; let D = 0; for (let G = 0; G < zc; ++G) { const q = G / C, z = Math.exp(-q * q / 2); T.push(z), G === 0 ? D += z : G < R && (D += 2 * z) } for (let G = 0; G < T.length; G++)T[G] = T[G] / D; S.envMap.value = t.texture, S.samples.value = R, S.weights.value = T, S.latitudinal.value = f === "latitudinal", h && (S.poleAxis.value = h); const { _lodMax: N } = this; S.dTheta.value = A, S.mipInt.value = N - n; const U = this._sizeLods[a], V = 3 * U * (a > N - bh ? a - N + bh : 0), I = 4 * (this._cubeSize - U); E0(e, V, I, 3 * U, 2 * U), m.setRenderTarget(e), m.render(x, b_) } } function _U(r) { const t = [], e = [], n = []; let a = r; const o = r - bh + 1 + sM.length; for (let f = 0; f < o; f++) { const h = Math.pow(2, a); e.push(h); let m = 1 / h; f > r - bh ? m = sM[f - r + bh - 1] : f === 0 && (m = 0), n.push(m); const g = 1 / (h - 2), _ = -g, x = 1 + g, S = [_, _, x, _, x, x, _, _, x, x, _, x], M = 6, A = 6, C = 3, R = 2, T = 1, D = new Float32Array(C * A * M), N = new Float32Array(R * A * M), U = new Float32Array(T * A * M); for (let I = 0; I < M; I++) { const G = I % 3 * 2 / 3 - 1, q = I > 2 ? 0 : -1, z = [G, q, 0, G + 2 / 3, q, 0, G + 2 / 3, q + 1, 0, G, q, 0, G + 2 / 3, q + 1, 0, G, q + 1, 0]; D.set(z, C * A * I), N.set(S, R * A * I); const L = [I, I, I, I, I, I]; U.set(L, T * A * I) } const V = new Qe; V.setAttribute("position", new Pn(D, C)), V.setAttribute("uv", new Pn(N, R)), V.setAttribute("faceIndex", new Pn(U, T)), t.push(V), a > bh && a-- } return { lodPlanes: t, sizeLods: e, sigmas: n } } function oM(r, t, e) { const n = new Rl(r, t, e); return n.texture.mapping = Lh, n.texture.name = "PMREM.cubeUv", n.scissorTest = !0, n } function E0(r, t, e, n, a) { r.viewport.set(t, e, n, a), r.scissor.set(t, e, n, a) } function xU(r, t, e) {
	const n = new Float32Array(zc), a = new k(0, 1, 0); return new Br({
		name: "SphericalGaussianBlur", defines: { n: zc, CUBEUV_TEXEL_WIDTH: 1 / t, CUBEUV_TEXEL_HEIGHT: 1 / e, CUBEUV_MAX_MIP: `${r}.0` }, uniforms: { envMap: { value: null }, samples: { value: 1 }, weights: { value: n }, latitudinal: { value: !1 }, dTheta: { value: 0 }, mipInt: { value: 0 }, poleAxis: { value: a } }, vertexShader: iS(), fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`, blending: vo, depthTest: !1, depthWrite: !1
	})
} function uM() {
	return new Br({
		name: "EquirectangularToCubeUV", uniforms: { envMap: { value: null } }, vertexShader: iS(), fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`, blending: vo, depthTest: !1, depthWrite: !1
	})
} function cM() {
	return new Br({
		name: "CubemapToCubeUV", uniforms: { envMap: { value: null }, flipEnvMap: { value: -1 } }, vertexShader: iS(), fragmentShader: `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`, blending: vo, depthTest: !1, depthWrite: !1
	})
} function iS() {
	return `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`} function SU(r) { let t = new WeakMap, e = null; function n(h) { if (h && h.isTexture) { const m = h.mapping, g = m === Rp || m === wp, _ = m === xo || m === Mu; if (g || _) { let x = t.get(h); const S = x !== void 0 ? x.texture.pmremVersion : 0; if (h.isRenderTargetTexture && h.pmremVersion !== S) return e === null && (e = new ox(r)), x = g ? e.fromEquirectangular(h, x) : e.fromCubemap(h, x), x.texture.pmremVersion = h.pmremVersion, t.set(h, x), x.texture; if (x !== void 0) return x.texture; { const M = h.image; return g && M && M.height > 0 || _ && M && a(M) ? (e === null && (e = new ox(r)), x = g ? e.fromEquirectangular(h) : e.fromCubemap(h), x.texture.pmremVersion = h.pmremVersion, t.set(h, x), h.addEventListener("dispose", o), x.texture) : null } } } return h } function a(h) { let m = 0; const g = 6; for (let _ = 0; _ < g; _++)h[_] !== void 0 && m++; return m === g } function o(h) { const m = h.target; m.removeEventListener("dispose", o); const g = t.get(m); g !== void 0 && (t.delete(m), g.dispose()) } function f() { t = new WeakMap, e !== null && (e.dispose(), e = null) } return { get: n, dispose: f } } function MU(r) { const t = {}; function e(n) { if (t[n] !== void 0) return t[n]; let a; switch (n) { case "WEBGL_depth_texture": a = r.getExtension("WEBGL_depth_texture") || r.getExtension("MOZ_WEBGL_depth_texture") || r.getExtension("WEBKIT_WEBGL_depth_texture"); break; case "EXT_texture_filter_anisotropic": a = r.getExtension("EXT_texture_filter_anisotropic") || r.getExtension("MOZ_EXT_texture_filter_anisotropic") || r.getExtension("WEBKIT_EXT_texture_filter_anisotropic"); break; case "WEBGL_compressed_texture_s3tc": a = r.getExtension("WEBGL_compressed_texture_s3tc") || r.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc"); break; case "WEBGL_compressed_texture_pvrtc": a = r.getExtension("WEBGL_compressed_texture_pvrtc") || r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"); break; default: a = r.getExtension(n) }return t[n] = a, a } return { has: function (n) { return e(n) !== null }, init: function () { e("EXT_color_buffer_float"), e("WEBGL_clip_cull_distance"), e("OES_texture_float_linear"), e("EXT_color_buffer_half_float"), e("WEBGL_multisampled_render_to_texture"), e("WEBGL_render_shared_exponent") }, get: function (n) { const a = e(n); return a === null && Oc("THREE.WebGLRenderer: " + n + " extension not supported."), a } } } function bU(r, t, e, n) { const a = {}, o = new WeakMap; function f(x) { const S = x.target; S.index !== null && t.remove(S.index); for (const A in S.attributes) t.remove(S.attributes[A]); S.removeEventListener("dispose", f), delete a[S.id]; const M = o.get(S); M && (t.remove(M), o.delete(S)), n.releaseStatesOfGeometry(S), S.isInstancedBufferGeometry === !0 && delete S._maxInstanceCount, e.memory.geometries-- } function h(x, S) { return a[S.id] === !0 || (S.addEventListener("dispose", f), a[S.id] = !0, e.memory.geometries++), S } function m(x) { const S = x.attributes; for (const M in S) t.update(S[M], r.ARRAY_BUFFER) } function g(x) { const S = [], M = x.index, A = x.attributes.position; let C = 0; if (M !== null) { const D = M.array; C = M.version; for (let N = 0, U = D.length; N < U; N += 3) { const V = D[N + 0], I = D[N + 1], G = D[N + 2]; S.push(V, I, I, G, G, V) } } else if (A !== void 0) { const D = A.array; C = A.version; for (let N = 0, U = D.length / 3 - 1; N < U; N += 3) { const V = N + 0, I = N + 1, G = N + 2; S.push(V, I, I, G, G, V) } } else return; const R = new (nE(S) ? Nx : Ux)(S, 1); R.version = C; const T = o.get(x); T && t.remove(T), o.set(x, R) } function _(x) { const S = o.get(x); if (S) { const M = x.index; M !== null && S.version < M.version && g(x) } else g(x); return o.get(x) } return { get: h, update: m, getWireframeAttribute: _ } } function EU(r, t, e) { let n; function a(S) { n = S } let o, f; function h(S) { o = S.type, f = S.bytesPerElement } function m(S, M) { r.drawElements(n, M, o, S * f), e.update(M, n, 1) } function g(S, M, A) { A !== 0 && (r.drawElementsInstanced(n, M, o, S * f, A), e.update(M, n, A)) } function _(S, M, A) { if (A === 0) return; t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n, M, 0, o, S, 0, A); let R = 0; for (let T = 0; T < A; T++)R += M[T]; e.update(R, n, 1) } function x(S, M, A, C) { if (A === 0) return; const R = t.get("WEBGL_multi_draw"); if (R === null) for (let T = 0; T < S.length; T++)g(S[T] / f, M[T], C[T]); else { R.multiDrawElementsInstancedWEBGL(n, M, 0, o, S, 0, C, 0, A); let T = 0; for (let D = 0; D < A; D++)T += M[D] * C[D]; e.update(T, n, 1) } } this.setMode = a, this.setIndex = h, this.render = m, this.renderInstances = g, this.renderMultiDraw = _, this.renderMultiDrawInstances = x } function TU(r) { const t = { geometries: 0, textures: 0 }, e = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 }; function n(o, f, h) { switch (e.calls++, f) { case r.TRIANGLES: e.triangles += h * (o / 3); break; case r.LINES: e.lines += h * (o / 2); break; case r.LINE_STRIP: e.lines += h * (o - 1); break; case r.LINE_LOOP: e.lines += h * o; break; case r.POINTS: e.points += h * o; break; default: console.error("THREE.WebGLInfo: Unknown draw mode:", f); break } } function a() { e.calls = 0, e.triangles = 0, e.points = 0, e.lines = 0 } return { memory: t, render: e, programs: null, autoReset: !0, reset: a, update: n } } function AU(r, t, e) { const n = new WeakMap, a = new yn; function o(f, h, m) { const g = f.morphTargetInfluences, _ = h.morphAttributes.position || h.morphAttributes.normal || h.morphAttributes.color, x = _ !== void 0 ? _.length : 0; let S = n.get(h); if (S === void 0 || S.count !== x) { let L = function () { q.dispose(), n.delete(h), h.removeEventListener("dispose", L) }; var M = L; S !== void 0 && S.texture.dispose(); const A = h.morphAttributes.position !== void 0, C = h.morphAttributes.normal !== void 0, R = h.morphAttributes.color !== void 0, T = h.morphAttributes.position || [], D = h.morphAttributes.normal || [], N = h.morphAttributes.color || []; let U = 0; A === !0 && (U = 1), C === !0 && (U = 2), R === !0 && (U = 3); let V = h.attributes.position.count * U, I = 1; V > t.maxTextureSize && (I = Math.ceil(V / t.maxTextureSize), V = t.maxTextureSize); const G = new Float32Array(V * I * 4 * x), q = new Qp(G, V, I, x); q.type = us, q.needsUpdate = !0; const z = U * 4; for (let j = 0; j < x; j++) { const dt = T[j], tt = D[j], ct = N[j], xt = V * I * 4 * j; for (let K = 0; K < dt.count; K++) { const ft = K * z; A === !0 && (a.fromBufferAttribute(dt, K), G[xt + ft + 0] = a.x, G[xt + ft + 1] = a.y, G[xt + ft + 2] = a.z, G[xt + ft + 3] = 0), C === !0 && (a.fromBufferAttribute(tt, K), G[xt + ft + 4] = a.x, G[xt + ft + 5] = a.y, G[xt + ft + 6] = a.z, G[xt + ft + 7] = 0), R === !0 && (a.fromBufferAttribute(ct, K), G[xt + ft + 8] = a.x, G[xt + ft + 9] = a.y, G[xt + ft + 10] = a.z, G[xt + ft + 11] = ct.itemSize === 4 ? a.w : 1) } } S = { count: x, texture: q, size: new zt(V, I) }, n.set(h, S), h.addEventListener("dispose", L) } if (f.isInstancedMesh === !0 && f.morphTexture !== null) m.getUniforms().setValue(r, "morphTexture", f.morphTexture, e); else { let A = 0; for (let R = 0; R < g.length; R++)A += g[R]; const C = h.morphTargetsRelative ? 1 : 1 - A; m.getUniforms().setValue(r, "morphTargetBaseInfluence", C), m.getUniforms().setValue(r, "morphTargetInfluences", g) } m.getUniforms().setValue(r, "morphTargetsTexture", S.texture, e), m.getUniforms().setValue(r, "morphTargetsTextureSize", S.size) } return { update: o } } function RU(r, t, e, n) { let a = new WeakMap; function o(m) { const g = n.render.frame, _ = m.geometry, x = t.get(m, _); if (a.get(x) !== g && (t.update(x), a.set(x, g)), m.isInstancedMesh && (m.hasEventListener("dispose", h) === !1 && m.addEventListener("dispose", h), a.get(m) !== g && (e.update(m.instanceMatrix, r.ARRAY_BUFFER), m.instanceColor !== null && e.update(m.instanceColor, r.ARRAY_BUFFER), a.set(m, g))), m.isSkinnedMesh) { const S = m.skeleton; a.get(S) !== g && (S.update(), a.set(S, g)) } return x } function f() { a = new WeakMap } function h(m) { const g = m.target; g.removeEventListener("dispose", h), e.remove(g.instanceMatrix), g.instanceColor !== null && e.remove(g.instanceColor) } return { update: o, dispose: f } } const lT = new yi, fM = new Bx(1, 1), oT = new Qp, uT = new Lv, cT = new Kp, hM = [], dM = [], pM = new Float32Array(16), mM = new Float32Array(9), gM = new Float32Array(4); function Hh(r, t, e) { const n = r[0]; if (n <= 0 || n > 0) return r; const a = t * e; let o = hM[a]; if (o === void 0 && (o = new Float32Array(a), hM[a] = o), t !== 0) { n.toArray(o, 0); for (let f = 1, h = 0; f !== t; ++f)h += e, r[f].toArray(o, h) } return o } function zi(r, t) { if (r.length !== t.length) return !1; for (let e = 0, n = r.length; e < n; e++)if (r[e] !== t[e]) return !1; return !0 } function Bi(r, t) { for (let e = 0, n = t.length; e < n; e++)r[e] = t[e] } function iy(r, t) { let e = dM[t]; e === void 0 && (e = new Int32Array(t), dM[t] = e); for (let n = 0; n !== t; ++n)e[n] = r.allocateTextureUnit(); return e } function wU(r, t) { const e = this.cache; e[0] !== t && (r.uniform1f(this.addr, t), e[0] = t) } function CU(r, t) { const e = this.cache; if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y) && (r.uniform2f(this.addr, t.x, t.y), e[0] = t.x, e[1] = t.y); else { if (zi(e, t)) return; r.uniform2fv(this.addr, t), Bi(e, t) } } function DU(r, t) { const e = this.cache; if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z) && (r.uniform3f(this.addr, t.x, t.y, t.z), e[0] = t.x, e[1] = t.y, e[2] = t.z); else if (t.r !== void 0) (e[0] !== t.r || e[1] !== t.g || e[2] !== t.b) && (r.uniform3f(this.addr, t.r, t.g, t.b), e[0] = t.r, e[1] = t.g, e[2] = t.b); else { if (zi(e, t)) return; r.uniform3fv(this.addr, t), Bi(e, t) } } function UU(r, t) { const e = this.cache; if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z || e[3] !== t.w) && (r.uniform4f(this.addr, t.x, t.y, t.z, t.w), e[0] = t.x, e[1] = t.y, e[2] = t.z, e[3] = t.w); else { if (zi(e, t)) return; r.uniform4fv(this.addr, t), Bi(e, t) } } function NU(r, t) { const e = this.cache, n = t.elements; if (n === void 0) { if (zi(e, t)) return; r.uniformMatrix2fv(this.addr, !1, t), Bi(e, t) } else { if (zi(e, n)) return; gM.set(n), r.uniformMatrix2fv(this.addr, !1, gM), Bi(e, n) } } function OU(r, t) { const e = this.cache, n = t.elements; if (n === void 0) { if (zi(e, t)) return; r.uniformMatrix3fv(this.addr, !1, t), Bi(e, t) } else { if (zi(e, n)) return; mM.set(n), r.uniformMatrix3fv(this.addr, !1, mM), Bi(e, n) } } function LU(r, t) { const e = this.cache, n = t.elements; if (n === void 0) { if (zi(e, t)) return; r.uniformMatrix4fv(this.addr, !1, t), Bi(e, t) } else { if (zi(e, n)) return; pM.set(n), r.uniformMatrix4fv(this.addr, !1, pM), Bi(e, n) } } function zU(r, t) { const e = this.cache; e[0] !== t && (r.uniform1i(this.addr, t), e[0] = t) } function BU(r, t) { const e = this.cache; if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y) && (r.uniform2i(this.addr, t.x, t.y), e[0] = t.x, e[1] = t.y); else { if (zi(e, t)) return; r.uniform2iv(this.addr, t), Bi(e, t) } } function PU(r, t) { const e = this.cache; if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z) && (r.uniform3i(this.addr, t.x, t.y, t.z), e[0] = t.x, e[1] = t.y, e[2] = t.z); else { if (zi(e, t)) return; r.uniform3iv(this.addr, t), Bi(e, t) } } function IU(r, t) { const e = this.cache; if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z || e[3] !== t.w) && (r.uniform4i(this.addr, t.x, t.y, t.z, t.w), e[0] = t.x, e[1] = t.y, e[2] = t.z, e[3] = t.w); else { if (zi(e, t)) return; r.uniform4iv(this.addr, t), Bi(e, t) } } function HU(r, t) { const e = this.cache; e[0] !== t && (r.uniform1ui(this.addr, t), e[0] = t) } function FU(r, t) { const e = this.cache; if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y) && (r.uniform2ui(this.addr, t.x, t.y), e[0] = t.x, e[1] = t.y); else { if (zi(e, t)) return; r.uniform2uiv(this.addr, t), Bi(e, t) } } function VU(r, t) { const e = this.cache; if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z) && (r.uniform3ui(this.addr, t.x, t.y, t.z), e[0] = t.x, e[1] = t.y, e[2] = t.z); else { if (zi(e, t)) return; r.uniform3uiv(this.addr, t), Bi(e, t) } } function GU(r, t) { const e = this.cache; if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z || e[3] !== t.w) && (r.uniform4ui(this.addr, t.x, t.y, t.z, t.w), e[0] = t.x, e[1] = t.y, e[2] = t.z, e[3] = t.w); else { if (zi(e, t)) return; r.uniform4uiv(this.addr, t), Bi(e, t) } } function XU(r, t, e) { const n = this.cache, a = e.allocateTextureUnit(); n[0] !== a && (r.uniform1i(this.addr, a), n[0] = a); let o; this.type === r.SAMPLER_2D_SHADOW ? (fM.compareFunction = Cx, o = fM) : o = lT, e.setTexture2D(t || o, a) } function qU(r, t, e) { const n = this.cache, a = e.allocateTextureUnit(); n[0] !== a && (r.uniform1i(this.addr, a), n[0] = a), e.setTexture3D(t || uT, a) } function YU(r, t, e) { const n = this.cache, a = e.allocateTextureUnit(); n[0] !== a && (r.uniform1i(this.addr, a), n[0] = a), e.setTextureCube(t || cT, a) } function WU(r, t, e) { const n = this.cache, a = e.allocateTextureUnit(); n[0] !== a && (r.uniform1i(this.addr, a), n[0] = a), e.setTexture2DArray(t || oT, a) } function kU(r) { switch (r) { case 5126: return wU; case 35664: return CU; case 35665: return DU; case 35666: return UU; case 35674: return NU; case 35675: return OU; case 35676: return LU; case 5124: case 35670: return zU; case 35667: case 35671: return BU; case 35668: case 35672: return PU; case 35669: case 35673: return IU; case 5125: return HU; case 36294: return FU; case 36295: return VU; case 36296: return GU; case 35678: case 36198: case 36298: case 36306: case 35682: return XU; case 35679: case 36299: case 36307: return qU; case 35680: case 36300: case 36308: case 36293: return YU; case 36289: case 36303: case 36311: case 36292: return WU } } function jU(r, t) { r.uniform1fv(this.addr, t) } function ZU(r, t) { const e = Hh(t, this.size, 2); r.uniform2fv(this.addr, e) } function QU(r, t) { const e = Hh(t, this.size, 3); r.uniform3fv(this.addr, e) } function KU(r, t) { const e = Hh(t, this.size, 4); r.uniform4fv(this.addr, e) } function JU(r, t) { const e = Hh(t, this.size, 4); r.uniformMatrix2fv(this.addr, !1, e) } function $U(r, t) { const e = Hh(t, this.size, 9); r.uniformMatrix3fv(this.addr, !1, e) } function tN(r, t) { const e = Hh(t, this.size, 16); r.uniformMatrix4fv(this.addr, !1, e) } function eN(r, t) { r.uniform1iv(this.addr, t) } function nN(r, t) { r.uniform2iv(this.addr, t) } function iN(r, t) { r.uniform3iv(this.addr, t) } function aN(r, t) { r.uniform4iv(this.addr, t) } function sN(r, t) { r.uniform1uiv(this.addr, t) } function rN(r, t) { r.uniform2uiv(this.addr, t) } function lN(r, t) { r.uniform3uiv(this.addr, t) } function oN(r, t) { r.uniform4uiv(this.addr, t) } function uN(r, t, e) { const n = this.cache, a = t.length, o = iy(e, a); zi(n, o) || (r.uniform1iv(this.addr, o), Bi(n, o)); for (let f = 0; f !== a; ++f)e.setTexture2D(t[f] || lT, o[f]) } function cN(r, t, e) { const n = this.cache, a = t.length, o = iy(e, a); zi(n, o) || (r.uniform1iv(this.addr, o), Bi(n, o)); for (let f = 0; f !== a; ++f)e.setTexture3D(t[f] || uT, o[f]) } function fN(r, t, e) { const n = this.cache, a = t.length, o = iy(e, a); zi(n, o) || (r.uniform1iv(this.addr, o), Bi(n, o)); for (let f = 0; f !== a; ++f)e.setTextureCube(t[f] || cT, o[f]) } function hN(r, t, e) { const n = this.cache, a = t.length, o = iy(e, a); zi(n, o) || (r.uniform1iv(this.addr, o), Bi(n, o)); for (let f = 0; f !== a; ++f)e.setTexture2DArray(t[f] || oT, o[f]) } function dN(r) { switch (r) { case 5126: return jU; case 35664: return ZU; case 35665: return QU; case 35666: return KU; case 35674: return JU; case 35675: return $U; case 35676: return tN; case 5124: case 35670: return eN; case 35667: case 35671: return nN; case 35668: case 35672: return iN; case 35669: case 35673: return aN; case 5125: return sN; case 36294: return rN; case 36295: return lN; case 36296: return oN; case 35678: case 36198: case 36298: case 36306: case 35682: return uN; case 35679: case 36299: case 36307: return cN; case 35680: case 36300: case 36308: case 36293: return fN; case 36289: case 36303: case 36311: case 36292: return hN } } class pN { constructor(t, e, n) { this.id = t, this.addr = n, this.cache = [], this.type = e.type, this.setValue = kU(e.type) } } class mN { constructor(t, e, n) { this.id = t, this.addr = n, this.cache = [], this.type = e.type, this.size = e.size, this.setValue = dN(e.type) } } class gN { constructor(t) { this.id = t, this.seq = [], this.map = {} } setValue(t, e, n) { const a = this.seq; for (let o = 0, f = a.length; o !== f; ++o) { const h = a[o]; h.setValue(t, e[h.id], n) } } } const w_ = /(\w+)(\])?(\[|\.)?/g; function vM(r, t) { r.seq.push(t), r.map[t.id] = t } function vN(r, t, e) { const n = r.name, a = n.length; for (w_.lastIndex = 0; ;) { const o = w_.exec(n), f = w_.lastIndex; let h = o[1]; const m = o[2] === "]", g = o[3]; if (m && (h = h | 0), g === void 0 || g === "[" && f + 2 === a) { vM(e, g === void 0 ? new pN(h, r, t) : new mN(h, r, t)); break } else { let x = e.map[h]; x === void 0 && (x = new gN(h), vM(e, x)), e = x } } } class D0 { constructor(t, e) { this.seq = [], this.map = {}; const n = t.getProgramParameter(e, t.ACTIVE_UNIFORMS); for (let a = 0; a < n; ++a) { const o = t.getActiveUniform(e, a), f = t.getUniformLocation(e, o.name); vN(o, f, this) } } setValue(t, e, n, a) { const o = this.map[e]; o !== void 0 && o.setValue(t, n, a) } setOptional(t, e, n) { const a = e[n]; a !== void 0 && this.setValue(t, n, a) } static upload(t, e, n, a) { for (let o = 0, f = e.length; o !== f; ++o) { const h = e[o], m = n[h.id]; m.needsUpdate !== !1 && h.setValue(t, m.value, a) } } static seqWithValue(t, e) { const n = []; for (let a = 0, o = t.length; a !== o; ++a) { const f = t[a]; f.id in e && n.push(f) } return n } } function yM(r, t, e) { const n = r.createShader(t); return r.shaderSource(n, e), r.compileShader(n), n } const yN = 37297; let _N = 0; function xN(r, t) {
	const e = r.split(`
`), n = [], a = Math.max(t - 6, 0), o = Math.min(t + 6, e.length); for (let f = a; f < o; f++) { const h = f + 1; n.push(`${h === t ? ">" : " "} ${h}: ${e[f]}`) } return n.join(`
`)
} const _M = new Ge; function SN(r) { dn._getMatrix(_M, dn.workingColorSpace, r); const t = `mat3( ${_M.elements.map(e => e.toFixed(4))} )`; switch (dn.getTransfer(r)) { case Op: return [t, "LinearTransferOETF"]; case Nn: return [t, "sRGBTransferOETF"]; default: return console.warn("THREE.WebGLProgram: Unsupported color space: ", r), [t, "LinearTransferOETF"] } } function xM(r, t, e) {
	const n = r.getShaderParameter(t, r.COMPILE_STATUS), a = r.getShaderInfoLog(t).trim(); if (n && a === "") return ""; const o = /ERROR: 0:(\d+)/.exec(a); if (o) {
		const f = parseInt(o[1]); return e.toUpperCase() + `

`+ a + `

`+ xN(r.getShaderSource(t), f)
	} else return a
} function MN(r, t) {
	const e = SN(t); return [`vec4 ${r}( vec4 value ) {`, `	return ${e[1]}( vec4( value.rgb * ${e[0]}, value.a ) );`, "}"].join(`
`)
} function bN(r, t) { let e; switch (t) { case Bb: e = "Linear"; break; case Pb: e = "Reinhard"; break; case Ib: e = "Cineon"; break; case vx: e = "ACESFilmic"; break; case Fb: e = "AgX"; break; case Vb: e = "Neutral"; break; case Hb: e = "Custom"; break; default: console.warn("THREE.WebGLProgram: Unsupported toneMapping:", t), e = "Linear" }return "vec3 " + r + "( vec3 color ) { return " + e + "ToneMapping( color ); }" } const T0 = new k; function EN() {
	dn.getLuminanceCoefficients(T0); const r = T0.x.toFixed(4), t = T0.y.toFixed(4), e = T0.z.toFixed(4); return ["float luminance( const in vec3 rgb ) {", `	const vec3 weights = vec3( ${r}, ${t}, ${e} );`, "	return dot( weights, rgb );", "}"].join(`
`)
} function TN(r) {
	return [r.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "", r.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""].filter(pp).join(`
`)
} function AN(r) {
	const t = []; for (const e in r) { const n = r[e]; n !== !1 && t.push("#define " + e + " " + n) } return t.join(`
`)
} function RN(r, t) { const e = {}, n = r.getProgramParameter(t, r.ACTIVE_ATTRIBUTES); for (let a = 0; a < n; a++) { const o = r.getActiveAttrib(t, a), f = o.name; let h = 1; o.type === r.FLOAT_MAT2 && (h = 2), o.type === r.FLOAT_MAT3 && (h = 3), o.type === r.FLOAT_MAT4 && (h = 4), e[f] = { type: o.type, location: r.getAttribLocation(t, f), locationSize: h } } return e } function pp(r) { return r !== "" } function SM(r, t) { const e = t.numSpotLightShadows + t.numSpotLightMaps - t.numSpotLightShadowsWithMaps; return r.replace(/NUM_DIR_LIGHTS/g, t.numDirLights).replace(/NUM_SPOT_LIGHTS/g, t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, e).replace(/NUM_RECT_AREA_LIGHTS/g, t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, t.numPointLights).replace(/NUM_HEMI_LIGHTS/g, t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, t.numPointLightShadows) } function MM(r, t) { return r.replace(/NUM_CLIPPING_PLANES/g, t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, t.numClippingPlanes - t.numClipIntersection) } const wN = /^[ \t]*#include +<([\w\d./]+)>/gm; function ux(r) { return r.replace(wN, DN) } const CN = new Map; function DN(r, t) { let e = Ze[t]; if (e === void 0) { const n = CN.get(t); if (n !== void 0) e = Ze[n], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', t, n); else throw new Error("Can not resolve #include <" + t + ">") } return ux(e) } const UN = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g; function bM(r) { return r.replace(UN, NN) } function NN(r, t, e, n) { let a = ""; for (let o = parseInt(t); o < parseInt(e); o++)a += n.replace(/\[\s*i\s*\]/g, "[ " + o + " ]").replace(/UNROLLED_LOOP_INDEX/g, o); return a } function EM(r) {
	let t = `precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`; return r.precision === "highp" ? t += `
#define HIGH_PRECISION`: r.precision === "mediump" ? t += `
#define MEDIUM_PRECISION`: r.precision === "lowp" && (t += `
#define LOW_PRECISION`), t
} function ON(r) { let t = "SHADOWMAP_TYPE_BASIC"; return r.shadowMapType === Ev ? t = "SHADOWMAP_TYPE_PCF" : r.shadowMapType === mp ? t = "SHADOWMAP_TYPE_PCF_SOFT" : r.shadowMapType === Nr && (t = "SHADOWMAP_TYPE_VSM"), t } function LN(r) { let t = "ENVMAP_TYPE_CUBE"; if (r.envMap) switch (r.envMapMode) { case xo: case Mu: t = "ENVMAP_TYPE_CUBE"; break; case Lh: t = "ENVMAP_TYPE_CUBE_UV"; break }return t } function zN(r) { let t = "ENVMAP_MODE_REFLECTION"; if (r.envMap) switch (r.envMapMode) { case Mu: t = "ENVMAP_MODE_REFRACTION"; break }return t } function BN(r) { let t = "ENVMAP_BLENDING_NONE"; if (r.envMap) switch (r.combine) { case jp: t = "ENVMAP_BLENDING_MULTIPLY"; break; case Lb: t = "ENVMAP_BLENDING_MIX"; break; case zb: t = "ENVMAP_BLENDING_ADD"; break }return t } function PN(r) { const t = r.envMapCubeUVHeight; if (t === null) return null; const e = Math.log2(t) - 2, n = 1 / t; return { texelWidth: 1 / (3 * Math.max(Math.pow(2, e), 7 * 16)), texelHeight: n, maxMip: e } } function IN(r, t, e, n) {
	const a = r.getContext(), o = e.defines; let f = e.vertexShader, h = e.fragmentShader; const m = ON(e), g = LN(e), _ = zN(e), x = BN(e), S = PN(e), M = TN(e), A = AN(o), C = a.createProgram(); let R, T, D = e.glslVersion ? "#version " + e.glslVersion + `
`: ""; e.isRawShaderMaterial ? (R = ["#define SHADER_TYPE " + e.shaderType, "#define SHADER_NAME " + e.shaderName, A].filter(pp).join(`
`), R.length > 0 && (R += `
`), T = ["#define SHADER_TYPE " + e.shaderType, "#define SHADER_NAME " + e.shaderName, A].filter(pp).join(`
`), T.length > 0 && (T += `
`)) : (R = [EM(e), "#define SHADER_TYPE " + e.shaderType, "#define SHADER_NAME " + e.shaderName, A, e.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "", e.batching ? "#define USE_BATCHING" : "", e.batchingColor ? "#define USE_BATCHING_COLOR" : "", e.instancing ? "#define USE_INSTANCING" : "", e.instancingColor ? "#define USE_INSTANCING_COLOR" : "", e.instancingMorph ? "#define USE_INSTANCING_MORPH" : "", e.useFog && e.fog ? "#define USE_FOG" : "", e.useFog && e.fogExp2 ? "#define FOG_EXP2" : "", e.map ? "#define USE_MAP" : "", e.envMap ? "#define USE_ENVMAP" : "", e.envMap ? "#define " + _ : "", e.lightMap ? "#define USE_LIGHTMAP" : "", e.aoMap ? "#define USE_AOMAP" : "", e.bumpMap ? "#define USE_BUMPMAP" : "", e.normalMap ? "#define USE_NORMALMAP" : "", e.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "", e.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "", e.displacementMap ? "#define USE_DISPLACEMENTMAP" : "", e.emissiveMap ? "#define USE_EMISSIVEMAP" : "", e.anisotropy ? "#define USE_ANISOTROPY" : "", e.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "", e.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", e.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", e.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", e.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "", e.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "", e.specularMap ? "#define USE_SPECULARMAP" : "", e.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "", e.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "", e.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", e.metalnessMap ? "#define USE_METALNESSMAP" : "", e.alphaMap ? "#define USE_ALPHAMAP" : "", e.alphaHash ? "#define USE_ALPHAHASH" : "", e.transmission ? "#define USE_TRANSMISSION" : "", e.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", e.thicknessMap ? "#define USE_THICKNESSMAP" : "", e.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "", e.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "", e.mapUv ? "#define MAP_UV " + e.mapUv : "", e.alphaMapUv ? "#define ALPHAMAP_UV " + e.alphaMapUv : "", e.lightMapUv ? "#define LIGHTMAP_UV " + e.lightMapUv : "", e.aoMapUv ? "#define AOMAP_UV " + e.aoMapUv : "", e.emissiveMapUv ? "#define EMISSIVEMAP_UV " + e.emissiveMapUv : "", e.bumpMapUv ? "#define BUMPMAP_UV " + e.bumpMapUv : "", e.normalMapUv ? "#define NORMALMAP_UV " + e.normalMapUv : "", e.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + e.displacementMapUv : "", e.metalnessMapUv ? "#define METALNESSMAP_UV " + e.metalnessMapUv : "", e.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + e.roughnessMapUv : "", e.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + e.anisotropyMapUv : "", e.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + e.clearcoatMapUv : "", e.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + e.clearcoatNormalMapUv : "", e.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + e.clearcoatRoughnessMapUv : "", e.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + e.iridescenceMapUv : "", e.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + e.iridescenceThicknessMapUv : "", e.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + e.sheenColorMapUv : "", e.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + e.sheenRoughnessMapUv : "", e.specularMapUv ? "#define SPECULARMAP_UV " + e.specularMapUv : "", e.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + e.specularColorMapUv : "", e.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + e.specularIntensityMapUv : "", e.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + e.transmissionMapUv : "", e.thicknessMapUv ? "#define THICKNESSMAP_UV " + e.thicknessMapUv : "", e.vertexTangents && e.flatShading === !1 ? "#define USE_TANGENT" : "", e.vertexColors ? "#define USE_COLOR" : "", e.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", e.vertexUv1s ? "#define USE_UV1" : "", e.vertexUv2s ? "#define USE_UV2" : "", e.vertexUv3s ? "#define USE_UV3" : "", e.pointsUvs ? "#define USE_POINTS_UV" : "", e.flatShading ? "#define FLAT_SHADED" : "", e.skinning ? "#define USE_SKINNING" : "", e.morphTargets ? "#define USE_MORPHTARGETS" : "", e.morphNormals && e.flatShading === !1 ? "#define USE_MORPHNORMALS" : "", e.morphColors ? "#define USE_MORPHCOLORS" : "", e.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + e.morphTextureStride : "", e.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + e.morphTargetsCount : "", e.doubleSided ? "#define DOUBLE_SIDED" : "", e.flipSided ? "#define FLIP_SIDED" : "", e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", e.shadowMapEnabled ? "#define " + m : "", e.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", e.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "", e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", e.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", "	attribute mat4 instanceMatrix;", "#endif", "#ifdef USE_INSTANCING_COLOR", "	attribute vec3 instanceColor;", "#endif", "#ifdef USE_INSTANCING_MORPH", "	uniform sampler2D morphTexture;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_UV1", "	attribute vec2 uv1;", "#endif", "#ifdef USE_UV2", "	attribute vec2 uv2;", "#endif", "#ifdef USE_UV3", "	attribute vec2 uv3;", "#endif", "#ifdef USE_TANGENT", "	attribute vec4 tangent;", "#endif", "#if defined( USE_COLOR_ALPHA )", "	attribute vec4 color;", "#elif defined( USE_COLOR )", "	attribute vec3 color;", "#endif", "#ifdef USE_SKINNING", "	attribute vec4 skinIndex;", "	attribute vec4 skinWeight;", "#endif", `
`].filter(pp).join(`
`), T = [EM(e), "#define SHADER_TYPE " + e.shaderType, "#define SHADER_NAME " + e.shaderName, A, e.useFog && e.fog ? "#define USE_FOG" : "", e.useFog && e.fogExp2 ? "#define FOG_EXP2" : "", e.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "", e.map ? "#define USE_MAP" : "", e.matcap ? "#define USE_MATCAP" : "", e.envMap ? "#define USE_ENVMAP" : "", e.envMap ? "#define " + g : "", e.envMap ? "#define " + _ : "", e.envMap ? "#define " + x : "", S ? "#define CUBEUV_TEXEL_WIDTH " + S.texelWidth : "", S ? "#define CUBEUV_TEXEL_HEIGHT " + S.texelHeight : "", S ? "#define CUBEUV_MAX_MIP " + S.maxMip + ".0" : "", e.lightMap ? "#define USE_LIGHTMAP" : "", e.aoMap ? "#define USE_AOMAP" : "", e.bumpMap ? "#define USE_BUMPMAP" : "", e.normalMap ? "#define USE_NORMALMAP" : "", e.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "", e.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "", e.emissiveMap ? "#define USE_EMISSIVEMAP" : "", e.anisotropy ? "#define USE_ANISOTROPY" : "", e.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "", e.clearcoat ? "#define USE_CLEARCOAT" : "", e.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", e.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", e.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", e.dispersion ? "#define USE_DISPERSION" : "", e.iridescence ? "#define USE_IRIDESCENCE" : "", e.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "", e.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "", e.specularMap ? "#define USE_SPECULARMAP" : "", e.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "", e.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "", e.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", e.metalnessMap ? "#define USE_METALNESSMAP" : "", e.alphaMap ? "#define USE_ALPHAMAP" : "", e.alphaTest ? "#define USE_ALPHATEST" : "", e.alphaHash ? "#define USE_ALPHAHASH" : "", e.sheen ? "#define USE_SHEEN" : "", e.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "", e.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "", e.transmission ? "#define USE_TRANSMISSION" : "", e.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", e.thicknessMap ? "#define USE_THICKNESSMAP" : "", e.vertexTangents && e.flatShading === !1 ? "#define USE_TANGENT" : "", e.vertexColors || e.instancingColor || e.batchingColor ? "#define USE_COLOR" : "", e.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", e.vertexUv1s ? "#define USE_UV1" : "", e.vertexUv2s ? "#define USE_UV2" : "", e.vertexUv3s ? "#define USE_UV3" : "", e.pointsUvs ? "#define USE_POINTS_UV" : "", e.gradientMap ? "#define USE_GRADIENTMAP" : "", e.flatShading ? "#define FLAT_SHADED" : "", e.doubleSided ? "#define DOUBLE_SIDED" : "", e.flipSided ? "#define FLIP_SIDED" : "", e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", e.shadowMapEnabled ? "#define " + m : "", e.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", e.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "", e.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "", e.decodeVideoTextureEmissive ? "#define DECODE_VIDEO_TEXTURE_EMISSIVE" : "", e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", e.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", e.toneMapping !== El ? "#define TONE_MAPPING" : "", e.toneMapping !== El ? Ze.tonemapping_pars_fragment : "", e.toneMapping !== El ? bN("toneMapping", e.toneMapping) : "", e.dithering ? "#define DITHERING" : "", e.opaque ? "#define OPAQUE" : "", Ze.colorspace_pars_fragment, MN("linearToOutputTexel", e.outputColorSpace), EN(), e.useDepthPacking ? "#define DEPTH_PACKING " + e.depthPacking : "", `
`].filter(pp).join(`
`)), f = ux(f), f = SM(f, e), f = MM(f, e), h = ux(h), h = SM(h, e), h = MM(h, e), f = bM(f), h = bM(h), e.isRawShaderMaterial !== !0 && (D = `#version 300 es
`, R = [M, "#define attribute in", "#define varying out", "#define texture2D texture"].join(`
`) + `
`+ R, T = ["#define varying in", e.glslVersion === tx ? "" : "layout(location = 0) out highp vec4 pc_fragColor;", e.glslVersion === tx ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join(`
`) + `
`+ T); const N = D + R + f, U = D + T + h, V = yM(a, a.VERTEX_SHADER, N), I = yM(a, a.FRAGMENT_SHADER, U); a.attachShader(C, V), a.attachShader(C, I), e.index0AttributeName !== void 0 ? a.bindAttribLocation(C, 0, e.index0AttributeName) : e.morphTargets === !0 && a.bindAttribLocation(C, 0, "position"), a.linkProgram(C); function G(j) {
		if (r.debug.checkShaderErrors) {
			const dt = a.getProgramInfoLog(C).trim(), tt = a.getShaderInfoLog(V).trim(), ct = a.getShaderInfoLog(I).trim(); let xt = !0, K = !0; if (a.getProgramParameter(C, a.LINK_STATUS) === !1) if (xt = !1, typeof r.debug.onShaderError == "function") r.debug.onShaderError(a, C, V, I); else {
				const ft = xM(a, V, "vertex"), nt = xM(a, I, "fragment"); console.error("THREE.WebGLProgram: Shader Error " + a.getError() + " - VALIDATE_STATUS " + a.getProgramParameter(C, a.VALIDATE_STATUS) + `

Material Name: `+ j.name + `
Material Type: `+ j.type + `

Program Info Log: `+ dt + `
`+ ft + `
`+ nt)
			} else dt !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", dt) : (tt === "" || ct === "") && (K = !1); K && (j.diagnostics = { runnable: xt, programLog: dt, vertexShader: { log: tt, prefix: R }, fragmentShader: { log: ct, prefix: T } })
		} a.deleteShader(V), a.deleteShader(I), q = new D0(a, C), z = RN(a, C)
	} let q; this.getUniforms = function () { return q === void 0 && G(this), q }; let z; this.getAttributes = function () { return z === void 0 && G(this), z }; let L = e.rendererExtensionParallelShaderCompile === !1; return this.isReady = function () { return L === !1 && (L = a.getProgramParameter(C, yN)), L }, this.destroy = function () { n.releaseStatesOfProgram(this), a.deleteProgram(C), this.program = void 0 }, this.type = e.shaderType, this.name = e.shaderName, this.id = _N++, this.cacheKey = t, this.usedTimes = 1, this.program = C, this.vertexShader = V, this.fragmentShader = I, this
} let HN = 0; class FN { constructor() { this.shaderCache = new Map, this.materialCache = new Map } update(t) { const e = t.vertexShader, n = t.fragmentShader, a = this._getShaderStage(e), o = this._getShaderStage(n), f = this._getShaderCacheForMaterial(t); return f.has(a) === !1 && (f.add(a), a.usedTimes++), f.has(o) === !1 && (f.add(o), o.usedTimes++), this } remove(t) { const e = this.materialCache.get(t); for (const n of e) n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code); return this.materialCache.delete(t), this } getVertexShaderID(t) { return this._getShaderStage(t.vertexShader).id } getFragmentShaderID(t) { return this._getShaderStage(t.fragmentShader).id } dispose() { this.shaderCache.clear(), this.materialCache.clear() } _getShaderCacheForMaterial(t) { const e = this.materialCache; let n = e.get(t); return n === void 0 && (n = new Set, e.set(t, n)), n } _getShaderStage(t) { const e = this.shaderCache; let n = e.get(t); return n === void 0 && (n = new VN(t), e.set(t, n)), n } } class VN { constructor(t) { this.id = HN++, this.code = t, this.usedTimes = 0 } } function GN(r, t, e, n, a, o, f) { const h = new wh, m = new FN, g = new Set, _ = [], x = a.logarithmicDepthBuffer, S = a.vertexTextures; let M = a.precision; const A = { MeshDepthMaterial: "depth", MeshDistanceMaterial: "distanceRGBA", MeshNormalMaterial: "normal", MeshBasicMaterial: "basic", MeshLambertMaterial: "lambert", MeshPhongMaterial: "phong", MeshToonMaterial: "toon", MeshStandardMaterial: "physical", MeshPhysicalMaterial: "physical", MeshMatcapMaterial: "matcap", LineBasicMaterial: "basic", LineDashedMaterial: "dashed", PointsMaterial: "points", ShadowMaterial: "shadow", SpriteMaterial: "sprite" }; function C(z) { return g.add(z), z === 0 ? "uv" : `uv${z}` } function R(z, L, j, dt, tt) { const ct = dt.fog, xt = tt.geometry, K = z.isMeshStandardMaterial ? dt.environment : null, ft = (z.isMeshStandardMaterial ? e : t).get(z.envMap || K), nt = ft && ft.mapping === Lh ? ft.image.height : null, Et = A[z.type]; z.precision !== null && (M = a.getMaxPrecision(z.precision), M !== z.precision && console.warn("THREE.WebGLProgram.getParameters:", z.precision, "not supported, using", M, "instead.")); const Y = xt.morphAttributes.position || xt.morphAttributes.normal || xt.morphAttributes.color, it = Y !== void 0 ? Y.length : 0; let Dt = 0; xt.morphAttributes.position !== void 0 && (Dt = 1), xt.morphAttributes.normal !== void 0 && (Dt = 2), xt.morphAttributes.color !== void 0 && (Dt = 3); let Xt, $, Tt, Lt; if (Et) { const on = Or[Et]; Xt = on.vertexShader, $ = on.fragmentShader } else Xt = z.vertexShader, $ = z.fragmentShader, m.update(z), Tt = m.getVertexShaderID(z), Lt = m.getFragmentShaderID(z); const Vt = r.getRenderTarget(), kt = r.state.buffers.depth.getReversed(), Me = tt.isInstancedMesh === !0, Jt = tt.isBatchedMesh === !0, Le = !!z.map, Bt = !!z.matcap, Ut = !!ft, W = !!z.aoMap, de = !!z.lightMap, Ht = !!z.bumpMap, ee = !!z.normalMap, jt = !!z.displacementMap, be = !!z.emissiveMap, Qt = !!z.metalnessMap, X = !!z.roughnessMap, B = z.anisotropy > 0, mt = z.clearcoat > 0, bt = z.dispersion > 0, Pt = z.iridescence > 0, Ct = z.sheen > 0, pe = z.transmission > 0, te = B && !!z.anisotropyMap, oe = mt && !!z.clearcoatMap, qe = mt && !!z.clearcoatNormalMap, Yt = mt && !!z.clearcoatRoughnessMap, fe = Pt && !!z.iridescenceMap, ge = Pt && !!z.iridescenceThicknessMap, he = Ct && !!z.sheenColorMap, ue = Ct && !!z.sheenRoughnessMap, Be = !!z.specularMap, ye = !!z.specularColorMap, pn = !!z.specularIntensityMap, at = pe && !!z.transmissionMap, ie = pe && !!z.thicknessMap, Mt = !!z.gradientMap, Nt = !!z.alphaMap, $t = z.alphaTest > 0, ne = !!z.alphaHash, we = !!z.extensions; let Cn = El; z.toneMapped && (Vt === null || Vt.isXRRenderTarget === !0) && (Cn = r.toneMapping); const Yn = { shaderID: Et, shaderType: z.type, shaderName: z.name, vertexShader: Xt, fragmentShader: $, defines: z.defines, customVertexShaderID: Tt, customFragmentShaderID: Lt, isRawShaderMaterial: z.isRawShaderMaterial === !0, glslVersion: z.glslVersion, precision: M, batching: Jt, batchingColor: Jt && tt._colorsTexture !== null, instancing: Me, instancingColor: Me && tt.instanceColor !== null, instancingMorph: Me && tt.morphTexture !== null, supportsVertexTextures: S, outputColorSpace: Vt === null ? r.outputColorSpace : Vt.isXRRenderTarget === !0 ? Vt.texture.colorSpace : bu, alphaToCoverage: !!z.alphaToCoverage, map: Le, matcap: Bt, envMap: Ut, envMapMode: Ut && ft.mapping, envMapCubeUVHeight: nt, aoMap: W, lightMap: de, bumpMap: Ht, normalMap: ee, displacementMap: S && jt, emissiveMap: be, normalMapObjectSpace: ee && z.normalMapType === jb, normalMapTangentSpace: ee && z.normalMapType === Tu, metalnessMap: Qt, roughnessMap: X, anisotropy: B, anisotropyMap: te, clearcoat: mt, clearcoatMap: oe, clearcoatNormalMap: qe, clearcoatRoughnessMap: Yt, dispersion: bt, iridescence: Pt, iridescenceMap: fe, iridescenceThicknessMap: ge, sheen: Ct, sheenColorMap: he, sheenRoughnessMap: ue, specularMap: Be, specularColorMap: ye, specularIntensityMap: pn, transmission: pe, transmissionMap: at, thicknessMap: ie, gradientMap: Mt, opaque: z.transparent === !1 && z.blending === Hc && z.alphaToCoverage === !1, alphaMap: Nt, alphaTest: $t, alphaHash: ne, combine: z.combine, mapUv: Le && C(z.map.channel), aoMapUv: W && C(z.aoMap.channel), lightMapUv: de && C(z.lightMap.channel), bumpMapUv: Ht && C(z.bumpMap.channel), normalMapUv: ee && C(z.normalMap.channel), displacementMapUv: jt && C(z.displacementMap.channel), emissiveMapUv: be && C(z.emissiveMap.channel), metalnessMapUv: Qt && C(z.metalnessMap.channel), roughnessMapUv: X && C(z.roughnessMap.channel), anisotropyMapUv: te && C(z.anisotropyMap.channel), clearcoatMapUv: oe && C(z.clearcoatMap.channel), clearcoatNormalMapUv: qe && C(z.clearcoatNormalMap.channel), clearcoatRoughnessMapUv: Yt && C(z.clearcoatRoughnessMap.channel), iridescenceMapUv: fe && C(z.iridescenceMap.channel), iridescenceThicknessMapUv: ge && C(z.iridescenceThicknessMap.channel), sheenColorMapUv: he && C(z.sheenColorMap.channel), sheenRoughnessMapUv: ue && C(z.sheenRoughnessMap.channel), specularMapUv: Be && C(z.specularMap.channel), specularColorMapUv: ye && C(z.specularColorMap.channel), specularIntensityMapUv: pn && C(z.specularIntensityMap.channel), transmissionMapUv: at && C(z.transmissionMap.channel), thicknessMapUv: ie && C(z.thicknessMap.channel), alphaMapUv: Nt && C(z.alphaMap.channel), vertexTangents: !!xt.attributes.tangent && (ee || B), vertexColors: z.vertexColors, vertexAlphas: z.vertexColors === !0 && !!xt.attributes.color && xt.attributes.color.itemSize === 4, pointsUvs: tt.isPoints === !0 && !!xt.attributes.uv && (Le || Nt), fog: !!ct, useFog: z.fog === !0, fogExp2: !!ct && ct.isFogExp2, flatShading: z.flatShading === !0, sizeAttenuation: z.sizeAttenuation === !0, logarithmicDepthBuffer: x, reverseDepthBuffer: kt, skinning: tt.isSkinnedMesh === !0, morphTargets: xt.morphAttributes.position !== void 0, morphNormals: xt.morphAttributes.normal !== void 0, morphColors: xt.morphAttributes.color !== void 0, morphTargetsCount: it, morphTextureStride: Dt, numDirLights: L.directional.length, numPointLights: L.point.length, numSpotLights: L.spot.length, numSpotLightMaps: L.spotLightMap.length, numRectAreaLights: L.rectArea.length, numHemiLights: L.hemi.length, numDirLightShadows: L.directionalShadowMap.length, numPointLightShadows: L.pointShadowMap.length, numSpotLightShadows: L.spotShadowMap.length, numSpotLightShadowsWithMaps: L.numSpotLightShadowsWithMaps, numLightProbes: L.numLightProbes, numClippingPlanes: f.numPlanes, numClipIntersection: f.numIntersection, dithering: z.dithering, shadowMapEnabled: r.shadowMap.enabled && j.length > 0, shadowMapType: r.shadowMap.type, toneMapping: Cn, decodeVideoTexture: Le && z.map.isVideoTexture === !0 && dn.getTransfer(z.map.colorSpace) === Nn, decodeVideoTextureEmissive: be && z.emissiveMap.isVideoTexture === !0 && dn.getTransfer(z.emissiveMap.colorSpace) === Nn, premultipliedAlpha: z.premultipliedAlpha, doubleSided: z.side === Ml, flipSided: z.side === Va, useDepthPacking: z.depthPacking >= 0, depthPacking: z.depthPacking || 0, index0AttributeName: z.index0AttributeName, extensionClipCullDistance: we && z.extensions.clipCullDistance === !0 && n.has("WEBGL_clip_cull_distance"), extensionMultiDraw: (we && z.extensions.multiDraw === !0 || Jt) && n.has("WEBGL_multi_draw"), rendererExtensionParallelShaderCompile: n.has("KHR_parallel_shader_compile"), customProgramCacheKey: z.customProgramCacheKey() }; return Yn.vertexUv1s = g.has(1), Yn.vertexUv2s = g.has(2), Yn.vertexUv3s = g.has(3), g.clear(), Yn } function T(z) { const L = []; if (z.shaderID ? L.push(z.shaderID) : (L.push(z.customVertexShaderID), L.push(z.customFragmentShaderID)), z.defines !== void 0) for (const j in z.defines) L.push(j), L.push(z.defines[j]); return z.isRawShaderMaterial === !1 && (D(L, z), N(L, z), L.push(r.outputColorSpace)), L.push(z.customProgramCacheKey), L.join() } function D(z, L) { z.push(L.precision), z.push(L.outputColorSpace), z.push(L.envMapMode), z.push(L.envMapCubeUVHeight), z.push(L.mapUv), z.push(L.alphaMapUv), z.push(L.lightMapUv), z.push(L.aoMapUv), z.push(L.bumpMapUv), z.push(L.normalMapUv), z.push(L.displacementMapUv), z.push(L.emissiveMapUv), z.push(L.metalnessMapUv), z.push(L.roughnessMapUv), z.push(L.anisotropyMapUv), z.push(L.clearcoatMapUv), z.push(L.clearcoatNormalMapUv), z.push(L.clearcoatRoughnessMapUv), z.push(L.iridescenceMapUv), z.push(L.iridescenceThicknessMapUv), z.push(L.sheenColorMapUv), z.push(L.sheenRoughnessMapUv), z.push(L.specularMapUv), z.push(L.specularColorMapUv), z.push(L.specularIntensityMapUv), z.push(L.transmissionMapUv), z.push(L.thicknessMapUv), z.push(L.combine), z.push(L.fogExp2), z.push(L.sizeAttenuation), z.push(L.morphTargetsCount), z.push(L.morphAttributeCount), z.push(L.numDirLights), z.push(L.numPointLights), z.push(L.numSpotLights), z.push(L.numSpotLightMaps), z.push(L.numHemiLights), z.push(L.numRectAreaLights), z.push(L.numDirLightShadows), z.push(L.numPointLightShadows), z.push(L.numSpotLightShadows), z.push(L.numSpotLightShadowsWithMaps), z.push(L.numLightProbes), z.push(L.shadowMapType), z.push(L.toneMapping), z.push(L.numClippingPlanes), z.push(L.numClipIntersection), z.push(L.depthPacking) } function N(z, L) { h.disableAll(), L.supportsVertexTextures && h.enable(0), L.instancing && h.enable(1), L.instancingColor && h.enable(2), L.instancingMorph && h.enable(3), L.matcap && h.enable(4), L.envMap && h.enable(5), L.normalMapObjectSpace && h.enable(6), L.normalMapTangentSpace && h.enable(7), L.clearcoat && h.enable(8), L.iridescence && h.enable(9), L.alphaTest && h.enable(10), L.vertexColors && h.enable(11), L.vertexAlphas && h.enable(12), L.vertexUv1s && h.enable(13), L.vertexUv2s && h.enable(14), L.vertexUv3s && h.enable(15), L.vertexTangents && h.enable(16), L.anisotropy && h.enable(17), L.alphaHash && h.enable(18), L.batching && h.enable(19), L.dispersion && h.enable(20), L.batchingColor && h.enable(21), z.push(h.mask), h.disableAll(), L.fog && h.enable(0), L.useFog && h.enable(1), L.flatShading && h.enable(2), L.logarithmicDepthBuffer && h.enable(3), L.reverseDepthBuffer && h.enable(4), L.skinning && h.enable(5), L.morphTargets && h.enable(6), L.morphNormals && h.enable(7), L.morphColors && h.enable(8), L.premultipliedAlpha && h.enable(9), L.shadowMapEnabled && h.enable(10), L.doubleSided && h.enable(11), L.flipSided && h.enable(12), L.useDepthPacking && h.enable(13), L.dithering && h.enable(14), L.transmission && h.enable(15), L.sheen && h.enable(16), L.opaque && h.enable(17), L.pointsUvs && h.enable(18), L.decodeVideoTexture && h.enable(19), L.decodeVideoTextureEmissive && h.enable(20), L.alphaToCoverage && h.enable(21), z.push(h.mask) } function U(z) { const L = A[z.type]; let j; if (L) { const dt = Or[L]; j = lE.clone(dt.uniforms) } else j = z.uniforms; return j } function V(z, L) { let j; for (let dt = 0, tt = _.length; dt < tt; dt++) { const ct = _[dt]; if (ct.cacheKey === L) { j = ct, ++j.usedTimes; break } } return j === void 0 && (j = new IN(r, L, z, o), _.push(j)), j } function I(z) { if (--z.usedTimes === 0) { const L = _.indexOf(z); _[L] = _[_.length - 1], _.pop(), z.destroy() } } function G(z) { m.remove(z) } function q() { m.dispose() } return { getParameters: R, getProgramCacheKey: T, getUniforms: U, acquireProgram: V, releaseProgram: I, releaseShaderCache: G, programs: _, dispose: q } } function XN() { let r = new WeakMap; function t(f) { return r.has(f) } function e(f) { let h = r.get(f); return h === void 0 && (h = {}, r.set(f, h)), h } function n(f) { r.delete(f) } function a(f, h, m) { r.get(f)[h] = m } function o() { r = new WeakMap } return { has: t, get: e, remove: n, update: a, dispose: o } } function qN(r, t) { return r.groupOrder !== t.groupOrder ? r.groupOrder - t.groupOrder : r.renderOrder !== t.renderOrder ? r.renderOrder - t.renderOrder : r.material.id !== t.material.id ? r.material.id - t.material.id : r.z !== t.z ? r.z - t.z : r.id - t.id } function TM(r, t) { return r.groupOrder !== t.groupOrder ? r.groupOrder - t.groupOrder : r.renderOrder !== t.renderOrder ? r.renderOrder - t.renderOrder : r.z !== t.z ? t.z - r.z : r.id - t.id } function AM() { const r = []; let t = 0; const e = [], n = [], a = []; function o() { t = 0, e.length = 0, n.length = 0, a.length = 0 } function f(x, S, M, A, C, R) { let T = r[t]; return T === void 0 ? (T = { id: x.id, object: x, geometry: S, material: M, groupOrder: A, renderOrder: x.renderOrder, z: C, group: R }, r[t] = T) : (T.id = x.id, T.object = x, T.geometry = S, T.material = M, T.groupOrder = A, T.renderOrder = x.renderOrder, T.z = C, T.group = R), t++, T } function h(x, S, M, A, C, R) { const T = f(x, S, M, A, C, R); M.transmission > 0 ? n.push(T) : M.transparent === !0 ? a.push(T) : e.push(T) } function m(x, S, M, A, C, R) { const T = f(x, S, M, A, C, R); M.transmission > 0 ? n.unshift(T) : M.transparent === !0 ? a.unshift(T) : e.unshift(T) } function g(x, S) { e.length > 1 && e.sort(x || qN), n.length > 1 && n.sort(S || TM), a.length > 1 && a.sort(S || TM) } function _() { for (let x = t, S = r.length; x < S; x++) { const M = r[x]; if (M.id === null) break; M.id = null, M.object = null, M.geometry = null, M.material = null, M.group = null } } return { opaque: e, transmissive: n, transparent: a, init: o, push: h, unshift: m, finish: _, sort: g } } function YN() { let r = new WeakMap; function t(n, a) { const o = r.get(n); let f; return o === void 0 ? (f = new AM, r.set(n, [f])) : a >= o.length ? (f = new AM, o.push(f)) : f = o[a], f } function e() { r = new WeakMap } return { get: t, dispose: e } } function WN() { const r = {}; return { get: function (t) { if (r[t.id] !== void 0) return r[t.id]; let e; switch (t.type) { case "DirectionalLight": e = { direction: new k, color: new ce }; break; case "SpotLight": e = { position: new k, direction: new k, color: new ce, distance: 0, coneCos: 0, penumbraCos: 0, decay: 0 }; break; case "PointLight": e = { position: new k, color: new ce, distance: 0, decay: 0 }; break; case "HemisphereLight": e = { direction: new k, skyColor: new ce, groundColor: new ce }; break; case "RectAreaLight": e = { color: new ce, position: new k, halfWidth: new k, halfHeight: new k }; break }return r[t.id] = e, e } } } function kN() { const r = {}; return { get: function (t) { if (r[t.id] !== void 0) return r[t.id]; let e; switch (t.type) { case "DirectionalLight": e = { shadowIntensity: 1, shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new zt }; break; case "SpotLight": e = { shadowIntensity: 1, shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new zt }; break; case "PointLight": e = { shadowIntensity: 1, shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new zt, shadowCameraNear: 1, shadowCameraFar: 1e3 }; break }return r[t.id] = e, e } } } let jN = 0; function ZN(r, t) { return (t.castShadow ? 2 : 0) - (r.castShadow ? 2 : 0) + (t.map ? 1 : 0) - (r.map ? 1 : 0) } function QN(r) { const t = new WN, e = kN(), n = { version: 0, hash: { directionalLength: -1, pointLength: -1, spotLength: -1, rectAreaLength: -1, hemiLength: -1, numDirectionalShadows: -1, numPointShadows: -1, numSpotShadows: -1, numSpotMaps: -1, numLightProbes: -1 }, ambient: [0, 0, 0], probe: [], directional: [], directionalShadow: [], directionalShadowMap: [], directionalShadowMatrix: [], spot: [], spotLightMap: [], spotShadow: [], spotShadowMap: [], spotLightMatrix: [], rectArea: [], rectAreaLTC1: null, rectAreaLTC2: null, point: [], pointShadow: [], pointShadowMap: [], pointShadowMatrix: [], hemi: [], numSpotLightShadowsWithMaps: 0, numLightProbes: 0 }; for (let g = 0; g < 9; g++)n.probe.push(new k); const a = new k, o = new Oe, f = new Oe; function h(g) { let _ = 0, x = 0, S = 0; for (let z = 0; z < 9; z++)n.probe[z].set(0, 0, 0); let M = 0, A = 0, C = 0, R = 0, T = 0, D = 0, N = 0, U = 0, V = 0, I = 0, G = 0; g.sort(ZN); for (let z = 0, L = g.length; z < L; z++) { const j = g[z], dt = j.color, tt = j.intensity, ct = j.distance, xt = j.shadow && j.shadow.map ? j.shadow.map.texture : null; if (j.isAmbientLight) _ += dt.r * tt, x += dt.g * tt, S += dt.b * tt; else if (j.isLightProbe) { for (let K = 0; K < 9; K++)n.probe[K].addScaledVector(j.sh.coefficients[K], tt); G++ } else if (j.isDirectionalLight) { const K = t.get(j); if (K.color.copy(j.color).multiplyScalar(j.intensity), j.castShadow) { const ft = j.shadow, nt = e.get(j); nt.shadowIntensity = ft.intensity, nt.shadowBias = ft.bias, nt.shadowNormalBias = ft.normalBias, nt.shadowRadius = ft.radius, nt.shadowMapSize = ft.mapSize, n.directionalShadow[M] = nt, n.directionalShadowMap[M] = xt, n.directionalShadowMatrix[M] = j.shadow.matrix, D++ } n.directional[M] = K, M++ } else if (j.isSpotLight) { const K = t.get(j); K.position.setFromMatrixPosition(j.matrixWorld), K.color.copy(dt).multiplyScalar(tt), K.distance = ct, K.coneCos = Math.cos(j.angle), K.penumbraCos = Math.cos(j.angle * (1 - j.penumbra)), K.decay = j.decay, n.spot[C] = K; const ft = j.shadow; if (j.map && (n.spotLightMap[V] = j.map, V++, ft.updateMatrices(j), j.castShadow && I++), n.spotLightMatrix[C] = ft.matrix, j.castShadow) { const nt = e.get(j); nt.shadowIntensity = ft.intensity, nt.shadowBias = ft.bias, nt.shadowNormalBias = ft.normalBias, nt.shadowRadius = ft.radius, nt.shadowMapSize = ft.mapSize, n.spotShadow[C] = nt, n.spotShadowMap[C] = xt, U++ } C++ } else if (j.isRectAreaLight) { const K = t.get(j); K.color.copy(dt).multiplyScalar(tt), K.halfWidth.set(j.width * .5, 0, 0), K.halfHeight.set(0, j.height * .5, 0), n.rectArea[R] = K, R++ } else if (j.isPointLight) { const K = t.get(j); if (K.color.copy(j.color).multiplyScalar(j.intensity), K.distance = j.distance, K.decay = j.decay, j.castShadow) { const ft = j.shadow, nt = e.get(j); nt.shadowIntensity = ft.intensity, nt.shadowBias = ft.bias, nt.shadowNormalBias = ft.normalBias, nt.shadowRadius = ft.radius, nt.shadowMapSize = ft.mapSize, nt.shadowCameraNear = ft.camera.near, nt.shadowCameraFar = ft.camera.far, n.pointShadow[A] = nt, n.pointShadowMap[A] = xt, n.pointShadowMatrix[A] = j.shadow.matrix, N++ } n.point[A] = K, A++ } else if (j.isHemisphereLight) { const K = t.get(j); K.skyColor.copy(j.color).multiplyScalar(tt), K.groundColor.copy(j.groundColor).multiplyScalar(tt), n.hemi[T] = K, T++ } } R > 0 && (r.has("OES_texture_float_linear") === !0 ? (n.rectAreaLTC1 = le.LTC_FLOAT_1, n.rectAreaLTC2 = le.LTC_FLOAT_2) : (n.rectAreaLTC1 = le.LTC_HALF_1, n.rectAreaLTC2 = le.LTC_HALF_2)), n.ambient[0] = _, n.ambient[1] = x, n.ambient[2] = S; const q = n.hash; (q.directionalLength !== M || q.pointLength !== A || q.spotLength !== C || q.rectAreaLength !== R || q.hemiLength !== T || q.numDirectionalShadows !== D || q.numPointShadows !== N || q.numSpotShadows !== U || q.numSpotMaps !== V || q.numLightProbes !== G) && (n.directional.length = M, n.spot.length = C, n.rectArea.length = R, n.point.length = A, n.hemi.length = T, n.directionalShadow.length = D, n.directionalShadowMap.length = D, n.pointShadow.length = N, n.pointShadowMap.length = N, n.spotShadow.length = U, n.spotShadowMap.length = U, n.directionalShadowMatrix.length = D, n.pointShadowMatrix.length = N, n.spotLightMatrix.length = U + V - I, n.spotLightMap.length = V, n.numSpotLightShadowsWithMaps = I, n.numLightProbes = G, q.directionalLength = M, q.pointLength = A, q.spotLength = C, q.rectAreaLength = R, q.hemiLength = T, q.numDirectionalShadows = D, q.numPointShadows = N, q.numSpotShadows = U, q.numSpotMaps = V, q.numLightProbes = G, n.version = jN++) } function m(g, _) { let x = 0, S = 0, M = 0, A = 0, C = 0; const R = _.matrixWorldInverse; for (let T = 0, D = g.length; T < D; T++) { const N = g[T]; if (N.isDirectionalLight) { const U = n.directional[x]; U.direction.setFromMatrixPosition(N.matrixWorld), a.setFromMatrixPosition(N.target.matrixWorld), U.direction.sub(a), U.direction.transformDirection(R), x++ } else if (N.isSpotLight) { const U = n.spot[M]; U.position.setFromMatrixPosition(N.matrixWorld), U.position.applyMatrix4(R), U.direction.setFromMatrixPosition(N.matrixWorld), a.setFromMatrixPosition(N.target.matrixWorld), U.direction.sub(a), U.direction.transformDirection(R), M++ } else if (N.isRectAreaLight) { const U = n.rectArea[A]; U.position.setFromMatrixPosition(N.matrixWorld), U.position.applyMatrix4(R), f.identity(), o.copy(N.matrixWorld), o.premultiply(R), f.extractRotation(o), U.halfWidth.set(N.width * .5, 0, 0), U.halfHeight.set(0, N.height * .5, 0), U.halfWidth.applyMatrix4(f), U.halfHeight.applyMatrix4(f), A++ } else if (N.isPointLight) { const U = n.point[S]; U.position.setFromMatrixPosition(N.matrixWorld), U.position.applyMatrix4(R), S++ } else if (N.isHemisphereLight) { const U = n.hemi[C]; U.direction.setFromMatrixPosition(N.matrixWorld), U.direction.transformDirection(R), C++ } } } return { setup: h, setupView: m, state: n } } function RM(r) { const t = new QN(r), e = [], n = []; function a(_) { g.camera = _, e.length = 0, n.length = 0 } function o(_) { e.push(_) } function f(_) { n.push(_) } function h() { t.setup(e) } function m(_) { t.setupView(e, _) } const g = { lightsArray: e, shadowsArray: n, camera: null, lights: t, transmissionRenderTarget: {} }; return { init: a, state: g, setupLights: h, setupLightsView: m, pushLight: o, pushShadow: f } } function KN(r) { let t = new WeakMap; function e(a, o = 0) { const f = t.get(a); let h; return f === void 0 ? (h = new RM(r), t.set(a, [h])) : o >= f.length ? (h = new RM(r), f.push(h)) : h = f[o], h } function n() { t = new WeakMap } return { get: e, dispose: n } } const JN = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, $N = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`; function tO(r, t, e) { let n = new Jp; const a = new zt, o = new zt, f = new yn, h = new qx({ depthPacking: kb }), m = new Yx, g = {}, _ = e.maxTextureSize, x = { [_o]: Va, [Va]: _o, [Ml]: Ml }, S = new Br({ defines: { VSM_SAMPLES: 8 }, uniforms: { shadow_pass: { value: null }, resolution: { value: new zt }, radius: { value: 4 } }, vertexShader: JN, fragmentShader: $N }), M = S.clone(); M.defines.HORIZONTAL_PASS = 1; const A = new Qe; A.setAttribute("position", new Pn(new Float32Array([-1, -1, .5, 3, -1, .5, -1, 3, .5]), 3)); const C = new wi(A, S), R = this; this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = Ev; let T = this.type; this.render = function (I, G, q) { if (R.enabled === !1 || R.autoUpdate === !1 && R.needsUpdate === !1 || I.length === 0) return; const z = r.getRenderTarget(), L = r.getActiveCubeFace(), j = r.getActiveMipmapLevel(), dt = r.state; dt.setBlending(vo), dt.buffers.color.setClear(1, 1, 1, 1), dt.buffers.depth.setTest(!0), dt.setScissorTest(!1); const tt = T !== Nr && this.type === Nr, ct = T === Nr && this.type !== Nr; for (let xt = 0, K = I.length; xt < K; xt++) { const ft = I[xt], nt = ft.shadow; if (nt === void 0) { console.warn("THREE.WebGLShadowMap:", ft, "has no shadow."); continue } if (nt.autoUpdate === !1 && nt.needsUpdate === !1) continue; a.copy(nt.mapSize); const Et = nt.getFrameExtents(); if (a.multiply(Et), o.copy(nt.mapSize), (a.x > _ || a.y > _) && (a.x > _ && (o.x = Math.floor(_ / Et.x), a.x = o.x * Et.x, nt.mapSize.x = o.x), a.y > _ && (o.y = Math.floor(_ / Et.y), a.y = o.y * Et.y, nt.mapSize.y = o.y)), nt.map === null || tt === !0 || ct === !0) { const it = this.type !== Nr ? { minFilter: ua, magFilter: ua } : {}; nt.map !== null && nt.map.dispose(), nt.map = new Rl(a.x, a.y, it), nt.map.texture.name = ft.name + ".shadowMap", nt.camera.updateProjectionMatrix() } r.setRenderTarget(nt.map), r.clear(); const Y = nt.getViewportCount(); for (let it = 0; it < Y; it++) { const Dt = nt.getViewport(it); f.set(o.x * Dt.x, o.y * Dt.y, o.x * Dt.z, o.y * Dt.w), dt.viewport(f), nt.updateMatrices(ft, it), n = nt.getFrustum(), U(G, q, nt.camera, ft, this.type) } nt.isPointLightShadow !== !0 && this.type === Nr && D(nt, q), nt.needsUpdate = !1 } T = this.type, R.needsUpdate = !1, r.setRenderTarget(z, L, j) }; function D(I, G) { const q = t.update(C); S.defines.VSM_SAMPLES !== I.blurSamples && (S.defines.VSM_SAMPLES = I.blurSamples, M.defines.VSM_SAMPLES = I.blurSamples, S.needsUpdate = !0, M.needsUpdate = !0), I.mapPass === null && (I.mapPass = new Rl(a.x, a.y)), S.uniforms.shadow_pass.value = I.map.texture, S.uniforms.resolution.value = I.mapSize, S.uniforms.radius.value = I.radius, r.setRenderTarget(I.mapPass), r.clear(), r.renderBufferDirect(G, null, q, S, C, null), M.uniforms.shadow_pass.value = I.mapPass.texture, M.uniforms.resolution.value = I.mapSize, M.uniforms.radius.value = I.radius, r.setRenderTarget(I.map), r.clear(), r.renderBufferDirect(G, null, q, M, C, null) } function N(I, G, q, z) { let L = null; const j = q.isPointLight === !0 ? I.customDistanceMaterial : I.customDepthMaterial; if (j !== void 0) L = j; else if (L = q.isPointLight === !0 ? m : h, r.localClippingEnabled && G.clipShadows === !0 && Array.isArray(G.clippingPlanes) && G.clippingPlanes.length !== 0 || G.displacementMap && G.displacementScale !== 0 || G.alphaMap && G.alphaTest > 0 || G.map && G.alphaTest > 0) { const dt = L.uuid, tt = G.uuid; let ct = g[dt]; ct === void 0 && (ct = {}, g[dt] = ct); let xt = ct[tt]; xt === void 0 && (xt = L.clone(), ct[tt] = xt, G.addEventListener("dispose", V)), L = xt } if (L.visible = G.visible, L.wireframe = G.wireframe, z === Nr ? L.side = G.shadowSide !== null ? G.shadowSide : G.side : L.side = G.shadowSide !== null ? G.shadowSide : x[G.side], L.alphaMap = G.alphaMap, L.alphaTest = G.alphaTest, L.map = G.map, L.clipShadows = G.clipShadows, L.clippingPlanes = G.clippingPlanes, L.clipIntersection = G.clipIntersection, L.displacementMap = G.displacementMap, L.displacementScale = G.displacementScale, L.displacementBias = G.displacementBias, L.wireframeLinewidth = G.wireframeLinewidth, L.linewidth = G.linewidth, q.isPointLight === !0 && L.isMeshDistanceMaterial === !0) { const dt = r.properties.get(L); dt.light = q } return L } function U(I, G, q, z, L) { if (I.visible === !1) return; if (I.layers.test(G.layers) && (I.isMesh || I.isLine || I.isPoints) && (I.castShadow || I.receiveShadow && L === Nr) && (!I.frustumCulled || n.intersectsObject(I))) { I.modelViewMatrix.multiplyMatrices(q.matrixWorldInverse, I.matrixWorld); const tt = t.update(I), ct = I.material; if (Array.isArray(ct)) { const xt = tt.groups; for (let K = 0, ft = xt.length; K < ft; K++) { const nt = xt[K], Et = ct[nt.materialIndex]; if (Et && Et.visible) { const Y = N(I, Et, z, L); I.onBeforeShadow(r, I, G, q, tt, Y, nt), r.renderBufferDirect(q, null, tt, Y, I, nt), I.onAfterShadow(r, I, G, q, tt, Y, nt) } } } else if (ct.visible) { const xt = N(I, ct, z, L); I.onBeforeShadow(r, I, G, q, tt, xt, null), r.renderBufferDirect(q, null, tt, xt, I, null), I.onAfterShadow(r, I, G, q, tt, xt, null) } } const dt = I.children; for (let tt = 0, ct = dt.length; tt < ct; tt++)U(dt[tt], G, q, z, L) } function V(I) { I.target.removeEventListener("dispose", V); for (const q in g) { const z = g[q], L = I.target.uuid; L in z && (z[L].dispose(), delete z[L]) } } } const eO = { [P0]: I0, [H0]: G0, [F0]: X0, [qc]: V0, [I0]: P0, [G0]: H0, [X0]: F0, [V0]: qc }; function nO(r, t) { function e() { let at = !1; const ie = new yn; let Mt = null; const Nt = new yn(0, 0, 0, 0); return { setMask: function ($t) { Mt !== $t && !at && (r.colorMask($t, $t, $t, $t), Mt = $t) }, setLocked: function ($t) { at = $t }, setClear: function ($t, ne, we, Cn, Yn) { Yn === !0 && ($t *= Cn, ne *= Cn, we *= Cn), ie.set($t, ne, we, Cn), Nt.equals(ie) === !1 && (r.clearColor($t, ne, we, Cn), Nt.copy(ie)) }, reset: function () { at = !1, Mt = null, Nt.set(-1, 0, 0, 0) } } } function n() { let at = !1, ie = !1, Mt = null, Nt = null, $t = null; return { setReversed: function (ne) { if (ie !== ne) { const we = t.get("EXT_clip_control"); ie ? we.clipControlEXT(we.LOWER_LEFT_EXT, we.ZERO_TO_ONE_EXT) : we.clipControlEXT(we.LOWER_LEFT_EXT, we.NEGATIVE_ONE_TO_ONE_EXT); const Cn = $t; $t = null, this.setClear(Cn) } ie = ne }, getReversed: function () { return ie }, setTest: function (ne) { ne ? Vt(r.DEPTH_TEST) : kt(r.DEPTH_TEST) }, setMask: function (ne) { Mt !== ne && !at && (r.depthMask(ne), Mt = ne) }, setFunc: function (ne) { if (ie && (ne = eO[ne]), Nt !== ne) { switch (ne) { case P0: r.depthFunc(r.NEVER); break; case I0: r.depthFunc(r.ALWAYS); break; case H0: r.depthFunc(r.LESS); break; case qc: r.depthFunc(r.LEQUAL); break; case F0: r.depthFunc(r.EQUAL); break; case V0: r.depthFunc(r.GEQUAL); break; case G0: r.depthFunc(r.GREATER); break; case X0: r.depthFunc(r.NOTEQUAL); break; default: r.depthFunc(r.LEQUAL) }Nt = ne } }, setLocked: function (ne) { at = ne }, setClear: function (ne) { $t !== ne && (ie && (ne = 1 - ne), r.clearDepth(ne), $t = ne) }, reset: function () { at = !1, Mt = null, Nt = null, $t = null, ie = !1 } } } function a() { let at = !1, ie = null, Mt = null, Nt = null, $t = null, ne = null, we = null, Cn = null, Yn = null; return { setTest: function (on) { at || (on ? Vt(r.STENCIL_TEST) : kt(r.STENCIL_TEST)) }, setMask: function (on) { ie !== on && !at && (r.stencilMask(on), ie = on) }, setFunc: function (on, Pi, Ii) { (Mt !== on || Nt !== Pi || $t !== Ii) && (r.stencilFunc(on, Pi, Ii), Mt = on, Nt = Pi, $t = Ii) }, setOp: function (on, Pi, Ii) { (ne !== on || we !== Pi || Cn !== Ii) && (r.stencilOp(on, Pi, Ii), ne = on, we = Pi, Cn = Ii) }, setLocked: function (on) { at = on }, setClear: function (on) { Yn !== on && (r.clearStencil(on), Yn = on) }, reset: function () { at = !1, ie = null, Mt = null, Nt = null, $t = null, ne = null, we = null, Cn = null, Yn = null } } } const o = new e, f = new n, h = new a, m = new WeakMap, g = new WeakMap; let _ = {}, x = {}, S = new WeakMap, M = [], A = null, C = !1, R = null, T = null, D = null, N = null, U = null, V = null, I = null, G = new ce(0, 0, 0), q = 0, z = !1, L = null, j = null, dt = null, tt = null, ct = null; const xt = r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS); let K = !1, ft = 0; const nt = r.getParameter(r.VERSION); nt.indexOf("WebGL") !== -1 ? (ft = parseFloat(/^WebGL (\d)/.exec(nt)[1]), K = ft >= 1) : nt.indexOf("OpenGL ES") !== -1 && (ft = parseFloat(/^OpenGL ES (\d)/.exec(nt)[1]), K = ft >= 2); let Et = null, Y = {}; const it = r.getParameter(r.SCISSOR_BOX), Dt = r.getParameter(r.VIEWPORT), Xt = new yn().fromArray(it), $ = new yn().fromArray(Dt); function Tt(at, ie, Mt, Nt) { const $t = new Uint8Array(4), ne = r.createTexture(); r.bindTexture(at, ne), r.texParameteri(at, r.TEXTURE_MIN_FILTER, r.NEAREST), r.texParameteri(at, r.TEXTURE_MAG_FILTER, r.NEAREST); for (let we = 0; we < Mt; we++)at === r.TEXTURE_3D || at === r.TEXTURE_2D_ARRAY ? r.texImage3D(ie, 0, r.RGBA, 1, 1, Nt, 0, r.RGBA, r.UNSIGNED_BYTE, $t) : r.texImage2D(ie + we, 0, r.RGBA, 1, 1, 0, r.RGBA, r.UNSIGNED_BYTE, $t); return ne } const Lt = {}; Lt[r.TEXTURE_2D] = Tt(r.TEXTURE_2D, r.TEXTURE_2D, 1), Lt[r.TEXTURE_CUBE_MAP] = Tt(r.TEXTURE_CUBE_MAP, r.TEXTURE_CUBE_MAP_POSITIVE_X, 6), Lt[r.TEXTURE_2D_ARRAY] = Tt(r.TEXTURE_2D_ARRAY, r.TEXTURE_2D_ARRAY, 1, 1), Lt[r.TEXTURE_3D] = Tt(r.TEXTURE_3D, r.TEXTURE_3D, 1, 1), o.setClear(0, 0, 0, 1), f.setClear(1), h.setClear(0), Vt(r.DEPTH_TEST), f.setFunc(qc), Ht(!1), ee(j_), Vt(r.CULL_FACE), W(vo); function Vt(at) { _[at] !== !0 && (r.enable(at), _[at] = !0) } function kt(at) { _[at] !== !1 && (r.disable(at), _[at] = !1) } function Me(at, ie) { return x[at] !== ie ? (r.bindFramebuffer(at, ie), x[at] = ie, at === r.DRAW_FRAMEBUFFER && (x[r.FRAMEBUFFER] = ie), at === r.FRAMEBUFFER && (x[r.DRAW_FRAMEBUFFER] = ie), !0) : !1 } function Jt(at, ie) { let Mt = M, Nt = !1; if (at) { Mt = S.get(ie), Mt === void 0 && (Mt = [], S.set(ie, Mt)); const $t = at.textures; if (Mt.length !== $t.length || Mt[0] !== r.COLOR_ATTACHMENT0) { for (let ne = 0, we = $t.length; ne < we; ne++)Mt[ne] = r.COLOR_ATTACHMENT0 + ne; Mt.length = $t.length, Nt = !0 } } else Mt[0] !== r.BACK && (Mt[0] = r.BACK, Nt = !0); Nt && r.drawBuffers(Mt) } function Le(at) { return A !== at ? (r.useProgram(at), A = at, !0) : !1 } const Bt = { [yu]: r.FUNC_ADD, [vb]: r.FUNC_SUBTRACT, [yb]: r.FUNC_REVERSE_SUBTRACT }; Bt[_b] = r.MIN, Bt[xb] = r.MAX; const Ut = { [Sb]: r.ZERO, [Mb]: r.ONE, [bb]: r.SRC_COLOR, [z0]: r.SRC_ALPHA, [Cb]: r.SRC_ALPHA_SATURATE, [Rb]: r.DST_COLOR, [Tb]: r.DST_ALPHA, [Eb]: r.ONE_MINUS_SRC_COLOR, [B0]: r.ONE_MINUS_SRC_ALPHA, [wb]: r.ONE_MINUS_DST_COLOR, [Ab]: r.ONE_MINUS_DST_ALPHA, [Db]: r.CONSTANT_COLOR, [Ub]: r.ONE_MINUS_CONSTANT_COLOR, [Nb]: r.CONSTANT_ALPHA, [Ob]: r.ONE_MINUS_CONSTANT_ALPHA }; function W(at, ie, Mt, Nt, $t, ne, we, Cn, Yn, on) { if (at === vo) { C === !0 && (kt(r.BLEND), C = !1); return } if (C === !1 && (Vt(r.BLEND), C = !0), at !== gb) { if (at !== R || on !== z) { if ((T !== yu || U !== yu) && (r.blendEquation(r.FUNC_ADD), T = yu, U = yu), on) switch (at) { case Hc: r.blendFuncSeparate(r.ONE, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA); break; case Z_: r.blendFunc(r.ONE, r.ONE); break; case Q_: r.blendFuncSeparate(r.ZERO, r.ONE_MINUS_SRC_COLOR, r.ZERO, r.ONE); break; case K_: r.blendFuncSeparate(r.ZERO, r.SRC_COLOR, r.ZERO, r.SRC_ALPHA); break; default: console.error("THREE.WebGLState: Invalid blending: ", at); break } else switch (at) { case Hc: r.blendFuncSeparate(r.SRC_ALPHA, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA); break; case Z_: r.blendFunc(r.SRC_ALPHA, r.ONE); break; case Q_: r.blendFuncSeparate(r.ZERO, r.ONE_MINUS_SRC_COLOR, r.ZERO, r.ONE); break; case K_: r.blendFunc(r.ZERO, r.SRC_COLOR); break; default: console.error("THREE.WebGLState: Invalid blending: ", at); break }D = null, N = null, V = null, I = null, G.set(0, 0, 0), q = 0, R = at, z = on } return } $t = $t || ie, ne = ne || Mt, we = we || Nt, (ie !== T || $t !== U) && (r.blendEquationSeparate(Bt[ie], Bt[$t]), T = ie, U = $t), (Mt !== D || Nt !== N || ne !== V || we !== I) && (r.blendFuncSeparate(Ut[Mt], Ut[Nt], Ut[ne], Ut[we]), D = Mt, N = Nt, V = ne, I = we), (Cn.equals(G) === !1 || Yn !== q) && (r.blendColor(Cn.r, Cn.g, Cn.b, Yn), G.copy(Cn), q = Yn), R = at, z = !1 } function de(at, ie) { at.side === Ml ? kt(r.CULL_FACE) : Vt(r.CULL_FACE); let Mt = at.side === Va; ie && (Mt = !Mt), Ht(Mt), at.blending === Hc && at.transparent === !1 ? W(vo) : W(at.blending, at.blendEquation, at.blendSrc, at.blendDst, at.blendEquationAlpha, at.blendSrcAlpha, at.blendDstAlpha, at.blendColor, at.blendAlpha, at.premultipliedAlpha), f.setFunc(at.depthFunc), f.setTest(at.depthTest), f.setMask(at.depthWrite), o.setMask(at.colorWrite); const Nt = at.stencilWrite; h.setTest(Nt), Nt && (h.setMask(at.stencilWriteMask), h.setFunc(at.stencilFunc, at.stencilRef, at.stencilFuncMask), h.setOp(at.stencilFail, at.stencilZFail, at.stencilZPass)), be(at.polygonOffset, at.polygonOffsetFactor, at.polygonOffsetUnits), at.alphaToCoverage === !0 ? Vt(r.SAMPLE_ALPHA_TO_COVERAGE) : kt(r.SAMPLE_ALPHA_TO_COVERAGE) } function Ht(at) { L !== at && (at ? r.frontFace(r.CW) : r.frontFace(r.CCW), L = at) } function ee(at) { at !== db ? (Vt(r.CULL_FACE), at !== j && (at === j_ ? r.cullFace(r.BACK) : at === pb ? r.cullFace(r.FRONT) : r.cullFace(r.FRONT_AND_BACK))) : kt(r.CULL_FACE), j = at } function jt(at) { at !== dt && (K && r.lineWidth(at), dt = at) } function be(at, ie, Mt) { at ? (Vt(r.POLYGON_OFFSET_FILL), (tt !== ie || ct !== Mt) && (r.polygonOffset(ie, Mt), tt = ie, ct = Mt)) : kt(r.POLYGON_OFFSET_FILL) } function Qt(at) { at ? Vt(r.SCISSOR_TEST) : kt(r.SCISSOR_TEST) } function X(at) { at === void 0 && (at = r.TEXTURE0 + xt - 1), Et !== at && (r.activeTexture(at), Et = at) } function B(at, ie, Mt) { Mt === void 0 && (Et === null ? Mt = r.TEXTURE0 + xt - 1 : Mt = Et); let Nt = Y[Mt]; Nt === void 0 && (Nt = { type: void 0, texture: void 0 }, Y[Mt] = Nt), (Nt.type !== at || Nt.texture !== ie) && (Et !== Mt && (r.activeTexture(Mt), Et = Mt), r.bindTexture(at, ie || Lt[at]), Nt.type = at, Nt.texture = ie) } function mt() { const at = Y[Et]; at !== void 0 && at.type !== void 0 && (r.bindTexture(at.type, null), at.type = void 0, at.texture = void 0) } function bt() { try { r.compressedTexImage2D(...arguments) } catch (at) { console.error("THREE.WebGLState:", at) } } function Pt() { try { r.compressedTexImage3D(...arguments) } catch (at) { console.error("THREE.WebGLState:", at) } } function Ct() { try { r.texSubImage2D(...arguments) } catch (at) { console.error("THREE.WebGLState:", at) } } function pe() { try { r.texSubImage3D(...arguments) } catch (at) { console.error("THREE.WebGLState:", at) } } function te() { try { r.compressedTexSubImage2D(...arguments) } catch (at) { console.error("THREE.WebGLState:", at) } } function oe() { try { r.compressedTexSubImage3D(...arguments) } catch (at) { console.error("THREE.WebGLState:", at) } } function qe() { try { r.texStorage2D(...arguments) } catch (at) { console.error("THREE.WebGLState:", at) } } function Yt() { try { r.texStorage3D(...arguments) } catch (at) { console.error("THREE.WebGLState:", at) } } function fe() { try { r.texImage2D(...arguments) } catch (at) { console.error("THREE.WebGLState:", at) } } function ge() { try { r.texImage3D(...arguments) } catch (at) { console.error("THREE.WebGLState:", at) } } function he(at) { Xt.equals(at) === !1 && (r.scissor(at.x, at.y, at.z, at.w), Xt.copy(at)) } function ue(at) { $.equals(at) === !1 && (r.viewport(at.x, at.y, at.z, at.w), $.copy(at)) } function Be(at, ie) { let Mt = g.get(ie); Mt === void 0 && (Mt = new WeakMap, g.set(ie, Mt)); let Nt = Mt.get(at); Nt === void 0 && (Nt = r.getUniformBlockIndex(ie, at.name), Mt.set(at, Nt)) } function ye(at, ie) { const Nt = g.get(ie).get(at); m.get(ie) !== Nt && (r.uniformBlockBinding(ie, Nt, at.__bindingPointIndex), m.set(ie, Nt)) } function pn() { r.disable(r.BLEND), r.disable(r.CULL_FACE), r.disable(r.DEPTH_TEST), r.disable(r.POLYGON_OFFSET_FILL), r.disable(r.SCISSOR_TEST), r.disable(r.STENCIL_TEST), r.disable(r.SAMPLE_ALPHA_TO_COVERAGE), r.blendEquation(r.FUNC_ADD), r.blendFunc(r.ONE, r.ZERO), r.blendFuncSeparate(r.ONE, r.ZERO, r.ONE, r.ZERO), r.blendColor(0, 0, 0, 0), r.colorMask(!0, !0, !0, !0), r.clearColor(0, 0, 0, 0), r.depthMask(!0), r.depthFunc(r.LESS), f.setReversed(!1), r.clearDepth(1), r.stencilMask(4294967295), r.stencilFunc(r.ALWAYS, 0, 4294967295), r.stencilOp(r.KEEP, r.KEEP, r.KEEP), r.clearStencil(0), r.cullFace(r.BACK), r.frontFace(r.CCW), r.polygonOffset(0, 0), r.activeTexture(r.TEXTURE0), r.bindFramebuffer(r.FRAMEBUFFER, null), r.bindFramebuffer(r.DRAW_FRAMEBUFFER, null), r.bindFramebuffer(r.READ_FRAMEBUFFER, null), r.useProgram(null), r.lineWidth(1), r.scissor(0, 0, r.canvas.width, r.canvas.height), r.viewport(0, 0, r.canvas.width, r.canvas.height), _ = {}, Et = null, Y = {}, x = {}, S = new WeakMap, M = [], A = null, C = !1, R = null, T = null, D = null, N = null, U = null, V = null, I = null, G = new ce(0, 0, 0), q = 0, z = !1, L = null, j = null, dt = null, tt = null, ct = null, Xt.set(0, 0, r.canvas.width, r.canvas.height), $.set(0, 0, r.canvas.width, r.canvas.height), o.reset(), f.reset(), h.reset() } return { buffers: { color: o, depth: f, stencil: h }, enable: Vt, disable: kt, bindFramebuffer: Me, drawBuffers: Jt, useProgram: Le, setBlending: W, setMaterial: de, setFlipSided: Ht, setCullFace: ee, setLineWidth: jt, setPolygonOffset: be, setScissorTest: Qt, activeTexture: X, bindTexture: B, unbindTexture: mt, compressedTexImage2D: bt, compressedTexImage3D: Pt, texImage2D: fe, texImage3D: ge, updateUBOMapping: Be, uniformBlockBinding: ye, texStorage2D: qe, texStorage3D: Yt, texSubImage2D: Ct, texSubImage3D: pe, compressedTexSubImage2D: te, compressedTexSubImage3D: oe, scissor: he, viewport: ue, reset: pn } } function iO(r, t, e, n, a, o, f) { const h = t.has("WEBGL_multisampled_render_to_texture") ? t.get("WEBGL_multisampled_render_to_texture") : null, m = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), g = new zt, _ = new WeakMap; let x; const S = new WeakMap; let M = !1; try { M = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null } catch { } function A(X, B) { return M ? new OffscreenCanvas(X, B) : Bp("canvas") } function C(X, B, mt) { let bt = 1; const Pt = Qt(X); if ((Pt.width > mt || Pt.height > mt) && (bt = mt / Math.max(Pt.width, Pt.height)), bt < 1) if (typeof HTMLImageElement < "u" && X instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && X instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && X instanceof ImageBitmap || typeof VideoFrame < "u" && X instanceof VideoFrame) { const Ct = Math.floor(bt * Pt.width), pe = Math.floor(bt * Pt.height); x === void 0 && (x = A(Ct, pe)); const te = B ? A(Ct, pe) : x; return te.width = Ct, te.height = pe, te.getContext("2d").drawImage(X, 0, 0, Ct, pe), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + Pt.width + "x" + Pt.height + ") to (" + Ct + "x" + pe + ")."), te } else return "data" in X && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + Pt.width + "x" + Pt.height + ")."), X; return X } function R(X) { return X.generateMipmaps } function T(X) { r.generateMipmap(X) } function D(X) { return X.isWebGLCubeRenderTarget ? r.TEXTURE_CUBE_MAP : X.isWebGL3DRenderTarget ? r.TEXTURE_3D : X.isWebGLArrayRenderTarget || X.isCompressedArrayTexture ? r.TEXTURE_2D_ARRAY : r.TEXTURE_2D } function N(X, B, mt, bt, Pt = !1) { if (X !== null) { if (r[X] !== void 0) return r[X]; console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + X + "'") } let Ct = B; if (B === r.RED && (mt === r.FLOAT && (Ct = r.R32F), mt === r.HALF_FLOAT && (Ct = r.R16F), mt === r.UNSIGNED_BYTE && (Ct = r.R8)), B === r.RED_INTEGER && (mt === r.UNSIGNED_BYTE && (Ct = r.R8UI), mt === r.UNSIGNED_SHORT && (Ct = r.R16UI), mt === r.UNSIGNED_INT && (Ct = r.R32UI), mt === r.BYTE && (Ct = r.R8I), mt === r.SHORT && (Ct = r.R16I), mt === r.INT && (Ct = r.R32I)), B === r.RG && (mt === r.FLOAT && (Ct = r.RG32F), mt === r.HALF_FLOAT && (Ct = r.RG16F), mt === r.UNSIGNED_BYTE && (Ct = r.RG8)), B === r.RG_INTEGER && (mt === r.UNSIGNED_BYTE && (Ct = r.RG8UI), mt === r.UNSIGNED_SHORT && (Ct = r.RG16UI), mt === r.UNSIGNED_INT && (Ct = r.RG32UI), mt === r.BYTE && (Ct = r.RG8I), mt === r.SHORT && (Ct = r.RG16I), mt === r.INT && (Ct = r.RG32I)), B === r.RGB_INTEGER && (mt === r.UNSIGNED_BYTE && (Ct = r.RGB8UI), mt === r.UNSIGNED_SHORT && (Ct = r.RGB16UI), mt === r.UNSIGNED_INT && (Ct = r.RGB32UI), mt === r.BYTE && (Ct = r.RGB8I), mt === r.SHORT && (Ct = r.RGB16I), mt === r.INT && (Ct = r.RGB32I)), B === r.RGBA_INTEGER && (mt === r.UNSIGNED_BYTE && (Ct = r.RGBA8UI), mt === r.UNSIGNED_SHORT && (Ct = r.RGBA16UI), mt === r.UNSIGNED_INT && (Ct = r.RGBA32UI), mt === r.BYTE && (Ct = r.RGBA8I), mt === r.SHORT && (Ct = r.RGBA16I), mt === r.INT && (Ct = r.RGBA32I)), B === r.RGB && mt === r.UNSIGNED_INT_5_9_9_9_REV && (Ct = r.RGB9_E5), B === r.RGBA) { const pe = Pt ? Op : dn.getTransfer(bt); mt === r.FLOAT && (Ct = r.RGBA32F), mt === r.HALF_FLOAT && (Ct = r.RGBA16F), mt === r.UNSIGNED_BYTE && (Ct = pe === Nn ? r.SRGB8_ALPHA8 : r.RGBA8), mt === r.UNSIGNED_SHORT_4_4_4_4 && (Ct = r.RGBA4), mt === r.UNSIGNED_SHORT_5_5_5_1 && (Ct = r.RGB5_A1) } return (Ct === r.R16F || Ct === r.R32F || Ct === r.RG16F || Ct === r.RG32F || Ct === r.RGBA16F || Ct === r.RGBA32F) && t.get("EXT_color_buffer_float"), Ct } function U(X, B) { let mt; return X ? B === null || B === So || B === Yc ? mt = r.DEPTH24_STENCIL8 : B === us ? mt = r.DEPTH32F_STENCIL8 : B === Ah && (mt = r.DEPTH24_STENCIL8, console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")) : B === null || B === So || B === Yc ? mt = r.DEPTH_COMPONENT24 : B === us ? mt = r.DEPTH_COMPONENT32F : B === Ah && (mt = r.DEPTH_COMPONENT16), mt } function V(X, B) { return R(X) === !0 || X.isFramebufferTexture && X.minFilter !== ua && X.minFilter !== Li ? Math.log2(Math.max(B.width, B.height)) + 1 : X.mipmaps !== void 0 && X.mipmaps.length > 0 ? X.mipmaps.length : X.isCompressedTexture && Array.isArray(X.image) ? B.mipmaps.length : 1 } function I(X) { const B = X.target; B.removeEventListener("dispose", I), q(B), B.isVideoTexture && _.delete(B) } function G(X) { const B = X.target; B.removeEventListener("dispose", G), L(B) } function q(X) { const B = n.get(X); if (B.__webglInit === void 0) return; const mt = X.source, bt = S.get(mt); if (bt) { const Pt = bt[B.__cacheKey]; Pt.usedTimes--, Pt.usedTimes === 0 && z(X), Object.keys(bt).length === 0 && S.delete(mt) } n.remove(X) } function z(X) { const B = n.get(X); r.deleteTexture(B.__webglTexture); const mt = X.source, bt = S.get(mt); delete bt[B.__cacheKey], f.memory.textures-- } function L(X) { const B = n.get(X); if (X.depthTexture && (X.depthTexture.dispose(), n.remove(X.depthTexture)), X.isWebGLCubeRenderTarget) for (let bt = 0; bt < 6; bt++) { if (Array.isArray(B.__webglFramebuffer[bt])) for (let Pt = 0; Pt < B.__webglFramebuffer[bt].length; Pt++)r.deleteFramebuffer(B.__webglFramebuffer[bt][Pt]); else r.deleteFramebuffer(B.__webglFramebuffer[bt]); B.__webglDepthbuffer && r.deleteRenderbuffer(B.__webglDepthbuffer[bt]) } else { if (Array.isArray(B.__webglFramebuffer)) for (let bt = 0; bt < B.__webglFramebuffer.length; bt++)r.deleteFramebuffer(B.__webglFramebuffer[bt]); else r.deleteFramebuffer(B.__webglFramebuffer); if (B.__webglDepthbuffer && r.deleteRenderbuffer(B.__webglDepthbuffer), B.__webglMultisampledFramebuffer && r.deleteFramebuffer(B.__webglMultisampledFramebuffer), B.__webglColorRenderbuffer) for (let bt = 0; bt < B.__webglColorRenderbuffer.length; bt++)B.__webglColorRenderbuffer[bt] && r.deleteRenderbuffer(B.__webglColorRenderbuffer[bt]); B.__webglDepthRenderbuffer && r.deleteRenderbuffer(B.__webglDepthRenderbuffer) } const mt = X.textures; for (let bt = 0, Pt = mt.length; bt < Pt; bt++) { const Ct = n.get(mt[bt]); Ct.__webglTexture && (r.deleteTexture(Ct.__webglTexture), f.memory.textures--), n.remove(mt[bt]) } n.remove(X) } let j = 0; function dt() { j = 0 } function tt() { const X = j; return X >= a.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + X + " texture units while this GPU supports only " + a.maxTextures), j += 1, X } function ct(X) { const B = []; return B.push(X.wrapS), B.push(X.wrapT), B.push(X.wrapR || 0), B.push(X.magFilter), B.push(X.minFilter), B.push(X.anisotropy), B.push(X.internalFormat), B.push(X.format), B.push(X.type), B.push(X.generateMipmaps), B.push(X.premultiplyAlpha), B.push(X.flipY), B.push(X.unpackAlignment), B.push(X.colorSpace), B.join() } function xt(X, B) { const mt = n.get(X); if (X.isVideoTexture && jt(X), X.isRenderTargetTexture === !1 && X.version > 0 && mt.__version !== X.version) { const bt = X.image; if (bt === null) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found."); else if (bt.complete === !1) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete"); else { $(mt, X, B); return } } e.bindTexture(r.TEXTURE_2D, mt.__webglTexture, r.TEXTURE0 + B) } function K(X, B) { const mt = n.get(X); if (X.version > 0 && mt.__version !== X.version) { $(mt, X, B); return } e.bindTexture(r.TEXTURE_2D_ARRAY, mt.__webglTexture, r.TEXTURE0 + B) } function ft(X, B) { const mt = n.get(X); if (X.version > 0 && mt.__version !== X.version) { $(mt, X, B); return } e.bindTexture(r.TEXTURE_3D, mt.__webglTexture, r.TEXTURE0 + B) } function nt(X, B) { const mt = n.get(X); if (X.version > 0 && mt.__version !== X.version) { Tt(mt, X, B); return } e.bindTexture(r.TEXTURE_CUBE_MAP, mt.__webglTexture, r.TEXTURE0 + B) } const Et = { [Cp]: r.REPEAT, [Zs]: r.CLAMP_TO_EDGE, [Dp]: r.MIRRORED_REPEAT }, Y = { [ua]: r.NEAREST, [yx]: r.NEAREST_MIPMAP_NEAREST, [_h]: r.NEAREST_MIPMAP_LINEAR, [Li]: r.LINEAR, [gp]: r.LINEAR_MIPMAP_NEAREST, [bl]: r.LINEAR_MIPMAP_LINEAR }, it = { [Zb]: r.NEVER, [eE]: r.ALWAYS, [Qb]: r.LESS, [Cx]: r.LEQUAL, [Kb]: r.EQUAL, [tE]: r.GEQUAL, [Jb]: r.GREATER, [$b]: r.NOTEQUAL }; function Dt(X, B) { if (B.type === us && t.has("OES_texture_float_linear") === !1 && (B.magFilter === Li || B.magFilter === gp || B.magFilter === _h || B.magFilter === bl || B.minFilter === Li || B.minFilter === gp || B.minFilter === _h || B.minFilter === bl) && console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."), r.texParameteri(X, r.TEXTURE_WRAP_S, Et[B.wrapS]), r.texParameteri(X, r.TEXTURE_WRAP_T, Et[B.wrapT]), (X === r.TEXTURE_3D || X === r.TEXTURE_2D_ARRAY) && r.texParameteri(X, r.TEXTURE_WRAP_R, Et[B.wrapR]), r.texParameteri(X, r.TEXTURE_MAG_FILTER, Y[B.magFilter]), r.texParameteri(X, r.TEXTURE_MIN_FILTER, Y[B.minFilter]), B.compareFunction && (r.texParameteri(X, r.TEXTURE_COMPARE_MODE, r.COMPARE_REF_TO_TEXTURE), r.texParameteri(X, r.TEXTURE_COMPARE_FUNC, it[B.compareFunction])), t.has("EXT_texture_filter_anisotropic") === !0) { if (B.magFilter === ua || B.minFilter !== _h && B.minFilter !== bl || B.type === us && t.has("OES_texture_float_linear") === !1) return; if (B.anisotropy > 1 || n.get(B).__currentAnisotropy) { const mt = t.get("EXT_texture_filter_anisotropic"); r.texParameterf(X, mt.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(B.anisotropy, a.getMaxAnisotropy())), n.get(B).__currentAnisotropy = B.anisotropy } } } function Xt(X, B) { let mt = !1; X.__webglInit === void 0 && (X.__webglInit = !0, B.addEventListener("dispose", I)); const bt = B.source; let Pt = S.get(bt); Pt === void 0 && (Pt = {}, S.set(bt, Pt)); const Ct = ct(B); if (Ct !== X.__cacheKey) { Pt[Ct] === void 0 && (Pt[Ct] = { texture: r.createTexture(), usedTimes: 0 }, f.memory.textures++, mt = !0), Pt[Ct].usedTimes++; const pe = Pt[X.__cacheKey]; pe !== void 0 && (Pt[X.__cacheKey].usedTimes--, pe.usedTimes === 0 && z(B)), X.__cacheKey = Ct, X.__webglTexture = Pt[Ct].texture } return mt } function $(X, B, mt) { let bt = r.TEXTURE_2D; (B.isDataArrayTexture || B.isCompressedArrayTexture) && (bt = r.TEXTURE_2D_ARRAY), B.isData3DTexture && (bt = r.TEXTURE_3D); const Pt = Xt(X, B), Ct = B.source; e.bindTexture(bt, X.__webglTexture, r.TEXTURE0 + mt); const pe = n.get(Ct); if (Ct.version !== pe.__version || Pt === !0) { e.activeTexture(r.TEXTURE0 + mt); const te = dn.getPrimaries(dn.workingColorSpace), oe = B.colorSpace === po ? null : dn.getPrimaries(B.colorSpace), qe = B.colorSpace === po || te === oe ? r.NONE : r.BROWSER_DEFAULT_WEBGL; r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, B.flipY), r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, B.premultiplyAlpha), r.pixelStorei(r.UNPACK_ALIGNMENT, B.unpackAlignment), r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, qe); let Yt = C(B.image, !1, a.maxTextureSize); Yt = be(B, Yt); const fe = o.convert(B.format, B.colorSpace), ge = o.convert(B.type); let he = N(B.internalFormat, fe, ge, B.colorSpace, B.isVideoTexture); Dt(bt, B); let ue; const Be = B.mipmaps, ye = B.isVideoTexture !== !0, pn = pe.__version === void 0 || Pt === !0, at = Ct.dataReady, ie = V(B, Yt); if (B.isDepthTexture) he = U(B.format === Wc, B.type), pn && (ye ? e.texStorage2D(r.TEXTURE_2D, 1, he, Yt.width, Yt.height) : e.texImage2D(r.TEXTURE_2D, 0, he, Yt.width, Yt.height, 0, fe, ge, null)); else if (B.isDataTexture) if (Be.length > 0) { ye && pn && e.texStorage2D(r.TEXTURE_2D, ie, he, Be[0].width, Be[0].height); for (let Mt = 0, Nt = Be.length; Mt < Nt; Mt++)ue = Be[Mt], ye ? at && e.texSubImage2D(r.TEXTURE_2D, Mt, 0, 0, ue.width, ue.height, fe, ge, ue.data) : e.texImage2D(r.TEXTURE_2D, Mt, he, ue.width, ue.height, 0, fe, ge, ue.data); B.generateMipmaps = !1 } else ye ? (pn && e.texStorage2D(r.TEXTURE_2D, ie, he, Yt.width, Yt.height), at && e.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, Yt.width, Yt.height, fe, ge, Yt.data)) : e.texImage2D(r.TEXTURE_2D, 0, he, Yt.width, Yt.height, 0, fe, ge, Yt.data); else if (B.isCompressedTexture) if (B.isCompressedArrayTexture) { ye && pn && e.texStorage3D(r.TEXTURE_2D_ARRAY, ie, he, Be[0].width, Be[0].height, Yt.depth); for (let Mt = 0, Nt = Be.length; Mt < Nt; Mt++)if (ue = Be[Mt], B.format !== Ta) if (fe !== null) if (ye) { if (at) if (B.layerUpdates.size > 0) { const $t = lx(ue.width, ue.height, B.format, B.type); for (const ne of B.layerUpdates) { const we = ue.data.subarray(ne * $t / ue.data.BYTES_PER_ELEMENT, (ne + 1) * $t / ue.data.BYTES_PER_ELEMENT); e.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY, Mt, 0, 0, ne, ue.width, ue.height, 1, fe, we) } B.clearLayerUpdates() } else e.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY, Mt, 0, 0, 0, ue.width, ue.height, Yt.depth, fe, ue.data) } else e.compressedTexImage3D(r.TEXTURE_2D_ARRAY, Mt, he, ue.width, ue.height, Yt.depth, 0, ue.data, 0, 0); else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"); else ye ? at && e.texSubImage3D(r.TEXTURE_2D_ARRAY, Mt, 0, 0, 0, ue.width, ue.height, Yt.depth, fe, ge, ue.data) : e.texImage3D(r.TEXTURE_2D_ARRAY, Mt, he, ue.width, ue.height, Yt.depth, 0, fe, ge, ue.data) } else { ye && pn && e.texStorage2D(r.TEXTURE_2D, ie, he, Be[0].width, Be[0].height); for (let Mt = 0, Nt = Be.length; Mt < Nt; Mt++)ue = Be[Mt], B.format !== Ta ? fe !== null ? ye ? at && e.compressedTexSubImage2D(r.TEXTURE_2D, Mt, 0, 0, ue.width, ue.height, fe, ue.data) : e.compressedTexImage2D(r.TEXTURE_2D, Mt, he, ue.width, ue.height, 0, ue.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : ye ? at && e.texSubImage2D(r.TEXTURE_2D, Mt, 0, 0, ue.width, ue.height, fe, ge, ue.data) : e.texImage2D(r.TEXTURE_2D, Mt, he, ue.width, ue.height, 0, fe, ge, ue.data) } else if (B.isDataArrayTexture) if (ye) { if (pn && e.texStorage3D(r.TEXTURE_2D_ARRAY, ie, he, Yt.width, Yt.height, Yt.depth), at) if (B.layerUpdates.size > 0) { const Mt = lx(Yt.width, Yt.height, B.format, B.type); for (const Nt of B.layerUpdates) { const $t = Yt.data.subarray(Nt * Mt / Yt.data.BYTES_PER_ELEMENT, (Nt + 1) * Mt / Yt.data.BYTES_PER_ELEMENT); e.texSubImage3D(r.TEXTURE_2D_ARRAY, 0, 0, 0, Nt, Yt.width, Yt.height, 1, fe, ge, $t) } B.clearLayerUpdates() } else e.texSubImage3D(r.TEXTURE_2D_ARRAY, 0, 0, 0, 0, Yt.width, Yt.height, Yt.depth, fe, ge, Yt.data) } else e.texImage3D(r.TEXTURE_2D_ARRAY, 0, he, Yt.width, Yt.height, Yt.depth, 0, fe, ge, Yt.data); else if (B.isData3DTexture) ye ? (pn && e.texStorage3D(r.TEXTURE_3D, ie, he, Yt.width, Yt.height, Yt.depth), at && e.texSubImage3D(r.TEXTURE_3D, 0, 0, 0, 0, Yt.width, Yt.height, Yt.depth, fe, ge, Yt.data)) : e.texImage3D(r.TEXTURE_3D, 0, he, Yt.width, Yt.height, Yt.depth, 0, fe, ge, Yt.data); else if (B.isFramebufferTexture) { if (pn) if (ye) e.texStorage2D(r.TEXTURE_2D, ie, he, Yt.width, Yt.height); else { let Mt = Yt.width, Nt = Yt.height; for (let $t = 0; $t < ie; $t++)e.texImage2D(r.TEXTURE_2D, $t, he, Mt, Nt, 0, fe, ge, null), Mt >>= 1, Nt >>= 1 } } else if (Be.length > 0) { if (ye && pn) { const Mt = Qt(Be[0]); e.texStorage2D(r.TEXTURE_2D, ie, he, Mt.width, Mt.height) } for (let Mt = 0, Nt = Be.length; Mt < Nt; Mt++)ue = Be[Mt], ye ? at && e.texSubImage2D(r.TEXTURE_2D, Mt, 0, 0, fe, ge, ue) : e.texImage2D(r.TEXTURE_2D, Mt, he, fe, ge, ue); B.generateMipmaps = !1 } else if (ye) { if (pn) { const Mt = Qt(Yt); e.texStorage2D(r.TEXTURE_2D, ie, he, Mt.width, Mt.height) } at && e.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, fe, ge, Yt) } else e.texImage2D(r.TEXTURE_2D, 0, he, fe, ge, Yt); R(B) && T(bt), pe.__version = Ct.version, B.onUpdate && B.onUpdate(B) } X.__version = B.version } function Tt(X, B, mt) { if (B.image.length !== 6) return; const bt = Xt(X, B), Pt = B.source; e.bindTexture(r.TEXTURE_CUBE_MAP, X.__webglTexture, r.TEXTURE0 + mt); const Ct = n.get(Pt); if (Pt.version !== Ct.__version || bt === !0) { e.activeTexture(r.TEXTURE0 + mt); const pe = dn.getPrimaries(dn.workingColorSpace), te = B.colorSpace === po ? null : dn.getPrimaries(B.colorSpace), oe = B.colorSpace === po || pe === te ? r.NONE : r.BROWSER_DEFAULT_WEBGL; r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, B.flipY), r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, B.premultiplyAlpha), r.pixelStorei(r.UNPACK_ALIGNMENT, B.unpackAlignment), r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, oe); const qe = B.isCompressedTexture || B.image[0].isCompressedTexture, Yt = B.image[0] && B.image[0].isDataTexture, fe = []; for (let Nt = 0; Nt < 6; Nt++)!qe && !Yt ? fe[Nt] = C(B.image[Nt], !0, a.maxCubemapSize) : fe[Nt] = Yt ? B.image[Nt].image : B.image[Nt], fe[Nt] = be(B, fe[Nt]); const ge = fe[0], he = o.convert(B.format, B.colorSpace), ue = o.convert(B.type), Be = N(B.internalFormat, he, ue, B.colorSpace), ye = B.isVideoTexture !== !0, pn = Ct.__version === void 0 || bt === !0, at = Pt.dataReady; let ie = V(B, ge); Dt(r.TEXTURE_CUBE_MAP, B); let Mt; if (qe) { ye && pn && e.texStorage2D(r.TEXTURE_CUBE_MAP, ie, Be, ge.width, ge.height); for (let Nt = 0; Nt < 6; Nt++) { Mt = fe[Nt].mipmaps; for (let $t = 0; $t < Mt.length; $t++) { const ne = Mt[$t]; B.format !== Ta ? he !== null ? ye ? at && e.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, $t, 0, 0, ne.width, ne.height, he, ne.data) : e.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, $t, Be, ne.width, ne.height, 0, ne.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : ye ? at && e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, $t, 0, 0, ne.width, ne.height, he, ue, ne.data) : e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, $t, Be, ne.width, ne.height, 0, he, ue, ne.data) } } } else { if (Mt = B.mipmaps, ye && pn) { Mt.length > 0 && ie++; const Nt = Qt(fe[0]); e.texStorage2D(r.TEXTURE_CUBE_MAP, ie, Be, Nt.width, Nt.height) } for (let Nt = 0; Nt < 6; Nt++)if (Yt) { ye ? at && e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, 0, 0, 0, fe[Nt].width, fe[Nt].height, he, ue, fe[Nt].data) : e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, 0, Be, fe[Nt].width, fe[Nt].height, 0, he, ue, fe[Nt].data); for (let $t = 0; $t < Mt.length; $t++) { const we = Mt[$t].image[Nt].image; ye ? at && e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, $t + 1, 0, 0, we.width, we.height, he, ue, we.data) : e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, $t + 1, Be, we.width, we.height, 0, he, ue, we.data) } } else { ye ? at && e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, 0, 0, 0, he, ue, fe[Nt]) : e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, 0, Be, he, ue, fe[Nt]); for (let $t = 0; $t < Mt.length; $t++) { const ne = Mt[$t]; ye ? at && e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, $t + 1, 0, 0, he, ue, ne.image[Nt]) : e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Nt, $t + 1, Be, he, ue, ne.image[Nt]) } } } R(B) && T(r.TEXTURE_CUBE_MAP), Ct.__version = Pt.version, B.onUpdate && B.onUpdate(B) } X.__version = B.version } function Lt(X, B, mt, bt, Pt, Ct) { const pe = o.convert(mt.format, mt.colorSpace), te = o.convert(mt.type), oe = N(mt.internalFormat, pe, te, mt.colorSpace), qe = n.get(B), Yt = n.get(mt); if (Yt.__renderTarget = B, !qe.__hasExternalTextures) { const fe = Math.max(1, B.width >> Ct), ge = Math.max(1, B.height >> Ct); Pt === r.TEXTURE_3D || Pt === r.TEXTURE_2D_ARRAY ? e.texImage3D(Pt, Ct, oe, fe, ge, B.depth, 0, pe, te, null) : e.texImage2D(Pt, Ct, oe, fe, ge, 0, pe, te, null) } e.bindFramebuffer(r.FRAMEBUFFER, X), ee(B) ? h.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, bt, Pt, Yt.__webglTexture, 0, Ht(B)) : (Pt === r.TEXTURE_2D || Pt >= r.TEXTURE_CUBE_MAP_POSITIVE_X && Pt <= r.TEXTURE_CUBE_MAP_NEGATIVE_Z) && r.framebufferTexture2D(r.FRAMEBUFFER, bt, Pt, Yt.__webglTexture, Ct), e.bindFramebuffer(r.FRAMEBUFFER, null) } function Vt(X, B, mt) { if (r.bindRenderbuffer(r.RENDERBUFFER, X), B.depthBuffer) { const bt = B.depthTexture, Pt = bt && bt.isDepthTexture ? bt.type : null, Ct = U(B.stencilBuffer, Pt), pe = B.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, te = Ht(B); ee(B) ? h.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, te, Ct, B.width, B.height) : mt ? r.renderbufferStorageMultisample(r.RENDERBUFFER, te, Ct, B.width, B.height) : r.renderbufferStorage(r.RENDERBUFFER, Ct, B.width, B.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, pe, r.RENDERBUFFER, X) } else { const bt = B.textures; for (let Pt = 0; Pt < bt.length; Pt++) { const Ct = bt[Pt], pe = o.convert(Ct.format, Ct.colorSpace), te = o.convert(Ct.type), oe = N(Ct.internalFormat, pe, te, Ct.colorSpace), qe = Ht(B); mt && ee(B) === !1 ? r.renderbufferStorageMultisample(r.RENDERBUFFER, qe, oe, B.width, B.height) : ee(B) ? h.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, qe, oe, B.width, B.height) : r.renderbufferStorage(r.RENDERBUFFER, oe, B.width, B.height) } } r.bindRenderbuffer(r.RENDERBUFFER, null) } function kt(X, B) { if (B && B.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported"); if (e.bindFramebuffer(r.FRAMEBUFFER, X), !(B.depthTexture && B.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture"); const bt = n.get(B.depthTexture); bt.__renderTarget = B, (!bt.__webglTexture || B.depthTexture.image.width !== B.width || B.depthTexture.image.height !== B.height) && (B.depthTexture.image.width = B.width, B.depthTexture.image.height = B.height, B.depthTexture.needsUpdate = !0), xt(B.depthTexture, 0); const Pt = bt.__webglTexture, Ct = Ht(B); if (B.depthTexture.format === Fc) ee(B) ? h.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, Pt, 0, Ct) : r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, Pt, 0); else if (B.depthTexture.format === Wc) ee(B) ? h.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, Pt, 0, Ct) : r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, Pt, 0); else throw new Error("Unknown depthTexture format") } function Me(X) { const B = n.get(X), mt = X.isWebGLCubeRenderTarget === !0; if (B.__boundDepthTexture !== X.depthTexture) { const bt = X.depthTexture; if (B.__depthDisposeCallback && B.__depthDisposeCallback(), bt) { const Pt = () => { delete B.__boundDepthTexture, delete B.__depthDisposeCallback, bt.removeEventListener("dispose", Pt) }; bt.addEventListener("dispose", Pt), B.__depthDisposeCallback = Pt } B.__boundDepthTexture = bt } if (X.depthTexture && !B.__autoAllocateDepthBuffer) { if (mt) throw new Error("target.depthTexture not supported in Cube render targets"); kt(B.__webglFramebuffer, X) } else if (mt) { B.__webglDepthbuffer = []; for (let bt = 0; bt < 6; bt++)if (e.bindFramebuffer(r.FRAMEBUFFER, B.__webglFramebuffer[bt]), B.__webglDepthbuffer[bt] === void 0) B.__webglDepthbuffer[bt] = r.createRenderbuffer(), Vt(B.__webglDepthbuffer[bt], X, !1); else { const Pt = X.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, Ct = B.__webglDepthbuffer[bt]; r.bindRenderbuffer(r.RENDERBUFFER, Ct), r.framebufferRenderbuffer(r.FRAMEBUFFER, Pt, r.RENDERBUFFER, Ct) } } else if (e.bindFramebuffer(r.FRAMEBUFFER, B.__webglFramebuffer), B.__webglDepthbuffer === void 0) B.__webglDepthbuffer = r.createRenderbuffer(), Vt(B.__webglDepthbuffer, X, !1); else { const bt = X.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, Pt = B.__webglDepthbuffer; r.bindRenderbuffer(r.RENDERBUFFER, Pt), r.framebufferRenderbuffer(r.FRAMEBUFFER, bt, r.RENDERBUFFER, Pt) } e.bindFramebuffer(r.FRAMEBUFFER, null) } function Jt(X, B, mt) { const bt = n.get(X); B !== void 0 && Lt(bt.__webglFramebuffer, X, X.texture, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, 0), mt !== void 0 && Me(X) } function Le(X) { const B = X.texture, mt = n.get(X), bt = n.get(B); X.addEventListener("dispose", G); const Pt = X.textures, Ct = X.isWebGLCubeRenderTarget === !0, pe = Pt.length > 1; if (pe || (bt.__webglTexture === void 0 && (bt.__webglTexture = r.createTexture()), bt.__version = B.version, f.memory.textures++), Ct) { mt.__webglFramebuffer = []; for (let te = 0; te < 6; te++)if (B.mipmaps && B.mipmaps.length > 0) { mt.__webglFramebuffer[te] = []; for (let oe = 0; oe < B.mipmaps.length; oe++)mt.__webglFramebuffer[te][oe] = r.createFramebuffer() } else mt.__webglFramebuffer[te] = r.createFramebuffer() } else { if (B.mipmaps && B.mipmaps.length > 0) { mt.__webglFramebuffer = []; for (let te = 0; te < B.mipmaps.length; te++)mt.__webglFramebuffer[te] = r.createFramebuffer() } else mt.__webglFramebuffer = r.createFramebuffer(); if (pe) for (let te = 0, oe = Pt.length; te < oe; te++) { const qe = n.get(Pt[te]); qe.__webglTexture === void 0 && (qe.__webglTexture = r.createTexture(), f.memory.textures++) } if (X.samples > 0 && ee(X) === !1) { mt.__webglMultisampledFramebuffer = r.createFramebuffer(), mt.__webglColorRenderbuffer = [], e.bindFramebuffer(r.FRAMEBUFFER, mt.__webglMultisampledFramebuffer); for (let te = 0; te < Pt.length; te++) { const oe = Pt[te]; mt.__webglColorRenderbuffer[te] = r.createRenderbuffer(), r.bindRenderbuffer(r.RENDERBUFFER, mt.__webglColorRenderbuffer[te]); const qe = o.convert(oe.format, oe.colorSpace), Yt = o.convert(oe.type), fe = N(oe.internalFormat, qe, Yt, oe.colorSpace, X.isXRRenderTarget === !0), ge = Ht(X); r.renderbufferStorageMultisample(r.RENDERBUFFER, ge, fe, X.width, X.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + te, r.RENDERBUFFER, mt.__webglColorRenderbuffer[te]) } r.bindRenderbuffer(r.RENDERBUFFER, null), X.depthBuffer && (mt.__webglDepthRenderbuffer = r.createRenderbuffer(), Vt(mt.__webglDepthRenderbuffer, X, !0)), e.bindFramebuffer(r.FRAMEBUFFER, null) } } if (Ct) { e.bindTexture(r.TEXTURE_CUBE_MAP, bt.__webglTexture), Dt(r.TEXTURE_CUBE_MAP, B); for (let te = 0; te < 6; te++)if (B.mipmaps && B.mipmaps.length > 0) for (let oe = 0; oe < B.mipmaps.length; oe++)Lt(mt.__webglFramebuffer[te][oe], X, B, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + te, oe); else Lt(mt.__webglFramebuffer[te], X, B, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + te, 0); R(B) && T(r.TEXTURE_CUBE_MAP), e.unbindTexture() } else if (pe) { for (let te = 0, oe = Pt.length; te < oe; te++) { const qe = Pt[te], Yt = n.get(qe); e.bindTexture(r.TEXTURE_2D, Yt.__webglTexture), Dt(r.TEXTURE_2D, qe), Lt(mt.__webglFramebuffer, X, qe, r.COLOR_ATTACHMENT0 + te, r.TEXTURE_2D, 0), R(qe) && T(r.TEXTURE_2D) } e.unbindTexture() } else { let te = r.TEXTURE_2D; if ((X.isWebGL3DRenderTarget || X.isWebGLArrayRenderTarget) && (te = X.isWebGL3DRenderTarget ? r.TEXTURE_3D : r.TEXTURE_2D_ARRAY), e.bindTexture(te, bt.__webglTexture), Dt(te, B), B.mipmaps && B.mipmaps.length > 0) for (let oe = 0; oe < B.mipmaps.length; oe++)Lt(mt.__webglFramebuffer[oe], X, B, r.COLOR_ATTACHMENT0, te, oe); else Lt(mt.__webglFramebuffer, X, B, r.COLOR_ATTACHMENT0, te, 0); R(B) && T(te), e.unbindTexture() } X.depthBuffer && Me(X) } function Bt(X) { const B = X.textures; for (let mt = 0, bt = B.length; mt < bt; mt++) { const Pt = B[mt]; if (R(Pt)) { const Ct = D(X), pe = n.get(Pt).__webglTexture; e.bindTexture(Ct, pe), T(Ct), e.unbindTexture() } } } const Ut = [], W = []; function de(X) { if (X.samples > 0) { if (ee(X) === !1) { const B = X.textures, mt = X.width, bt = X.height; let Pt = r.COLOR_BUFFER_BIT; const Ct = X.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, pe = n.get(X), te = B.length > 1; if (te) for (let oe = 0; oe < B.length; oe++)e.bindFramebuffer(r.FRAMEBUFFER, pe.__webglMultisampledFramebuffer), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + oe, r.RENDERBUFFER, null), e.bindFramebuffer(r.FRAMEBUFFER, pe.__webglFramebuffer), r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + oe, r.TEXTURE_2D, null, 0); e.bindFramebuffer(r.READ_FRAMEBUFFER, pe.__webglMultisampledFramebuffer), e.bindFramebuffer(r.DRAW_FRAMEBUFFER, pe.__webglFramebuffer); for (let oe = 0; oe < B.length; oe++) { if (X.resolveDepthBuffer && (X.depthBuffer && (Pt |= r.DEPTH_BUFFER_BIT), X.stencilBuffer && X.resolveStencilBuffer && (Pt |= r.STENCIL_BUFFER_BIT)), te) { r.framebufferRenderbuffer(r.READ_FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.RENDERBUFFER, pe.__webglColorRenderbuffer[oe]); const qe = n.get(B[oe]).__webglTexture; r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, qe, 0) } r.blitFramebuffer(0, 0, mt, bt, 0, 0, mt, bt, Pt, r.NEAREST), m === !0 && (Ut.length = 0, W.length = 0, Ut.push(r.COLOR_ATTACHMENT0 + oe), X.depthBuffer && X.resolveDepthBuffer === !1 && (Ut.push(Ct), W.push(Ct), r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER, W)), r.invalidateFramebuffer(r.READ_FRAMEBUFFER, Ut)) } if (e.bindFramebuffer(r.READ_FRAMEBUFFER, null), e.bindFramebuffer(r.DRAW_FRAMEBUFFER, null), te) for (let oe = 0; oe < B.length; oe++) { e.bindFramebuffer(r.FRAMEBUFFER, pe.__webglMultisampledFramebuffer), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + oe, r.RENDERBUFFER, pe.__webglColorRenderbuffer[oe]); const qe = n.get(B[oe]).__webglTexture; e.bindFramebuffer(r.FRAMEBUFFER, pe.__webglFramebuffer), r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + oe, r.TEXTURE_2D, qe, 0) } e.bindFramebuffer(r.DRAW_FRAMEBUFFER, pe.__webglMultisampledFramebuffer) } else if (X.depthBuffer && X.resolveDepthBuffer === !1 && m) { const B = X.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT; r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER, [B]) } } } function Ht(X) { return Math.min(a.maxSamples, X.samples) } function ee(X) { const B = n.get(X); return X.samples > 0 && t.has("WEBGL_multisampled_render_to_texture") === !0 && B.__useRenderToTexture !== !1 } function jt(X) { const B = f.render.frame; _.get(X) !== B && (_.set(X, B), X.update()) } function be(X, B) { const mt = X.colorSpace, bt = X.format, Pt = X.type; return X.isCompressedTexture === !0 || X.isVideoTexture === !0 || mt !== bu && mt !== po && (dn.getTransfer(mt) === Nn ? (bt !== Ta || Pt !== zr) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", mt)), B } function Qt(X) { return typeof HTMLImageElement < "u" && X instanceof HTMLImageElement ? (g.width = X.naturalWidth || X.width, g.height = X.naturalHeight || X.height) : typeof VideoFrame < "u" && X instanceof VideoFrame ? (g.width = X.displayWidth, g.height = X.displayHeight) : (g.width = X.width, g.height = X.height), g } this.allocateTextureUnit = tt, this.resetTextureUnits = dt, this.setTexture2D = xt, this.setTexture2DArray = K, this.setTexture3D = ft, this.setTextureCube = nt, this.rebindTextures = Jt, this.setupRenderTarget = Le, this.updateRenderTargetMipmap = Bt, this.updateMultisampleRenderTarget = de, this.setupDepthRenderbuffer = Me, this.setupFrameBufferTexture = Lt, this.useMultisampledRTT = ee } function fT(r, t) { function e(n, a = po) { let o; const f = dn.getTransfer(a); if (n === zr) return r.UNSIGNED_BYTE; if (n === Rv) return r.UNSIGNED_SHORT_4_4_4_4; if (n === wv) return r.UNSIGNED_SHORT_5_5_5_1; if (n === Sx) return r.UNSIGNED_INT_5_9_9_9_REV; if (n === _x) return r.BYTE; if (n === xx) return r.SHORT; if (n === Ah) return r.UNSIGNED_SHORT; if (n === Av) return r.INT; if (n === So) return r.UNSIGNED_INT; if (n === us) return r.FLOAT; if (n === zh) return r.HALF_FLOAT; if (n === Mx) return r.ALPHA; if (n === bx) return r.RGB; if (n === Ta) return r.RGBA; if (n === Ex) return r.LUMINANCE; if (n === Tx) return r.LUMINANCE_ALPHA; if (n === Fc) return r.DEPTH_COMPONENT; if (n === Wc) return r.DEPTH_STENCIL; if (n === Cv) return r.RED; if (n === Zp) return r.RED_INTEGER; if (n === Ax) return r.RG; if (n === Dv) return r.RG_INTEGER; if (n === Uv) return r.RGBA_INTEGER; if (n === vp || n === yp || n === _p || n === xp) if (f === Nn) if (o = t.get("WEBGL_compressed_texture_s3tc_srgb"), o !== null) { if (n === vp) return o.COMPRESSED_SRGB_S3TC_DXT1_EXT; if (n === yp) return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT; if (n === _p) return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT; if (n === xp) return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT } else return null; else if (o = t.get("WEBGL_compressed_texture_s3tc"), o !== null) { if (n === vp) return o.COMPRESSED_RGB_S3TC_DXT1_EXT; if (n === yp) return o.COMPRESSED_RGBA_S3TC_DXT1_EXT; if (n === _p) return o.COMPRESSED_RGBA_S3TC_DXT3_EXT; if (n === xp) return o.COMPRESSED_RGBA_S3TC_DXT5_EXT } else return null; if (n === q0 || n === Y0 || n === W0 || n === k0) if (o = t.get("WEBGL_compressed_texture_pvrtc"), o !== null) { if (n === q0) return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; if (n === Y0) return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; if (n === W0) return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; if (n === k0) return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG } else return null; if (n === j0 || n === Z0 || n === Q0) if (o = t.get("WEBGL_compressed_texture_etc"), o !== null) { if (n === j0 || n === Z0) return f === Nn ? o.COMPRESSED_SRGB8_ETC2 : o.COMPRESSED_RGB8_ETC2; if (n === Q0) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : o.COMPRESSED_RGBA8_ETC2_EAC } else return null; if (n === K0 || n === J0 || n === $0 || n === tv || n === ev || n === nv || n === iv || n === av || n === sv || n === rv || n === lv || n === ov || n === uv || n === cv) if (o = t.get("WEBGL_compressed_texture_astc"), o !== null) { if (n === K0) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : o.COMPRESSED_RGBA_ASTC_4x4_KHR; if (n === J0) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : o.COMPRESSED_RGBA_ASTC_5x4_KHR; if (n === $0) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : o.COMPRESSED_RGBA_ASTC_5x5_KHR; if (n === tv) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : o.COMPRESSED_RGBA_ASTC_6x5_KHR; if (n === ev) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : o.COMPRESSED_RGBA_ASTC_6x6_KHR; if (n === nv) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : o.COMPRESSED_RGBA_ASTC_8x5_KHR; if (n === iv) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : o.COMPRESSED_RGBA_ASTC_8x6_KHR; if (n === av) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : o.COMPRESSED_RGBA_ASTC_8x8_KHR; if (n === sv) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : o.COMPRESSED_RGBA_ASTC_10x5_KHR; if (n === rv) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : o.COMPRESSED_RGBA_ASTC_10x6_KHR; if (n === lv) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : o.COMPRESSED_RGBA_ASTC_10x8_KHR; if (n === ov) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : o.COMPRESSED_RGBA_ASTC_10x10_KHR; if (n === uv) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : o.COMPRESSED_RGBA_ASTC_12x10_KHR; if (n === cv) return f === Nn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : o.COMPRESSED_RGBA_ASTC_12x12_KHR } else return null; if (n === Sp || n === fv || n === hv) if (o = t.get("EXT_texture_compression_bptc"), o !== null) { if (n === Sp) return f === Nn ? o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : o.COMPRESSED_RGBA_BPTC_UNORM_EXT; if (n === fv) return o.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT; if (n === hv) return o.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT } else return null; if (n === Rx || n === dv || n === pv || n === mv) if (o = t.get("EXT_texture_compression_rgtc"), o !== null) { if (n === Sp) return o.COMPRESSED_RED_RGTC1_EXT; if (n === dv) return o.COMPRESSED_SIGNED_RED_RGTC1_EXT; if (n === pv) return o.COMPRESSED_RED_GREEN_RGTC2_EXT; if (n === mv) return o.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT } else return null; return n === Yc ? r.UNSIGNED_INT_24_8 : r[n] !== void 0 ? r[n] : null } return { convert: e } } const aO = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`, sO = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`; class rO { constructor() { this.texture = null, this.mesh = null, this.depthNear = 0, this.depthFar = 0 } init(t, e, n) { if (this.texture === null) { const a = new yi, o = t.properties.get(a); o.__webglTexture = e.texture, (e.depthNear !== n.depthNear || e.depthFar !== n.depthFar) && (this.depthNear = e.depthNear, this.depthFar = e.depthFar), this.texture = a } } getMesh(t) { if (this.texture !== null && this.mesh === null) { const e = t.cameras[0].viewport, n = new Br({ vertexShader: aO, fragmentShader: sO, uniforms: { depthColor: { value: this.texture }, depthWidth: { value: e.z }, depthHeight: { value: e.w } } }); this.mesh = new wi(new Ih(20, 20), n) } return this.mesh } reset() { this.texture = null, this.mesh = null } getDepthTexture() { return this.texture } } class lO extends wl { constructor(t, e) { super(); const n = this; let a = null, o = 1, f = null, h = "local-floor", m = 1, g = null, _ = null, x = null, S = null, M = null, A = null; const C = new rO, R = e.getContextAttributes(); let T = null, D = null; const N = [], U = [], V = new zt; let I = null; const G = new Ki; G.viewport = new yn; const q = new Ki; q.viewport = new yn; const z = [G, q], L = new tT; let j = null, dt = null; this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function ($) { let Tt = N[$]; return Tt === void 0 && (Tt = new C0, N[$] = Tt), Tt.getTargetRaySpace() }, this.getControllerGrip = function ($) { let Tt = N[$]; return Tt === void 0 && (Tt = new C0, N[$] = Tt), Tt.getGripSpace() }, this.getHand = function ($) { let Tt = N[$]; return Tt === void 0 && (Tt = new C0, N[$] = Tt), Tt.getHandSpace() }; function tt($) { const Tt = U.indexOf($.inputSource); if (Tt === -1) return; const Lt = N[Tt]; Lt !== void 0 && (Lt.update($.inputSource, $.frame, g || f), Lt.dispatchEvent({ type: $.type, data: $.inputSource })) } function ct() { a.removeEventListener("select", tt), a.removeEventListener("selectstart", tt), a.removeEventListener("selectend", tt), a.removeEventListener("squeeze", tt), a.removeEventListener("squeezestart", tt), a.removeEventListener("squeezeend", tt), a.removeEventListener("end", ct), a.removeEventListener("inputsourceschange", xt); for (let $ = 0; $ < N.length; $++) { const Tt = U[$]; Tt !== null && (U[$] = null, N[$].disconnect(Tt)) } j = null, dt = null, C.reset(), t.setRenderTarget(T), M = null, S = null, x = null, a = null, D = null, Xt.stop(), n.isPresenting = !1, t.setPixelRatio(I), t.setSize(V.width, V.height, !1), n.dispatchEvent({ type: "sessionend" }) } this.setFramebufferScaleFactor = function ($) { o = $, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.") }, this.setReferenceSpaceType = function ($) { h = $, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.") }, this.getReferenceSpace = function () { return g || f }, this.setReferenceSpace = function ($) { g = $ }, this.getBaseLayer = function () { return S !== null ? S : M }, this.getBinding = function () { return x }, this.getFrame = function () { return A }, this.getSession = function () { return a }, this.setSession = async function ($) { if (a = $, a !== null) { if (T = t.getRenderTarget(), a.addEventListener("select", tt), a.addEventListener("selectstart", tt), a.addEventListener("selectend", tt), a.addEventListener("squeeze", tt), a.addEventListener("squeezestart", tt), a.addEventListener("squeezeend", tt), a.addEventListener("end", ct), a.addEventListener("inputsourceschange", xt), R.xrCompatible !== !0 && await e.makeXRCompatible(), I = t.getPixelRatio(), t.getSize(V), typeof XRWebGLBinding < "u" && "createProjectionLayer" in XRWebGLBinding.prototype) { let Lt = null, Vt = null, kt = null; R.depth && (kt = R.stencil ? e.DEPTH24_STENCIL8 : e.DEPTH_COMPONENT24, Lt = R.stencil ? Wc : Fc, Vt = R.stencil ? Yc : So); const Me = { colorFormat: e.RGBA8, depthFormat: kt, scaleFactor: o }; x = new XRWebGLBinding(a, e), S = x.createProjectionLayer(Me), a.updateRenderState({ layers: [S] }), t.setPixelRatio(1), t.setSize(S.textureWidth, S.textureHeight, !1), D = new Rl(S.textureWidth, S.textureHeight, { format: Ta, type: zr, depthTexture: new Bx(S.textureWidth, S.textureHeight, Vt, void 0, void 0, void 0, void 0, void 0, void 0, Lt), stencilBuffer: R.stencil, colorSpace: t.outputColorSpace, samples: R.antialias ? 4 : 0, resolveDepthBuffer: S.ignoreDepthValues === !1, resolveStencilBuffer: S.ignoreDepthValues === !1 }) } else { const Lt = { antialias: R.antialias, alpha: !0, depth: R.depth, stencil: R.stencil, framebufferScaleFactor: o }; M = new XRWebGLLayer(a, e, Lt), a.updateRenderState({ baseLayer: M }), t.setPixelRatio(1), t.setSize(M.framebufferWidth, M.framebufferHeight, !1), D = new Rl(M.framebufferWidth, M.framebufferHeight, { format: Ta, type: zr, colorSpace: t.outputColorSpace, stencilBuffer: R.stencil, resolveDepthBuffer: M.ignoreDepthValues === !1, resolveStencilBuffer: M.ignoreDepthValues === !1 }) } D.isXRRenderTarget = !0, this.setFoveation(m), g = null, f = await a.requestReferenceSpace(h), Xt.setContext(a), Xt.start(), n.isPresenting = !0, n.dispatchEvent({ type: "sessionstart" }) } }, this.getEnvironmentBlendMode = function () { if (a !== null) return a.environmentBlendMode }, this.getDepthTexture = function () { return C.getDepthTexture() }; function xt($) { for (let Tt = 0; Tt < $.removed.length; Tt++) { const Lt = $.removed[Tt], Vt = U.indexOf(Lt); Vt >= 0 && (U[Vt] = null, N[Vt].disconnect(Lt)) } for (let Tt = 0; Tt < $.added.length; Tt++) { const Lt = $.added[Tt]; let Vt = U.indexOf(Lt); if (Vt === -1) { for (let Me = 0; Me < N.length; Me++)if (Me >= U.length) { U.push(Lt), Vt = Me; break } else if (U[Me] === null) { U[Me] = Lt, Vt = Me; break } if (Vt === -1) break } const kt = N[Vt]; kt && kt.connect(Lt) } } const K = new k, ft = new k; function nt($, Tt, Lt) { K.setFromMatrixPosition(Tt.matrixWorld), ft.setFromMatrixPosition(Lt.matrixWorld); const Vt = K.distanceTo(ft), kt = Tt.projectionMatrix.elements, Me = Lt.projectionMatrix.elements, Jt = kt[14] / (kt[10] - 1), Le = kt[14] / (kt[10] + 1), Bt = (kt[9] + 1) / kt[5], Ut = (kt[9] - 1) / kt[5], W = (kt[8] - 1) / kt[0], de = (Me[8] + 1) / Me[0], Ht = Jt * W, ee = Jt * de, jt = Vt / (-W + de), be = jt * -W; if (Tt.matrixWorld.decompose($.position, $.quaternion, $.scale), $.translateX(be), $.translateZ(jt), $.matrixWorld.compose($.position, $.quaternion, $.scale), $.matrixWorldInverse.copy($.matrixWorld).invert(), kt[10] === -1) $.projectionMatrix.copy(Tt.projectionMatrix), $.projectionMatrixInverse.copy(Tt.projectionMatrixInverse); else { const Qt = Jt + jt, X = Le + jt, B = Ht - be, mt = ee + (Vt - be), bt = Bt * Le / X * Qt, Pt = Ut * Le / X * Qt; $.projectionMatrix.makePerspective(B, mt, bt, Pt, Qt, X), $.projectionMatrixInverse.copy($.projectionMatrix).invert() } } function Et($, Tt) { Tt === null ? $.matrixWorld.copy($.matrix) : $.matrixWorld.multiplyMatrices(Tt.matrixWorld, $.matrix), $.matrixWorldInverse.copy($.matrixWorld).invert() } this.updateCamera = function ($) { if (a === null) return; let Tt = $.near, Lt = $.far; C.texture !== null && (C.depthNear > 0 && (Tt = C.depthNear), C.depthFar > 0 && (Lt = C.depthFar)), L.near = q.near = G.near = Tt, L.far = q.far = G.far = Lt, (j !== L.near || dt !== L.far) && (a.updateRenderState({ depthNear: L.near, depthFar: L.far }), j = L.near, dt = L.far), G.layers.mask = $.layers.mask | 2, q.layers.mask = $.layers.mask | 4, L.layers.mask = G.layers.mask | q.layers.mask; const Vt = $.parent, kt = L.cameras; Et(L, Vt); for (let Me = 0; Me < kt.length; Me++)Et(kt[Me], Vt); kt.length === 2 ? nt(L, G, q) : L.projectionMatrix.copy(G.projectionMatrix), Y($, L, Vt) }; function Y($, Tt, Lt) { Lt === null ? $.matrix.copy(Tt.matrixWorld) : ($.matrix.copy(Lt.matrixWorld), $.matrix.invert(), $.matrix.multiply(Tt.matrixWorld)), $.matrix.decompose($.position, $.quaternion, $.scale), $.updateMatrixWorld(!0), $.projectionMatrix.copy(Tt.projectionMatrix), $.projectionMatrixInverse.copy(Tt.projectionMatrixInverse), $.isPerspectiveCamera && ($.fov = Rh * 2 * Math.atan(1 / $.projectionMatrix.elements[5]), $.zoom = 1) } this.getCamera = function () { return L }, this.getFoveation = function () { if (!(S === null && M === null)) return m }, this.setFoveation = function ($) { m = $, S !== null && (S.fixedFoveation = $), M !== null && M.fixedFoveation !== void 0 && (M.fixedFoveation = $) }, this.hasDepthSensing = function () { return C.texture !== null }, this.getDepthSensingMesh = function () { return C.getMesh(L) }; let it = null; function Dt($, Tt) { if (_ = Tt.getViewerPose(g || f), A = Tt, _ !== null) { const Lt = _.views; M !== null && (t.setRenderTargetFramebuffer(D, M.framebuffer), t.setRenderTarget(D)); let Vt = !1; Lt.length !== L.cameras.length && (L.cameras.length = 0, Vt = !0); for (let Jt = 0; Jt < Lt.length; Jt++) { const Le = Lt[Jt]; let Bt = null; if (M !== null) Bt = M.getViewport(Le); else { const W = x.getViewSubImage(S, Le); Bt = W.viewport, Jt === 0 && (t.setRenderTargetTextures(D, W.colorTexture, S.ignoreDepthValues ? void 0 : W.depthStencilTexture), t.setRenderTarget(D)) } let Ut = z[Jt]; Ut === void 0 && (Ut = new Ki, Ut.layers.enable(Jt), Ut.viewport = new yn, z[Jt] = Ut), Ut.matrix.fromArray(Le.transform.matrix), Ut.matrix.decompose(Ut.position, Ut.quaternion, Ut.scale), Ut.projectionMatrix.fromArray(Le.projectionMatrix), Ut.projectionMatrixInverse.copy(Ut.projectionMatrix).invert(), Ut.viewport.set(Bt.x, Bt.y, Bt.width, Bt.height), Jt === 0 && (L.matrix.copy(Ut.matrix), L.matrix.decompose(L.position, L.quaternion, L.scale)), Vt === !0 && L.cameras.push(Ut) } const kt = a.enabledFeatures; if (kt && kt.includes("depth-sensing") && a.depthUsage == "gpu-optimized" && x) { const Jt = x.getDepthInformation(Lt[0]); Jt && Jt.isValid && Jt.texture && C.init(t, Jt, a.renderState) } } for (let Lt = 0; Lt < N.length; Lt++) { const Vt = U[Lt], kt = N[Lt]; Vt !== null && kt !== void 0 && kt.update(Vt, Tt, g || f) } it && it($, Tt), Tt.detectedPlanes && n.dispatchEvent({ type: "planesdetected", data: Tt }), A = null } const Xt = new rT; Xt.setAnimationLoop(Dt), this.setAnimationLoop = function ($) { it = $ }, this.dispose = function () { } } } const Dc = new Ds, oO = new Oe; function uO(r, t) { function e(R, T) { R.matrixAutoUpdate === !0 && R.updateMatrix(), T.value.copy(R.matrix) } function n(R, T) { T.color.getRGB(R.fogColor.value, rE(r)), T.isFog ? (R.fogNear.value = T.near, R.fogFar.value = T.far) : T.isFogExp2 && (R.fogDensity.value = T.density) } function a(R, T, D, N, U) { T.isMeshBasicMaterial || T.isMeshLambertMaterial ? o(R, T) : T.isMeshToonMaterial ? (o(R, T), x(R, T)) : T.isMeshPhongMaterial ? (o(R, T), _(R, T)) : T.isMeshStandardMaterial ? (o(R, T), S(R, T), T.isMeshPhysicalMaterial && M(R, T, U)) : T.isMeshMatcapMaterial ? (o(R, T), A(R, T)) : T.isMeshDepthMaterial ? o(R, T) : T.isMeshDistanceMaterial ? (o(R, T), C(R, T)) : T.isMeshNormalMaterial ? o(R, T) : T.isLineBasicMaterial ? (f(R, T), T.isLineDashedMaterial && h(R, T)) : T.isPointsMaterial ? m(R, T, D, N) : T.isSpriteMaterial ? g(R, T) : T.isShadowMaterial ? (R.color.value.copy(T.color), R.opacity.value = T.opacity) : T.isShaderMaterial && (T.uniformsNeedUpdate = !1) } function o(R, T) { R.opacity.value = T.opacity, T.color && R.diffuse.value.copy(T.color), T.emissive && R.emissive.value.copy(T.emissive).multiplyScalar(T.emissiveIntensity), T.map && (R.map.value = T.map, e(T.map, R.mapTransform)), T.alphaMap && (R.alphaMap.value = T.alphaMap, e(T.alphaMap, R.alphaMapTransform)), T.bumpMap && (R.bumpMap.value = T.bumpMap, e(T.bumpMap, R.bumpMapTransform), R.bumpScale.value = T.bumpScale, T.side === Va && (R.bumpScale.value *= -1)), T.normalMap && (R.normalMap.value = T.normalMap, e(T.normalMap, R.normalMapTransform), R.normalScale.value.copy(T.normalScale), T.side === Va && R.normalScale.value.negate()), T.displacementMap && (R.displacementMap.value = T.displacementMap, e(T.displacementMap, R.displacementMapTransform), R.displacementScale.value = T.displacementScale, R.displacementBias.value = T.displacementBias), T.emissiveMap && (R.emissiveMap.value = T.emissiveMap, e(T.emissiveMap, R.emissiveMapTransform)), T.specularMap && (R.specularMap.value = T.specularMap, e(T.specularMap, R.specularMapTransform)), T.alphaTest > 0 && (R.alphaTest.value = T.alphaTest); const D = t.get(T), N = D.envMap, U = D.envMapRotation; N && (R.envMap.value = N, Dc.copy(U), Dc.x *= -1, Dc.y *= -1, Dc.z *= -1, N.isCubeTexture && N.isRenderTargetTexture === !1 && (Dc.y *= -1, Dc.z *= -1), R.envMapRotation.value.setFromMatrix4(oO.makeRotationFromEuler(Dc)), R.flipEnvMap.value = N.isCubeTexture && N.isRenderTargetTexture === !1 ? -1 : 1, R.reflectivity.value = T.reflectivity, R.ior.value = T.ior, R.refractionRatio.value = T.refractionRatio), T.lightMap && (R.lightMap.value = T.lightMap, R.lightMapIntensity.value = T.lightMapIntensity, e(T.lightMap, R.lightMapTransform)), T.aoMap && (R.aoMap.value = T.aoMap, R.aoMapIntensity.value = T.aoMapIntensity, e(T.aoMap, R.aoMapTransform)) } function f(R, T) { R.diffuse.value.copy(T.color), R.opacity.value = T.opacity, T.map && (R.map.value = T.map, e(T.map, R.mapTransform)) } function h(R, T) { R.dashSize.value = T.dashSize, R.totalSize.value = T.dashSize + T.gapSize, R.scale.value = T.scale } function m(R, T, D, N) { R.diffuse.value.copy(T.color), R.opacity.value = T.opacity, R.size.value = T.size * D, R.scale.value = N * .5, T.map && (R.map.value = T.map, e(T.map, R.uvTransform)), T.alphaMap && (R.alphaMap.value = T.alphaMap, e(T.alphaMap, R.alphaMapTransform)), T.alphaTest > 0 && (R.alphaTest.value = T.alphaTest) } function g(R, T) { R.diffuse.value.copy(T.color), R.opacity.value = T.opacity, R.rotation.value = T.rotation, T.map && (R.map.value = T.map, e(T.map, R.mapTransform)), T.alphaMap && (R.alphaMap.value = T.alphaMap, e(T.alphaMap, R.alphaMapTransform)), T.alphaTest > 0 && (R.alphaTest.value = T.alphaTest) } function _(R, T) { R.specular.value.copy(T.specular), R.shininess.value = Math.max(T.shininess, 1e-4) } function x(R, T) { T.gradientMap && (R.gradientMap.value = T.gradientMap) } function S(R, T) { R.metalness.value = T.metalness, T.metalnessMap && (R.metalnessMap.value = T.metalnessMap, e(T.metalnessMap, R.metalnessMapTransform)), R.roughness.value = T.roughness, T.roughnessMap && (R.roughnessMap.value = T.roughnessMap, e(T.roughnessMap, R.roughnessMapTransform)), T.envMap && (R.envMapIntensity.value = T.envMapIntensity) } function M(R, T, D) { R.ior.value = T.ior, T.sheen > 0 && (R.sheenColor.value.copy(T.sheenColor).multiplyScalar(T.sheen), R.sheenRoughness.value = T.sheenRoughness, T.sheenColorMap && (R.sheenColorMap.value = T.sheenColorMap, e(T.sheenColorMap, R.sheenColorMapTransform)), T.sheenRoughnessMap && (R.sheenRoughnessMap.value = T.sheenRoughnessMap, e(T.sheenRoughnessMap, R.sheenRoughnessMapTransform))), T.clearcoat > 0 && (R.clearcoat.value = T.clearcoat, R.clearcoatRoughness.value = T.clearcoatRoughness, T.clearcoatMap && (R.clearcoatMap.value = T.clearcoatMap, e(T.clearcoatMap, R.clearcoatMapTransform)), T.clearcoatRoughnessMap && (R.clearcoatRoughnessMap.value = T.clearcoatRoughnessMap, e(T.clearcoatRoughnessMap, R.clearcoatRoughnessMapTransform)), T.clearcoatNormalMap && (R.clearcoatNormalMap.value = T.clearcoatNormalMap, e(T.clearcoatNormalMap, R.clearcoatNormalMapTransform), R.clearcoatNormalScale.value.copy(T.clearcoatNormalScale), T.side === Va && R.clearcoatNormalScale.value.negate())), T.dispersion > 0 && (R.dispersion.value = T.dispersion), T.iridescence > 0 && (R.iridescence.value = T.iridescence, R.iridescenceIOR.value = T.iridescenceIOR, R.iridescenceThicknessMinimum.value = T.iridescenceThicknessRange[0], R.iridescenceThicknessMaximum.value = T.iridescenceThicknessRange[1], T.iridescenceMap && (R.iridescenceMap.value = T.iridescenceMap, e(T.iridescenceMap, R.iridescenceMapTransform)), T.iridescenceThicknessMap && (R.iridescenceThicknessMap.value = T.iridescenceThicknessMap, e(T.iridescenceThicknessMap, R.iridescenceThicknessMapTransform))), T.transmission > 0 && (R.transmission.value = T.transmission, R.transmissionSamplerMap.value = D.texture, R.transmissionSamplerSize.value.set(D.width, D.height), T.transmissionMap && (R.transmissionMap.value = T.transmissionMap, e(T.transmissionMap, R.transmissionMapTransform)), R.thickness.value = T.thickness, T.thicknessMap && (R.thicknessMap.value = T.thicknessMap, e(T.thicknessMap, R.thicknessMapTransform)), R.attenuationDistance.value = T.attenuationDistance, R.attenuationColor.value.copy(T.attenuationColor)), T.anisotropy > 0 && (R.anisotropyVector.value.set(T.anisotropy * Math.cos(T.anisotropyRotation), T.anisotropy * Math.sin(T.anisotropyRotation)), T.anisotropyMap && (R.anisotropyMap.value = T.anisotropyMap, e(T.anisotropyMap, R.anisotropyMapTransform))), R.specularIntensity.value = T.specularIntensity, R.specularColor.value.copy(T.specularColor), T.specularColorMap && (R.specularColorMap.value = T.specularColorMap, e(T.specularColorMap, R.specularColorMapTransform)), T.specularIntensityMap && (R.specularIntensityMap.value = T.specularIntensityMap, e(T.specularIntensityMap, R.specularIntensityMapTransform)) } function A(R, T) { T.matcap && (R.matcap.value = T.matcap) } function C(R, T) { const D = t.get(T).light; R.referencePosition.value.setFromMatrixPosition(D.matrixWorld), R.nearDistance.value = D.shadow.camera.near, R.farDistance.value = D.shadow.camera.far } return { refreshFogUniforms: n, refreshMaterialUniforms: a } } function cO(r, t, e, n) { let a = {}, o = {}, f = []; const h = r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS); function m(D, N) { const U = N.program; n.uniformBlockBinding(D, U) } function g(D, N) { let U = a[D.id]; U === void 0 && (A(D), U = _(D), a[D.id] = U, D.addEventListener("dispose", R)); const V = N.program; n.updateUBOMapping(D, V); const I = t.render.frame; o[D.id] !== I && (S(D), o[D.id] = I) } function _(D) { const N = x(); D.__bindingPointIndex = N; const U = r.createBuffer(), V = D.__size, I = D.usage; return r.bindBuffer(r.UNIFORM_BUFFER, U), r.bufferData(r.UNIFORM_BUFFER, V, I), r.bindBuffer(r.UNIFORM_BUFFER, null), r.bindBufferBase(r.UNIFORM_BUFFER, N, U), U } function x() { for (let D = 0; D < h; D++)if (f.indexOf(D) === -1) return f.push(D), D; return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0 } function S(D) { const N = a[D.id], U = D.uniforms, V = D.__cache; r.bindBuffer(r.UNIFORM_BUFFER, N); for (let I = 0, G = U.length; I < G; I++) { const q = Array.isArray(U[I]) ? U[I] : [U[I]]; for (let z = 0, L = q.length; z < L; z++) { const j = q[z]; if (M(j, I, z, V) === !0) { const dt = j.__offset, tt = Array.isArray(j.value) ? j.value : [j.value]; let ct = 0; for (let xt = 0; xt < tt.length; xt++) { const K = tt[xt], ft = C(K); typeof K == "number" || typeof K == "boolean" ? (j.__data[0] = K, r.bufferSubData(r.UNIFORM_BUFFER, dt + ct, j.__data)) : K.isMatrix3 ? (j.__data[0] = K.elements[0], j.__data[1] = K.elements[1], j.__data[2] = K.elements[2], j.__data[3] = 0, j.__data[4] = K.elements[3], j.__data[5] = K.elements[4], j.__data[6] = K.elements[5], j.__data[7] = 0, j.__data[8] = K.elements[6], j.__data[9] = K.elements[7], j.__data[10] = K.elements[8], j.__data[11] = 0) : (K.toArray(j.__data, ct), ct += ft.storage / Float32Array.BYTES_PER_ELEMENT) } r.bufferSubData(r.UNIFORM_BUFFER, dt, j.__data) } } } r.bindBuffer(r.UNIFORM_BUFFER, null) } function M(D, N, U, V) { const I = D.value, G = N + "_" + U; if (V[G] === void 0) return typeof I == "number" || typeof I == "boolean" ? V[G] = I : V[G] = I.clone(), !0; { const q = V[G]; if (typeof I == "number" || typeof I == "boolean") { if (q !== I) return V[G] = I, !0 } else if (q.equals(I) === !1) return q.copy(I), !0 } return !1 } function A(D) { const N = D.uniforms; let U = 0; const V = 16; for (let G = 0, q = N.length; G < q; G++) { const z = Array.isArray(N[G]) ? N[G] : [N[G]]; for (let L = 0, j = z.length; L < j; L++) { const dt = z[L], tt = Array.isArray(dt.value) ? dt.value : [dt.value]; for (let ct = 0, xt = tt.length; ct < xt; ct++) { const K = tt[ct], ft = C(K), nt = U % V, Et = nt % ft.boundary, Y = nt + Et; U += Et, Y !== 0 && V - Y < ft.storage && (U += V - Y), dt.__data = new Float32Array(ft.storage / Float32Array.BYTES_PER_ELEMENT), dt.__offset = U, U += ft.storage } } } const I = U % V; return I > 0 && (U += V - I), D.__size = U, D.__cache = {}, this } function C(D) { const N = { boundary: 0, storage: 0 }; return typeof D == "number" || typeof D == "boolean" ? (N.boundary = 4, N.storage = 4) : D.isVector2 ? (N.boundary = 8, N.storage = 8) : D.isVector3 || D.isColor ? (N.boundary = 16, N.storage = 12) : D.isVector4 ? (N.boundary = 16, N.storage = 16) : D.isMatrix3 ? (N.boundary = 48, N.storage = 48) : D.isMatrix4 ? (N.boundary = 64, N.storage = 64) : D.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", D), N } function R(D) { const N = D.target; N.removeEventListener("dispose", R); const U = f.indexOf(N.__bindingPointIndex); f.splice(U, 1), r.deleteBuffer(a[N.id]), delete a[N.id], delete o[N.id] } function T() { for (const D in a) r.deleteBuffer(a[D]); f = [], a = {}, o = {} } return { bind: m, update: g, dispose: T } } class hT { constructor(t = {}) { const { canvas: e = iE(), context: n = null, depth: a = !0, stencil: o = !1, alpha: f = !1, antialias: h = !1, premultipliedAlpha: m = !0, preserveDrawingBuffer: g = !1, powerPreference: _ = "default", failIfMajorPerformanceCaveat: x = !1, reverseDepthBuffer: S = !1 } = t; this.isWebGLRenderer = !0; let M; if (n !== null) { if (typeof WebGLRenderingContext < "u" && n instanceof WebGLRenderingContext) throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163."); M = n.getContextAttributes().alpha } else M = f; const A = new Uint32Array(4), C = new Int32Array(4); let R = null, T = null; const D = [], N = []; this.domElement = e, this.debug = { checkShaderErrors: !0, onShaderError: null }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this._outputColorSpace = Ea, this.toneMapping = El, this.toneMappingExposure = 1; const U = this; let V = !1, I = 0, G = 0, q = null, z = -1, L = null; const j = new yn, dt = new yn; let tt = null; const ct = new ce(0); let xt = 0, K = e.width, ft = e.height, nt = 1, Et = null, Y = null; const it = new yn(0, 0, K, ft), Dt = new yn(0, 0, K, ft); let Xt = !1; const $ = new Jp; let Tt = !1, Lt = !1; this.transmissionResolutionScale = 1; const Vt = new Oe, kt = new Oe, Me = new k, Jt = new yn, Le = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 }; let Bt = !1; function Ut() { return q === null ? nt : 1 } let W = n; function de(P, J) { return e.getContext(P, J) } try { const P = { alpha: !0, depth: a, stencil: o, antialias: h, premultipliedAlpha: m, preserveDrawingBuffer: g, powerPreference: _, failIfMajorPerformanceCaveat: x }; if ("setAttribute" in e && e.setAttribute("data-engine", `three.js r${kp}`), e.addEventListener("webglcontextlost", Nt, !1), e.addEventListener("webglcontextrestored", $t, !1), e.addEventListener("webglcontextcreationerror", ne, !1), W === null) { const J = "webgl2"; if (W = de(J, P), W === null) throw de(J) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.") } } catch (P) { throw console.error("THREE.WebGLRenderer: " + P.message), P } let Ht, ee, jt, be, Qt, X, B, mt, bt, Pt, Ct, pe, te, oe, qe, Yt, fe, ge, he, ue, Be, ye, pn, at; function ie() { Ht = new MU(W), Ht.init(), ye = new fT(W, Ht), ee = new mU(W, Ht, t, ye), jt = new nO(W, Ht), ee.reverseDepthBuffer && S && jt.buffers.depth.setReversed(!0), be = new TU(W), Qt = new XN, X = new iO(W, Ht, jt, Qt, ee, ye, be), B = new vU(U), mt = new SU(U), bt = new UC(W), pn = new dU(W, bt), Pt = new bU(W, bt, be, pn), Ct = new RU(W, Pt, bt, be), he = new AU(W, ee, X), Yt = new gU(Qt), pe = new GN(U, B, mt, Ht, ee, pn, Yt), te = new uO(U, Qt), oe = new YN, qe = new KN(Ht), ge = new hU(U, B, mt, jt, Ct, M, m), fe = new tO(U, Ct, ee), at = new cO(W, be, ee, jt), ue = new pU(W, Ht, be), Be = new EU(W, Ht, be), be.programs = pe.programs, U.capabilities = ee, U.extensions = Ht, U.properties = Qt, U.renderLists = oe, U.shadowMap = fe, U.state = jt, U.info = be } ie(); const Mt = new lO(U, W); this.xr = Mt, this.getContext = function () { return W }, this.getContextAttributes = function () { return W.getContextAttributes() }, this.forceContextLoss = function () { const P = Ht.get("WEBGL_lose_context"); P && P.loseContext() }, this.forceContextRestore = function () { const P = Ht.get("WEBGL_lose_context"); P && P.restoreContext() }, this.getPixelRatio = function () { return nt }, this.setPixelRatio = function (P) { P !== void 0 && (nt = P, this.setSize(K, ft, !1)) }, this.getSize = function (P) { return P.set(K, ft) }, this.setSize = function (P, J, gt = !0) { if (Mt.isPresenting) { console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."); return } K = P, ft = J, e.width = Math.floor(P * nt), e.height = Math.floor(J * nt), gt === !0 && (e.style.width = P + "px", e.style.height = J + "px"), this.setViewport(0, 0, P, J) }, this.getDrawingBufferSize = function (P) { return P.set(K * nt, ft * nt).floor() }, this.setDrawingBufferSize = function (P, J, gt) { K = P, ft = J, nt = gt, e.width = Math.floor(P * gt), e.height = Math.floor(J * gt), this.setViewport(0, 0, P, J) }, this.getCurrentViewport = function (P) { return P.copy(j) }, this.getViewport = function (P) { return P.copy(it) }, this.setViewport = function (P, J, gt, ht) { P.isVector4 ? it.set(P.x, P.y, P.z, P.w) : it.set(P, J, gt, ht), jt.viewport(j.copy(it).multiplyScalar(nt).round()) }, this.getScissor = function (P) { return P.copy(Dt) }, this.setScissor = function (P, J, gt, ht) { P.isVector4 ? Dt.set(P.x, P.y, P.z, P.w) : Dt.set(P, J, gt, ht), jt.scissor(dt.copy(Dt).multiplyScalar(nt).round()) }, this.getScissorTest = function () { return Xt }, this.setScissorTest = function (P) { jt.setScissorTest(Xt = P) }, this.setOpaqueSort = function (P) { Et = P }, this.setTransparentSort = function (P) { Y = P }, this.getClearColor = function (P) { return P.copy(ge.getClearColor()) }, this.setClearColor = function () { ge.setClearColor(...arguments) }, this.getClearAlpha = function () { return ge.getClearAlpha() }, this.setClearAlpha = function () { ge.setClearAlpha(...arguments) }, this.clear = function (P = !0, J = !0, gt = !0) { let ht = 0; if (P) { let rt = !1; if (q !== null) { const It = q.texture.format; rt = It === Uv || It === Dv || It === Zp } if (rt) { const It = q.texture.type, Kt = It === zr || It === So || It === Ah || It === Yc || It === Rv || It === wv, se = ge.getClearColor(), ae = ge.getClearAlpha(), Ce = se.r, De = se.g, Se = se.b; Kt ? (A[0] = Ce, A[1] = De, A[2] = Se, A[3] = ae, W.clearBufferuiv(W.COLOR, 0, A)) : (C[0] = Ce, C[1] = De, C[2] = Se, C[3] = ae, W.clearBufferiv(W.COLOR, 0, C)) } else ht |= W.COLOR_BUFFER_BIT } J && (ht |= W.DEPTH_BUFFER_BIT), gt && (ht |= W.STENCIL_BUFFER_BIT, this.state.buffers.stencil.setMask(4294967295)), W.clear(ht) }, this.clearColor = function () { this.clear(!0, !1, !1) }, this.clearDepth = function () { this.clear(!1, !0, !1) }, this.clearStencil = function () { this.clear(!1, !1, !0) }, this.dispose = function () { e.removeEventListener("webglcontextlost", Nt, !1), e.removeEventListener("webglcontextrestored", $t, !1), e.removeEventListener("webglcontextcreationerror", ne, !1), ge.dispose(), oe.dispose(), qe.dispose(), Qt.dispose(), B.dispose(), mt.dispose(), Ct.dispose(), pn.dispose(), at.dispose(), pe.dispose(), Mt.dispose(), Mt.removeEventListener("sessionstart", Cu), Mt.removeEventListener("sessionend", Dl), qa.stop() }; function Nt(P) { P.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), V = !0 } function $t() { console.log("THREE.WebGLRenderer: Context Restored."), V = !1; const P = be.autoReset, J = fe.enabled, gt = fe.autoUpdate, ht = fe.needsUpdate, rt = fe.type; ie(), be.autoReset = P, fe.enabled = J, fe.autoUpdate = gt, fe.needsUpdate = ht, fe.type = rt } function ne(P) { console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", P.statusMessage) } function we(P) { const J = P.target; J.removeEventListener("dispose", we), Cn(J) } function Cn(P) { Yn(P), Qt.remove(P) } function Yn(P) { const J = Qt.get(P).programs; J !== void 0 && (J.forEach(function (gt) { pe.releaseProgram(gt) }), P.isShaderMaterial && pe.releaseShaderCache(P)) } this.renderBufferDirect = function (P, J, gt, ht, rt, It) { J === null && (J = Le); const Kt = rt.isMesh && rt.matrixWorld.determinant() < 0, se = tf(P, J, gt, ht, rt); jt.setMaterial(ht, Kt); let ae = gt.index, Ce = 1; if (ht.wireframe === !0) { if (ae = Pt.getWireframeAttribute(gt), ae === void 0) return; Ce = 2 } const De = gt.drawRange, Se = gt.attributes.position; let nn = De.start * Ce, an = (De.start + De.count) * Ce; It !== null && (nn = Math.max(nn, It.start * Ce), an = Math.min(an, (It.start + It.count) * Ce)), ae !== null ? (nn = Math.max(nn, 0), an = Math.min(an, ae.count)) : Se != null && (nn = Math.max(nn, 0), an = Math.min(an, Se.count)); const On = an - nn; if (On < 0 || On === 1 / 0) return; pn.setup(rt, ht, se, gt, ae); let un, ze = ue; if (ae !== null && (un = bt.get(ae), ze = Be, ze.setIndex(un)), rt.isMesh) ht.wireframe === !0 ? (jt.setLineWidth(ht.wireframeLinewidth * Ut()), ze.setMode(W.LINES)) : ze.setMode(W.TRIANGLES); else if (rt.isLine) { let Ee = ht.linewidth; Ee === void 0 && (Ee = 1), jt.setLineWidth(Ee * Ut()), rt.isLineSegments ? ze.setMode(W.LINES) : rt.isLineLoop ? ze.setMode(W.LINE_LOOP) : ze.setMode(W.LINE_STRIP) } else rt.isPoints ? ze.setMode(W.POINTS) : rt.isSprite && ze.setMode(W.TRIANGLES); if (rt.isBatchedMesh) if (rt._multiDrawInstances !== null) Oc("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."), ze.renderMultiDrawInstances(rt._multiDrawStarts, rt._multiDrawCounts, rt._multiDrawCount, rt._multiDrawInstances); else if (Ht.get("WEBGL_multi_draw")) ze.renderMultiDraw(rt._multiDrawStarts, rt._multiDrawCounts, rt._multiDrawCount); else { const Ee = rt._multiDrawStarts, oi = rt._multiDrawCounts, sn = rt._multiDrawCount, Ji = ae ? bt.get(ae).bytesPerElement : 1, Ca = Qt.get(ht).currentProgram.getUniforms(); for (let Hi = 0; Hi < sn; Hi++)Ca.setValue(W, "_gl_DrawID", Hi), ze.render(Ee[Hi] / Ji, oi[Hi]) } else if (rt.isInstancedMesh) ze.renderInstances(nn, On, rt.count); else if (gt.isInstancedBufferGeometry) { const Ee = gt._maxInstanceCount !== void 0 ? gt._maxInstanceCount : 1 / 0, oi = Math.min(gt.instanceCount, Ee); ze.renderInstances(nn, On, oi) } else ze.render(nn, On) }; function on(P, J, gt) { P.transparent === !0 && P.side === Ml && P.forceSinglePass === !1 ? (P.side = Va, P.needsUpdate = !0, Ye(P, J, gt), P.side = _o, P.needsUpdate = !0, Ye(P, J, gt), P.side = Ml) : Ye(P, J, gt) } this.compile = function (P, J, gt = null) { gt === null && (gt = P), T = qe.get(gt), T.init(J), N.push(T), gt.traverseVisible(function (rt) { rt.isLight && rt.layers.test(J.layers) && (T.pushLight(rt), rt.castShadow && T.pushShadow(rt)) }), P !== gt && P.traverseVisible(function (rt) { rt.isLight && rt.layers.test(J.layers) && (T.pushLight(rt), rt.castShadow && T.pushShadow(rt)) }), T.setupLights(); const ht = new Set; return P.traverse(function (rt) { if (!(rt.isMesh || rt.isPoints || rt.isLine || rt.isSprite)) return; const It = rt.material; if (It) if (Array.isArray(It)) for (let Kt = 0; Kt < It.length; Kt++) { const se = It[Kt]; on(se, gt, rt), ht.add(se) } else on(It, gt, rt), ht.add(It) }), T = N.pop(), ht }, this.compileAsync = function (P, J, gt = null) { const ht = this.compile(P, J, gt); return new Promise(rt => { function It() { if (ht.forEach(function (Kt) { Qt.get(Kt).currentProgram.isReady() && ht.delete(Kt) }), ht.size === 0) { rt(P); return } setTimeout(It, 10) } Ht.get("KHR_parallel_shader_compile") !== null ? It() : setTimeout(It, 10) }) }; let Pi = null; function Ii(P) { Pi && Pi(P) } function Cu() { qa.stop() } function Dl() { qa.start() } const qa = new rT; qa.setAnimationLoop(Ii), typeof self < "u" && qa.setContext(self), this.setAnimationLoop = function (P) { Pi = P, Mt.setAnimationLoop(P), P === null ? qa.stop() : qa.start() }, Mt.addEventListener("sessionstart", Cu), Mt.addEventListener("sessionend", Dl), this.render = function (P, J) { if (J !== void 0 && J.isCamera !== !0) { console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera."); return } if (V === !0) return; if (P.matrixWorldAutoUpdate === !0 && P.updateMatrixWorld(), J.parent === null && J.matrixWorldAutoUpdate === !0 && J.updateMatrixWorld(), Mt.enabled === !0 && Mt.isPresenting === !0 && (Mt.cameraAutoUpdate === !0 && Mt.updateCamera(J), J = Mt.getCamera()), P.isScene === !0 && P.onBeforeRender(U, P, J, q), T = qe.get(P, N.length), T.init(J), N.push(T), kt.multiplyMatrices(J.projectionMatrix, J.matrixWorldInverse), $.setFromProjectionMatrix(kt), Lt = this.localClippingEnabled, Tt = Yt.init(this.clippingPlanes, Lt), R = oe.get(P, D.length), R.init(), D.push(R), Mt.enabled === !0 && Mt.isPresenting === !0) { const It = U.xr.getDepthSensingMesh(); It !== null && wa(It, J, -1 / 0, U.sortObjects) } wa(P, J, 0, U.sortObjects), R.finish(), U.sortObjects === !0 && R.sort(Et, Y), Bt = Mt.enabled === !1 || Mt.isPresenting === !1 || Mt.hasDepthSensing() === !1, Bt && ge.addToRenderList(R, P), this.info.render.frame++, Tt === !0 && Yt.beginShadows(); const gt = T.state.shadowsArray; fe.render(gt, P, J), Tt === !0 && Yt.endShadows(), this.info.autoReset === !0 && this.info.reset(); const ht = R.opaque, rt = R.transmissive; if (T.setupLights(), J.isArrayCamera) { const It = J.cameras; if (rt.length > 0) for (let Kt = 0, se = It.length; Kt < se; Kt++) { const ae = It[Kt]; hs(ht, rt, P, ae) } Bt && ge.render(P); for (let Kt = 0, se = It.length; Kt < se; Kt++) { const ae = It[Kt]; bo(R, P, ae, ae.viewport) } } else rt.length > 0 && hs(ht, rt, P, J), Bt && ge.render(P), bo(R, P, J); q !== null && G === 0 && (X.updateMultisampleRenderTarget(q), X.updateRenderTargetMipmap(q)), P.isScene === !0 && P.onAfterRender(U, P, J), pn.resetDefaultState(), z = -1, L = null, N.pop(), N.length > 0 ? (T = N[N.length - 1], Tt === !0 && Yt.setGlobalState(U.clippingPlanes, T.state.camera)) : T = null, D.pop(), D.length > 0 ? R = D[D.length - 1] : R = null }; function wa(P, J, gt, ht) { if (P.visible === !1) return; if (P.layers.test(J.layers)) { if (P.isGroup) gt = P.renderOrder; else if (P.isLOD) P.autoUpdate === !0 && P.update(J); else if (P.isLight) T.pushLight(P), P.castShadow && T.pushShadow(P); else if (P.isSprite) { if (!P.frustumCulled || $.intersectsSprite(P)) { ht && Jt.setFromMatrixPosition(P.matrixWorld).applyMatrix4(kt); const Kt = Ct.update(P), se = P.material; se.visible && R.push(P, Kt, se, gt, Jt.z, null) } } else if ((P.isMesh || P.isLine || P.isPoints) && (!P.frustumCulled || $.intersectsObject(P))) { const Kt = Ct.update(P), se = P.material; if (ht && (P.boundingSphere !== void 0 ? (P.boundingSphere === null && P.computeBoundingSphere(), Jt.copy(P.boundingSphere.center)) : (Kt.boundingSphere === null && Kt.computeBoundingSphere(), Jt.copy(Kt.boundingSphere.center)), Jt.applyMatrix4(P.matrixWorld).applyMatrix4(kt)), Array.isArray(se)) { const ae = Kt.groups; for (let Ce = 0, De = ae.length; Ce < De; Ce++) { const Se = ae[Ce], nn = se[Se.materialIndex]; nn && nn.visible && R.push(P, Kt, nn, gt, Jt.z, Se) } } else se.visible && R.push(P, Kt, se, gt, Jt.z, null) } } const It = P.children; for (let Kt = 0, se = It.length; Kt < se; Kt++)wa(It[Kt], J, gt, ht) } function bo(P, J, gt, ht) { const rt = P.opaque, It = P.transmissive, Kt = P.transparent; T.setupLightsView(gt), Tt === !0 && Yt.setGlobalState(U.clippingPlanes, gt), ht && jt.viewport(j.copy(ht)), rt.length > 0 && Kn(rt, J, gt), It.length > 0 && Kn(It, J, gt), Kt.length > 0 && Kn(Kt, J, gt), jt.buffers.depth.setTest(!0), jt.buffers.depth.setMask(!0), jt.buffers.color.setMask(!0), jt.setPolygonOffset(!1) } function hs(P, J, gt, ht) { if ((gt.isScene === !0 ? gt.overrideMaterial : null) !== null) return; T.state.transmissionRenderTarget[ht.id] === void 0 && (T.state.transmissionRenderTarget[ht.id] = new Rl(1, 1, { generateMipmaps: !0, type: Ht.has("EXT_color_buffer_half_float") || Ht.has("EXT_color_buffer_float") ? zh : zr, minFilter: bl, samples: 4, stencilBuffer: o, resolveDepthBuffer: !1, resolveStencilBuffer: !1, colorSpace: dn.workingColorSpace })); const It = T.state.transmissionRenderTarget[ht.id], Kt = ht.viewport || j; It.setSize(Kt.z * U.transmissionResolutionScale, Kt.w * U.transmissionResolutionScale); const se = U.getRenderTarget(); U.setRenderTarget(It), U.getClearColor(ct), xt = U.getClearAlpha(), xt < 1 && U.setClearColor(16777215, .5), U.clear(), Bt && ge.render(gt); const ae = U.toneMapping; U.toneMapping = El; const Ce = ht.viewport; if (ht.viewport !== void 0 && (ht.viewport = void 0), T.setupLightsView(ht), Tt === !0 && Yt.setGlobalState(U.clippingPlanes, ht), Kn(P, gt, ht), X.updateMultisampleRenderTarget(It), X.updateRenderTargetMipmap(It), Ht.has("WEBGL_multisampled_render_to_texture") === !1) { let De = !1; for (let Se = 0, nn = J.length; Se < nn; Se++) { const an = J[Se], On = an.object, un = an.geometry, ze = an.material, Ee = an.group; if (ze.side === Ml && On.layers.test(ht.layers)) { const oi = ze.side; ze.side = Va, ze.needsUpdate = !0, kn(On, gt, ht, un, ze, Ee), ze.side = oi, ze.needsUpdate = !0, De = !0 } } De === !0 && (X.updateMultisampleRenderTarget(It), X.updateRenderTargetMipmap(It)) } U.setRenderTarget(se), U.setClearColor(ct, xt), Ce !== void 0 && (ht.viewport = Ce), U.toneMapping = ae } function Kn(P, J, gt) { const ht = J.isScene === !0 ? J.overrideMaterial : null; for (let rt = 0, It = P.length; rt < It; rt++) { const Kt = P[rt], se = Kt.object, ae = Kt.geometry, Ce = ht === null ? Kt.material : ht, De = Kt.group; se.layers.test(gt.layers) && kn(se, J, gt, ae, Ce, De) } } function kn(P, J, gt, ht, rt, It) { P.onBeforeRender(U, J, gt, ht, rt, It), P.modelViewMatrix.multiplyMatrices(gt.matrixWorldInverse, P.matrixWorld), P.normalMatrix.getNormalMatrix(P.modelViewMatrix), rt.onBeforeRender(U, J, gt, ht, P, It), rt.transparent === !0 && rt.side === Ml && rt.forceSinglePass === !1 ? (rt.side = Va, rt.needsUpdate = !0, U.renderBufferDirect(gt, J, ht, rt, P, It), rt.side = _o, rt.needsUpdate = !0, U.renderBufferDirect(gt, J, ht, rt, P, It), rt.side = Ml) : U.renderBufferDirect(gt, J, ht, rt, P, It), P.onAfterRender(U, J, gt, ht, rt, It) } function Ye(P, J, gt) { J.isScene !== !0 && (J = Le); const ht = Qt.get(P), rt = T.state.lights, It = T.state.shadowsArray, Kt = rt.state.version, se = pe.getParameters(P, rt.state, It, J, gt), ae = pe.getProgramCacheKey(se); let Ce = ht.programs; ht.environment = P.isMeshStandardMaterial ? J.environment : null, ht.fog = J.fog, ht.envMap = (P.isMeshStandardMaterial ? mt : B).get(P.envMap || ht.environment), ht.envMapRotation = ht.environment !== null && P.envMap === null ? J.environmentRotation : P.envMapRotation, Ce === void 0 && (P.addEventListener("dispose", we), Ce = new Map, ht.programs = Ce); let De = Ce.get(ae); if (De !== void 0) { if (ht.currentProgram === De && ht.lightsStateVersion === Kt) return Hr(P, se), De } else se.uniforms = pe.getUniforms(P), P.onBeforeCompile(se, U), De = pe.acquireProgram(se, ae), Ce.set(ae, De), ht.uniforms = se.uniforms; const Se = ht.uniforms; return (!P.isShaderMaterial && !P.isRawShaderMaterial || P.clipping === !0) && (Se.clippingPlanes = Yt.uniform), Hr(P, se), ht.needsLights = nf(P), ht.lightsStateVersion = Kt, ht.needsLights && (Se.ambientLightColor.value = rt.state.ambient, Se.lightProbe.value = rt.state.probe, Se.directionalLights.value = rt.state.directional, Se.directionalLightShadows.value = rt.state.directionalShadow, Se.spotLights.value = rt.state.spot, Se.spotLightShadows.value = rt.state.spotShadow, Se.rectAreaLights.value = rt.state.rectArea, Se.ltc_1.value = rt.state.rectAreaLTC1, Se.ltc_2.value = rt.state.rectAreaLTC2, Se.pointLights.value = rt.state.point, Se.pointLightShadows.value = rt.state.pointShadow, Se.hemisphereLights.value = rt.state.hemi, Se.directionalShadowMap.value = rt.state.directionalShadowMap, Se.directionalShadowMatrix.value = rt.state.directionalShadowMatrix, Se.spotShadowMap.value = rt.state.spotShadowMap, Se.spotLightMatrix.value = rt.state.spotLightMatrix, Se.spotLightMap.value = rt.state.spotLightMap, Se.pointShadowMap.value = rt.state.pointShadowMap, Se.pointShadowMatrix.value = rt.state.pointShadowMatrix), ht.currentProgram = De, ht.uniformsList = null, De } function ds(P) { if (P.uniformsList === null) { const J = P.currentProgram.getUniforms(); P.uniformsList = D0.seqWithValue(J.seq, P.uniforms) } return P.uniformsList } function Hr(P, J) { const gt = Qt.get(P); gt.outputColorSpace = J.outputColorSpace, gt.batching = J.batching, gt.batchingColor = J.batchingColor, gt.instancing = J.instancing, gt.instancingColor = J.instancingColor, gt.instancingMorph = J.instancingMorph, gt.skinning = J.skinning, gt.morphTargets = J.morphTargets, gt.morphNormals = J.morphNormals, gt.morphColors = J.morphColors, gt.morphTargetsCount = J.morphTargetsCount, gt.numClippingPlanes = J.numClippingPlanes, gt.numIntersection = J.numClipIntersection, gt.vertexAlphas = J.vertexAlphas, gt.vertexTangents = J.vertexTangents, gt.toneMapping = J.toneMapping } function tf(P, J, gt, ht, rt) { J.isScene !== !0 && (J = Le), X.resetTextureUnits(); const It = J.fog, Kt = ht.isMeshStandardMaterial ? J.environment : null, se = q === null ? U.outputColorSpace : q.isXRRenderTarget === !0 ? q.texture.colorSpace : bu, ae = (ht.isMeshStandardMaterial ? mt : B).get(ht.envMap || Kt), Ce = ht.vertexColors === !0 && !!gt.attributes.color && gt.attributes.color.itemSize === 4, De = !!gt.attributes.tangent && (!!ht.normalMap || ht.anisotropy > 0), Se = !!gt.morphAttributes.position, nn = !!gt.morphAttributes.normal, an = !!gt.morphAttributes.color; let On = El; ht.toneMapped && (q === null || q.isXRRenderTarget === !0) && (On = U.toneMapping); const un = gt.morphAttributes.position || gt.morphAttributes.normal || gt.morphAttributes.color, ze = un !== void 0 ? un.length : 0, Ee = Qt.get(ht), oi = T.state.lights; if (Tt === !0 && (Lt === !0 || P !== L)) { const jn = P === L && ht.id === z; Yt.setState(ht, P, jn) } let sn = !1; ht.version === Ee.__version ? (Ee.needsLights && Ee.lightsStateVersion !== oi.state.version || Ee.outputColorSpace !== se || rt.isBatchedMesh && Ee.batching === !1 || !rt.isBatchedMesh && Ee.batching === !0 || rt.isBatchedMesh && Ee.batchingColor === !0 && rt.colorTexture === null || rt.isBatchedMesh && Ee.batchingColor === !1 && rt.colorTexture !== null || rt.isInstancedMesh && Ee.instancing === !1 || !rt.isInstancedMesh && Ee.instancing === !0 || rt.isSkinnedMesh && Ee.skinning === !1 || !rt.isSkinnedMesh && Ee.skinning === !0 || rt.isInstancedMesh && Ee.instancingColor === !0 && rt.instanceColor === null || rt.isInstancedMesh && Ee.instancingColor === !1 && rt.instanceColor !== null || rt.isInstancedMesh && Ee.instancingMorph === !0 && rt.morphTexture === null || rt.isInstancedMesh && Ee.instancingMorph === !1 && rt.morphTexture !== null || Ee.envMap !== ae || ht.fog === !0 && Ee.fog !== It || Ee.numClippingPlanes !== void 0 && (Ee.numClippingPlanes !== Yt.numPlanes || Ee.numIntersection !== Yt.numIntersection) || Ee.vertexAlphas !== Ce || Ee.vertexTangents !== De || Ee.morphTargets !== Se || Ee.morphNormals !== nn || Ee.morphColors !== an || Ee.toneMapping !== On || Ee.morphTargetsCount !== ze) && (sn = !0) : (sn = !0, Ee.__version = ht.version); let Ji = Ee.currentProgram; sn === !0 && (Ji = Ye(ht, J, rt)); let Ca = !1, Hi = !1, _i = !1; const Mn = Ji.getUniforms(), Fi = Ee.uniforms; if (jt.useProgram(Ji.program) && (Ca = !0, Hi = !0, _i = !0), ht.id !== z && (z = ht.id, Hi = !0), Ca || L !== P) { jt.buffers.depth.getReversed() ? (Vt.copy(P.projectionMatrix), $2(Vt), tR(Vt), Mn.setValue(W, "projectionMatrix", Vt)) : Mn.setValue(W, "projectionMatrix", P.projectionMatrix), Mn.setValue(W, "viewMatrix", P.matrixWorldInverse); const bi = Mn.map.cameraPosition; bi !== void 0 && bi.setValue(W, Me.setFromMatrixPosition(P.matrixWorld)), ee.logarithmicDepthBuffer && Mn.setValue(W, "logDepthBufFC", 2 / (Math.log(P.far + 1) / Math.LN2)), (ht.isMeshPhongMaterial || ht.isMeshToonMaterial || ht.isMeshLambertMaterial || ht.isMeshBasicMaterial || ht.isMeshStandardMaterial || ht.isShaderMaterial) && Mn.setValue(W, "isOrthographic", P.isOrthographicCamera === !0), L !== P && (L = P, Hi = !0, _i = !0) } if (rt.isSkinnedMesh) { Mn.setOptional(W, rt, "bindMatrix"), Mn.setOptional(W, rt, "bindMatrixInverse"); const jn = rt.skeleton; jn && (jn.boneTexture === null && jn.computeBoneTexture(), Mn.setValue(W, "boneTexture", jn.boneTexture, X)) } rt.isBatchedMesh && (Mn.setOptional(W, rt, "batchingTexture"), Mn.setValue(W, "batchingTexture", rt._matricesTexture, X), Mn.setOptional(W, rt, "batchingIdTexture"), Mn.setValue(W, "batchingIdTexture", rt._indirectTexture, X), Mn.setOptional(W, rt, "batchingColorTexture"), rt._colorsTexture !== null && Mn.setValue(W, "batchingColorTexture", rt._colorsTexture, X)); const Ci = gt.morphAttributes; if ((Ci.position !== void 0 || Ci.normal !== void 0 || Ci.color !== void 0) && he.update(rt, gt, Ji), (Hi || Ee.receiveShadow !== rt.receiveShadow) && (Ee.receiveShadow = rt.receiveShadow, Mn.setValue(W, "receiveShadow", rt.receiveShadow)), ht.isMeshGouraudMaterial && ht.envMap !== null && (Fi.envMap.value = ae, Fi.flipEnvMap.value = ae.isCubeTexture && ae.isRenderTargetTexture === !1 ? -1 : 1), ht.isMeshStandardMaterial && ht.envMap === null && J.environment !== null && (Fi.envMapIntensity.value = J.environmentIntensity), Hi && (Mn.setValue(W, "toneMappingExposure", U.toneMappingExposure), Ee.needsLights && ef(Fi, _i), It && ht.fog === !0 && te.refreshFogUniforms(Fi, It), te.refreshMaterialUniforms(Fi, ht, nt, ft, T.state.transmissionRenderTarget[P.id]), D0.upload(W, ds(Ee), Fi, X)), ht.isShaderMaterial && ht.uniformsNeedUpdate === !0 && (D0.upload(W, ds(Ee), Fi, X), ht.uniformsNeedUpdate = !1), ht.isSpriteMaterial && Mn.setValue(W, "center", rt.center), Mn.setValue(W, "modelViewMatrix", rt.modelViewMatrix), Mn.setValue(W, "normalMatrix", rt.normalMatrix), Mn.setValue(W, "modelMatrix", rt.matrixWorld), ht.isShaderMaterial || ht.isRawShaderMaterial) { const jn = ht.uniformsGroups; for (let bi = 0, ms = jn.length; bi < ms; bi++) { const $i = jn[bi]; at.update($i, Ji), at.bind($i, Ji) } } return Ji } function ef(P, J) { P.ambientLightColor.needsUpdate = J, P.lightProbe.needsUpdate = J, P.directionalLights.needsUpdate = J, P.directionalLightShadows.needsUpdate = J, P.pointLights.needsUpdate = J, P.pointLightShadows.needsUpdate = J, P.spotLights.needsUpdate = J, P.spotLightShadows.needsUpdate = J, P.rectAreaLights.needsUpdate = J, P.hemisphereLights.needsUpdate = J } function nf(P) { return P.isMeshLambertMaterial || P.isMeshToonMaterial || P.isMeshPhongMaterial || P.isMeshStandardMaterial || P.isShadowMaterial || P.isShaderMaterial && P.lights === !0 } this.getActiveCubeFace = function () { return I }, this.getActiveMipmapLevel = function () { return G }, this.getRenderTarget = function () { return q }, this.setRenderTargetTextures = function (P, J, gt) { Qt.get(P.texture).__webglTexture = J, Qt.get(P.depthTexture).__webglTexture = gt; const ht = Qt.get(P); ht.__hasExternalTextures = !0, ht.__autoAllocateDepthBuffer = gt === void 0, ht.__autoAllocateDepthBuffer || Ht.has("WEBGL_multisampled_render_to_texture") === !0 && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), ht.__useRenderToTexture = !1) }, this.setRenderTargetFramebuffer = function (P, J) { const gt = Qt.get(P); gt.__webglFramebuffer = J, gt.__useDefaultFramebuffer = J === void 0 }; const Qs = W.createFramebuffer(); this.setRenderTarget = function (P, J = 0, gt = 0) { q = P, I = J, G = gt; let ht = !0, rt = null, It = !1, Kt = !1; if (P) { const ae = Qt.get(P); if (ae.__useDefaultFramebuffer !== void 0) jt.bindFramebuffer(W.FRAMEBUFFER, null), ht = !1; else if (ae.__webglFramebuffer === void 0) X.setupRenderTarget(P); else if (ae.__hasExternalTextures) X.rebindTextures(P, Qt.get(P.texture).__webglTexture, Qt.get(P.depthTexture).__webglTexture); else if (P.depthBuffer) { const Se = P.depthTexture; if (ae.__boundDepthTexture !== Se) { if (Se !== null && Qt.has(Se) && (P.width !== Se.image.width || P.height !== Se.image.height)) throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size."); X.setupDepthRenderbuffer(P) } } const Ce = P.texture; (Ce.isData3DTexture || Ce.isDataArrayTexture || Ce.isCompressedArrayTexture) && (Kt = !0); const De = Qt.get(P).__webglFramebuffer; P.isWebGLCubeRenderTarget ? (Array.isArray(De[J]) ? rt = De[J][gt] : rt = De[J], It = !0) : P.samples > 0 && X.useMultisampledRTT(P) === !1 ? rt = Qt.get(P).__webglMultisampledFramebuffer : Array.isArray(De) ? rt = De[gt] : rt = De, j.copy(P.viewport), dt.copy(P.scissor), tt = P.scissorTest } else j.copy(it).multiplyScalar(nt).floor(), dt.copy(Dt).multiplyScalar(nt).floor(), tt = Xt; if (gt !== 0 && (rt = Qs), jt.bindFramebuffer(W.FRAMEBUFFER, rt) && ht && jt.drawBuffers(P, rt), jt.viewport(j), jt.scissor(dt), jt.setScissorTest(tt), It) { const ae = Qt.get(P.texture); W.framebufferTexture2D(W.FRAMEBUFFER, W.COLOR_ATTACHMENT0, W.TEXTURE_CUBE_MAP_POSITIVE_X + J, ae.__webglTexture, gt) } else if (Kt) { const ae = Qt.get(P.texture), Ce = J; W.framebufferTextureLayer(W.FRAMEBUFFER, W.COLOR_ATTACHMENT0, ae.__webglTexture, gt, Ce) } else if (P !== null && gt !== 0) { const ae = Qt.get(P.texture); W.framebufferTexture2D(W.FRAMEBUFFER, W.COLOR_ATTACHMENT0, W.TEXTURE_2D, ae.__webglTexture, gt) } z = -1 }, this.readRenderTargetPixels = function (P, J, gt, ht, rt, It, Kt) { if (!(P && P.isWebGLRenderTarget)) { console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget."); return } let se = Qt.get(P).__webglFramebuffer; if (P.isWebGLCubeRenderTarget && Kt !== void 0 && (se = se[Kt]), se) { jt.bindFramebuffer(W.FRAMEBUFFER, se); try { const ae = P.texture, Ce = ae.format, De = ae.type; if (!ee.textureFormatReadable(Ce)) { console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format."); return } if (!ee.textureTypeReadable(De)) { console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type."); return } J >= 0 && J <= P.width - ht && gt >= 0 && gt <= P.height - rt && W.readPixels(J, gt, ht, rt, ye.convert(Ce), ye.convert(De), It) } finally { const ae = q !== null ? Qt.get(q).__webglFramebuffer : null; jt.bindFramebuffer(W.FRAMEBUFFER, ae) } } }, this.readRenderTargetPixelsAsync = async function (P, J, gt, ht, rt, It, Kt) { if (!(P && P.isWebGLRenderTarget)) throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget."); let se = Qt.get(P).__webglFramebuffer; if (P.isWebGLCubeRenderTarget && Kt !== void 0 && (se = se[Kt]), se) { const ae = P.texture, Ce = ae.format, De = ae.type; if (!ee.textureFormatReadable(Ce)) throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format."); if (!ee.textureTypeReadable(De)) throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type."); if (J >= 0 && J <= P.width - ht && gt >= 0 && gt <= P.height - rt) { jt.bindFramebuffer(W.FRAMEBUFFER, se); const Se = W.createBuffer(); W.bindBuffer(W.PIXEL_PACK_BUFFER, Se), W.bufferData(W.PIXEL_PACK_BUFFER, It.byteLength, W.STREAM_READ), W.readPixels(J, gt, ht, rt, ye.convert(Ce), ye.convert(De), 0); const nn = q !== null ? Qt.get(q).__webglFramebuffer : null; jt.bindFramebuffer(W.FRAMEBUFFER, nn); const an = W.fenceSync(W.SYNC_GPU_COMMANDS_COMPLETE, 0); return W.flush(), await J2(W, an, 4), W.bindBuffer(W.PIXEL_PACK_BUFFER, Se), W.getBufferSubData(W.PIXEL_PACK_BUFFER, 0, It), W.deleteBuffer(Se), W.deleteSync(an), It } else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.") } }, this.copyFramebufferToTexture = function (P, J = null, gt = 0) { P.isTexture !== !0 && (Oc("WebGLRenderer: copyFramebufferToTexture function signature has changed."), J = arguments[0] || null, P = arguments[1]); const ht = Math.pow(2, -gt), rt = Math.floor(P.image.width * ht), It = Math.floor(P.image.height * ht), Kt = J !== null ? J.x : 0, se = J !== null ? J.y : 0; X.setTexture2D(P, 0), W.copyTexSubImage2D(W.TEXTURE_2D, gt, 0, 0, Kt, se, rt, It), jt.unbindTexture() }; const Ul = W.createFramebuffer(), ps = W.createFramebuffer(); this.copyTextureToTexture = function (P, J, gt = null, ht = null, rt = 0, It = null) { P.isTexture !== !0 && (Oc("WebGLRenderer: copyTextureToTexture function signature has changed."), ht = arguments[0] || null, P = arguments[1], J = arguments[2], It = arguments[3] || 0, gt = null), It === null && (rt !== 0 ? (Oc("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."), It = rt, rt = 0) : It = 0); let Kt, se, ae, Ce, De, Se, nn, an, On; const un = P.isCompressedTexture ? P.mipmaps[It] : P.image; if (gt !== null) Kt = gt.max.x - gt.min.x, se = gt.max.y - gt.min.y, ae = gt.isBox3 ? gt.max.z - gt.min.z : 1, Ce = gt.min.x, De = gt.min.y, Se = gt.isBox3 ? gt.min.z : 0; else { const Ci = Math.pow(2, -rt); Kt = Math.floor(un.width * Ci), se = Math.floor(un.height * Ci), P.isDataArrayTexture ? ae = un.depth : P.isData3DTexture ? ae = Math.floor(un.depth * Ci) : ae = 1, Ce = 0, De = 0, Se = 0 } ht !== null ? (nn = ht.x, an = ht.y, On = ht.z) : (nn = 0, an = 0, On = 0); const ze = ye.convert(J.format), Ee = ye.convert(J.type); let oi; J.isData3DTexture ? (X.setTexture3D(J, 0), oi = W.TEXTURE_3D) : J.isDataArrayTexture || J.isCompressedArrayTexture ? (X.setTexture2DArray(J, 0), oi = W.TEXTURE_2D_ARRAY) : (X.setTexture2D(J, 0), oi = W.TEXTURE_2D), W.pixelStorei(W.UNPACK_FLIP_Y_WEBGL, J.flipY), W.pixelStorei(W.UNPACK_PREMULTIPLY_ALPHA_WEBGL, J.premultiplyAlpha), W.pixelStorei(W.UNPACK_ALIGNMENT, J.unpackAlignment); const sn = W.getParameter(W.UNPACK_ROW_LENGTH), Ji = W.getParameter(W.UNPACK_IMAGE_HEIGHT), Ca = W.getParameter(W.UNPACK_SKIP_PIXELS), Hi = W.getParameter(W.UNPACK_SKIP_ROWS), _i = W.getParameter(W.UNPACK_SKIP_IMAGES); W.pixelStorei(W.UNPACK_ROW_LENGTH, un.width), W.pixelStorei(W.UNPACK_IMAGE_HEIGHT, un.height), W.pixelStorei(W.UNPACK_SKIP_PIXELS, Ce), W.pixelStorei(W.UNPACK_SKIP_ROWS, De), W.pixelStorei(W.UNPACK_SKIP_IMAGES, Se); const Mn = P.isDataArrayTexture || P.isData3DTexture, Fi = J.isDataArrayTexture || J.isData3DTexture; if (P.isDepthTexture) { const Ci = Qt.get(P), jn = Qt.get(J), bi = Qt.get(Ci.__renderTarget), ms = Qt.get(jn.__renderTarget); jt.bindFramebuffer(W.READ_FRAMEBUFFER, bi.__webglFramebuffer), jt.bindFramebuffer(W.DRAW_FRAMEBUFFER, ms.__webglFramebuffer); for (let $i = 0; $i < ae; $i++)Mn && (W.framebufferTextureLayer(W.READ_FRAMEBUFFER, W.COLOR_ATTACHMENT0, Qt.get(P).__webglTexture, rt, Se + $i), W.framebufferTextureLayer(W.DRAW_FRAMEBUFFER, W.COLOR_ATTACHMENT0, Qt.get(J).__webglTexture, It, On + $i)), W.blitFramebuffer(Ce, De, Kt, se, nn, an, Kt, se, W.DEPTH_BUFFER_BIT, W.NEAREST); jt.bindFramebuffer(W.READ_FRAMEBUFFER, null), jt.bindFramebuffer(W.DRAW_FRAMEBUFFER, null) } else if (rt !== 0 || P.isRenderTargetTexture || Qt.has(P)) { const Ci = Qt.get(P), jn = Qt.get(J); jt.bindFramebuffer(W.READ_FRAMEBUFFER, Ul), jt.bindFramebuffer(W.DRAW_FRAMEBUFFER, ps); for (let bi = 0; bi < ae; bi++)Mn ? W.framebufferTextureLayer(W.READ_FRAMEBUFFER, W.COLOR_ATTACHMENT0, Ci.__webglTexture, rt, Se + bi) : W.framebufferTexture2D(W.READ_FRAMEBUFFER, W.COLOR_ATTACHMENT0, W.TEXTURE_2D, Ci.__webglTexture, rt), Fi ? W.framebufferTextureLayer(W.DRAW_FRAMEBUFFER, W.COLOR_ATTACHMENT0, jn.__webglTexture, It, On + bi) : W.framebufferTexture2D(W.DRAW_FRAMEBUFFER, W.COLOR_ATTACHMENT0, W.TEXTURE_2D, jn.__webglTexture, It), rt !== 0 ? W.blitFramebuffer(Ce, De, Kt, se, nn, an, Kt, se, W.COLOR_BUFFER_BIT, W.NEAREST) : Fi ? W.copyTexSubImage3D(oi, It, nn, an, On + bi, Ce, De, Kt, se) : W.copyTexSubImage2D(oi, It, nn, an, Ce, De, Kt, se); jt.bindFramebuffer(W.READ_FRAMEBUFFER, null), jt.bindFramebuffer(W.DRAW_FRAMEBUFFER, null) } else Fi ? P.isDataTexture || P.isData3DTexture ? W.texSubImage3D(oi, It, nn, an, On, Kt, se, ae, ze, Ee, un.data) : J.isCompressedArrayTexture ? W.compressedTexSubImage3D(oi, It, nn, an, On, Kt, se, ae, ze, un.data) : W.texSubImage3D(oi, It, nn, an, On, Kt, se, ae, ze, Ee, un) : P.isDataTexture ? W.texSubImage2D(W.TEXTURE_2D, It, nn, an, Kt, se, ze, Ee, un.data) : P.isCompressedTexture ? W.compressedTexSubImage2D(W.TEXTURE_2D, It, nn, an, un.width, un.height, ze, un.data) : W.texSubImage2D(W.TEXTURE_2D, It, nn, an, Kt, se, ze, Ee, un); W.pixelStorei(W.UNPACK_ROW_LENGTH, sn), W.pixelStorei(W.UNPACK_IMAGE_HEIGHT, Ji), W.pixelStorei(W.UNPACK_SKIP_PIXELS, Ca), W.pixelStorei(W.UNPACK_SKIP_ROWS, Hi), W.pixelStorei(W.UNPACK_SKIP_IMAGES, _i), It === 0 && J.generateMipmaps && W.generateMipmap(oi), jt.unbindTexture() }, this.copyTextureToTexture3D = function (P, J, gt = null, ht = null, rt = 0) { return P.isTexture !== !0 && (Oc("WebGLRenderer: copyTextureToTexture3D function signature has changed."), gt = arguments[0] || null, ht = arguments[1] || null, P = arguments[2], J = arguments[3], rt = arguments[4] || 0), Oc('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'), this.copyTextureToTexture(P, J, gt, ht, rt) }, this.initRenderTarget = function (P) { Qt.get(P).__webglFramebuffer === void 0 && X.setupRenderTarget(P) }, this.initTexture = function (P) { P.isCubeTexture ? X.setTextureCube(P, 0) : P.isData3DTexture ? X.setTexture3D(P, 0) : P.isDataArrayTexture || P.isCompressedArrayTexture ? X.setTexture2DArray(P, 0) : X.setTexture2D(P, 0), jt.unbindTexture() }, this.resetState = function () { I = 0, G = 0, q = null, jt.reset(), pn.reset() }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this })) } get coordinateSystem() { return Lr } get outputColorSpace() { return this._outputColorSpace } set outputColorSpace(t) { this._outputColorSpace = t; const e = this.getContext(); e.drawingBufferColorspace = dn._getDrawingBufferColorSpace(t), e.unpackColorSpace = dn._getUnpackColorSpace() } } const fO = Object.freeze(Object.defineProperty({ __proto__: null, ACESFilmicToneMapping: vx, AddEquation: yu, AddOperation: zb, AdditiveAnimationBlendMode: wx, AdditiveBlending: Z_, AgXToneMapping: Fb, AlphaFormat: Mx, AlwaysCompare: eE, AlwaysDepth: I0, AlwaysStencilFunc: $_, AmbientLight: jE, AnimationAction: iT, AnimationClip: Xp, AnimationLoader: Ew, AnimationMixer: $w, AnimationObjectGroup: Kw, AnimationUtils: xw, ArcCurve: _E, ArrayCamera: tT, ArrowHelper: MC, AttachedBindMode: J_, Audio: eT, AudioAnalyser: Vw, AudioContext: Kx, AudioListener: Iw, AudioLoader: zw, AxesHelper: bC, BackSide: Va, BasicDepthPacking: Wb, BasicShadowMap: mb, BatchedMesh: mE, Bone: zx, BooleanKeyframeTrack: Jc, Box2: oC, Box3: Ga, Box3Helper: xC, BoxGeometry: Kc, BoxHelper: _C, BufferAttribute: Pn, BufferGeometry: Qe, BufferGeometryLoader: $E, ByteType: _x, Cache: go, Camera: zv, CameraHelper: yC, CanvasTexture: qR, CapsuleGeometry: Xv, CatmullRomCurve3: xE, CineonToneMapping: Ib, CircleGeometry: qv, ClampToEdgeWrapping: Zs, Clock: Jx, Color: ce, ColorKeyframeTrack: jx, ColorManagement: dn, CompressedArrayTexture: GR, CompressedCubeTexture: XR, CompressedTexture: Vv, CompressedTextureLoader: Tw, ConeGeometry: Yv, ConstantAlphaFactor: Nb, ConstantColorFactor: Db, Controls: TC, CubeCamera: oE, CubeReflectionMapping: xo, CubeRefractionMapping: Mu, CubeTexture: Kp, CubeTextureLoader: Aw, CubeUVReflectionMapping: Lh, CubicBezierCurve: Ix, CubicBezierCurve3: SE, CubicInterpolant: FE, CullFaceBack: j_, CullFaceFront: pb, CullFaceFrontBack: t2, CullFaceNone: db, Curve: Pr, CurvePath: bE, CustomBlending: gb, CustomToneMapping: Hb, CylinderGeometry: Ph, Cylindrical: lC, Data3DTexture: Lv, DataArrayTexture: Qp, DataTexture: Tl, DataTextureLoader: Rw, DataUtils: mR, DecrementStencilOp: p2, DecrementWrapStencilOp: g2, DefaultLoadingManager: XE, DepthFormat: Fc, DepthStencilFormat: Wc, DepthTexture: Bx, DetachedBindMode: Gb, DirectionalLight: kE, DirectionalLightHelper: vC, DiscreteInterpolant: VE, DodecahedronGeometry: Wv, DoubleSide: Ml, DstAlphaFactor: Tb, DstColorFactor: Rb, DynamicCopyUsage: D2, DynamicDrawUsage: Vc, DynamicReadUsage: R2, EdgesGeometry: EE, EllipseCurve: Gv, EqualCompare: Kb, EqualDepth: F0, EqualStencilFunc: x2, EquirectangularReflectionMapping: Rp, EquirectangularRefractionMapping: wp, Euler: Ds, EventDispatcher: wl, ExtrudeGeometry: jv, FileLoader: Mo, Float16BufferAttribute: MR, Float32BufferAttribute: ve, FloatType: us, Fog: Pv, FogExp2: Bv, FramebufferTexture: VR, FrontSide: _o, Frustum: Jp, GLBufferAttribute: sC, GLSL1: N2, GLSL3: tx, GreaterCompare: Jb, GreaterDepth: G0, GreaterEqualCompare: tE, GreaterEqualDepth: V0, GreaterEqualStencilFunc: E2, GreaterStencilFunc: M2, GridHelper: mC, Group: Sh, HalfFloatType: zh, HemisphereLight: qE, HemisphereLightHelper: pC, IcosahedronGeometry: Zv, ImageBitmapLoader: Lw, ImageLoader: qp, ImageUtils: aE, IncrementStencilOp: d2, IncrementWrapStencilOp: m2, InstancedBufferAttribute: Dh, InstancedBufferGeometry: JE, InstancedInterleavedBuffer: aC, InstancedMesh: pE, Int16BufferAttribute: xR, Int32BufferAttribute: SR, Int8BufferAttribute: vR, IntType: Av, InterleavedBuffer: Iv, InterleavedBufferAttribute: kc, Interpolant: nm, InterpolateDiscrete: Up, InterpolateLinear: gv, InterpolateSmooth: w0, InvertStencilOp: v2, KeepStencilOp: Nc, KeyframeTrack: Ir, LOD: hE, LatheGeometry: $p, Layers: wh, LessCompare: Qb, LessDepth: H0, LessEqualCompare: Cx, LessEqualDepth: qc, LessEqualStencilFunc: S2, LessStencilFunc: _2, Light: wu, LightProbe: KE, Line: Eu, Line3: uC, LineBasicMaterial: Xa, LineCurve: Hx, LineCurve3: ME, LineDashedMaterial: PE, LineLoop: gE, LineSegments: Cl, LinearFilter: Li, LinearInterpolant: kx, LinearMipMapLinearFilter: a2, LinearMipMapNearestFilter: i2, LinearMipmapLinearFilter: bl, LinearMipmapNearestFilter: gp, LinearSRGBColorSpace: bu, LinearToneMapping: Bb, LinearTransfer: Op, Loader: fs, LoaderUtils: sx, LoadingManager: Zx, LoopOnce: Xb, LoopPingPong: Yb, LoopRepeat: qb, LuminanceAlphaFormat: Tx, LuminanceFormat: Ex, MOUSE: JA, Material: Ra, MaterialLoader: ny, MathUtils: Q2, Matrix2: nS, Matrix3: Ge, Matrix4: Oe, MaxEquation: xb, Mesh: wi, MeshBasicMaterial: Au, MeshDepthMaterial: qx, MeshDistanceMaterial: Yx, MeshLambertMaterial: zE, MeshMatcapMaterial: BE, MeshNormalMaterial: LE, MeshPhongMaterial: NE, MeshPhysicalMaterial: UE, MeshStandardMaterial: Xx, MeshToonMaterial: OE, MinEquation: _b, MirroredRepeatWrapping: Dp, MixOperation: Lb, MultiplyBlending: K_, MultiplyOperation: jp, NearestFilter: ua, NearestMipMapLinearFilter: n2, NearestMipMapNearestFilter: e2, NearestMipmapLinearFilter: _h, NearestMipmapNearestFilter: yx, NeutralToneMapping: Vb, NeverCompare: Zb, NeverDepth: P0, NeverStencilFunc: y2, NoBlending: vo, NoColorSpace: po, NoToneMapping: El, NormalAnimationBlendMode: Nv, NormalBlending: Hc, NotEqualCompare: $b, NotEqualDepth: X0, NotEqualStencilFunc: b2, NumberKeyframeTrack: Vp, Object3D: _n, ObjectLoader: Nw, ObjectSpaceNormalMap: jb, OctahedronGeometry: tm, OneFactor: Mb, OneMinusConstantAlphaFactor: Ob, OneMinusConstantColorFactor: Ub, OneMinusDstAlphaFactor: Ab, OneMinusDstColorFactor: wb, OneMinusSrcAlphaFactor: B0, OneMinusSrcColorFactor: Eb, OrthographicCamera: am, PCFShadowMap: Ev, PCFSoftShadowMap: mp, PMREMGenerator: ox, Path: Pp, PerspectiveCamera: Ki, Plane: vu, PlaneGeometry: Ih, PlaneHelper: SC, PointLight: WE, PointLightHelper: hC, Points: vE, PointsMaterial: Fv, PolarGridHelper: gC, PolyhedronGeometry: Ru, PositionalAudio: Fw, PropertyBinding: vn, PropertyMixer: nT, QuadraticBezierCurve: Fx, QuadraticBezierCurve3: Vx, Quaternion: cs, QuaternionKeyframeTrack: im, QuaternionLinearInterpolant: GE, RED_GREEN_RGTC2_Format: pv, RED_RGTC1_Format: Rx, REVISION: kp, RGBADepthPacking: kb, RGBAFormat: Ta, RGBAIntegerFormat: Uv, RGBA_ASTC_10x10_Format: ov, RGBA_ASTC_10x5_Format: sv, RGBA_ASTC_10x6_Format: rv, RGBA_ASTC_10x8_Format: lv, RGBA_ASTC_12x10_Format: uv, RGBA_ASTC_12x12_Format: cv, RGBA_ASTC_4x4_Format: K0, RGBA_ASTC_5x4_Format: J0, RGBA_ASTC_5x5_Format: $0, RGBA_ASTC_6x5_Format: tv, RGBA_ASTC_6x6_Format: ev, RGBA_ASTC_8x5_Format: nv, RGBA_ASTC_8x6_Format: iv, RGBA_ASTC_8x8_Format: av, RGBA_BPTC_Format: Sp, RGBA_ETC2_EAC_Format: Q0, RGBA_PVRTC_2BPPV1_Format: k0, RGBA_PVRTC_4BPPV1_Format: W0, RGBA_S3TC_DXT1_Format: yp, RGBA_S3TC_DXT3_Format: _p, RGBA_S3TC_DXT5_Format: xp, RGBDepthPacking: u2, RGBFormat: bx, RGBIntegerFormat: s2, RGB_BPTC_SIGNED_Format: fv, RGB_BPTC_UNSIGNED_Format: hv, RGB_ETC1_Format: j0, RGB_ETC2_Format: Z0, RGB_PVRTC_2BPPV1_Format: Y0, RGB_PVRTC_4BPPV1_Format: q0, RGB_S3TC_DXT1_Format: vp, RGDepthPacking: c2, RGFormat: Ax, RGIntegerFormat: Dv, RawShaderMaterial: DE, Ray: Bh, Raycaster: aT, RectAreaLight: ZE, RedFormat: Cv, RedIntegerFormat: Zp, ReinhardToneMapping: Pb, RenderTarget: Ov, RenderTarget3D: tC, RenderTargetArray: eC, RepeatWrapping: Cp, ReplaceStencilOp: h2, ReverseSubtractEquation: yb, RingGeometry: Qv, SIGNED_RED_GREEN_RGTC2_Format: mv, SIGNED_RED_RGTC1_Format: dv, SRGBColorSpace: Ea, SRGBTransfer: Nn, Scene: Ox, ShaderChunk: Ze, ShaderLib: Or, ShaderMaterial: Br, ShadowMaterial: CE, Shape: Xc, ShapeGeometry: Kv, ShapePath: EC, ShapeUtils: Al, ShortType: xx, Skeleton: Hv, SkeletonHelper: fC, SkinnedMesh: dE, Source: xu, Sphere: Aa, SphereGeometry: em, Spherical: rC, SphericalHarmonics3: QE, SplineCurve: Gx, SpotLight: YE, SpotLightHelper: cC, Sprite: fE, SpriteMaterial: Lx, SrcAlphaFactor: z0, SrcAlphaSaturateFactor: Cb, SrcColorFactor: bb, StaticCopyUsage: C2, StaticDrawUsage: Lp, StaticReadUsage: A2, StereoCamera: Bw, StreamCopyUsage: U2, StreamDrawUsage: T2, StreamReadUsage: w2, StringKeyframeTrack: $c, SubtractEquation: vb, SubtractiveBlending: Q_, TOUCH: $A, TangentSpaceNormalMap: Tu, TetrahedronGeometry: Jv, Texture: yi, TextureLoader: ww, TextureUtils: DC, TimestampQuery: O2, TorusGeometry: $v, TorusKnotGeometry: ty, Triangle: os, TriangleFanDrawMode: o2, TriangleStripDrawMode: l2, TrianglesDrawMode: r2, TubeGeometry: ey, UVMapping: Tv, Uint16BufferAttribute: Ux, Uint32BufferAttribute: Nx, Uint8BufferAttribute: yR, Uint8ClampedBufferAttribute: _R, Uniform: eS, UniformsGroup: iC, UniformsLib: le, UniformsUtils: lE, UnsignedByteType: zr, UnsignedInt248Type: Yc, UnsignedInt5999Type: Sx, UnsignedIntType: So, UnsignedShort4444Type: Rv, UnsignedShort5551Type: wv, UnsignedShortType: Ah, VSMShadowMap: Nr, Vector2: zt, Vector3: k, Vector4: yn, VectorKeyframeTrack: Gp, VideoFrameTexture: FR, VideoTexture: yE, WebGL3DRenderTarget: sR, WebGLArrayRenderTarget: aR, WebGLCoordinateSystem: Lr, WebGLCubeRenderTarget: uE, WebGLRenderTarget: Rl, WebGLRenderer: hT, WebGLUtils: fT, WebGPUCoordinateSystem: zp, WebXRController: C0, WireframeGeometry: wE, WrapAroundEnding: Np, ZeroCurvatureEnding: Bc, ZeroFactor: Sb, ZeroSlopeEnding: Pc, ZeroStencilOp: f2, createCanvasElement: iE }, Symbol.toStringTag, { value: "Module" })); var C_ = { exports: {} }, ho = {};/**
 * @license React
 * react-reconciler-constants.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var wM; function hO() { return wM || (wM = 1, ho.ConcurrentRoot = 1, ho.ContinuousEventPriority = 8, ho.DefaultEventPriority = 32, ho.DiscreteEventPriority = 2, ho.IdleEventPriority = 268435456, ho.LegacyRoot = 0, ho.NoEventPriority = 0), ho } var CM; function dO() { return CM || (CM = 1, C_.exports = hO()), C_.exports } var U0 = dO(), D_ = { exports: {} }, U_ = {}, N_ = { exports: {} }, O_ = {};/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var DM; function pO() { if (DM) return O_; DM = 1; var r = Nh(); function t(x, S) { return x === S && (x !== 0 || 1 / x === 1 / S) || x !== x && S !== S } var e = typeof Object.is == "function" ? Object.is : t, n = r.useState, a = r.useEffect, o = r.useLayoutEffect, f = r.useDebugValue; function h(x, S) { var M = S(), A = n({ inst: { value: M, getSnapshot: S } }), C = A[0].inst, R = A[1]; return o(function () { C.value = M, C.getSnapshot = S, m(C) && R({ inst: C }) }, [x, M, S]), a(function () { return m(C) && R({ inst: C }), x(function () { m(C) && R({ inst: C }) }) }, [x]), f(M), M } function m(x) { var S = x.getSnapshot; x = x.value; try { var M = S(); return !e(x, M) } catch { return !0 } } function g(x, S) { return S() } var _ = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? g : h; return O_.useSyncExternalStore = r.useSyncExternalStore !== void 0 ? r.useSyncExternalStore : _, O_ } var UM; function mO() { return UM || (UM = 1, N_.exports = pO()), N_.exports }/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var NM; function gO() { if (NM) return U_; NM = 1; var r = Nh(), t = mO(); function e(g, _) { return g === _ && (g !== 0 || 1 / g === 1 / _) || g !== g && _ !== _ } var n = typeof Object.is == "function" ? Object.is : e, a = t.useSyncExternalStore, o = r.useRef, f = r.useEffect, h = r.useMemo, m = r.useDebugValue; return U_.useSyncExternalStoreWithSelector = function (g, _, x, S, M) { var A = o(null); if (A.current === null) { var C = { hasValue: !1, value: null }; A.current = C } else C = A.current; A = h(function () { function T(I) { if (!D) { if (D = !0, N = I, I = S(I), M !== void 0 && C.hasValue) { var G = C.value; if (M(G, I)) return U = G } return U = I } if (G = U, n(N, I)) return G; var q = S(I); return M !== void 0 && M(G, q) ? (N = I, G) : (N = I, U = q) } var D = !1, N, U, V = x === void 0 ? null : x; return [function () { return T(_()) }, V === null ? void 0 : function () { return T(V()) }] }, [_, x, S, M]); var R = a(g, A[0], A[1]); return f(function () { C.hasValue = !0, C.value = R }, [R]), m(R), R }, U_ } var OM; function vO() { return OM || (OM = 1, D_.exports = gO()), D_.exports } var yO = vO(); const _O = gx(yO), LM = r => { let t; const e = new Set, n = (g, _) => { const x = typeof g == "function" ? g(t) : g; if (!Object.is(x, t)) { const S = t; t = _ ?? (typeof x != "object" || x === null) ? x : Object.assign({}, t, x), e.forEach(M => M(t, S)) } }, a = () => t, h = { setState: n, getState: a, getInitialState: () => m, subscribe: g => (e.add(g), () => e.delete(g)) }, m = t = r(n, a, h); return h }, xO = r => r ? LM(r) : LM, { useSyncExternalStoreWithSelector: SO } = _O, MO = r => r; function bO(r, t = MO, e) { const n = SO(r.subscribe, r.getState, r.getInitialState, t, e); return Su.useDebugValue(n), n } const zM = (r, t) => { const e = xO(r), n = (a, o = t) => bO(e, a, o); return Object.assign(n, e), n }, EO = (r, t) => r ? zM(r, t) : zM; var L_ = { exports: {} }, z_ = { exports: {} }, B_ = { exports: {} }, P_ = {};/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var BM; function TO() { return BM || (BM = 1, function (r) { function t(K, ft) { var nt = K.length; K.push(ft); t: for (; 0 < nt;) { var Et = nt - 1 >>> 1, Y = K[Et]; if (0 < a(Y, ft)) K[Et] = ft, K[nt] = Y, nt = Et; else break t } } function e(K) { return K.length === 0 ? null : K[0] } function n(K) { if (K.length === 0) return null; var ft = K[0], nt = K.pop(); if (nt !== ft) { K[0] = nt; t: for (var Et = 0, Y = K.length, it = Y >>> 1; Et < it;) { var Dt = 2 * (Et + 1) - 1, Xt = K[Dt], $ = Dt + 1, Tt = K[$]; if (0 > a(Xt, nt)) $ < Y && 0 > a(Tt, Xt) ? (K[Et] = Tt, K[$] = nt, Et = $) : (K[Et] = Xt, K[Dt] = nt, Et = Dt); else if ($ < Y && 0 > a(Tt, nt)) K[Et] = Tt, K[$] = nt, Et = $; else break t } } return ft } function a(K, ft) { var nt = K.sortIndex - ft.sortIndex; return nt !== 0 ? nt : K.id - ft.id } if (r.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") { var o = performance; r.unstable_now = function () { return o.now() } } else { var f = Date, h = f.now(); r.unstable_now = function () { return f.now() - h } } var m = [], g = [], _ = 1, x = null, S = 3, M = !1, A = !1, C = !1, R = typeof setTimeout == "function" ? setTimeout : null, T = typeof clearTimeout == "function" ? clearTimeout : null, D = typeof setImmediate < "u" ? setImmediate : null; function N(K) { for (var ft = e(g); ft !== null;) { if (ft.callback === null) n(g); else if (ft.startTime <= K) n(g), ft.sortIndex = ft.expirationTime, t(m, ft); else break; ft = e(g) } } function U(K) { if (C = !1, N(K), !A) if (e(m) !== null) A = !0, ct(); else { var ft = e(g); ft !== null && xt(U, ft.startTime - K) } } var V = !1, I = -1, G = 5, q = -1; function z() { return !(r.unstable_now() - q < G) } function L() { if (V) { var K = r.unstable_now(); q = K; var ft = !0; try { t: { A = !1, C && (C = !1, T(I), I = -1), M = !0; var nt = S; try { e: { for (N(K), x = e(m); x !== null && !(x.expirationTime > K && z());) { var Et = x.callback; if (typeof Et == "function") { x.callback = null, S = x.priorityLevel; var Y = Et(x.expirationTime <= K); if (K = r.unstable_now(), typeof Y == "function") { x.callback = Y, N(K), ft = !0; break e } x === e(m) && n(m), N(K) } else n(m); x = e(m) } if (x !== null) ft = !0; else { var it = e(g); it !== null && xt(U, it.startTime - K), ft = !1 } } break t } finally { x = null, S = nt, M = !1 } ft = void 0 } } finally { ft ? j() : V = !1 } } } var j; if (typeof D == "function") j = function () { D(L) }; else if (typeof MessageChannel < "u") { var dt = new MessageChannel, tt = dt.port2; dt.port1.onmessage = L, j = function () { tt.postMessage(null) } } else j = function () { R(L, 0) }; function ct() { V || (V = !0, j()) } function xt(K, ft) { I = R(function () { K(r.unstable_now()) }, ft) } r.unstable_IdlePriority = 5, r.unstable_ImmediatePriority = 1, r.unstable_LowPriority = 4, r.unstable_NormalPriority = 3, r.unstable_Profiling = null, r.unstable_UserBlockingPriority = 2, r.unstable_cancelCallback = function (K) { K.callback = null }, r.unstable_continueExecution = function () { A || M || (A = !0, ct()) }, r.unstable_forceFrameRate = function (K) { 0 > K || 125 < K ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : G = 0 < K ? Math.floor(1e3 / K) : 5 }, r.unstable_getCurrentPriorityLevel = function () { return S }, r.unstable_getFirstCallbackNode = function () { return e(m) }, r.unstable_next = function (K) { switch (S) { case 1: case 2: case 3: var ft = 3; break; default: ft = S }var nt = S; S = ft; try { return K() } finally { S = nt } }, r.unstable_pauseExecution = function () { }, r.unstable_requestPaint = function () { }, r.unstable_runWithPriority = function (K, ft) { switch (K) { case 1: case 2: case 3: case 4: case 5: break; default: K = 3 }var nt = S; S = K; try { return ft() } finally { S = nt } }, r.unstable_scheduleCallback = function (K, ft, nt) { var Et = r.unstable_now(); switch (typeof nt == "object" && nt !== null ? (nt = nt.delay, nt = typeof nt == "number" && 0 < nt ? Et + nt : Et) : nt = Et, K) { case 1: var Y = -1; break; case 2: Y = 250; break; case 5: Y = 1073741823; break; case 4: Y = 1e4; break; default: Y = 5e3 }return Y = nt + Y, K = { id: _++, callback: ft, priorityLevel: K, startTime: nt, expirationTime: Y, sortIndex: -1 }, nt > Et ? (K.sortIndex = nt, t(g, K), e(m) === null && K === e(g) && (C ? (T(I), I = -1) : C = !0, xt(U, nt - Et))) : (K.sortIndex = Y, t(m, K), A || M || (A = !0, ct())), K }, r.unstable_shouldYield = z, r.unstable_wrapCallback = function (K) { var ft = S; return function () { var nt = S; S = ft; try { return K.apply(this, arguments) } finally { S = nt } } } }(P_)), P_ } var PM; function aS() { return PM || (PM = 1, B_.exports = TO()), B_.exports }/**
 * @license React
 * react-reconciler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var IM; function AO() {
	return IM || (IM = 1, function (r) {
		r.exports = function (t) {
			function e(l, u, p, y) { return new Cm(l, u, p, y) } function n() { } function a(l) { var u = "https://react.dev/errors/" + l; if (1 < arguments.length) { u += "?args[]=" + encodeURIComponent(arguments[1]); for (var p = 2; p < arguments.length; p++)u += "&args[]=" + encodeURIComponent(arguments[p]) } return "Minified React error #" + l + "; visit " + u + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings." } function o(l) { return l === null || typeof l != "object" ? null : (l = bn && l[bn] || l["@@iterator"], typeof l == "function" ? l : null) } function f(l) { if (l == null) return null; if (typeof l == "function") return l.$$typeof === fi ? null : l.displayName || l.name || null; if (typeof l == "string") return l; switch (l) { case el: return "Fragment"; case Bs: return "Portal"; case nl: return "Profiler"; case Xl: return "StrictMode"; case hr: return "Suspense"; case ac: return "SuspenseList" }if (typeof l == "object") switch (l.$$typeof) { case il: return (l.displayName || "Context") + ".Provider"; case hd: return (l._context.displayName || "Context") + ".Consumer"; case Tf: var u = l.render; return l = l.displayName, l || (l = u.displayName || u.name || "", l = l !== "" ? "ForwardRef(" + l + ")" : "ForwardRef"), l; case Vo: return u = l.displayName || null, u !== null ? u : f(l.type) || "Memo"; case dr: u = l._payload, l = l._init; try { return f(l(u)) } catch { } }return null } function h(l) {
				if (al === void 0) try { throw Error() } catch (p) {
					var u = p.stack.trim().match(/\n( *(at )?)/); al = u && u[1] || "", sl = -1 < p.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < p.stack.indexOf("@") ? "@unknown:0:0" : ""
				} return `
`+ al + l + sl
			} function m(l, u) {
				if (!l || Go) return ""; Go = !0; var p = Error.prepareStackTrace; Error.prepareStackTrace = void 0; try {
					var y = { DetermineComponentFrameRoot: function () { try { if (u) { var re = function () { throw Error() }; if (Object.defineProperty(re.prototype, "props", { set: function () { throw Error() } }), typeof Reflect == "object" && Reflect.construct) { try { Reflect.construct(re, []) } catch (He) { var qt = He } Reflect.construct(l, [], re) } else { try { re.call() } catch (He) { qt = He } l.call(re.prototype) } } else { try { throw Error() } catch (He) { qt = He } (re = l()) && typeof re.catch == "function" && re.catch(function () { }) } } catch (He) { if (He && qt && typeof He.stack == "string") return [He.stack, qt.stack] } return [null, null] } }; y.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot"; var E = Object.getOwnPropertyDescriptor(y.DetermineComponentFrameRoot, "name"); E && E.configurable && Object.defineProperty(y.DetermineComponentFrameRoot, "name", { value: "DetermineComponentFrameRoot" }); var w = y.DetermineComponentFrameRoot(), F = w[0], Q = w[1]; if (F && Q) {
						var ut = F.split(`
`), Rt = Q.split(`
`); for (E = y = 0; y < ut.length && !ut[y].includes("DetermineComponentFrameRoot");)y++; for (; E < Rt.length && !Rt[E].includes("DetermineComponentFrameRoot");)E++; if (y === ut.length || E === Rt.length) for (y = ut.length - 1, E = Rt.length - 1; 1 <= y && 0 <= E && ut[y] !== Rt[E];)E--; for (; 1 <= y && 0 <= E; y--, E--)if (ut[y] !== Rt[E]) {
							if (y !== 1 || E !== 1) do if (y--, E--, 0 > E || ut[y] !== Rt[E]) {
								var Wt = `
`+ ut[y].replace(" at new ", " at "); return l.displayName && Wt.includes("<anonymous>") && (Wt = Wt.replace("<anonymous>", l.displayName)), Wt
							} while (1 <= y && 0 <= E); break
						}
					}
				} finally { Go = !1, Error.prepareStackTrace = p } return (p = l ? l.displayName || l.name : "") ? h(p) : ""
			} function g(l) { switch (l.tag) { case 26: case 27: case 5: return h(l.type); case 16: return h("Lazy"); case 13: return h("Suspense"); case 19: return h("SuspenseList"); case 0: case 15: return l = m(l.type, !1), l; case 11: return l = m(l.type.render, !1), l; case 1: return l = m(l.type, !0), l; default: return "" } } function _(l) {
				try { var u = ""; do u += g(l), l = l.return; while (l); return u } catch (p) {
					return `
Error generating stack: `+ p.message + `
`+ p.stack
				}
			} function x(l) { var u = l, p = l; if (l.alternate) for (; u.return;)u = u.return; else { l = u; do u = l, (u.flags & 4098) !== 0 && (p = u.return), l = u.return; while (l) } return u.tag === 3 ? p : null } function S(l) { if (x(l) !== l) throw Error(a(188)) } function M(l) { var u = l.alternate; if (!u) { if (u = x(l), u === null) throw Error(a(188)); return u !== l ? null : l } for (var p = l, y = u; ;) { var E = p.return; if (E === null) break; var w = E.alternate; if (w === null) { if (y = E.return, y !== null) { p = y; continue } break } if (E.child === w.child) { for (w = E.child; w;) { if (w === p) return S(E), l; if (w === y) return S(E), u; w = w.sibling } throw Error(a(188)) } if (p.return !== y.return) p = E, y = w; else { for (var F = !1, Q = E.child; Q;) { if (Q === p) { F = !0, p = E, y = w; break } if (Q === y) { F = !0, y = E, p = w; break } Q = Q.sibling } if (!F) { for (Q = w.child; Q;) { if (Q === p) { F = !0, p = w, y = E; break } if (Q === y) { F = !0, y = w, p = E; break } Q = Q.sibling } if (!F) throw Error(a(189)) } } if (p.alternate !== y) throw Error(a(190)) } if (p.tag !== 3) throw Error(a(188)); return p.stateNode.current === p ? l : u } function A(l) { var u = l.tag; if (u === 5 || u === 26 || u === 27 || u === 6) return l; for (l = l.child; l !== null;) { if (u = A(l), u !== null) return u; l = l.sibling } return null } function C(l) { var u = l.tag; if (u === 5 || u === 26 || u === 27 || u === 6) return l; for (l = l.child; l !== null;) { if (l.tag !== 4 && (u = C(l), u !== null)) return u; l = l.sibling } return null } function R(l) { return { current: l } } function T(l) { 0 > ul || (l.current = If[ul], If[ul] = null, ul--) } function D(l, u) { ul++, If[ul] = l.current, l.current = u } function N(l) { return l >>>= 0, l === 0 ? 32 : 31 - (Bd(l) / gy | 0) | 0 } function U(l) { var u = l & 42; if (u !== 0) return u; switch (l & -l) { case 1: return 1; case 2: return 2; case 4: return 4; case 8: return 8; case 16: return 16; case 32: return 32; case 64: return 64; case 128: case 256: case 512: case 1024: case 2048: case 4096: case 8192: case 16384: case 32768: case 65536: case 131072: case 262144: case 524288: case 1048576: case 2097152: return l & 4194176; case 4194304: case 8388608: case 16777216: case 33554432: return l & 62914560; case 67108864: return 67108864; case 134217728: return 134217728; case 268435456: return 268435456; case 536870912: return 536870912; case 1073741824: return 0; default: return l } } function V(l, u) { var p = l.pendingLanes; if (p === 0) return 0; var y = 0, E = l.suspendedLanes, w = l.pingedLanes, F = l.warmLanes; l = l.finishedLanes !== 0; var Q = p & 134217727; return Q !== 0 ? (p = Q & ~E, p !== 0 ? y = U(p) : (w &= Q, w !== 0 ? y = U(w) : l || (F = Q & ~F, F !== 0 && (y = U(F))))) : (Q = p & ~E, Q !== 0 ? y = U(Q) : w !== 0 ? y = U(w) : l || (F = p & ~F, F !== 0 && (y = U(F)))), y === 0 ? 0 : u !== 0 && u !== y && (u & E) === 0 && (E = y & -y, F = u & -u, E >= F || E === 32 && (F & 4194176) !== 0) ? u : y } function I(l, u) { return (l.pendingLanes & ~(l.suspendedLanes & ~l.pingedLanes) & u) === 0 } function G(l, u) { switch (l) { case 1: case 2: case 4: case 8: return u + 250; case 16: case 32: case 64: case 128: case 256: case 512: case 1024: case 2048: case 4096: case 8192: case 16384: case 32768: case 65536: case 131072: case 262144: case 524288: case 1048576: case 2097152: return u + 5e3; case 4194304: case 8388608: case 16777216: case 33554432: return -1; case 67108864: case 134217728: case 268435456: case 536870912: case 1073741824: return -1; default: return -1 } } function q() { var l = oc; return oc <<= 1, (oc & 4194176) === 0 && (oc = 128), l } function z() { var l = ko; return ko <<= 1, (ko & 62914560) === 0 && (ko = 4194304), l } function L(l) { for (var u = [], p = 0; 31 > p; p++)u.push(l); return u } function j(l, u) { l.pendingLanes |= u, u !== 268435456 && (l.suspendedLanes = 0, l.pingedLanes = 0, l.warmLanes = 0) } function dt(l, u, p, y, E, w) { var F = l.pendingLanes; l.pendingLanes = p, l.suspendedLanes = 0, l.pingedLanes = 0, l.warmLanes = 0, l.expiredLanes &= p, l.entangledLanes &= p, l.errorRecoveryDisabledLanes &= p, l.shellSuspendCounter = 0; var Q = l.entanglements, ut = l.expirationTimes, Rt = l.hiddenUpdates; for (p = F & ~p; 0 < p;) { var Wt = 31 - ti(p), re = 1 << Wt; Q[Wt] = 0, ut[Wt] = -1; var qt = Rt[Wt]; if (qt !== null) for (Rt[Wt] = null, Wt = 0; Wt < qt.length; Wt++) { var He = qt[Wt]; He !== null && (He.lane &= -536870913) } p &= ~re } y !== 0 && tt(l, y, 0), w !== 0 && E === 0 && l.tag !== 0 && (l.suspendedLanes |= w & ~(F & ~u)) } function tt(l, u, p) { l.pendingLanes |= u, l.suspendedLanes &= ~u; var y = 31 - ti(u); l.entangledLanes |= u, l.entanglements[y] = l.entanglements[y] | 1073741824 | p & 4194218 } function ct(l, u) { var p = l.entangledLanes |= u; for (l = l.entanglements; p;) { var y = 31 - ti(p), E = 1 << y; E & u | l[y] & u && (l[y] |= u), p &= ~E } } function xt(l) { return l &= -l, 2 < l ? 8 < l ? (l & 134217727) !== 0 ? 32 : 268435456 : 8 : 2 } function K(l) { if (hi && typeof hi.onCommitFiberRoot == "function") try { hi.onCommitFiberRoot(Zo, l, void 0, (l.current.flags & 128) === 128) } catch { } } function ft(l) { if (typeof Xi == "function" && Ff(l), hi && typeof hi.setStrictMode == "function") try { hi.setStrictMode(Zo, l) } catch { } } function nt(l, u) { return l === u && (l !== 0 || 1 / l === 1 / u) || l !== l && u !== u } function Et(l, u) { if (typeof l == "object" && l !== null) { var p = Vf.get(l); return p !== void 0 ? p : (u = { value: l, source: u, stack: _(u) }, Vf.set(l, u), u) } return { value: l, source: u, stack: _(u) } } function Y(l, u) { La[za++] = Qo, La[za++] = fl, fl = l, Qo = u } function it(l, u, p) { va[qi++] = Fs, va[qi++] = Vs, va[qi++] = xs, xs = l; var y = Fs; l = Vs; var E = 32 - ti(y) - 1; y &= ~(1 << E), p += 1; var w = 32 - ti(u) + E; if (30 < w) { var F = E - E % 5; w = (y & (1 << F) - 1).toString(32), y >>= F, E -= F, Fs = 1 << 32 - ti(u) + E | p << E | y, Vs = w + l } else Fs = 1 << w | p << E | y, Vs = l } function Dt(l) { l.return !== null && (Y(l, 1), it(l, 1, 0)) } function Xt(l) { for (; l === fl;)fl = La[--za], La[za] = null, Qo = La[--za], La[za] = null; for (; l === xs;)xs = va[--qi], va[qi] = null, Vs = va[--qi], va[qi] = null, Fs = va[--qi], va[qi] = null } function $(l, u) { D(yr, u), D(Za, l), D(ei, null), l = dd(u), T(ei), D(ei, l) } function Tt() { T(ei), T(Za), T(yr) } function Lt(l) { l.memoizedState !== null && D(cc, l); var u = ei.current, p = Dm(u, l.type); u !== p && (D(Za, l), D(ei, p)) } function Vt(l) { Za.current === l && (T(ei), T(Za)), cc.current === l && (T(cc), vs ? mr._currentValue = Yl : mr._currentValue2 = Yl) } function kt(l) { var u = Error(a(418, "")); throw Ut(Et(u, l)), fc } function Me(l, u) { if (!ga) throw Error(a(175)); jl(l.stateNode, l.type, l.memoizedProps, u, l) || kt(l) } function Jt(l) { for (ni = l.return; ni;)switch (ni.tag) { case 3: case 27: Ss = !0; return; case 5: case 13: Ss = !1; return; default: ni = ni.return } } function Le(l) { if (!ga || l !== ni) return !1; if (!fn) return Jt(l), fn = !0, !1; var u = !1; if (Ti ? l.tag !== 3 && l.tag !== 27 && (l.tag !== 5 || Ad(l.type) && !Oi(l.type, l.memoizedProps)) && (u = !0) : l.tag !== 3 && (l.tag !== 5 || Ad(l.type) && !Oi(l.type, l.memoizedProps)) && (u = !0), u && Tn && kt(l), Jt(l), l.tag === 13) { if (!ga) throw Error(a(316)); if (l = l.memoizedState, l = l !== null ? l.dehydrated : null, !l) throw Error(a(317)); Tn = og(l) } else Tn = ni ? ol(l.stateNode) : null; return !0 } function Bt() { ga && (Tn = ni = null, fn = !1) } function Ut(l) { Qa === null ? Qa = [l] : Qa.push(l) } function W() { for (var l = _r, u = Ms = _r = 0; u < l;) { var p = ya[u]; ya[u++] = null; var y = ya[u]; ya[u++] = null; var E = ya[u]; ya[u++] = null; var w = ya[u]; if (ya[u++] = null, y !== null && E !== null) { var F = y.pending; F === null ? E.next = E : (E.next = F.next, F.next = E), y.pending = E } w !== 0 && jt(p, E, w) } } function de(l, u, p, y) { ya[_r++] = l, ya[_r++] = u, ya[_r++] = p, ya[_r++] = y, Ms |= y, l.lanes |= y, l = l.alternate, l !== null && (l.lanes |= y) } function Ht(l, u, p, y) { return de(l, u, p, y), be(l) } function ee(l, u) { return de(l, null, null, u), be(l) } function jt(l, u, p) { l.lanes |= p; var y = l.alternate; y !== null && (y.lanes |= p); for (var E = !1, w = l.return; w !== null;)w.childLanes |= p, y = w.alternate, y !== null && (y.childLanes |= p), w.tag === 22 && (l = w.stateNode, l === null || l._visibility & 1 || (E = !0)), l = w, w = w.return; E && u !== null && l.tag === 3 && (w = l.stateNode, E = 31 - ti(p), w = w.hiddenUpdates, l = w[E], l === null ? w[E] = [u] : l.push(u), u.lane = p | 536870912) } function be(l) { if (50 < no) throw no = 0, Vd = null, Error(a(185)); for (var u = l.return; u !== null;)l = u, u = l.return; return l.tag === 3 ? l.stateNode : null } function Qt(l) { l !== hl && l.next === null && (hl === null ? In = hl = l : hl = hl.next = l), ii = !0, Gf || (Gf = !0, Ct(B)) } function X(l, u) { if (!Xf && ii) { Xf = !0; do for (var p = !1, y = In; y !== null;) { if (l !== 0) { var E = y.pendingLanes; if (E === 0) var w = 0; else { var F = y.suspendedLanes, Q = y.pingedLanes; w = (1 << 31 - ti(42 | l) + 1) - 1, w &= E & ~(F & ~Q), w = w & 201326677 ? w & 201326677 | 1 : w ? w | 2 : 0 } w !== 0 && (p = !0, Pt(y, w)) } else w = en, w = V(y, y === Rn ? w : 0), (w & 3) === 0 || I(y, w) || (p = !0, Pt(y, w)); y = y.next } while (p); Xf = !1 } } function B() { ii = Gf = !1; var l = 0; Ko !== 0 && (Lm() && (l = Ko), Ko = 0); for (var u = Oa(), p = null, y = In; y !== null;) { var E = y.next, w = mt(y, u); w === 0 ? (y.next = null, p === null ? In = E : p.next = E, E === null && (hl = p)) : (p = y, (l !== 0 || (w & 3) !== 0) && (ii = !0)), y = E } X(l) } function mt(l, u) { for (var p = l.suspendedLanes, y = l.pingedLanes, E = l.expirationTimes, w = l.pendingLanes & -62914561; 0 < w;) { var F = 31 - ti(w), Q = 1 << F, ut = E[F]; ut === -1 ? ((Q & p) === 0 || (Q & y) !== 0) && (E[F] = G(Q, u)) : ut <= u && (l.expiredLanes |= Q), w &= ~Q } if (u = Rn, p = en, p = V(l, l === u ? p : 0), y = l.callbackNode, p === 0 || l === u && En === 2 || l.cancelPendingCommit !== null) return y !== null && y !== null && _s(y), l.callbackNode = null, l.callbackPriority = 0; if ((p & 3) === 0 || I(l, p)) { if (u = p & -p, u === l.callbackPriority) return u; switch (y !== null && _s(y), xt(p)) { case 2: case 8: p = uc; break; case 32: p = jo; break; case 268435456: p = Ql; break; default: p = jo }return y = bt.bind(null, l), p = Hs(p, y), l.callbackPriority = u, l.callbackNode = p, u } return y !== null && y !== null && _s(y), l.callbackPriority = 2, l.callbackNode = null, 2 } function bt(l, u) { var p = l.callbackNode; if (Kr() && l.callbackNode !== p) return null; var y = en; return y = V(l, l === Rn ? y : 0), y === 0 ? null : (Da(l, y, u), mt(l, Oa()), l.callbackNode != null && l.callbackNode === p ? bt.bind(null, l) : null) } function Pt(l, u) { if (Kr()) return null; Da(l, u, !0) } function Ct(l) { Im ? Hm(function () { (tn & 6) !== 0 ? Hs(Hf, l) : l() }) : Hs(Hf, l) } function pe() { return Ko === 0 && (Ko = q()), Ko } function te(l, u) { if (Jo === null) { var p = Jo = []; qf = 0, Hn = pe(), Ai = { status: "pending", value: void 0, then: function (y) { p.push(y) } } } return qf++, u.then(oe, oe), u } function oe() { if (--qf === 0 && Jo !== null) { Ai !== null && (Ai.status = "fulfilled"); var l = Jo; Jo = null, Hn = 0, Ai = null; for (var u = 0; u < l.length; u++)(0, l[u])() } } function qe(l, u) { var p = [], y = { status: "pending", value: null, reason: null, then: function (E) { p.push(E) } }; return l.then(function () { y.status = "fulfilled", y.value = u; for (var E = 0; E < p.length; E++)(0, p[E])(u) }, function (E) { for (y.status = "rejected", y.reason = E, E = 0; E < p.length; E++)(0, p[E])(void 0) }), y } function Yt(l) { l.updateQueue = { baseState: l.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, lanes: 0, hiddenCallbacks: null }, callbacks: null } } function fe(l, u) { l = l.updateQueue, u.updateQueue === l && (u.updateQueue = { baseState: l.baseState, firstBaseUpdate: l.firstBaseUpdate, lastBaseUpdate: l.lastBaseUpdate, shared: l.shared, callbacks: null }) } function ge(l) { return { lane: l, tag: 0, payload: null, callback: null, next: null } } function he(l, u, p) { var y = l.updateQueue; if (y === null) return null; if (y = y.shared, (tn & 2) !== 0) { var E = y.pending; return E === null ? u.next = u : (u.next = E.next, E.next = u), y.pending = u, u = be(l), jt(l, null, p), u } return de(l, y, u, p), be(l) } function ue(l, u, p) { if (u = u.updateQueue, u !== null && (u = u.shared, (p & 4194176) !== 0)) { var y = u.lanes; y &= l.pendingLanes, p |= y, u.lanes = p, ct(l, p) } } function Be(l, u) { var p = l.updateQueue, y = l.alternate; if (y !== null && (y = y.updateQueue, p === y)) { var E = null, w = null; if (p = p.firstBaseUpdate, p !== null) { do { var F = { lane: p.lane, tag: p.tag, payload: p.payload, callback: null, next: null }; w === null ? E = w = F : w = w.next = F, p = p.next } while (p !== null); w === null ? E = w = u : w = w.next = u } else E = w = u; p = { baseState: y.baseState, firstBaseUpdate: E, lastBaseUpdate: w, shared: y.shared, callbacks: y.callbacks }, l.updateQueue = p; return } l = p.lastBaseUpdate, l === null ? p.firstBaseUpdate = u : l.next = u, p.lastBaseUpdate = u } function ye() { if (Yf) { var l = Ai; if (l !== null) throw l } } function pn(l, u, p, y) { Yf = !1; var E = l.updateQueue; Yi = !1; var w = E.firstBaseUpdate, F = E.lastBaseUpdate, Q = E.shared.pending; if (Q !== null) { E.shared.pending = null; var ut = Q, Rt = ut.next; ut.next = null, F === null ? w = Rt : F.next = Rt, F = ut; var Wt = l.alternate; Wt !== null && (Wt = Wt.updateQueue, Q = Wt.lastBaseUpdate, Q !== F && (Q === null ? Wt.firstBaseUpdate = Rt : Q.next = Rt, Wt.lastBaseUpdate = ut)) } if (w !== null) { var re = E.baseState; F = 0, Wt = Rt = ut = null, Q = w; do { var qt = Q.lane & -536870913, He = qt !== Q.lane; if (He ? (en & qt) === qt : (y & qt) === qt) { qt !== 0 && qt === Hn && (Yf = !0), Wt !== null && (Wt = Wt.next = { lane: 0, tag: Q.tag, payload: Q.payload, callback: null, next: null }); t: { var as = l, au = Q; qt = u; var io = p; switch (au.tag) { case 1: if (as = au.payload, typeof as == "function") { re = as.call(io, re, qt); break t } re = as; break t; case 3: as.flags = as.flags & -65537 | 128; case 0: if (as = au.payload, qt = typeof as == "function" ? as.call(io, re, qt) : as, qt == null) break t; re = Jn({}, re, qt); break t; case 2: Yi = !0 } } qt = Q.callback, qt !== null && (l.flags |= 64, He && (l.flags |= 8192), He = E.callbacks, He === null ? E.callbacks = [qt] : He.push(qt)) } else He = { lane: qt, tag: Q.tag, payload: Q.payload, callback: Q.callback, next: null }, Wt === null ? (Rt = Wt = He, ut = re) : Wt = Wt.next = He, F |= qt; if (Q = Q.next, Q === null) { if (Q = E.shared.pending, Q === null) break; He = Q, Q = He.next, He.next = null, E.lastBaseUpdate = He, E.shared.pending = null } } while (!0); Wt === null && (ut = re), E.baseState = ut, E.firstBaseUpdate = Rt, E.lastBaseUpdate = Wt, w === null && (E.shared.lanes = 0), ns |= F, l.lanes = F, l.memoizedState = re } } function at(l, u) { if (typeof l != "function") throw Error(a(191, l)); l.call(u) } function ie(l, u) { var p = l.callbacks; if (p !== null) for (l.callbacks = null, l = 0; l < p.length; l++)at(p[l], u) } function Mt(l, u) { if (ia(l, u)) return !0; if (typeof l != "object" || l === null || typeof u != "object" || u === null) return !1; var p = Object.keys(l), y = Object.keys(u); if (p.length !== y.length) return !1; for (y = 0; y < p.length; y++) { var E = p[y]; if (!gg.call(u, E) || !ia(l[E], u[E])) return !1 } return !0 } function Nt(l) { return l = l.status, l === "fulfilled" || l === "rejected" } function $t() { } function ne(l, u, p) { switch (p = l[p], p === void 0 ? l.push(u) : p !== u && (u.then($t, $t), u = p), u.status) { case "fulfilled": return u.value; case "rejected": throw l = u.reason, l === hc ? Error(a(483)) : l; default: if (typeof u.status == "string") u.then($t, $t); else { if (l = Rn, l !== null && 100 < l.shellSuspendCounter) throw Error(a(482)); l = u, l.status = "pending", l.then(function (y) { if (u.status === "pending") { var E = u; E.status = "fulfilled", E.value = y } }, function (y) { if (u.status === "pending") { var E = u; E.status = "rejected", E.reason = y } }) } switch (u.status) { case "fulfilled": return u.value; case "rejected": throw l = u.reason, l === hc ? Error(a(483)) : l }throw Wi = u, hc } } function we() { if (Wi === null) throw Error(a(459)); var l = Wi; return Wi = null, l } function Cn(l) { var u = ki; return ki += 1, Kl === null && (Kl = []), ne(Kl, l, u) } function Yn(l, u) { u = u.props.ref, l.ref = u !== void 0 ? u : null } function on(l, u) { throw u.$$typeof === fd ? Error(a(525)) : (l = Object.prototype.toString.call(u), Error(a(31, l === "[object Object]" ? "object with keys {" + Object.keys(u).join(", ") + "}" : l))) } function Pi(l) { var u = l._init; return u(l._payload) } function Ii(l) { function u(vt, lt) { if (l) { var _t = vt.deletions; _t === null ? (vt.deletions = [lt], vt.flags |= 16) : _t.push(lt) } } function p(vt, lt) { if (!l) return null; for (; lt !== null;)u(vt, lt), lt = lt.sibling; return null } function y(vt) { for (var lt = new Map; vt !== null;)vt.key !== null ? lt.set(vt.key, vt) : lt.set(vt.index, vt), vt = vt.sibling; return lt } function E(vt, lt) { return vt = ur(vt, lt), vt.index = 0, vt.sibling = null, vt } function w(vt, lt, _t) { return vt.index = _t, l ? (_t = vt.alternate, _t !== null ? (_t = _t.index, _t < lt ? (vt.flags |= 33554434, lt) : _t) : (vt.flags |= 33554434, lt)) : (vt.flags |= 1048576, lt) } function F(vt) { return l && vt.alternate === null && (vt.flags |= 33554434), vt } function Q(vt, lt, _t, Gt) { return lt === null || lt.tag !== 6 ? (lt = ic(_t, vt.mode, Gt), lt.return = vt, lt) : (lt = E(lt, _t), lt.return = vt, lt) } function ut(vt, lt, _t, Gt) { var _e = _t.type; return _e === el ? Wt(vt, lt, _t.props.children, Gt, _t.key) : lt !== null && (lt.elementType === _e || typeof _e == "object" && _e !== null && _e.$$typeof === dr && Pi(_e) === lt.type) ? (lt = E(lt, _t.props), Yn(lt, _t), lt.return = vt, lt) : (lt = Gl(_t.type, _t.key, _t.props, null, vt.mode, Gt), Yn(lt, _t), lt.return = vt, lt) } function Rt(vt, lt, _t, Gt) { return lt === null || lt.tag !== 4 || lt.stateNode.containerInfo !== _t.containerInfo || lt.stateNode.implementation !== _t.implementation ? (lt = ma(_t, vt.mode, Gt), lt.return = vt, lt) : (lt = E(lt, _t.children || []), lt.return = vt, lt) } function Wt(vt, lt, _t, Gt, _e) { return lt === null || lt.tag !== 7 ? (lt = $r(_t, vt.mode, Gt, _e), lt.return = vt, lt) : (lt = E(lt, _t), lt.return = vt, lt) } function re(vt, lt, _t) { if (typeof lt == "string" && lt !== "" || typeof lt == "number" || typeof lt == "bigint") return lt = ic("" + lt, vt.mode, _t), lt.return = vt, lt; if (typeof lt == "object" && lt !== null) { switch (lt.$$typeof) { case tl: return _t = Gl(lt.type, lt.key, lt.props, null, vt.mode, _t), Yn(_t, lt), _t.return = vt, _t; case Bs: return lt = ma(lt, vt.mode, _t), lt.return = vt, lt; case dr: var Gt = lt._init; return lt = Gt(lt._payload), re(vt, lt, _t) }if (rl(lt) || o(lt)) return lt = $r(lt, vt.mode, _t, null), lt.return = vt, lt; if (typeof lt.then == "function") return re(vt, Cn(lt), _t); if (lt.$$typeof === il) return re(vt, Vu(vt, lt), _t); on(vt, lt) } return null } function qt(vt, lt, _t, Gt) { var _e = lt !== null ? lt.key : null; if (typeof _t == "string" && _t !== "" || typeof _t == "number" || typeof _t == "bigint") return _e !== null ? null : Q(vt, lt, "" + _t, Gt); if (typeof _t == "object" && _t !== null) { switch (_t.$$typeof) { case tl: return _t.key === _e ? ut(vt, lt, _t, Gt) : null; case Bs: return _t.key === _e ? Rt(vt, lt, _t, Gt) : null; case dr: return _e = _t._init, _t = _e(_t._payload), qt(vt, lt, _t, Gt) }if (rl(_t) || o(_t)) return _e !== null ? null : Wt(vt, lt, _t, Gt, null); if (typeof _t.then == "function") return qt(vt, lt, Cn(_t), Gt); if (_t.$$typeof === il) return qt(vt, lt, Vu(vt, _t), Gt); on(vt, _t) } return null } function He(vt, lt, _t, Gt, _e) { if (typeof Gt == "string" && Gt !== "" || typeof Gt == "number" || typeof Gt == "bigint") return vt = vt.get(_t) || null, Q(lt, vt, "" + Gt, _e); if (typeof Gt == "object" && Gt !== null) { switch (Gt.$$typeof) { case tl: return vt = vt.get(Gt.key === null ? _t : Gt.key) || null, ut(lt, vt, Gt, _e); case Bs: return vt = vt.get(Gt.key === null ? _t : Gt.key) || null, Rt(lt, vt, Gt, _e); case dr: var wn = Gt._init; return Gt = wn(Gt._payload), He(vt, lt, _t, Gt, _e) }if (rl(Gt) || o(Gt)) return vt = vt.get(_t) || null, Wt(lt, vt, Gt, _e, null); if (typeof Gt.then == "function") return He(vt, lt, _t, Cn(Gt), _e); if (Gt.$$typeof === il) return He(vt, lt, _t, Vu(lt, Gt), _e); on(lt, Gt) } return null } function as(vt, lt, _t, Gt) { for (var _e = null, wn = null, Re = lt, Je = lt = 0, Un = null; Re !== null && Je < _t.length; Je++) { Re.index > Je ? (Un = Re, Re = null) : Un = Re.sibling; var rn = qt(vt, Re, _t[Je], Gt); if (rn === null) { Re === null && (Re = Un); break } l && Re && rn.alternate === null && u(vt, Re), lt = w(rn, lt, Je), wn === null ? _e = rn : wn.sibling = rn, wn = rn, Re = Un } if (Je === _t.length) return p(vt, Re), fn && Y(vt, Je), _e; if (Re === null) { for (; Je < _t.length; Je++)Re = re(vt, _t[Je], Gt), Re !== null && (lt = w(Re, lt, Je), wn === null ? _e = Re : wn.sibling = Re, wn = Re); return fn && Y(vt, Je), _e } for (Re = y(Re); Je < _t.length; Je++)Un = He(Re, vt, Je, _t[Je], Gt), Un !== null && (l && Un.alternate !== null && Re.delete(Un.key === null ? Je : Un.key), lt = w(Un, lt, Je), wn === null ? _e = Un : wn.sibling = Un, wn = Un); return l && Re.forEach(function (Sl) { return u(vt, Sl) }), fn && Y(vt, Je), _e } function au(vt, lt, _t, Gt) { if (_t == null) throw Error(a(151)); for (var _e = null, wn = null, Re = lt, Je = lt = 0, Un = null, rn = _t.next(); Re !== null && !rn.done; Je++, rn = _t.next()) { Re.index > Je ? (Un = Re, Re = null) : Un = Re.sibling; var Sl = qt(vt, Re, rn.value, Gt); if (Sl === null) { Re === null && (Re = Un); break } l && Re && Sl.alternate === null && u(vt, Re), lt = w(Sl, lt, Je), wn === null ? _e = Sl : wn.sibling = Sl, wn = Sl, Re = Un } if (rn.done) return p(vt, Re), fn && Y(vt, Je), _e; if (Re === null) { for (; !rn.done; Je++, rn = _t.next())rn = re(vt, rn.value, Gt), rn !== null && (lt = w(rn, lt, Je), wn === null ? _e = rn : wn.sibling = rn, wn = rn); return fn && Y(vt, Je), _e } for (Re = y(Re); !rn.done; Je++, rn = _t.next())rn = He(Re, vt, Je, rn.value, Gt), rn !== null && (l && rn.alternate !== null && Re.delete(rn.key === null ? Je : rn.key), lt = w(rn, lt, Je), wn === null ? _e = rn : wn.sibling = rn, wn = rn); return l && Re.forEach(function (yg) { return u(vt, yg) }), fn && Y(vt, Je), _e } function io(vt, lt, _t, Gt) { if (typeof _t == "object" && _t !== null && _t.type === el && _t.key === null && (_t = _t.props.children), typeof _t == "object" && _t !== null) { switch (_t.$$typeof) { case tl: t: { for (var _e = _t.key; lt !== null;) { if (lt.key === _e) { if (_e = _t.type, _e === el) { if (lt.tag === 7) { p(vt, lt.sibling), Gt = E(lt, _t.props.children), Gt.return = vt, vt = Gt; break t } } else if (lt.elementType === _e || typeof _e == "object" && _e !== null && _e.$$typeof === dr && Pi(_e) === lt.type) { p(vt, lt.sibling), Gt = E(lt, _t.props), Yn(Gt, _t), Gt.return = vt, vt = Gt; break t } p(vt, lt); break } else u(vt, lt); lt = lt.sibling } _t.type === el ? (Gt = $r(_t.props.children, vt.mode, Gt, _t.key), Gt.return = vt, vt = Gt) : (Gt = Gl(_t.type, _t.key, _t.props, null, vt.mode, Gt), Yn(Gt, _t), Gt.return = vt, vt = Gt) } return F(vt); case Bs: t: { for (_e = _t.key; lt !== null;) { if (lt.key === _e) if (lt.tag === 4 && lt.stateNode.containerInfo === _t.containerInfo && lt.stateNode.implementation === _t.implementation) { p(vt, lt.sibling), Gt = E(lt, _t.children || []), Gt.return = vt, vt = Gt; break t } else { p(vt, lt); break } else u(vt, lt); lt = lt.sibling } Gt = ma(_t, vt.mode, Gt), Gt.return = vt, vt = Gt } return F(vt); case dr: return _e = _t._init, _t = _e(_t._payload), io(vt, lt, _t, Gt) }if (rl(_t)) return as(vt, lt, _t, Gt); if (o(_t)) { if (_e = o(_t), typeof _e != "function") throw Error(a(150)); return _t = _e.call(_t), au(vt, lt, _t, Gt) } if (typeof _t.then == "function") return io(vt, lt, Cn(_t), Gt); if (_t.$$typeof === il) return io(vt, lt, Vu(vt, _t), Gt); on(vt, _t) } return typeof _t == "string" && _t !== "" || typeof _t == "number" || typeof _t == "bigint" ? (_t = "" + _t, lt !== null && lt.tag === 6 ? (p(vt, lt.sibling), Gt = E(lt, _t), Gt.return = vt, vt = Gt) : (p(vt, lt), Gt = ic(_t, vt.mode, Gt), Gt.return = vt, vt = Gt), F(vt)) : p(vt, lt) } return function (vt, lt, _t, Gt) { try { ki = 0; var _e = io(vt, lt, _t, Gt); return Kl = null, _e } catch (Re) { if (Re === hc) throw Re; var wn = e(29, Re, null, vt.mode); return wn.lanes = Gt, wn.return = vt, wn } finally { } } } function Cu(l, u) { l = As, D(Es, l), D(bs, u), As = l | u.baseLanes } function Dl() { D(Es, As), D(bs, bs.current) } function qa() { As = Es.current, T(bs), T(Es) } function wa(l) { var u = l.alternate; D(zn, zn.current & 1), D(_a, l), Ka === null && (u === null || bs.current !== null || u.memoizedState !== null) && (Ka = l) } function bo(l) { if (l.tag === 22) { if (D(zn, zn.current), D(_a, l), Ka === null) { var u = l.alternate; u !== null && u.memoizedState !== null && (Ka = l) } } else hs() } function hs() { D(zn, zn.current), D(_a, _a.current) } function Kn(l) { T(_a), Ka === l && (Ka = null), T(zn) } function kn(l) { for (var u = l; u !== null;) { if (u.tag === 13) { var p = u.memoizedState; if (p !== null && (p = p.dehydrated, p === null || Wl(p) || lc(p))) return u } else if (u.tag === 19 && u.memoizedProps.revealOrder !== void 0) { if ((u.flags & 128) !== 0) return u } else if (u.child !== null) { u.child.return = u, u = u.child; continue } if (u === l) break; for (; u.sibling === null;) { if (u.return === null || u.return === l) return null; u = u.return } u.sibling.return = u.return, u = u.sibling } return null } function Ye() { throw Error(a(321)) } function ds(l, u) { if (u === null) return !1; for (var p = 0; p < u.length && p < l.length; p++)if (!ia(l[p], u[p])) return !1; return !0 } function Hr(l, u, p, y, E, w) { return xr = w, Pe = u, u.memoizedState = null, u.updateQueue = null, u.lanes = 0, Ue.H = l === null || l.memoizedState === null ? br : sa, pl = !1, w = p(y, E), pl = !1, Jl && (w = ef(u, p, y, E)), tf(l), w } function tf(l) { Ue.H = ai; var u = mn !== null && mn.next !== null; if (xr = 0, Xn = mn = Pe = null, Sr = !1, $o = 0, Mr = null, u) throw Error(a(300)); l === null || di || (l = l.dependencies, l !== null && Fu(l) && (di = !0)) } function ef(l, u, p, y) { Pe = l; var E = 0; do { if (Jl && (Mr = null), $o = 0, Jl = !1, 25 <= E) throw Error(a(301)); if (E += 1, Xn = mn = null, l.updateQueue != null) { var w = l.updateQueue; w.lastEffect = null, w.events = null, w.stores = null, w.memoCache != null && (w.memoCache.index = 0) } Ue.H = gl, w = u(p, y) } while (Jl); return w } function nf() { var l = Ue.H, u = l.useState()[0]; return u = typeof u.then == "function" ? gt(u) : u, l = l.useState()[0], (mn !== null ? mn.memoizedState : null) !== l && (Pe.flags |= 1024), u } function Qs() { var l = ml !== 0; return ml = 0, l } function Ul(l, u, p) { u.updateQueue = l.updateQueue, u.flags &= -2053, l.lanes &= ~p } function ps(l) { if (Sr) { for (l = l.memoizedState; l !== null;) { var u = l.queue; u !== null && (u.pending = null), l = l.next } Sr = !1 } xr = 0, Xn = mn = Pe = null, Jl = !1, $o = ml = 0, Mr = null } function P() { var l = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null }; return Xn === null ? Pe.memoizedState = Xn = l : Xn = Xn.next = l, Xn } function J() { if (mn === null) { var l = Pe.alternate; l = l !== null ? l.memoizedState : null } else l = mn.next; var u = Xn === null ? Pe.memoizedState : Xn.next; if (u !== null) Xn = u, mn = l; else { if (l === null) throw Pe.alternate === null ? Error(a(467)) : Error(a(310)); mn = l, l = { memoizedState: mn.memoizedState, baseState: mn.baseState, baseQueue: mn.baseQueue, queue: mn.queue, next: null }, Xn === null ? Pe.memoizedState = Xn = l : Xn = Xn.next = l } return Xn } function gt(l) { var u = $o; return $o += 1, Mr === null && (Mr = []), l = ne(Mr, l, u), u = Pe, (Xn === null ? u.memoizedState : Xn.next) === null && (u = u.alternate, Ue.H = u === null || u.memoizedState === null ? br : sa), l } function ht(l) { if (l !== null && typeof l == "object") { if (typeof l.then == "function") return gt(l); if (l.$$typeof === il) return Ui(l) } throw Error(a(438, String(l))) } function rt(l) { var u = null, p = Pe.updateQueue; if (p !== null && (u = p.memoCache), u == null) { var y = Pe.alternate; y !== null && (y = y.updateQueue, y !== null && (y = y.memoCache, y != null && (u = { data: y.data.map(function (E) { return E.slice() }), index: 0 }))) } if (u == null && (u = { data: [], index: 0 }), p === null && (p = Pd(), Pe.updateQueue = p), p.memoCache = u, p = u.data[u.index], p === void 0) for (p = u.data[u.index] = Array(l), y = 0; y < l; y++)p[y] = We; return u.index++, p } function It(l, u) { return typeof u == "function" ? u(l) : u } function Kt(l) { var u = J(); return se(u, mn, l) } function se(l, u, p) { var y = l.queue; if (y === null) throw Error(a(311)); y.lastRenderedReducer = p; var E = l.baseQueue, w = y.pending; if (w !== null) { if (E !== null) { var F = E.next; E.next = w.next, w.next = F } u.baseQueue = E = w, y.pending = null } if (w = l.baseState, E === null) l.memoizedState = w; else { u = E.next; var Q = F = null, ut = null, Rt = u, Wt = !1; do { var re = Rt.lane & -536870913; if (re !== Rt.lane ? (en & re) === re : (xr & re) === re) { var qt = Rt.revertLane; if (qt === 0) ut !== null && (ut = ut.next = { lane: 0, revertLane: 0, action: Rt.action, hasEagerState: Rt.hasEagerState, eagerState: Rt.eagerState, next: null }), re === Hn && (Wt = !0); else if ((xr & qt) === qt) { Rt = Rt.next, qt === Hn && (Wt = !0); continue } else re = { lane: 0, revertLane: Rt.revertLane, action: Rt.action, hasEagerState: Rt.hasEagerState, eagerState: Rt.eagerState, next: null }, ut === null ? (Q = ut = re, F = w) : ut = ut.next = re, Pe.lanes |= qt, ns |= qt; re = Rt.action, pl && p(w, re), w = Rt.hasEagerState ? Rt.eagerState : p(w, re) } else qt = { lane: re, revertLane: Rt.revertLane, action: Rt.action, hasEagerState: Rt.hasEagerState, eagerState: Rt.eagerState, next: null }, ut === null ? (Q = ut = qt, F = w) : ut = ut.next = qt, Pe.lanes |= re, ns |= re; Rt = Rt.next } while (Rt !== null && Rt !== u); if (ut === null ? F = w : ut.next = Q, !ia(w, l.memoizedState) && (di = !0, Wt && (p = Ai, p !== null))) throw p; l.memoizedState = w, l.baseState = F, l.baseQueue = ut, y.lastRenderedState = w } return E === null && (y.lanes = 0), [l.memoizedState, y.dispatch] } function ae(l) { var u = J(), p = u.queue; if (p === null) throw Error(a(311)); p.lastRenderedReducer = l; var y = p.dispatch, E = p.pending, w = u.memoizedState; if (E !== null) { p.pending = null; var F = E = E.next; do w = l(w, F.action), F = F.next; while (F !== E); ia(w, u.memoizedState) || (di = !0), u.memoizedState = w, u.baseQueue === null && (u.baseState = w), p.lastRenderedState = w } return [w, y] } function Ce(l, u, p) { var y = Pe, E = J(), w = fn; if (w) { if (p === void 0) throw Error(a(407)); p = p() } else p = u(); var F = !ia((mn || E).memoizedState, p); if (F && (E.memoizedState = p, di = !0), E = E.queue, Uu(nn.bind(null, y, E, l), [l]), E.getSnapshot !== u || F || Xn !== null && Xn.memoizedState.tag & 1) { if (y.flags |= 2048, ms(9, Se.bind(null, y, E, p, u), { destroy: void 0 }, null), Rn === null) throw Error(a(349)); w || (xr & 60) !== 0 || De(y, u, p) } return p } function De(l, u, p) { l.flags |= 16384, l = { getSnapshot: u, value: p }, u = Pe.updateQueue, u === null ? (u = Pd(), Pe.updateQueue = u, u.stores = [l]) : (p = u.stores, p === null ? u.stores = [l] : p.push(l)) } function Se(l, u, p, y) { u.value = p, u.getSnapshot = y, an(u) && On(l) } function nn(l, u, p) { return p(function () { an(u) && On(l) }) } function an(l) { var u = l.getSnapshot; l = l.value; try { var p = u(); return !ia(l, p) } catch { return !0 } } function On(l) { var u = ee(l, 2); u !== null && Ln(u, l, 2) } function un(l) { var u = P(); if (typeof l == "function") { var p = l; if (l = p(), pl) { ft(!0); try { p() } finally { ft(!1) } } } return u.memoizedState = u.baseState = l, u.queue = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: It, lastRenderedState: l }, u } function ze(l, u, p, y) { return l.baseState = p, se(l, mn, typeof y == "function" ? y : It) } function Ee(l, u, p, y, E) { if (zu(l)) throw Error(a(485)); if (l = u.action, l !== null) { var w = { payload: E, action: l, next: null, isTransition: !0, status: "pending", value: null, reason: null, listeners: [], then: function (F) { w.listeners.push(F) } }; Ue.T !== null ? p(!0) : w.isTransition = !1, y(w), p = u.pending, p === null ? (w.next = u.pending = w, oi(u, w)) : (w.next = p.next, u.pending = p.next = w) } } function oi(l, u) { var p = u.action, y = u.payload, E = l.state; if (u.isTransition) { var w = Ue.T, F = {}; Ue.T = F; try { var Q = p(E, y), ut = Ue.S; ut !== null && ut(F, Q), sn(l, u, Q) } catch (Rt) { Ca(l, u, Rt) } finally { Ue.T = w } } else try { w = p(E, y), sn(l, u, w) } catch (Rt) { Ca(l, u, Rt) } } function sn(l, u, p) { p !== null && typeof p == "object" && typeof p.then == "function" ? p.then(function (y) { Ji(l, u, y) }, function (y) { return Ca(l, u, y) }) : Ji(l, u, p) } function Ji(l, u, p) { u.status = "fulfilled", u.value = p, Hi(u), l.state = p, u = l.pending, u !== null && (p = u.next, p === u ? l.pending = null : (p = p.next, u.next = p, oi(l, p))) } function Ca(l, u, p) { var y = l.pending; if (l.pending = null, y !== null) { y = y.next; do u.status = "rejected", u.reason = p, Hi(u), u = u.next; while (u !== y) } l.action = null } function Hi(l) { l = l.listeners; for (var u = 0; u < l.length; u++)(0, l[u])() } function _i(l, u) { return u } function Mn(l, u) { if (fn) { var p = Rn.formState; if (p !== null) { t: { var y = Pe; if (fn) { if (Tn) { var E = ag(Tn, Ss); if (E) { Tn = ol(E), y = Is(E); break t } } kt(y) } y = !1 } y && (u = p[0]) } } p = P(), p.memoizedState = p.baseState = u, y = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: _i, lastRenderedState: u }, p.queue = y, p = qh.bind(null, Pe, y), y.dispatch = p, y = un(!1); var w = Ao.bind(null, Pe, !1, y.queue); return y = P(), E = { state: u, dispatch: null, action: l, pending: null }, y.queue = E, p = Ee.bind(null, Pe, E, w, p), E.dispatch = p, y.memoizedState = l, [u, p, !1] } function Fi(l) { var u = J(); return Ci(u, mn, l) } function Ci(l, u, p) { u = se(l, u, _i)[0], l = Kt(It)[0], u = typeof u == "object" && u !== null && typeof u.then == "function" ? gt(u) : u; var y = J(), E = y.queue, w = E.dispatch; return p !== y.memoizedState && (Pe.flags |= 2048, ms(9, jn.bind(null, E, p), { destroy: void 0 }, null)), [u, w, l] } function jn(l, u) { l.action = u } function bi(l) { var u = J(), p = mn; if (p !== null) return Ci(u, p, l); J(), u = u.memoizedState, p = J(); var y = p.queue.dispatch; return p.memoizedState = l, [u, y, !1] } function ms(l, u, p, y) { return l = { tag: l, create: u, inst: p, deps: y, next: null }, u = Pe.updateQueue, u === null && (u = Pd(), Pe.updateQueue = u), p = u.lastEffect, p === null ? u.lastEffect = l.next = l : (y = p.next, p.next = l, l.next = y, u.lastEffect = l), l } function $i() { return J().memoizedState } function af(l, u, p, y) { var E = P(); Pe.flags |= l, E.memoizedState = ms(1 | u, p, { destroy: void 0 }, y === void 0 ? null : y) } function Du(l, u, p, y) { var E = J(); y = y === void 0 ? null : y; var w = E.memoizedState.inst; mn !== null && y !== null && ds(y, mn.memoizedState.deps) ? E.memoizedState = ms(u, p, w, y) : (Pe.flags |= l, E.memoizedState = ms(1 | u, p, w, y)) } function Vh(l, u) { af(8390656, 8, l, u) } function Uu(l, u) { Du(2048, 8, l, u) } function rm(l, u) { return Du(4, 2, l, u) } function lm(l, u) { return Du(4, 4, l, u) } function Nu(l, u) { if (typeof u == "function") { l = l(); var p = u(l); return function () { typeof p == "function" ? p() : u(null) } } if (u != null) return l = l(), u.current = l, function () { u.current = null } } function sf(l, u, p) { p = p != null ? p.concat([l]) : null, Du(4, 4, Nu.bind(null, u, l), p) } function Ou() { } function Nl(l, u) { var p = J(); u = u === void 0 ? null : u; var y = p.memoizedState; return u !== null && ds(u, y[1]) ? y[0] : (p.memoizedState = [l, u], l) } function Ol(l, u) { var p = J(); u = u === void 0 ? null : u; var y = p.memoizedState; if (u !== null && ds(u, y[1])) return y[0]; if (y = l(), pl) { ft(!0); try { l() } finally { ft(!1) } } return p.memoizedState = [y, u], y } function rf(l, u, p) { return p === void 0 || (xr & 1073741824) !== 0 ? l.memoizedState = u : (l.memoizedState = p, l = Qu(), Pe.lanes |= l, ns |= l, p) } function lf(l, u, p, y) { return ia(p, u) ? p : bs.current !== null ? (l = rf(l, p, y), ia(l, u) || (di = !0), l) : (xr & 42) === 0 ? (di = !0, l.memoizedState = p) : (l = Qu(), Pe.lanes |= l, ns |= l, u) } function Gh(l, u, p, y, E) { var w = ll(); na(w !== 0 && 8 > w ? w : 8); var F = Ue.T, Q = {}; Ue.T = Q, Ao(l, !1, u, p); try { var ut = E(), Rt = Ue.S; if (Rt !== null && Rt(Q, ut), ut !== null && typeof ut == "object" && typeof ut.then == "function") { var Wt = qe(ut, y); Fr(l, u, Wt, Vi(l)) } else Fr(l, u, y, Vi(l)) } catch (re) { Fr(l, u, { then: function () { }, status: "rejected", reason: re }, Vi()) } finally { na(w), Ue.T = F } } function Eo(l) { var u = l.memoizedState; if (u !== null) return u; u = { memoizedState: Yl, baseState: Yl, baseQueue: null, queue: { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: It, lastRenderedState: Yl }, next: null }; var p = {}; return u.next = { memoizedState: p, baseState: p, baseQueue: null, queue: { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: It, lastRenderedState: p }, next: null }, l.memoizedState = u, l = l.alternate, l !== null && (l.memoizedState = u), u } function Lu() { return Ui(mr) } function To() { return J().memoizedState } function Ks() { return J().memoizedState } function Xh(l) { for (var u = l.return; u !== null;) { switch (u.tag) { case 24: case 3: var p = Vi(); l = ge(p); var y = he(u, l, p); y !== null && (Ln(y, u, p), ue(y, u, p)), u = { cache: qr() }, l.payload = u; return }u = u.return } } function of(l, u, p) { var y = Vi(); p = { lane: y, revertLane: 0, action: p, hasEagerState: !1, eagerState: null, next: null }, zu(l) ? ta(u, p) : (p = Ht(l, u, p, y), p !== null && (Ln(p, l, y), Vr(p, u, y))) } function qh(l, u, p) { var y = Vi(); Fr(l, u, p, y) } function Fr(l, u, p, y) { var E = { lane: y, revertLane: 0, action: p, hasEagerState: !1, eagerState: null, next: null }; if (zu(l)) ta(u, E); else { var w = l.alternate; if (l.lanes === 0 && (w === null || w.lanes === 0) && (w = u.lastRenderedReducer, w !== null)) try { var F = u.lastRenderedState, Q = w(F, p); if (E.hasEagerState = !0, E.eagerState = Q, ia(Q, F)) return de(l, u, E, 0), Rn === null && W(), !1 } catch { } finally { } if (p = Ht(l, u, E, y), p !== null) return Ln(p, l, y), Vr(p, u, y), !0 } return !1 } function Ao(l, u, p, y) { if (y = { lane: 2, revertLane: pe(), action: y, hasEagerState: !1, eagerState: null, next: null }, zu(l)) { if (u) throw Error(a(479)) } else u = Ht(l, p, y, 2), u !== null && Ln(u, l, 2) } function zu(l) { var u = l.alternate; return l === Pe || u !== null && u === Pe } function ta(l, u) { Jl = Sr = !0; var p = l.pending; p === null ? u.next = u : (u.next = p.next, p.next = u), l.pending = u } function Vr(l, u, p) { if ((p & 4194176) !== 0) { var y = u.lanes; y &= l.pendingLanes, p |= y, u.lanes = p, ct(l, p) } } function Ro(l, u, p, y) { u = l.memoizedState, p = p(y, u), p = p == null ? u : Jn({}, u, p), l.memoizedState = p, l.lanes === 0 && (l.updateQueue.baseState = p) } function wo(l, u, p, y, E, w, F) { return l = l.stateNode, typeof l.shouldComponentUpdate == "function" ? l.shouldComponentUpdate(y, w, F) : u.prototype && u.prototype.isPureReactComponent ? !Mt(p, y) || !Mt(E, w) : !0 } function om(l, u, p, y) { l = u.state, typeof u.componentWillReceiveProps == "function" && u.componentWillReceiveProps(p, y), typeof u.UNSAFE_componentWillReceiveProps == "function" && u.UNSAFE_componentWillReceiveProps(p, y), u.state !== l && tu.enqueueReplaceState(u, u.state, null) } function Js(l, u) { var p = u; if ("ref" in u) { p = {}; for (var y in u) y !== "ref" && (p[y] = u[y]) } if (l = l.defaultProps) { p === u && (p = Jn({}, p)); for (var E in l) p[E] === void 0 && (p[E] = l[E]) } return p } function Co(l, u) { try { var p = l.onUncaughtError; p(u.value, { componentStack: u.stack }) } catch (y) { setTimeout(function () { throw y }) } } function Do(l, u, p) { try { var y = l.onCaughtError; y(p.value, { componentStack: p.stack, errorBoundary: u.tag === 1 ? u.stateNode : null }) } catch (E) { setTimeout(function () { throw E }) } } function Uo(l, u, p) { return p = ge(p), p.tag = 3, p.payload = { element: null }, p.callback = function () { Co(l, u) }, p } function Yh(l) { return l = ge(l), l.tag = 3, l } function um(l, u, p, y) { var E = p.type.getDerivedStateFromError; if (typeof E == "function") { var w = y.value; l.payload = function () { return E(w) }, l.callback = function () { Do(u, p, y) } } var F = p.stateNode; F !== null && typeof F.componentDidCatch == "function" && (l.callback = function () { Do(u, p, y), typeof E != "function" && (Ys === null ? Ys = new Set([this]) : Ys.add(this)); var Q = y.stack; this.componentDidCatch(y.value, { componentStack: Q !== null ? Q : "" }) }) } function sy(l, u, p, y, E) { if (p.flags |= 32768, y !== null && typeof y == "object" && typeof y.then == "function") { if (u = p.alternate, u !== null && Hu(u, p, E, !0), p = _a.current, p !== null) { switch (p.tag) { case 13: return Ka === null ? ja() : p.alternate === null && qn === 0 && (qn = 3), p.flags &= -257, p.flags |= 65536, p.lanes = E, y === aa ? p.flags |= 16384 : (u = p.updateQueue, u === null ? p.updateQueue = new Set([y]) : u.add(y), Jr(l, y, E)), !1; case 22: return p.flags |= 65536, y === aa ? p.flags |= 16384 : (u = p.updateQueue, u === null ? (u = { transitions: null, markerInstances: null, retryQueue: new Set([y]) }, p.updateQueue = u) : (p = u.retryQueue, p === null ? u.retryQueue = new Set([y]) : p.add(y)), Jr(l, y, E)), !1 }throw Error(a(435, p.tag)) } return Jr(l, y, E), ja(), !1 } if (fn) return u = _a.current, u !== null ? ((u.flags & 65536) === 0 && (u.flags |= 256), u.flags |= 65536, u.lanes = E, y !== fc && (l = Error(a(422), { cause: y }), Ut(Et(l, p)))) : (y !== fc && (u = Error(a(423), { cause: y }), Ut(Et(u, p))), l = l.current.alternate, l.flags |= 65536, E &= -E, l.lanes |= E, y = Et(y, p), E = Uo(l.stateNode, y, E), Be(l, E), qn !== 4 && (qn = 2)), !1; var w = Error(a(520), { cause: y }); if (w = Et(w, p), nu === null ? nu = [w] : nu.push(w), qn !== 4 && (qn = 2), u === null) return !0; y = Et(y, p), p = u; do { switch (p.tag) { case 3: return p.flags |= 65536, l = E & -E, p.lanes |= l, l = Uo(p.stateNode, y, l), Be(p, l), !1; case 1: if (u = p.type, w = p.stateNode, (p.flags & 128) === 0 && (typeof u.getDerivedStateFromError == "function" || w !== null && typeof w.componentDidCatch == "function" && (Ys === null || !Ys.has(w)))) return p.flags |= 65536, E &= -E, p.lanes |= E, E = Yh(E), um(E, l, p, y), Be(p, E), !1 }p = p.return } while (p !== null); return !1 } function Di(l, u, p, y) { u.child = l === null ? Gs(u, null, p, y) : dl(u, l.child, p, y) } function uf(l, u, p, y, E) { p = p.render; var w = u.ref; if ("ref" in y) { var F = {}; for (var Q in y) Q !== "ref" && (F[Q] = y[Q]) } else F = y; return Xr(u), y = Hr(l, u, p, F, w, E), Q = Qs(), l !== null && !di ? (Ul(l, u, E), $s(l, u, E)) : (fn && Q && Dt(u), u.flags |= 1, Di(l, u, y, E), u.child) } function cm(l, u, p, y, E) { if (l === null) { var w = p.type; return typeof w == "function" && !or(w) && w.defaultProps === void 0 && p.compare === null ? (u.tag = 15, u.type = w, fm(l, u, w, y, E)) : (l = Gl(p.type, null, y, u, u.mode, E), l.ref = u.ref, l.return = u, u.child = l) } if (w = l.child, !Qh(l, E)) { var F = w.memoizedProps; if (p = p.compare, p = p !== null ? p : Mt, p(F, y) && l.ref === u.ref) return $s(l, u, E) } return u.flags |= 1, l = ur(w, y), l.ref = u.ref, l.return = u, u.child = l } function fm(l, u, p, y, E) { if (l !== null) { var w = l.memoizedProps; if (Mt(w, y) && l.ref === u.ref) if (di = !1, u.pendingProps = y = w, Qh(l, E)) (l.flags & 131072) !== 0 && (di = !0); else return u.lanes = l.lanes, $s(l, u, E) } return cf(l, u, p, y, E) } function hm(l, u, p) { var y = u.pendingProps, E = y.children, w = (u.stateNode._pendingVisibility & 2) !== 0, F = l !== null ? l.memoizedState : null; if (Bu(l, u), y.mode === "hidden" || w) { if ((u.flags & 128) !== 0) { if (y = F !== null ? F.baseLanes | p : p, l !== null) { for (E = u.child = l.child, w = 0; E !== null;)w = w | E.lanes | E.childLanes, E = E.sibling; u.childLanes = w & ~y } else u.childLanes = 0, u.child = null; return dm(l, u, y, p) } if ((p & 536870912) !== 0) u.memoizedState = { baseLanes: 0, cachePool: null }, l !== null && hf(u, F !== null ? F.cachePool : null), F !== null ? Cu(u, F) : Dl(), bo(u); else return u.lanes = u.childLanes = 536870912, dm(l, u, F !== null ? F.baseLanes | p : p, p) } else F !== null ? (hf(u, F.cachePool), Cu(u, F), hs(), u.memoizedState = null) : (l !== null && hf(u, null), Dl(), hs()); return Di(l, u, E, p), u.child } function dm(l, u, p, y) { var E = Jh(); return E = E === null ? null : { parent: vs ? Qn._currentValue : Qn._currentValue2, pool: E }, u.memoizedState = { baseLanes: p, cachePool: E }, l !== null && hf(u, null), Dl(), bo(u), l !== null && Hu(l, u, y, !0), null } function Bu(l, u) { var p = u.ref; if (p === null) l !== null && l.ref !== null && (u.flags |= 2097664); else { if (typeof p != "function" && typeof p != "object") throw Error(a(284)); (l === null || l.ref !== p) && (u.flags |= 2097664) } } function cf(l, u, p, y, E) { return Xr(u), p = Hr(l, u, p, y, void 0, E), y = Qs(), l !== null && !di ? (Ul(l, u, E), $s(l, u, E)) : (fn && y && Dt(u), u.flags |= 1, Di(l, u, p, E), u.child) } function pm(l, u, p, y, E, w) { return Xr(u), u.updateQueue = null, p = ef(u, y, p, E), tf(l), y = Qs(), l !== null && !di ? (Ul(l, u, w), $s(l, u, w)) : (fn && y && Dt(u), u.flags |= 1, Di(l, u, p, w), u.child) } function mm(l, u, p, y, E) { if (Xr(u), u.stateNode === null) { var w = Zl, F = p.contextType; typeof F == "object" && F !== null && (w = Ui(F)), w = new p(y, w), u.memoizedState = w.state !== null && w.state !== void 0 ? w.state : null, w.updater = tu, u.stateNode = w, w._reactInternals = u, w = u.stateNode, w.props = y, w.state = u.memoizedState, w.refs = {}, Yt(u), F = p.contextType, w.context = typeof F == "object" && F !== null ? Ui(F) : Zl, w.state = u.memoizedState, F = p.getDerivedStateFromProps, typeof F == "function" && (Ro(u, p, F, y), w.state = u.memoizedState), typeof p.getDerivedStateFromProps == "function" || typeof w.getSnapshotBeforeUpdate == "function" || typeof w.UNSAFE_componentWillMount != "function" && typeof w.componentWillMount != "function" || (F = w.state, typeof w.componentWillMount == "function" && w.componentWillMount(), typeof w.UNSAFE_componentWillMount == "function" && w.UNSAFE_componentWillMount(), F !== w.state && tu.enqueueReplaceState(w, w.state, null), pn(u, y, w, E), ye(), w.state = u.memoizedState), typeof w.componentDidMount == "function" && (u.flags |= 4194308), y = !0 } else if (l === null) { w = u.stateNode; var Q = u.memoizedProps, ut = Js(p, Q); w.props = ut; var Rt = w.context, Wt = p.contextType; F = Zl, typeof Wt == "object" && Wt !== null && (F = Ui(Wt)); var re = p.getDerivedStateFromProps; Wt = typeof re == "function" || typeof w.getSnapshotBeforeUpdate == "function", Q = u.pendingProps !== Q, Wt || typeof w.UNSAFE_componentWillReceiveProps != "function" && typeof w.componentWillReceiveProps != "function" || (Q || Rt !== F) && om(u, w, y, F), Yi = !1; var qt = u.memoizedState; w.state = qt, pn(u, y, w, E), ye(), Rt = u.memoizedState, Q || qt !== Rt || Yi ? (typeof re == "function" && (Ro(u, p, re, y), Rt = u.memoizedState), (ut = Yi || wo(u, p, ut, y, qt, Rt, F)) ? (Wt || typeof w.UNSAFE_componentWillMount != "function" && typeof w.componentWillMount != "function" || (typeof w.componentWillMount == "function" && w.componentWillMount(), typeof w.UNSAFE_componentWillMount == "function" && w.UNSAFE_componentWillMount()), typeof w.componentDidMount == "function" && (u.flags |= 4194308)) : (typeof w.componentDidMount == "function" && (u.flags |= 4194308), u.memoizedProps = y, u.memoizedState = Rt), w.props = y, w.state = Rt, w.context = F, y = ut) : (typeof w.componentDidMount == "function" && (u.flags |= 4194308), y = !1) } else { w = u.stateNode, fe(l, u), F = u.memoizedProps, Wt = Js(p, F), w.props = Wt, re = u.pendingProps, qt = w.context, Rt = p.contextType, ut = Zl, typeof Rt == "object" && Rt !== null && (ut = Ui(Rt)), Q = p.getDerivedStateFromProps, (Rt = typeof Q == "function" || typeof w.getSnapshotBeforeUpdate == "function") || typeof w.UNSAFE_componentWillReceiveProps != "function" && typeof w.componentWillReceiveProps != "function" || (F !== re || qt !== ut) && om(u, w, y, ut), Yi = !1, qt = u.memoizedState, w.state = qt, pn(u, y, w, E), ye(); var He = u.memoizedState; F !== re || qt !== He || Yi || l !== null && l.dependencies !== null && Fu(l.dependencies) ? (typeof Q == "function" && (Ro(u, p, Q, y), He = u.memoizedState), (Wt = Yi || wo(u, p, Wt, y, qt, He, ut) || l !== null && l.dependencies !== null && Fu(l.dependencies)) ? (Rt || typeof w.UNSAFE_componentWillUpdate != "function" && typeof w.componentWillUpdate != "function" || (typeof w.componentWillUpdate == "function" && w.componentWillUpdate(y, He, ut), typeof w.UNSAFE_componentWillUpdate == "function" && w.UNSAFE_componentWillUpdate(y, He, ut)), typeof w.componentDidUpdate == "function" && (u.flags |= 4), typeof w.getSnapshotBeforeUpdate == "function" && (u.flags |= 1024)) : (typeof w.componentDidUpdate != "function" || F === l.memoizedProps && qt === l.memoizedState || (u.flags |= 4), typeof w.getSnapshotBeforeUpdate != "function" || F === l.memoizedProps && qt === l.memoizedState || (u.flags |= 1024), u.memoizedProps = y, u.memoizedState = He), w.props = y, w.state = He, w.context = ut, y = Wt) : (typeof w.componentDidUpdate != "function" || F === l.memoizedProps && qt === l.memoizedState || (u.flags |= 4), typeof w.getSnapshotBeforeUpdate != "function" || F === l.memoizedProps && qt === l.memoizedState || (u.flags |= 1024), y = !1) } return w = y, Bu(l, u), y = (u.flags & 128) !== 0, w || y ? (w = u.stateNode, p = y && typeof p.getDerivedStateFromError != "function" ? null : w.render(), u.flags |= 1, l !== null && y ? (u.child = dl(u, l.child, null, E), u.child = dl(u, null, p, E)) : Di(l, u, p, E), u.memoizedState = w.state, l = u.child) : l = $s(l, u, E), l } function gm(l, u, p, y) { return Bt(), u.flags |= 256, Di(l, u, p, y), u.child } function Wh(l) { return { baseLanes: l, cachePool: $h() } } function Pu(l, u, p) { return l = l !== null ? l.childLanes & ~p : 0, u && (l |= Ba), l } function vm(l, u, p) { var y = u.pendingProps, E = !1, w = (u.flags & 128) !== 0, F; if ((F = w) || (F = l !== null && l.memoizedState === null ? !1 : (zn.current & 2) !== 0), F && (E = !0, u.flags &= -129), F = (u.flags & 32) !== 0, u.flags &= -33, l === null) { if (fn) { if (E ? wa(u) : hs(), fn) { var Q = Tn, ut; (ut = Q) && (Q = rg(Q, Ss), Q !== null ? (u.memoizedState = { dehydrated: Q, treeContext: xs !== null ? { id: Fs, overflow: Vs } : null, retryLane: 536870912 }, ut = e(18, null, null, 0), ut.stateNode = Q, ut.return = u, u.child = ut, ni = u, Tn = null, ut = !0) : ut = !1), ut || kt(u) } if (Q = u.memoizedState, Q !== null && (Q = Q.dehydrated, Q !== null)) return lc(Q) ? u.lanes = 16 : u.lanes = 536870912, null; Kn(u) } return Q = y.children, y = y.fallback, E ? (hs(), E = u.mode, Q = jh({ mode: "hidden", children: Q }, E), y = $r(y, E, p, null), Q.return = u, y.return = u, Q.sibling = y, u.child = Q, E = u.child, E.memoizedState = Wh(p), E.childLanes = Pu(l, F, p), u.memoizedState = pc, y) : (wa(u), kh(u, Q)) } if (ut = l.memoizedState, ut !== null && (Q = ut.dehydrated, Q !== null)) { if (w) u.flags & 256 ? (wa(u), u.flags &= -257, u = ff(l, u, p)) : u.memoizedState !== null ? (hs(), u.child = l.child, u.flags |= 128, u = null) : (hs(), E = y.fallback, Q = u.mode, y = jh({ mode: "visible", children: y.children }, Q), E = $r(E, Q, p, null), E.flags |= 2, y.return = u, E.return = u, y.sibling = E, u.child = y, dl(u, l.child, null, p), y = u.child, y.memoizedState = Wh(p), y.childLanes = Pu(l, F, p), u.memoizedState = pc, u = E); else if (wa(u), lc(Q)) F = Of(Q).digest, y = Error(a(419)), y.stack = "", y.digest = F, Ut({ value: y, source: null, stack: null }), u = ff(l, u, p); else if (di || Hu(l, u, p, !1), F = (p & l.childLanes) !== 0, di || F) { if (F = Rn, F !== null) { if (y = p & -p, (y & 42) !== 0) y = 1; else switch (y) { case 2: y = 1; break; case 8: y = 4; break; case 32: y = 16; break; case 128: case 256: case 512: case 1024: case 2048: case 4096: case 8192: case 16384: case 32768: case 65536: case 131072: case 262144: case 524288: case 1048576: case 2097152: case 4194304: case 8388608: case 16777216: case 33554432: y = 64; break; case 268435456: y = 134217728; break; default: y = 0 }if (y = (y & (F.suspendedLanes | p)) !== 0 ? 0 : y, y !== 0 && y !== ut.retryLane) throw ut.retryLane = y, ee(l, y), Ln(F, l, y), Id } Wl(Q) || ja(), u = ff(l, u, p) } else Wl(Q) ? (u.flags |= 128, u.child = l.child, u = nc.bind(null, l), ig(Q, u), u = null) : (l = ut.treeContext, ga && (Tn = bd(Q), ni = u, fn = !0, Qa = null, Ss = !1, l !== null && (va[qi++] = Fs, va[qi++] = Vs, va[qi++] = xs, Fs = l.id, Vs = l.overflow, xs = u)), u = kh(u, y.children), u.flags |= 4096); return u } return E ? (hs(), E = y.fallback, Q = u.mode, ut = l.child, w = ut.sibling, y = ur(ut, { mode: "hidden", children: y.children }), y.subtreeFlags = ut.subtreeFlags & 31457280, w !== null ? E = ur(w, E) : (E = $r(E, Q, p, null), E.flags |= 2), E.return = u, y.return = u, y.sibling = E, u.child = y, y = E, E = u.child, Q = l.child.memoizedState, Q === null ? Q = Wh(p) : (ut = Q.cachePool, ut !== null ? (w = vs ? Qn._currentValue : Qn._currentValue2, ut = ut.parent !== w ? { parent: w, pool: w } : ut) : ut = $h(), Q = { baseLanes: Q.baseLanes | p, cachePool: ut }), E.memoizedState = Q, E.childLanes = Pu(l, F, p), u.memoizedState = pc, y) : (wa(u), p = l.child, l = p.sibling, p = ur(p, { mode: "visible", children: y.children }), p.return = u, p.sibling = null, l !== null && (F = u.deletions, F === null ? (u.deletions = [l], u.flags |= 16) : F.push(l)), u.child = p, u.memoizedState = null, p) } function kh(l, u) { return u = jh({ mode: "visible", children: u }, l.mode), u.return = l, l.child = u } function jh(l, u) { return Ef(l, u, 0, null) } function ff(l, u, p) { return dl(u, l.child, null, p), l = kh(u, u.pendingProps.children), l.flags |= 2, u.memoizedState = null, l } function ym(l, u, p) { l.lanes |= u; var y = l.alternate; y !== null && (y.lanes |= u), Iu(l.return, u, p) } function Zh(l, u, p, y, E) { var w = l.memoizedState; w === null ? l.memoizedState = { isBackwards: u, rendering: null, renderingStartTime: 0, last: y, tail: p, tailMode: E } : (w.isBackwards = u, w.rendering = null, w.renderingStartTime = 0, w.last = y, w.tail = p, w.tailMode = E) } function _m(l, u, p) { var y = u.pendingProps, E = y.revealOrder, w = y.tail; if (Di(l, u, y.children, p), y = zn.current, (y & 2) !== 0) y = y & 1 | 2, u.flags |= 128; else { if (l !== null && (l.flags & 128) !== 0) t: for (l = u.child; l !== null;) { if (l.tag === 13) l.memoizedState !== null && ym(l, p, u); else if (l.tag === 19) ym(l, p, u); else if (l.child !== null) { l.child.return = l, l = l.child; continue } if (l === u) break t; for (; l.sibling === null;) { if (l.return === null || l.return === u) break t; l = l.return } l.sibling.return = l.return, l = l.sibling } y &= 1 } switch (D(zn, y), E) { case "forwards": for (p = u.child, E = null; p !== null;)l = p.alternate, l !== null && kn(l) === null && (E = p), p = p.sibling; p = E, p === null ? (E = u.child, u.child = null) : (E = p.sibling, p.sibling = null), Zh(u, !1, E, p, w); break; case "backwards": for (p = null, E = u.child, u.child = null; E !== null;) { if (l = E.alternate, l !== null && kn(l) === null) { u.child = E; break } l = E.sibling, E.sibling = p, p = E, E = l } Zh(u, !0, p, null, w); break; case "together": Zh(u, !1, null, null, void 0); break; default: u.memoizedState = null }return u.child } function $s(l, u, p) { if (l !== null && (u.dependencies = l.dependencies), ns |= u.lanes, (p & u.childLanes) === 0) if (l !== null) { if (Hu(l, u, p, !1), (p & u.childLanes) === 0) return null } else return null; if (l !== null && u.child !== l.child) throw Error(a(153)); if (u.child !== null) { for (l = u.child, p = ur(l, l.pendingProps), u.child = p, p.return = u; l.sibling !== null;)l = l.sibling, p = p.sibling = ur(l, l.pendingProps), p.return = u; p.sibling = null } return u.child } function Qh(l, u) { return (l.lanes & u) !== 0 ? !0 : (l = l.dependencies, !!(l !== null && Fu(l))) } function ry(l, u, p) { switch (u.tag) { case 3: $(u, u.stateNode.containerInfo), Gr(u, Qn, l.memoizedState.cache), Bt(); break; case 27: case 5: Lt(u); break; case 4: $(u, u.stateNode.containerInfo); break; case 10: Gr(u, u.type, u.memoizedProps.value); break; case 13: var y = u.memoizedState; if (y !== null) return y.dehydrated !== null ? (wa(u), u.flags |= 128, null) : (p & u.child.childLanes) !== 0 ? vm(l, u, p) : (wa(u), l = $s(l, u, p), l !== null ? l.sibling : null); wa(u); break; case 19: var E = (l.flags & 128) !== 0; if (y = (p & u.childLanes) !== 0, y || (Hu(l, u, p, !1), y = (p & u.childLanes) !== 0), E) { if (y) return _m(l, u, p); u.flags |= 128 } if (E = u.memoizedState, E !== null && (E.rendering = null, E.tail = null, E.lastEffect = null), D(zn, zn.current), y) break; return null; case 22: case 23: return u.lanes = 0, hm(l, u, p); case 24: Gr(u, Qn, l.memoizedState.cache) }return $s(l, u, p) } function xm(l, u, p) { if (l !== null) if (l.memoizedProps !== u.pendingProps) di = !0; else { if (!Qh(l, p) && (u.flags & 128) === 0) return di = !1, ry(l, u, p); di = (l.flags & 131072) !== 0 } else di = !1, fn && (u.flags & 1048576) !== 0 && it(u, Qo, u.index); switch (u.lanes = 0, u.tag) { case 16: t: { l = u.pendingProps; var y = u.elementType, E = y._init; if (y = E(y._payload), u.type = y, typeof y == "function") or(y) ? (l = Js(y, l), u.tag = 1, u = mm(null, u, y, l, p)) : (u.tag = 0, u = cf(null, u, y, l, p)); else { if (y != null) { if (E = y.$$typeof, E === Tf) { u.tag = 11, u = uf(null, u, y, l, p); break t } else if (E === Vo) { u.tag = 14, u = cm(null, u, y, l, p); break t } } throw u = f(y) || y, Error(a(306, u, "")) } } return u; case 0: return cf(l, u, u.type, u.pendingProps, p); case 1: return y = u.type, E = Js(y, u.pendingProps), mm(l, u, y, E, p); case 3: t: { if ($(u, u.stateNode.containerInfo), l === null) throw Error(a(387)); var w = u.pendingProps; E = u.memoizedState, y = E.element, fe(l, u), pn(u, w, null, p); var F = u.memoizedState; if (w = F.cache, Gr(u, Qn, w), w !== E.cache && Ll(u, [Qn], p, !0), ye(), w = F.element, ga && E.isDehydrated) if (E = { element: w, isDehydrated: !1, cache: F.cache }, u.updateQueue.baseState = E, u.memoizedState = E, u.flags & 256) { u = gm(l, u, w, p); break t } else if (w !== y) { y = Et(Error(a(424)), u), Ut(y), u = gm(l, u, w, p); break t } else for (ga && (Tn = kl(u.stateNode.containerInfo), ni = u, fn = !0, Qa = null, Ss = !0), p = Gs(u, null, w, p), u.child = p; p;)p.flags = p.flags & -3 | 4096, p = p.sibling; else { if (Bt(), w === y) { u = $s(l, u, p); break t } Di(l, u, w, p) } u = u.child } return u; case 26: if (Na) return Bu(l, u), l === null ? (p = Rd(u.type, null, u.pendingProps, null)) ? u.memoizedState = p : fn || (u.stateNode = Ud(u.type, u.pendingProps, yr.current, u)) : u.memoizedState = Rd(u.type, l.memoizedProps, u.pendingProps, l.memoizedState), null; case 27: if (Ti) return Lt(u), l === null && Ti && fn && (y = u.stateNode = Bf(u.type, u.pendingProps, yr.current, ei.current, !1), ni = u, Ss = !0, Tn = gr(y)), y = u.pendingProps.children, l !== null || fn ? Di(l, u, y, p) : u.child = dl(u, null, y, p), Bu(l, u), u.child; case 5: return l === null && fn && (fg(u.type, u.pendingProps, ei.current), (E = y = Tn) && (y = Ed(y, u.type, u.pendingProps, Ss), y !== null ? (u.stateNode = y, ni = u, Tn = gr(y), Ss = !1, E = !0) : E = !1), E || kt(u)), Lt(u), E = u.type, w = u.pendingProps, F = l !== null ? l.memoizedProps : null, y = w.children, Oi(E, w) ? y = null : F !== null && Oi(E, F) && (u.flags |= 32), u.memoizedState !== null && (E = Hr(l, u, nf, null, null, p), vs ? mr._currentValue = E : mr._currentValue2 = E), Bu(l, u), Di(l, u, y, p), u.child; case 6: return l === null && fn && (my(u.pendingProps, ei.current), (l = p = Tn) && (p = sg(p, u.pendingProps, Ss), p !== null ? (u.stateNode = p, ni = u, Tn = null, l = !0) : l = !1), l || kt(u)), null; case 13: return vm(l, u, p); case 4: return $(u, u.stateNode.containerInfo), y = u.pendingProps, l === null ? u.child = dl(u, null, y, p) : Di(l, u, y, p), u.child; case 11: return uf(l, u, u.type, u.pendingProps, p); case 7: return Di(l, u, u.pendingProps, p), u.child; case 8: return Di(l, u, u.pendingProps.children, p), u.child; case 12: return Di(l, u, u.pendingProps.children, p), u.child; case 10: return y = u.pendingProps, Gr(u, u.type, y.value), Di(l, u, y.children, p), u.child; case 9: return E = u.type._context, y = u.pendingProps.children, Xr(u), E = Ui(E), y = y(E), u.flags |= 1, Di(l, u, y, p), u.child; case 14: return cm(l, u, u.type, u.pendingProps, p); case 15: return fm(l, u, u.type, u.pendingProps, p); case 19: return _m(l, u, p); case 22: return hm(l, u, p); case 24: return Xr(u), y = Ui(Qn), l === null ? (E = Jh(), E === null && (E = Rn, w = qr(), E.pooledCache = w, w.refCount++, w !== null && (E.pooledCacheLanes |= p), E = w), u.memoizedState = { parent: y, cache: E }, Yt(u), Gr(u, Qn, E)) : ((l.lanes & p) !== 0 && (fe(l, u), pn(u, null, null, p), ye()), E = l.memoizedState, w = u.memoizedState, E.parent !== y ? (E = { parent: y, cache: y }, u.memoizedState = E, u.lanes === 0 && (u.memoizedState = u.updateQueue.baseState = E), Gr(u, Qn, y)) : (y = w.cache, Gr(u, Qn, y), y !== E.cache && Ll(u, [Qn], p, !0))), Di(l, u, u.pendingProps.children, p), u.child; case 29: throw u.pendingProps }throw Error(a(156, u.tag)) } function Gr(l, u, p) { vs ? (D(Ja, u._currentValue), u._currentValue = p) : (D(Ja, u._currentValue2), u._currentValue2 = p) } function tr(l) { var u = Ja.current; vs ? l._currentValue = u : l._currentValue2 = u, T(Ja) } function Iu(l, u, p) { for (; l !== null;) { var y = l.alternate; if ((l.childLanes & u) !== u ? (l.childLanes |= u, y !== null && (y.childLanes |= u)) : y !== null && (y.childLanes & u) !== u && (y.childLanes |= u), l === p) break; l = l.return } } function Ll(l, u, p, y) { var E = l.child; for (E !== null && (E.return = l); E !== null;) { var w = E.dependencies; if (w !== null) { var F = E.child; w = w.firstContext; t: for (; w !== null;) { var Q = w; w = E; for (var ut = 0; ut < u.length; ut++)if (Q.context === u[ut]) { w.lanes |= p, Q = w.alternate, Q !== null && (Q.lanes |= p), Iu(w.return, p, l), y || (F = null); break t } w = Q.next } } else if (E.tag === 18) { if (F = E.return, F === null) throw Error(a(341)); F.lanes |= p, w = F.alternate, w !== null && (w.lanes |= p), Iu(F, p, l), F = null } else F = E.child; if (F !== null) F.return = E; else for (F = E; F !== null;) { if (F === l) { F = null; break } if (E = F.sibling, E !== null) { E.return = F.return, F = E; break } F = F.return } E = F } } function Hu(l, u, p, y) { l = null; for (var E = u, w = !1; E !== null;) { if (!w) { if ((E.flags & 524288) !== 0) w = !0; else if ((E.flags & 262144) !== 0) break } if (E.tag === 10) { var F = E.alternate; if (F === null) throw Error(a(387)); if (F = F.memoizedProps, F !== null) { var Q = E.type; ia(E.pendingProps.value, F.value) || (l !== null ? l.push(Q) : l = [Q]) } } else if (E === cc.current) { if (F = E.alternate, F === null) throw Error(a(387)); F.memoizedState.memoizedState !== E.memoizedState.memoizedState && (l !== null ? l.push(mr) : l = [mr]) } E = E.return } l !== null && Ll(u, l, p, y), u.flags |= 262144 } function Fu(l) { for (l = l.firstContext; l !== null;) { var u = l.context; if (!ia(vs ? u._currentValue : u._currentValue2, l.memoizedValue)) return !0; l = l.next } return !1 } function Xr(l) { yl = l, $a = null, l = l.dependencies, l !== null && (l.firstContext = null) } function Ui(l) { return Kh(yl, l) } function Vu(l, u) { return yl === null && Xr(l), Kh(l, u) } function Kh(l, u) { var p = vs ? u._currentValue : u._currentValue2; if (u = { context: u, memoizedValue: p, next: null }, $a === null) { if (l === null) throw Error(a(308)); $a = u, l.dependencies = { lanes: 0, firstContext: u }, l.flags |= 524288 } else $a = $a.next = u; return p } function qr() { return { controller: new mc, data: new Map, refCount: 0 } } function Gu(l) { l.refCount--, l.refCount === 0 && Wn(vy, function () { l.controller.abort() }) } function Jh() { var l = $l.current; return l !== null ? l : Rn.pooledCache } function hf(l, u) { u === null ? D($l, $l.current) : D($l, u.pool) } function $h() { var l = Jh(); return l === null ? null : { parent: vs ? Qn._currentValue : Qn._currentValue2, pool: l } } function ca(l) { l.flags |= 4 } function No(l, u) { if (l !== null && l.child === u.child) return !1; if ((u.flags & 16) !== 0) return !0; for (l = u.child; l !== null;) { if ((l.flags & 13878) !== 0 || (l.subtreeFlags & 13878) !== 0) return !0; l = l.sibling } return !1 } function zl(l, u, p, y) { if (Gn) for (p = u.child; p !== null;) { if (p.tag === 5 || p.tag === 6) sc(l, p.stateNode); else if (!(p.tag === 4 || Ti && p.tag === 27) && p.child !== null) { p.child.return = p, p = p.child; continue } if (p === u) break; for (; p.sibling === null;) { if (p.return === null || p.return === u) return; p = p.return } p.sibling.return = p.return, p = p.sibling } else if (ys) for (var E = u.child; E !== null;) { if (E.tag === 5) { var w = E.stateNode; p && y && (w = ng(w, E.type, E.memoizedProps)), sc(l, w) } else if (E.tag === 6) w = E.stateNode, p && y && (w = Md(w, E.memoizedProps)), sc(l, w); else if (E.tag !== 4) { if (E.tag === 22 && E.memoizedState !== null) w = E.child, w !== null && (w.return = E), zl(l, E, !0, !0); else if (E.child !== null) { E.child.return = E, E = E.child; continue } } if (E === u) break; for (; E.sibling === null;) { if (E.return === null || E.return === u) return; E = E.return } E.sibling.return = E.return, E = E.sibling } } function Sm(l, u, p, y) { if (ys) for (var E = u.child; E !== null;) { if (E.tag === 5) { var w = E.stateNode; p && y && (w = ng(w, E.type, E.memoizedProps)), Sd(l, w) } else if (E.tag === 6) w = E.stateNode, p && y && (w = Md(w, E.memoizedProps)), Sd(l, w); else if (E.tag !== 4) { if (E.tag === 22 && E.memoizedState !== null) w = E.child, w !== null && (w.return = E), Sm(l, E, !(E.memoizedProps !== null && E.memoizedProps.mode === "manual"), !0); else if (E.child !== null) { E.child.return = E, E = E.child; continue } } if (E === u) break; for (; E.sibling === null;) { if (E.return === null || E.return === u) return; E = E.return } E.sibling.return = E.return, E = E.sibling } } function Xu(l, u) { if (ys && No(l, u)) { l = u.stateNode; var p = l.containerInfo, y = Nf(); Sm(y, u, !1, !1), l.pendingChildren = y, ca(u), tg(p, y) } } function df(l, u, p, y) { if (Gn) l.memoizedProps !== y && ca(u); else if (ys) { var E = l.stateNode, w = l.memoizedProps; if ((l = No(l, u)) || w !== y) { var F = ei.current; w = $m(E, p, w, y, !l, null), w === E ? u.stateNode = E : (Af(w, p, y, F) && ca(u), u.stateNode = w, l ? zl(w, u, !1, !1) : ca(u)) } else u.stateNode = E } } function pf(l, u, p) { if (md(u, p)) { if (l.flags |= 16777216, !gd(u, p)) if (Ei()) l.flags |= 8192; else throw Wi = aa, dc } else l.flags &= -16777217 } function mf(l, u) { if (pg(u)) { if (l.flags |= 16777216, !Nd(u)) if (Ei()) l.flags |= 8192; else throw Wi = aa, dc } else l.flags &= -16777217 } function Oo(l, u) { u !== null && (l.flags |= 4), l.flags & 16384 && (u = l.tag !== 22 ? z() : 536870912, l.lanes |= u, mi |= u) } function Lo(l, u) { if (!fn) switch (l.tailMode) { case "hidden": u = l.tail; for (var p = null; u !== null;)u.alternate !== null && (p = u), u = u.sibling; p === null ? l.tail = null : p.sibling = null; break; case "collapsed": p = l.tail; for (var y = null; p !== null;)p.alternate !== null && (y = p), p = p.sibling; y === null ? u || l.tail === null ? l.tail = null : l.tail.sibling = null : y.sibling = null } } function Vn(l) { var u = l.alternate !== null && l.alternate.child === l.child, p = 0, y = 0; if (u) for (var E = l.child; E !== null;)p |= E.lanes | E.childLanes, y |= E.subtreeFlags & 31457280, y |= E.flags & 31457280, E.return = l, E = E.sibling; else for (E = l.child; E !== null;)p |= E.lanes | E.childLanes, y |= E.subtreeFlags, y |= E.flags, E.return = l, E = E.sibling; return l.subtreeFlags |= y, l.childLanes = p, u } function Mm(l, u, p) { var y = u.pendingProps; switch (Xt(u), u.tag) { case 16: case 15: case 0: case 11: case 7: case 8: case 12: case 9: case 14: return Vn(u), null; case 1: return Vn(u), null; case 3: return p = u.stateNode, y = null, l !== null && (y = l.memoizedState.cache), u.memoizedState.cache !== y && (u.flags |= 2048), tr(Qn), Tt(), p.pendingContext && (p.context = p.pendingContext, p.pendingContext = null), (l === null || l.child === null) && (Le(u) ? ca(u) : l === null || l.memoizedState.isDehydrated && (u.flags & 256) === 0 || (u.flags |= 1024, Qa !== null && (rr(Qa), Qa = null))), Xu(l, u), Vn(u), null; case 26: if (Na) { p = u.type; var E = u.memoizedState; return l === null ? (ca(u), E !== null ? (Vn(u), mf(u, E)) : (Vn(u), pf(u, p, y))) : E ? E !== l.memoizedState ? (ca(u), Vn(u), mf(u, E)) : (Vn(u), u.flags &= -16777217) : (Gn ? l.memoizedProps !== y && ca(u) : df(l, u, p, y), Vn(u), pf(u, p, y)), null } case 27: if (Ti) { if (Vt(u), p = yr.current, E = u.type, l !== null && u.stateNode != null) Gn ? l.memoizedProps !== y && ca(u) : df(l, u, E, y); else { if (!y) { if (u.stateNode === null) throw Error(a(166)); return Vn(u), null } l = ei.current, Le(u) ? Me(u, l) : (l = Bf(E, y, p, l, !0), u.stateNode = l, ca(u)) } return Vn(u), null } case 5: if (Vt(u), p = u.type, l !== null && u.stateNode != null) df(l, u, p, y); else { if (!y) { if (u.stateNode === null) throw Error(a(166)); return Vn(u), null } l = ei.current, Le(u) ? Me(u, l) : (E = pd(p, y, yr.current, l, u), zl(E, u, !1, !1), u.stateNode = E, Af(E, p, y, l) && ca(u)) } return Vn(u), pf(u, u.type, u.pendingProps), null; case 6: if (l && u.stateNode != null) p = l.memoizedProps, Gn ? p !== y && ca(u) : ys && (p !== y ? (u.stateNode = $n(y, yr.current, ei.current, u), ca(u)) : u.stateNode = l.stateNode); else { if (typeof y != "string" && u.stateNode === null) throw Error(a(166)); if (l = yr.current, p = ei.current, Le(u)) { if (!ga) throw Error(a(176)); if (l = u.stateNode, p = u.memoizedProps, y = null, E = ni, E !== null) switch (E.tag) { case 27: case 5: y = E.memoizedProps }Lf(l, p, u, y) || kt(u) } else u.stateNode = $n(y, l, p, u) } return Vn(u), null; case 13: if (y = u.memoizedState, l === null || l.memoizedState !== null && l.memoizedState.dehydrated !== null) { if (E = Le(u), y !== null && y.dehydrated !== null) { if (l === null) { if (!E) throw Error(a(318)); if (!ga) throw Error(a(344)); if (E = u.memoizedState, E = E !== null ? E.dehydrated : null, !E) throw Error(a(317)); lg(E, u) } else Bt(), (u.flags & 128) === 0 && (u.memoizedState = null), u.flags |= 4; Vn(u), E = !1 } else Qa !== null && (rr(Qa), Qa = null), E = !0; if (!E) return u.flags & 256 ? (Kn(u), u) : (Kn(u), null) } if (Kn(u), (u.flags & 128) !== 0) return u.lanes = p, u; if (p = y !== null, l = l !== null && l.memoizedState !== null, p) { y = u.child, E = null, y.alternate !== null && y.alternate.memoizedState !== null && y.alternate.memoizedState.cachePool !== null && (E = y.alternate.memoizedState.cachePool.pool); var w = null; y.memoizedState !== null && y.memoizedState.cachePool !== null && (w = y.memoizedState.cachePool.pool), w !== E && (y.flags |= 2048) } return p !== l && p && (u.child.flags |= 8192), Oo(u, u.updateQueue), Vn(u), null; case 4: return Tt(), Xu(l, u), l === null && Nm(u.stateNode.containerInfo), Vn(u), null; case 10: return tr(u.type), Vn(u), null; case 19: if (T(zn), E = u.memoizedState, E === null) return Vn(u), null; if (y = (u.flags & 128) !== 0, w = E.rendering, w === null) if (y) Lo(E, !1); else { if (qn !== 0 || l !== null && (l.flags & 128) !== 0) for (l = u.child; l !== null;) { if (w = kn(l), w !== null) { for (u.flags |= 128, Lo(E, !1), l = w.updateQueue, u.updateQueue = l, Oo(u, l), u.subtreeFlags = 0, l = p, p = u.child; p !== null;)Vl(p, l), p = p.sibling; return D(zn, zn.current & 1 | 2), u.child } l = l.sibling } E.tail !== null && Oa() > Pa && (u.flags |= 128, y = !0, Lo(E, !1), u.lanes = 4194304) } else { if (!y) if (l = kn(w), l !== null) { if (u.flags |= 128, y = !0, l = l.updateQueue, u.updateQueue = l, Oo(u, l), Lo(E, !0), E.tail === null && E.tailMode === "hidden" && !w.alternate && !fn) return Vn(u), null } else 2 * Oa() - E.renderingStartTime > Pa && p !== 536870912 && (u.flags |= 128, y = !0, Lo(E, !1), u.lanes = 4194304); E.isBackwards ? (w.sibling = u.child, u.child = w) : (l = E.last, l !== null ? l.sibling = w : u.child = w, E.last = w) } return E.tail !== null ? (u = E.tail, E.rendering = u, E.tail = u.sibling, E.renderingStartTime = Oa(), u.sibling = null, l = zn.current, D(zn, y ? l & 1 | 2 : l & 1), u) : (Vn(u), null); case 22: case 23: return Kn(u), qa(), y = u.memoizedState !== null, l !== null ? l.memoizedState !== null !== y && (u.flags |= 8192) : y && (u.flags |= 8192), y ? (p & 536870912) !== 0 && (u.flags & 128) === 0 && (Vn(u), u.subtreeFlags & 6 && (u.flags |= 8192)) : Vn(u), p = u.updateQueue, p !== null && Oo(u, p.retryQueue), p = null, l !== null && l.memoizedState !== null && l.memoizedState.cachePool !== null && (p = l.memoizedState.cachePool.pool), y = null, u.memoizedState !== null && u.memoizedState.cachePool !== null && (y = u.memoizedState.cachePool.pool), y !== p && (u.flags |= 2048), l !== null && T($l), null; case 24: return p = null, l !== null && (p = l.memoizedState.cache), u.memoizedState.cache !== p && (u.flags |= 2048), tr(Qn), Vn(u), null; case 25: return null }throw Error(a(156, u.tag)) } function ly(l, u) { switch (Xt(u), u.tag) { case 1: return l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null; case 3: return tr(Qn), Tt(), l = u.flags, (l & 65536) !== 0 && (l & 128) === 0 ? (u.flags = l & -65537 | 128, u) : null; case 26: case 27: case 5: return Vt(u), null; case 13: if (Kn(u), l = u.memoizedState, l !== null && l.dehydrated !== null) { if (u.alternate === null) throw Error(a(340)); Bt() } return l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null; case 19: return T(zn), null; case 4: return Tt(), null; case 10: return tr(u.type), null; case 22: case 23: return Kn(u), qa(), l !== null && T($l), l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null; case 24: return tr(Qn), null; case 25: return null; default: return null } } function bm(l, u) { switch (Xt(u), u.tag) { case 3: tr(Qn), Tt(); break; case 26: case 27: case 5: Vt(u); break; case 4: Tt(); break; case 13: Kn(u); break; case 19: T(zn); break; case 10: tr(u.type); break; case 22: case 23: Kn(u), qa(), l !== null && T($l); break; case 24: tr(Qn) } } function qu(l, u) { try { var p = u.updateQueue, y = p !== null ? p.lastEffect : null; if (y !== null) { var E = y.next; p = E; do { if ((p.tag & l) === l) { y = void 0; var w = p.create, F = p.inst; y = w(), F.destroy = y } p = p.next } while (p !== E) } } catch (Q) { xn(u, u.return, Q) } } function Yr(l, u, p) { try { var y = u.updateQueue, E = y !== null ? y.lastEffect : null; if (E !== null) { var w = E.next; y = w; do { if ((y.tag & l) === l) { var F = y.inst, Q = F.destroy; if (Q !== void 0) { F.destroy = void 0, E = u; var ut = p; try { Q() } catch (Rt) { xn(E, ut, Rt) } } } y = y.next } while (y !== w) } } catch (Rt) { xn(u, u.return, Rt) } } function Em(l) { var u = l.updateQueue; if (u !== null) { var p = l.stateNode; try { ie(u, p) } catch (y) { xn(l, l.return, y) } } } function fa(l, u, p) { p.props = Js(l.type, l.memoizedProps), p.state = l.memoizedState; try { p.componentWillUnmount() } catch (y) { xn(l, u, y) } } function gs(l, u) { try { var p = l.ref; if (p !== null) { var y = l.stateNode; switch (l.tag) { case 26: case 27: case 5: var E = ql(y); break; default: E = y }typeof p == "function" ? l.refCleanup = p(E) : p.current = E } } catch (w) { xn(l, u, w) } } function ha(l, u) { var p = l.ref, y = l.refCleanup; if (p !== null) if (typeof y == "function") try { y() } catch (E) { xn(l, u, E) } finally { l.refCleanup = null, l = l.alternate, l != null && (l.refCleanup = null) } else if (typeof p == "function") try { p(null) } catch (E) { xn(l, u, E) } else p.current = null } function td(l) { var u = l.type, p = l.memoizedProps, y = l.stateNode; try { Ym(y, u, p, l) } catch (E) { xn(l, l.return, E) } } function ed(l, u, p) { try { Wm(l.stateNode, l.type, p, u, l) } catch (y) { xn(l, l.return, y) } } function nd(l) { return l.tag === 5 || l.tag === 3 || (Na ? l.tag === 26 : !1) || (Ti ? l.tag === 27 : !1) || l.tag === 4 } function Yu(l) { t: for (; ;) { for (; l.sibling === null;) { if (l.return === null || nd(l.return)) return null; l = l.return } for (l.sibling.return = l.return, l = l.sibling; l.tag !== 5 && l.tag !== 6 && (!Ti || l.tag !== 27) && l.tag !== 18;) { if (l.flags & 2 || l.child === null || l.tag === 4) continue t; l.child.return = l, l = l.child } if (!(l.flags & 2)) return l.stateNode } } function id(l, u, p) { var y = l.tag; if (y === 5 || y === 6) l = l.stateNode, u ? _d(p, l, u) : yd(p, l); else if (!(y === 4 || Ti && y === 27) && (l = l.child, l !== null)) for (id(l, u, p), l = l.sibling; l !== null;)id(l, u, p), l = l.sibling } function gf(l, u, p) { var y = l.tag; if (y === 5 || y === 6) l = l.stateNode, u ? km(p, l, u) : Xm(p, l); else if (!(y === 4 || Ti && y === 27) && (l = l.child, l !== null)) for (gf(l, u, p), l = l.sibling; l !== null;)gf(l, u, p), l = l.sibling } function Bl(l, u, p) { l = l.containerInfo; try { eg(l, p) } catch (y) { xn(u, u.return, y) } } function ad(l, u) { for (Um(l.containerInfo), Ae = u; Ae !== null;)if (l = Ae, u = l.child, (l.subtreeFlags & 1028) !== 0 && u !== null) u.return = l, Ae = u; else for (; Ae !== null;) { l = Ae; var p = l.alternate; switch (u = l.flags, l.tag) { case 0: break; case 11: case 15: break; case 1: if ((u & 1024) !== 0 && p !== null) { u = void 0; var y = l, E = p.memoizedProps; p = p.memoizedState; var w = y.stateNode; try { var F = Js(y.type, E, y.elementType === y.type); u = w.getSnapshotBeforeUpdate(F, p), w.__reactInternalSnapshotBeforeUpdate = u } catch (Q) { xn(y, y.return, Q) } } break; case 3: (u & 1024) !== 0 && Gn && Jm(l.stateNode.containerInfo); break; case 5: case 26: case 27: case 6: case 4: case 17: break; default: if ((u & 1024) !== 0) throw Error(a(163)) }if (u = l.sibling, u !== null) { u.return = l.return, Ae = u; break } Ae = l.return } return F = Dn, Dn = !1, F } function zo(l, u, p) { var y = p.flags; switch (p.tag) { case 0: case 11: case 15: nr(l, p), y & 4 && qu(5, p); break; case 1: if (nr(l, p), y & 4) if (l = p.stateNode, u === null) try { l.componentDidMount() } catch (Q) { xn(p, p.return, Q) } else { var E = Js(p.type, u.memoizedProps); u = u.memoizedState; try { l.componentDidUpdate(E, u, l.__reactInternalSnapshotBeforeUpdate) } catch (Q) { xn(p, p.return, Q) } } y & 64 && Em(p), y & 512 && gs(p, p.return); break; case 3: if (nr(l, p), y & 64 && (y = p.updateQueue, y !== null)) { if (l = null, p.child !== null) switch (p.child.tag) { case 27: case 5: l = ql(p.child.stateNode); break; case 1: l = p.child.stateNode }try { ie(y, l) } catch (Q) { xn(p, p.return, Q) } } break; case 26: if (Na) { nr(l, p), y & 512 && gs(p, p.return); break } case 27: case 5: nr(l, p), u === null && y & 4 && td(p), y & 512 && gs(p, p.return); break; case 12: nr(l, p); break; case 13: nr(l, p), y & 4 && Pl(l, p); break; case 22: if (E = p.memoizedState !== null || Er, !E) { u = u !== null && u.memoizedState !== null || Ie; var w = Er, F = Ie; Er = E, (Ie = u) && !F ? Wr(l, p, (p.subtreeFlags & 8772) !== 0) : nr(l, p), Er = w, Ie = F } y & 512 && (p.memoizedProps.mode === "manual" ? gs(p, p.return) : ha(p, p.return)); break; default: nr(l, p) } } function vf(l) { var u = l.alternate; u !== null && (l.alternate = null, vf(u)), l.child = null, l.deletions = null, l.sibling = null, l.tag === 5 && (u = l.stateNode, u !== null && zm(u)), l.stateNode = null, l.return = null, l.dependencies = null, l.memoizedProps = null, l.memoizedState = null, l.pendingProps = null, l.stateNode = null, l.updateQueue = null } function Ya(l, u, p) { for (p = p.child; p !== null;)er(l, u, p), p = p.sibling } function er(l, u, p) { if (hi && typeof hi.onCommitFiberUnmount == "function") try { hi.onCommitFiberUnmount(Zo, p) } catch { } switch (p.tag) { case 26: if (Na) { Ie || ha(p, u), Ya(l, u, p), p.memoizedState ? Cd(p.memoizedState) : p.stateNode && Wo(p.stateNode); break } case 27: if (Ti) { Ie || ha(p, u); var y = gn, E = si; gn = p.stateNode, Ya(l, u, p), zd(p.stateNode), gn = y, si = E; break } case 5: Ie || ha(p, u); case 6: if (Gn) { if (y = gn, E = si, gn = null, Ya(l, u, p), gn = y, si = E, gn !== null) if (si) try { Zm(gn, p.stateNode) } catch (w) { xn(p, u, w) } else try { jm(gn, p.stateNode) } catch (w) { xn(p, u, w) } } else Ya(l, u, p); break; case 18: Gn && gn !== null && (si ? Td(gn, p.stateNode) : cg(gn, p.stateNode)); break; case 4: Gn ? (y = gn, E = si, gn = p.stateNode.containerInfo, si = !0, Ya(l, u, p), gn = y, si = E) : (ys && Bl(p.stateNode, p, Nf()), Ya(l, u, p)); break; case 0: case 11: case 14: case 15: Ie || Yr(2, p, u), Ie || Yr(4, p, u), Ya(l, u, p); break; case 1: Ie || (ha(p, u), y = p.stateNode, typeof y.componentWillUnmount == "function" && fa(p, u, y)), Ya(l, u, p); break; case 21: Ya(l, u, p); break; case 22: Ie || ha(p, u), Ie = (y = Ie) || p.memoizedState !== null, Ya(l, u, p), Ie = y; break; default: Ya(l, u, p) } } function Pl(l, u) { if (ga && u.memoizedState === null && (l = u.alternate, l !== null && (l = l.memoizedState, l !== null && (l = l.dehydrated, l !== null)))) try { zf(l) } catch (p) { xn(u, u.return, p) } } function sd(l) { switch (l.tag) { case 13: case 19: var u = l.stateNode; return u === null && (u = l.stateNode = new Ke), u; case 22: return l = l.stateNode, u = l._retryCache, u === null && (u = l._retryCache = new Ke), u; default: throw Error(a(435, l.tag)) } } function yf(l, u) { var p = sd(l); u.forEach(function (y) { var E = bf.bind(null, l, y); p.has(y) || (p.add(y), y.then(E, E)) }) } function ui(l, u) { var p = u.deletions; if (p !== null) for (var y = 0; y < p.length; y++) { var E = p[y], w = l, F = u; if (Gn) { var Q = F; t: for (; Q !== null;) { switch (Q.tag) { case 27: case 5: gn = Q.stateNode, si = !1; break t; case 3: gn = Q.stateNode.containerInfo, si = !0; break t; case 4: gn = Q.stateNode.containerInfo, si = !0; break t }Q = Q.return } if (gn === null) throw Error(a(160)); er(w, F, E), gn = null, si = !1 } else er(w, F, E); w = E.alternate, w !== null && (w.return = null), E.return = null } if (u.subtreeFlags & 13878) for (u = u.child; u !== null;)rd(u, l), u = u.sibling } function rd(l, u) { var p = l.alternate, y = l.flags; switch (l.tag) { case 0: case 11: case 14: case 15: ui(u, l), da(l), y & 4 && (Yr(3, l, l.return), qu(3, l), Yr(5, l, l.return)); break; case 1: ui(u, l), da(l), y & 512 && (Ie || p === null || ha(p, p.return)), y & 64 && Er && (l = l.updateQueue, l !== null && (y = l.callbacks, y !== null && (p = l.shared.hiddenCallbacks, l.shared.hiddenCallbacks = p === null ? y : p.concat(y)))); break; case 26: if (Na) { var E = ji; ui(u, l), da(l), y & 512 && (Ie || p === null || ha(p, p.return)), y & 4 && (y = p !== null ? p.memoizedState : null, u = l.memoizedState, p === null ? u === null ? l.stateNode === null ? l.stateNode = hg(E, l.type, l.memoizedProps, l) : Dd(E, l.type, l.stateNode) : l.stateNode = wd(E, u, l.memoizedProps) : y !== u ? (y === null ? p.stateNode !== null && Wo(p.stateNode) : Cd(y), u === null ? Dd(E, l.type, l.stateNode) : wd(E, u, l.memoizedProps)) : u === null && l.stateNode !== null && ed(l, l.memoizedProps, p.memoizedProps)); break } case 27: if (Ti && y & 4 && l.alternate === null) { E = l.stateNode; var w = l.memoizedProps; try { mg(E), Ld(l.type, w, E, l) } catch (Wt) { xn(l, l.return, Wt) } } case 5: if (ui(u, l), da(l), y & 512 && (Ie || p === null || ha(p, p.return)), Gn) { if (l.flags & 32) { u = l.stateNode; try { Uf(u) } catch (Wt) { xn(l, l.return, Wt) } } y & 4 && l.stateNode != null && (u = l.memoizedProps, ed(l, u, p !== null ? p.memoizedProps : u)), y & 1024 && (An = !0) } break; case 6: if (ui(u, l), da(l), y & 4 && Gn) { if (l.stateNode === null) throw Error(a(162)); y = l.memoizedProps, p = p !== null ? p.memoizedProps : y, u = l.stateNode; try { qm(u, p, y) } catch (Wt) { xn(l, l.return, Wt) } } break; case 3: if (Na ? (dg(), E = ji, ji = Si(u.containerInfo), ui(u, l), ji = E) : ui(u, l), da(l), y & 4) { if (Gn && ga && p !== null && p.memoizedState.isDehydrated) try { ug(u.containerInfo) } catch (Wt) { xn(l, l.return, Wt) } if (ys) { y = u.containerInfo, p = u.pendingChildren; try { eg(y, p) } catch (Wt) { xn(l, l.return, Wt) } } } An && (An = !1, ld(l)); break; case 4: Na ? (p = ji, ji = Si(l.stateNode.containerInfo), ui(u, l), da(l), ji = p) : (ui(u, l), da(l)), y & 4 && ys && Bl(l.stateNode, l, l.stateNode.pendingChildren); break; case 12: ui(u, l), da(l); break; case 13: ui(u, l), da(l), l.child.flags & 8192 && l.memoizedState !== null != (p !== null && p.memoizedState !== null) && (Fd = Oa()), y & 4 && (y = l.updateQueue, y !== null && (l.updateQueue = null, yf(l, y))); break; case 22: y & 512 && (Ie || p === null || ha(p, p.return)), E = l.memoizedState !== null; var F = p !== null && p.memoizedState !== null, Q = Er, ut = Ie; if (Er = Q || E, Ie = ut || F, ui(u, l), Ie = ut, Er = Q, da(l), u = l.stateNode, u._current = l, u._visibility &= -3, u._visibility |= u._pendingVisibility & 2, y & 8192 && (u._visibility = E ? u._visibility & -2 : u._visibility | 1, E && (u = Er || Ie, p === null || F || u || Bo(l)), Gn && (l.memoizedProps === null || l.memoizedProps.mode !== "manual"))) { t: if (p = null, Gn) for (u = l; ;) { if (u.tag === 5 || Na && u.tag === 26 || Ti && u.tag === 27) { if (p === null) { F = p = u; try { w = F.stateNode, E ? Qm(w) : py(F.stateNode, F.memoizedProps) } catch (Wt) { xn(F, F.return, Wt) } } } else if (u.tag === 6) { if (p === null) { F = u; try { var Rt = F.stateNode; E ? Km(Rt) : xd(Rt, F.memoizedProps) } catch (Wt) { xn(F, F.return, Wt) } } } else if ((u.tag !== 22 && u.tag !== 23 || u.memoizedState === null || u === l) && u.child !== null) { u.child.return = u, u = u.child; continue } if (u === l) break t; for (; u.sibling === null;) { if (u.return === null || u.return === l) break t; p === u && (p = null), u = u.return } p === u && (p = null), u.sibling.return = u.return, u = u.sibling } } y & 4 && (y = l.updateQueue, y !== null && (p = y.retryQueue, p !== null && (y.retryQueue = null, yf(l, p)))); break; case 19: ui(u, l), da(l), y & 4 && (y = l.updateQueue, y !== null && (l.updateQueue = null, yf(l, y))); break; case 21: break; default: ui(u, l), da(l) } } function da(l) { var u = l.flags; if (u & 2) { try { if (Gn && (!Ti || l.tag !== 27)) { t: { for (var p = l.return; p !== null;) { if (nd(p)) { var y = p; break t } p = p.return } throw Error(a(160)) } switch (y.tag) { case 27: if (Ti) { var E = y.stateNode, w = Yu(l); gf(l, w, E); break } case 5: var F = y.stateNode; y.flags & 32 && (Uf(F), y.flags &= -33); var Q = Yu(l); gf(l, Q, F); break; case 3: case 4: var ut = y.stateNode.containerInfo, Rt = Yu(l); id(l, Rt, ut); break; default: throw Error(a(161)) } } } catch (Wt) { xn(l, l.return, Wt) } l.flags &= -3 } u & 4096 && (l.flags &= -4097) } function ld(l) { if (l.subtreeFlags & 1024) for (l = l.child; l !== null;) { var u = l; ld(u), u.tag === 5 && u.flags & 1024 && Pm(u.stateNode), l = l.sibling } } function nr(l, u) { if (u.subtreeFlags & 8772) for (u = u.child; u !== null;)zo(l, u.alternate, u), u = u.sibling } function Bo(l) { for (l = l.child; l !== null;) { var u = l; switch (u.tag) { case 0: case 11: case 14: case 15: Yr(4, u, u.return), Bo(u); break; case 1: ha(u, u.return); var p = u.stateNode; typeof p.componentWillUnmount == "function" && fa(u, u.return, p), Bo(u); break; case 26: case 27: case 5: ha(u, u.return), Bo(u); break; case 22: ha(u, u.return), u.memoizedState === null && Bo(u); break; default: Bo(u) }l = l.sibling } } function Wr(l, u, p) { for (p = p && (u.subtreeFlags & 8772) !== 0, u = u.child; u !== null;) { var y = u.alternate, E = l, w = u, F = w.flags; switch (w.tag) { case 0: case 11: case 15: Wr(E, w, p), qu(4, w); break; case 1: if (Wr(E, w, p), y = w, E = y.stateNode, typeof E.componentDidMount == "function") try { E.componentDidMount() } catch (Rt) { xn(y, y.return, Rt) } if (y = w, E = y.updateQueue, E !== null) { var Q = y.stateNode; try { var ut = E.shared.hiddenCallbacks; if (ut !== null) for (E.shared.hiddenCallbacks = null, E = 0; E < ut.length; E++)at(ut[E], Q) } catch (Rt) { xn(y, y.return, Rt) } } p && F & 64 && Em(w), gs(w, w.return); break; case 26: case 27: case 5: Wr(E, w, p), p && y === null && F & 4 && td(w), gs(w, w.return); break; case 12: Wr(E, w, p); break; case 13: Wr(E, w, p), p && F & 4 && Pl(E, w); break; case 22: w.memoizedState === null && Wr(E, w, p), gs(w, w.return); break; default: Wr(E, w, p) }u = u.sibling } } function _f(l, u) { var p = null; l !== null && l.memoizedState !== null && l.memoizedState.cachePool !== null && (p = l.memoizedState.cachePool.pool), l = null, u.memoizedState !== null && u.memoizedState.cachePool !== null && (l = u.memoizedState.cachePool.pool), l !== p && (l != null && l.refCount++, p != null && Gu(p)) } function xf(l, u) { l = null, u.alternate !== null && (l = u.alternate.memoizedState.cache), u = u.memoizedState.cache, u !== l && (u.refCount++, l != null && Gu(l)) } function ir(l, u, p, y) { if (u.subtreeFlags & 10256) for (u = u.child; u !== null;)Wa(l, u, p, y), u = u.sibling } function Wa(l, u, p, y) { var E = u.flags; switch (u.tag) { case 0: case 11: case 15: ir(l, u, p, y), E & 2048 && qu(9, u); break; case 3: ir(l, u, p, y), E & 2048 && (l = null, u.alternate !== null && (l = u.alternate.memoizedState.cache), u = u.memoizedState.cache, u !== l && (u.refCount++, l != null && Gu(l))); break; case 12: if (E & 2048) { ir(l, u, p, y), l = u.stateNode; try { var w = u.memoizedProps, F = w.id, Q = w.onPostCommit; typeof Q == "function" && Q(F, u.alternate === null ? "mount" : "update", l.passiveEffectDuration, -0) } catch (ut) { xn(u, u.return, ut) } } else ir(l, u, p, y); break; case 23: break; case 22: w = u.stateNode, u.memoizedState !== null ? w._visibility & 4 ? ir(l, u, p, y) : Us(l, u) : w._visibility & 4 ? ir(l, u, p, y) : (w._visibility |= 4, Ni(l, u, p, y, (u.subtreeFlags & 10256) !== 0)), E & 2048 && _f(u.alternate, u); break; case 24: ir(l, u, p, y), E & 2048 && xf(u.alternate, u); break; default: ir(l, u, p, y) } } function Ni(l, u, p, y, E) { for (E = E && (u.subtreeFlags & 10256) !== 0, u = u.child; u !== null;) { var w = l, F = u, Q = p, ut = y, Rt = F.flags; switch (F.tag) { case 0: case 11: case 15: Ni(w, F, Q, ut, E), qu(8, F); break; case 23: break; case 22: var Wt = F.stateNode; F.memoizedState !== null ? Wt._visibility & 4 ? Ni(w, F, Q, ut, E) : Us(w, F) : (Wt._visibility |= 4, Ni(w, F, Q, ut, E)), E && Rt & 2048 && _f(F.alternate, F); break; case 24: Ni(w, F, Q, ut, E), E && Rt & 2048 && xf(F.alternate, F); break; default: Ni(w, F, Q, ut, E) }u = u.sibling } } function Us(l, u) { if (u.subtreeFlags & 10256) for (u = u.child; u !== null;) { var p = l, y = u, E = y.flags; switch (y.tag) { case 22: Us(p, y), E & 2048 && _f(y.alternate, y); break; case 24: Us(p, y), E & 2048 && xf(y.alternate, y); break; default: Us(p, y) }u = u.sibling } } function ar(l) { if (l.subtreeFlags & _l) for (l = l.child; l !== null;)Wu(l), l = l.sibling } function Wu(l) { switch (l.tag) { case 26: ar(l), l.flags & _l && (l.memoizedState !== null ? Od(ji, l.memoizedState, l.memoizedProps) : vd(l.type, l.memoizedProps)); break; case 5: ar(l), l.flags & _l && vd(l.type, l.memoizedProps); break; case 3: case 4: if (Na) { var u = ji; ji = Si(l.stateNode.containerInfo), ar(l), ji = u } else ar(l); break; case 22: l.memoizedState === null && (u = l.alternate, u !== null && u.memoizedState !== null ? (u = _l, _l = 16777216, ar(l), _l = u) : ar(l)); break; default: ar(l) } } function ku(l) { var u = l.alternate; if (u !== null && (l = u.child, l !== null)) { u.child = null; do u = l.sibling, l.sibling = null, l = u; while (l !== null) } } function Il(l) { var u = l.deletions; if ((l.flags & 16) !== 0) { if (u !== null) for (var p = 0; p < u.length; p++) { var y = u[p]; Ae = y, Zu(y, l) } ku(l) } if (l.subtreeFlags & 10256) for (l = l.child; l !== null;)sr(l), l = l.sibling } function sr(l) { switch (l.tag) { case 0: case 11: case 15: Il(l), l.flags & 2048 && Yr(9, l, l.return); break; case 3: Il(l); break; case 12: Il(l); break; case 22: var u = l.stateNode; l.memoizedState !== null && u._visibility & 4 && (l.return === null || l.return.tag !== 13) ? (u._visibility &= -5, ju(l)) : Il(l); break; default: Il(l) } } function ju(l) { var u = l.deletions; if ((l.flags & 16) !== 0) { if (u !== null) for (var p = 0; p < u.length; p++) { var y = u[p]; Ae = y, Zu(y, l) } ku(l) } for (l = l.child; l !== null;) { switch (u = l, u.tag) { case 0: case 11: case 15: Yr(8, u, u.return), ju(u); break; case 22: p = u.stateNode, p._visibility & 4 && (p._visibility &= -5, ju(u)); break; default: ju(u) }l = l.sibling } } function Zu(l, u) { for (; Ae !== null;) { var p = Ae; switch (p.tag) { case 0: case 11: case 15: Yr(8, p, u); break; case 23: case 22: if (p.memoizedState !== null && p.memoizedState.cachePool !== null) { var y = p.memoizedState.cachePool.pool; y != null && y.refCount++ } break; case 24: Gu(p.memoizedState.cache) }if (y = p.child, y !== null) y.return = p, Ae = y; else t: for (p = l; Ae !== null;) { y = Ae; var E = y.sibling, w = y.return; if (vf(y), y === p) { Ae = null; break t } if (E !== null) { E.return = w, Ae = E; break t } Ae = w } } } function kr(l) { var u = wf(l); if (u != null) { if (typeof u.memoizedProps["data-testname"] != "string") throw Error(a(364)); return u } if (l = Fm(l), l === null) throw Error(a(362)); return l.stateNode.current } function Sf(l, u) { var p = l.tag; switch (u.$$typeof) { case Fn: if (l.type === u.value) return !0; break; case Ts: t: { for (u = u.value, l = [l, 0], p = 0; p < l.length;) { var y = l[p++], E = y.tag, w = l[p++], F = u[w]; if (E !== 5 && E !== 26 && E !== 27 || !Ps(y)) { for (; F != null && Sf(y, F);)w++, F = u[w]; if (w === u.length) { u = !0; break t } else for (y = y.child; y !== null;)l.push(y, w), y = y.sibling } } u = !1 } return u; case Xs: if ((p === 5 || p === 26 || p === 27) && Gm(l.stateNode, u.value)) return !0; break; case ra: if ((p === 5 || p === 6 || p === 26 || p === 27) && (l = Vm(l), l !== null && 0 <= l.indexOf(u.value))) return !0; break; case eu: if ((p === 5 || p === 26 || p === 27) && (l = l.memoizedProps["data-testname"], typeof l == "string" && l.toLowerCase() === u.value.toLowerCase())) return !0; break; default: throw Error(a(365)) }return !1 } function pa(l) { switch (l.$$typeof) { case Fn: return "<" + (f(l.value) || "Unknown") + ">"; case Ts: return ":has(" + (pa(l) || "") + ")"; case Xs: return '[role="' + l.value + '"]'; case ra: return '"' + l.value + '"'; case eu: return '[data-testname="' + l.value + '"]'; default: throw Error(a(365)) } } function Hl(l, u) { var p = []; l = [l, 0]; for (var y = 0; y < l.length;) { var E = l[y++], w = E.tag, F = l[y++], Q = u[F]; if (w !== 5 && w !== 26 && w !== 27 || !Ps(E)) { for (; Q != null && Sf(E, Q);)F++, Q = u[F]; if (F === u.length) p.push(E); else for (E = E.child; E !== null;)l.push(E, F), E = E.sibling } } return p } function jr(l, u) { if (!Yo) throw Error(a(363)); l = kr(l), l = Hl(l, u), u = [], l = Array.from(l); for (var p = 0; p < l.length;) { var y = l[p++], E = y.tag; if (E === 5 || E === 26 || E === 27) Ps(y) || u.push(y.stateNode); else for (y = y.child; y !== null;)l.push(y), y = y.sibling } return u } function Vi() { if ((tn & 2) !== 0 && en !== 0) return en & -en; if (Ue.T !== null) { var l = Hn; return l !== 0 ? l : pe() } return Om() } function Qu() { Ba === 0 && (Ba = (en & 536870912) === 0 || fn ? q() : 536870912); var l = _a.current; return l !== null && (l.flags |= 32), Ba } function Ln(l, u, p) { (l === Rn && En === 2 || l.cancelPendingCommit !== null) && (Zr(l, 0), ea(l, en, Ba, !1)), j(l, p), ((tn & 2) === 0 || l !== Rn) && (l === Rn && ((tn & 2) === 0 && (Ar |= p), qn === 4 && ea(l, en, Ba, !1)), Qt(l)) } function Da(l, u, p) { if ((tn & 6) !== 0) throw Error(a(327)); var y = !p && (u & 60) === 0 && (u & l.expiredLanes) === 0 || I(l, u), E = y ? Tm(l, u) : Ju(l, u, !0), w = y; do { if (E === 0) { es && !y && ea(l, u, 0, !1); break } else if (E === 6) ea(l, u, 0, !ts); else { if (p = l.current.alternate, w && !lr(p)) { E = Ju(l, u, !1), w = !1; continue } if (E === 2) { if (w = u, l.errorRecoveryDisabledLanes & w) var F = 0; else F = l.pendingLanes & -536870913, F = F !== 0 ? F : F & 536870912 ? 536870912 : 0; if (F !== 0) { u = F; t: { var Q = l; E = nu; var ut = ga && Q.current.memoizedState.isDehydrated; if (ut && (Zr(Q, F).flags |= 256), F = Ju(Q, F, !1), F !== 2) { if (to && !ut) { Q.errorRecoveryDisabledLanes |= w, Ar |= w, E = 4; break t } w = is, is = E, w !== null && rr(w) } E = F } if (w = !1, E !== 2) continue } } if (E === 1) { Zr(l, 0), ea(l, u, 0, !0); break } t: { switch (y = l, E) { case 0: case 1: throw Error(a(345)); case 4: if ((u & 4194176) === u) { ea(y, u, Ba, !ts); break t } break; case 2: is = null; break; case 3: case 5: break; default: throw Error(a(329)) }if (y.finishedWork = p, y.finishedLanes = u, (u & 62914560) === u && (w = Fd + 300 - Oa(), 10 < w)) { if (ea(y, u, Ba, !ts), V(y, 0) !== 0) break t; y.timeoutHandle = Rf(Ns.bind(null, y, p, is, eo, Wf, u, Ba, Ar, mi, ts, 2, -0, 0), w); break t } Ns(y, p, is, eo, Wf, u, Ba, Ar, mi, ts, 0, -0, 0) } } break } while (!0); Qt(l) } function rr(l) { is === null ? is = l : is.push.apply(is, l) } function Ns(l, u, p, y, E, w, F, Q, ut, Rt, Wt, re, qt) { var He = u.subtreeFlags; if ((He & 8192 || (He & 16785408) === 16785408) && (hy(), Wu(u), u = Bm(), u !== null)) { l.cancelPendingCommit = u(Mf.bind(null, l, p, y, E, F, Q, ut, 1, re, qt)), ea(l, w, F, !Rt); return } Mf(l, p, y, E, F, Q, ut, Wt, re, qt) } function lr(l) { for (var u = l; ;) { var p = u.tag; if ((p === 0 || p === 11 || p === 15) && u.flags & 16384 && (p = u.updateQueue, p !== null && (p = p.stores, p !== null))) for (var y = 0; y < p.length; y++) { var E = p[y], w = E.getSnapshot; E = E.value; try { if (!ia(w(), E)) return !1 } catch { return !1 } } if (p = u.child, u.subtreeFlags & 16384 && p !== null) p.return = u, u = p; else { if (u === l) break; for (; u.sibling === null;) { if (u.return === null || u.return === l) return !0; u = u.return } u.sibling.return = u.return, u = u.sibling } } return !0 } function ea(l, u, p, y) { u &= ~la, u &= ~Ar, l.suspendedLanes |= u, l.pingedLanes &= ~u, y && (l.warmLanes |= u), y = l.expirationTimes; for (var E = u; 0 < E;) { var w = 31 - ti(E), F = 1 << w; y[w] = -1, E &= ~F } p !== 0 && tt(l, p, u) } function od() { return (tn & 6) === 0 ? (X(0), !1) : !0 } function Ku() { if (ke !== null) { if (En === 0) var l = ke.return; else l = ke, $a = yl = null, ps(l), Kl = null, ki = 0, l = ke; for (; l !== null;)bm(l.alternate, l), l = l.return; ke = null } } function Zr(l, u) { l.finishedWork = null, l.finishedLanes = 0; var p = l.timeoutHandle; p !== qo && (l.timeoutHandle = qo, rc(p)), p = l.cancelPendingCommit, p !== null && (l.cancelPendingCommit = null, p()), Ku(), Rn = l, ke = p = ur(l.current, null), en = u, En = 0, pi = null, ts = !1, es = I(l, u), to = !1, mi = Ba = la = Ar = ns = qn = 0, is = nu = null, Wf = !1, (u & 8) !== 0 && (u |= u & 32); var y = l.entangledLanes; if (y !== 0) for (l = l.entanglements, y &= u; 0 < y;) { var E = 31 - ti(y), w = 1 << E; u |= l[E], y &= ~w } return As = u, W(), p } function Gi(l, u) { Pe = null, Ue.H = ai, u === hc ? (u = we(), En = 3) : u === dc ? (u = we(), En = 4) : En = u === Id ? 8 : u !== null && typeof u == "object" && typeof u.then == "function" ? 6 : 1, pi = u, ke === null && (qn = 1, Co(l, Et(u, l.current))) } function Ei() { var l = _a.current; return l === null ? !0 : (en & 4194176) === en ? Ka === null : (en & 62914560) === en || (en & 536870912) !== 0 ? l === Ka : !1 } function cn() { var l = Ue.H; return Ue.H = ai, l === null ? ai : l } function ka() { var l = Ue.A; return Ue.A = Tr, l } function ja() { qn = 4, ts || (en & 4194176) !== en && _a.current !== null || (es = !0), (ns & 134217727) === 0 && (Ar & 134217727) === 0 || Rn === null || ea(Rn, en, Ba, !1) } function Ju(l, u, p) { var y = tn; tn |= 2; var E = cn(), w = ka(); (Rn !== l || en !== u) && (eo = null, Zr(l, u)), u = !1; var F = qn; t: do try { if (En !== 0 && ke !== null) { var Q = ke, ut = pi; switch (En) { case 8: Ku(), F = 6; break t; case 3: case 2: case 6: _a.current === null && (u = !0); var Rt = En; if (En = 0, pi = null, Os(l, Q, ut, Rt), p && es) { F = 0; break t } break; default: Rt = En, En = 0, pi = null, Os(l, Q, ut, Rt) } } Fl(), F = qn; break } catch (Wt) { Gi(l, Wt) } while (!0); return u && l.shellSuspendCounter++, $a = yl = null, tn = y, Ue.H = E, Ue.A = w, ke === null && (Rn = null, en = 0, W()), F } function Fl() { for (; ke !== null;)Po(ke) } function Tm(l, u) { var p = tn; tn |= 2; var y = cn(), E = ka(); Rn !== l || en !== u ? (eo = null, Pa = Oa() + 500, Zr(l, u)) : es = I(l, u); t: do try { if (En !== 0 && ke !== null) { u = ke; var w = pi; e: switch (En) { case 1: En = 0, pi = null, Os(l, u, w, 1); break; case 2: if (Nt(w)) { En = 0, pi = null, Io(u); break } u = function () { En === 2 && Rn === l && (En = 7), Qt(l) }, w.then(u, u); break t; case 3: En = 7; break t; case 4: En = 5; break t; case 7: Nt(w) ? (En = 0, pi = null, Io(u)) : (En = 0, pi = null, Os(l, u, w, 7)); break; case 5: var F = null; switch (ke.tag) { case 26: F = ke.memoizedState; case 5: case 27: var Q = ke, ut = Q.type, Rt = Q.pendingProps; if (F ? Nd(F) : gd(ut, Rt)) { En = 0, pi = null; var Wt = Q.sibling; if (Wt !== null) ke = Wt; else { var re = Q.return; re !== null ? (ke = re, Qr(re)) : ke = null } break e } }En = 0, pi = null, Os(l, u, w, 5); break; case 6: En = 0, pi = null, Os(l, u, w, 6); break; case 8: Ku(), qn = 6; break t; default: throw Error(a(462)) } } Am(); break } catch (qt) { Gi(l, qt) } while (!0); return $a = yl = null, Ue.H = y, Ue.A = E, tn = p, ke !== null ? 0 : (Rn = null, en = 0, W(), qn) } function Am() { for (; ke !== null && !cl();)Po(ke) } function Po(l) { var u = xm(l.alternate, l, As); l.memoizedProps = l.pendingProps, u === null ? Qr(l) : ke = u } function Io(l) { var u = l, p = u.alternate; switch (u.tag) { case 15: case 0: u = pm(p, u, u.pendingProps, u.type, void 0, en); break; case 11: u = pm(p, u, u.pendingProps, u.type.render, u.ref, en); break; case 5: ps(u); default: bm(p, u), u = ke = Vl(u, As), u = xm(p, u, As) }l.memoizedProps = l.pendingProps, u === null ? Qr(l) : ke = u } function Os(l, u, p, y) { $a = yl = null, ps(u), Kl = null, ki = 0; var E = u.return; try { if (sy(l, E, u, p, en)) { qn = 1, Co(l, Et(p, l.current)), ke = null; return } } catch (w) { if (E !== null) throw ke = E, w; qn = 1, Co(l, Et(p, l.current)), ke = null; return } u.flags & 32768 ? (fn || y === 1 ? l = !0 : es || (en & 536870912) !== 0 ? l = !1 : (ts = l = !0, (y === 2 || y === 3 || y === 6) && (y = _a.current, y !== null && y.tag === 13 && (y.flags |= 16384))), ud(u, l)) : Qr(u) } function Qr(l) { var u = l; do { if ((u.flags & 32768) !== 0) { ud(u, ts); return } l = u.return; var p = Mm(u.alternate, u, As); if (p !== null) { ke = p; return } if (u = u.sibling, u !== null) { ke = u; return } ke = u = l } while (u !== null); qn === 0 && (qn = 5) } function ud(l, u) { do { var p = ly(l.alternate, l); if (p !== null) { p.flags &= 32767, ke = p; return } if (p = l.return, p !== null && (p.flags |= 32768, p.subtreeFlags = 0, p.deletions = null), !u && (l = l.sibling, l !== null)) { ke = l; return } ke = l = p } while (l !== null); qn = 6, ke = null } function Mf(l, u, p, y, E, w, F, Q, ut, Rt) { var Wt = Ue.T, re = ll(); try { na(2), Ue.T = null, Rm(l, u, p, y, re, E, w, F, Q, ut, Rt) } finally { Ue.T = Wt, na(re) } } function Rm(l, u, p, y, E, w, F, Q) { do Kr(); while (xl !== null); if ((tn & 6) !== 0) throw Error(a(327)); var ut = l.finishedWork; if (y = l.finishedLanes, ut === null) return null; if (l.finishedWork = null, l.finishedLanes = 0, ut === l.current) throw Error(a(177)); l.callbackNode = null, l.callbackPriority = 0, l.cancelPendingCommit = null; var Rt = ut.lanes | ut.childLanes; if (Rt |= Ms, dt(l, y, Rt, w, F, Q), l === Rn && (ke = Rn = null, en = 0), (ut.subtreeFlags & 10256) === 0 && (ut.flags & 10256) === 0 || Rr || (Rr = !0, kf = Rt, vc = p, wm(jo, function () { return Kr(), null })), p = (ut.flags & 15990) !== 0, (ut.subtreeFlags & 15990) !== 0 || p ? (p = Ue.T, Ue.T = null, w = ll(), na(2), F = tn, tn |= 4, ad(l, ut), rd(ut, l), fy(l.containerInfo), l.current = ut, zo(l, ut.alternate, ut), vr(), tn = F, na(w), Ue.T = p) : l.current = ut, Rr ? (Rr = !1, xl = l, iu = y) : $u(l, Rt), Rt = l.pendingLanes, Rt === 0 && (Ys = null), K(ut.stateNode), Qt(l), u !== null) for (E = l.onRecoverableError, ut = 0; ut < u.length; ut++)Rt = u[ut], E(Rt.value, { componentStack: Rt.stack }); return (iu & 3) !== 0 && Kr(), Rt = l.pendingLanes, (y & 4194218) !== 0 && (Rt & 42) !== 0 ? l === Vd ? no++ : (no = 0, Vd = l) : no = 0, X(0), null } function $u(l, u) { (l.pooledCacheLanes &= u) === 0 && (u = l.pooledCache, u != null && (l.pooledCache = null, Gu(u))) } function Kr() { if (xl !== null) { var l = xl, u = kf; kf = 0; var p = xt(iu), y = 32 > p ? 32 : p; p = Ue.T; var E = ll(); try { if (na(y), Ue.T = null, xl === null) var w = !1; else { y = vc, vc = null; var F = xl, Q = iu; if (xl = null, iu = 0, (tn & 6) !== 0) throw Error(a(331)); var ut = tn; if (tn |= 4, sr(F.current), Wa(F, F.current, Q, y), tn = ut, X(0, !1), hi && typeof hi.onPostCommitFiberRoot == "function") try { hi.onPostCommitFiberRoot(Zo, F) } catch { } w = !0 } return w } finally { na(E), Ue.T = p, $u(l, u) } } return !1 } function Ho(l, u, p) { u = Et(p, u), u = Uo(l.stateNode, u, 2), l = he(l, u, 2), l !== null && (j(l, 2), Qt(l)) } function xn(l, u, p) { if (l.tag === 3) Ho(l, l, p); else for (; u !== null;) { if (u.tag === 3) { Ho(u, l, p); break } else if (u.tag === 1) { var y = u.stateNode; if (typeof u.type.getDerivedStateFromError == "function" || typeof y.componentDidCatch == "function" && (Ys === null || !Ys.has(y))) { l = Et(p, l), p = Yh(2), y = he(u, p, 2), y !== null && (um(p, y, u, l), j(y, 2), Qt(y)); break } } u = u.return } } function Jr(l, u, p) { var y = l.pingCache; if (y === null) { y = l.pingCache = new gc; var E = new Set; y.set(u, E) } else E = y.get(u), E === void 0 && (E = new Set, y.set(u, E)); E.has(p) || (to = !0, E.add(p), l = tc.bind(null, l, u, p), u.then(l, l)) } function tc(l, u, p) { var y = l.pingCache; y !== null && y.delete(u), l.pingedLanes |= l.suspendedLanes & p, l.warmLanes &= ~p, Rn === l && (en & p) === p && (qn === 4 || qn === 3 && (en & 62914560) === en && 300 > Oa() - Fd ? (tn & 2) === 0 && Zr(l, 0) : la |= p, mi === en && (mi = 0)), Qt(l) } function ec(l, u) { u === 0 && (u = z()), l = ee(l, u), l !== null && (j(l, u), Qt(l)) } function nc(l) { var u = l.memoizedState, p = 0; u !== null && (p = u.retryLane), ec(l, p) } function bf(l, u) { var p = 0; switch (l.tag) { case 13: var y = l.stateNode, E = l.memoizedState; E !== null && (p = E.retryLane); break; case 19: y = l.stateNode; break; case 22: y = l.stateNode._retryCache; break; default: throw Error(a(314)) }y !== null && y.delete(u), ec(l, p) } function wm(l, u) { return Hs(l, u) } function Cm(l, u, p, y) { this.tag = l, this.key = p, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.refCleanup = this.ref = null, this.pendingProps = u, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = y, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null } function or(l) { return l = l.prototype, !(!l || !l.isReactComponent) } function ur(l, u) { var p = l.alternate; return p === null ? (p = e(l.tag, u, l.key, l.mode), p.elementType = l.elementType, p.type = l.type, p.stateNode = l.stateNode, p.alternate = l, l.alternate = p) : (p.pendingProps = u, p.type = l.type, p.flags = 0, p.subtreeFlags = 0, p.deletions = null), p.flags = l.flags & 31457280, p.childLanes = l.childLanes, p.lanes = l.lanes, p.child = l.child, p.memoizedProps = l.memoizedProps, p.memoizedState = l.memoizedState, p.updateQueue = l.updateQueue, u = l.dependencies, p.dependencies = u === null ? null : { lanes: u.lanes, firstContext: u.firstContext }, p.sibling = l.sibling, p.index = l.index, p.ref = l.ref, p.refCleanup = l.refCleanup, p } function Vl(l, u) { l.flags &= 31457282; var p = l.alternate; return p === null ? (l.childLanes = 0, l.lanes = u, l.child = null, l.subtreeFlags = 0, l.memoizedProps = null, l.memoizedState = null, l.updateQueue = null, l.dependencies = null, l.stateNode = null) : (l.childLanes = p.childLanes, l.lanes = p.lanes, l.child = p.child, l.subtreeFlags = 0, l.deletions = null, l.memoizedProps = p.memoizedProps, l.memoizedState = p.memoizedState, l.updateQueue = p.updateQueue, l.type = p.type, u = p.dependencies, l.dependencies = u === null ? null : { lanes: u.lanes, firstContext: u.firstContext }), l } function Gl(l, u, p, y, E, w) { var F = 0; if (y = l, typeof l == "function") or(l) && (F = 1); else if (typeof l == "string") F = Na && Ti ? xi(l, p, ei.current) ? 26 : Pf(l) ? 27 : 5 : Na ? xi(l, p, ei.current) ? 26 : 5 : Ti && Pf(l) ? 27 : 5; else t: switch (l) { case el: return $r(p.children, E, w, u); case Xl: F = 8, E |= 24; break; case nl: return l = e(12, p, u, E | 2), l.elementType = nl, l.lanes = w, l; case hr: return l = e(13, p, u, E), l.elementType = hr, l.lanes = w, l; case ac: return l = e(19, p, u, E), l.elementType = ac, l.lanes = w, l; case pr: return Ef(p, E, w, u); default: if (typeof l == "object" && l !== null) switch (l.$$typeof) { case uy: case il: F = 10; break t; case hd: F = 9; break t; case Tf: F = 11; break t; case Vo: F = 14; break t; case dr: F = 16, y = null; break t }F = 29, p = Error(a(130, l === null ? "null" : typeof l, "")), y = null }return u = e(F, p, u, E), u.elementType = l, u.type = y, u.lanes = w, u } function $r(l, u, p, y) { return l = e(7, l, y, u), l.lanes = p, l } function Ef(l, u, p, y) { l = e(22, l, y, u), l.elementType = pr, l.lanes = p; var E = { _visibility: 1, _pendingVisibility: 1, _pendingMarkers: null, _retryCache: null, _transitions: null, _current: null, detach: function () { var w = E._current; if (w === null) throw Error(a(456)); if ((E._pendingVisibility & 2) === 0) { var F = ee(w, 2); F !== null && (E._pendingVisibility |= 2, Ln(F, w, 2)) } }, attach: function () { var w = E._current; if (w === null) throw Error(a(456)); if ((E._pendingVisibility & 2) !== 0) { var F = ee(w, 2); F !== null && (E._pendingVisibility &= -3, Ln(F, w, 2)) } } }; return l.stateNode = E, l } function ic(l, u, p) { return l = e(6, l, null, u), l.lanes = p, l } function ma(l, u, p) { return u = e(4, l.children !== null ? l.children : [], l.key, u), u.lanes = p, u.stateNode = { containerInfo: l.containerInfo, pendingChildren: null, implementation: l.implementation }, u } function Ls(l, u, p, y, E, w, F, Q) { this.tag = 1, this.containerInfo = l, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = qo, this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null, this.callbackPriority = 0, this.expirationTimes = L(-1), this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = L(0), this.hiddenUpdates = L(null), this.identifierPrefix = y, this.onUncaughtError = E, this.onCaughtError = w, this.onRecoverableError = F, this.pooledCache = null, this.pooledCacheLanes = 0, this.formState = Q, this.incompleteTransitions = new Map } function cr(l, u, p, y, E, w, F, Q, ut, Rt, Wt, re) { return l = new Ls(l, u, p, F, Q, ut, Rt, re), u = 1, w === !0 && (u |= 24), w = e(3, null, null, u), l.current = w, w.stateNode = l, u = qr(), u.refCount++, l.pooledCache = u, u.refCount++, w.memoizedState = { element: y, isDehydrated: p, cache: u }, Yt(w), l } function cd(l) { return l ? (l = Zl, l) : Zl } function fr(l) { var u = l._reactInternals; if (u === void 0) throw typeof l.render == "function" ? Error(a(188)) : (l = Object.keys(l).join(","), Error(a(268, l))); return l = M(u), l = l !== null ? A(l) : null, l === null ? null : ql(l.stateNode) } function zs(l, u, p, y, E, w) { E = cd(E), y.context === null ? y.context = E : y.pendingContext = E, y = ge(u), y.payload = { element: p }, w = w === void 0 ? null : w, w !== null && (y.callback = w), p = he(l, y, u), p !== null && (Ln(p, l, u), ue(p, l, u)) } function ci(l, u) { if (l = l.memoizedState, l !== null && l.dehydrated !== null) { var p = l.retryLane; l.retryLane = p !== 0 && p < u ? p : u } } function Fo(l, u) { ci(l, u), (l = l.alternate) && ci(l, u) } var $e = {}, oy = Nh(), Ua = aS(), Jn = Object.assign, fd = Symbol.for("react.element"), tl = Symbol.for("react.transitional.element"), Bs = Symbol.for("react.portal"), el = Symbol.for("react.fragment"), Xl = Symbol.for("react.strict_mode"), nl = Symbol.for("react.profiler"), uy = Symbol.for("react.provider"), hd = Symbol.for("react.consumer"), il = Symbol.for("react.context"), Tf = Symbol.for("react.forward_ref"), hr = Symbol.for("react.suspense"), ac = Symbol.for("react.suspense_list"), Vo = Symbol.for("react.memo"), dr = Symbol.for("react.lazy"), pr = Symbol.for("react.offscreen"), We = Symbol.for("react.memo_cache_sentinel"), bn = Symbol.iterator, fi = Symbol.for("react.client.reference"), Ue = oy.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, al, sl, Go = !1, rl = Array.isArray, Xo = t.rendererVersion, cy = t.rendererPackageName, Zn = t.extraDevToolsConfig, ql = t.getPublicInstance, dd = t.getRootHostContext, Dm = t.getChildHostContext, Um = t.prepareForCommit, fy = t.resetAfterCommit, pd = t.createInstance, sc = t.appendInitialChild, Af = t.finalizeInitialChildren, Oi = t.shouldSetTextContent, $n = t.createTextInstance, Rf = t.scheduleTimeout, rc = t.cancelTimeout, qo = t.noTimeout, vs = t.isPrimaryRenderer; t.warnsIfNotActing; var Gn = t.supportsMutation, ys = t.supportsPersistence, ga = t.supportsHydration, wf = t.getInstanceFromNode; t.beforeActiveInstanceBlur, t.afterActiveInstanceBlur; var Nm = t.preparePortalMount; t.prepareScopeUpdate, t.getInstanceFromScope; var na = t.setCurrentUpdatePriority, ll = t.getCurrentUpdatePriority, Om = t.resolveUpdatePriority; t.resolveEventType, t.resolveEventTimeStamp; var Lm = t.shouldAttemptEagerTransition, zm = t.detachDeletedInstance; t.requestPostPaintCallback; var md = t.maySuspendCommit, gd = t.preloadInstance, hy = t.startSuspendingCommit, vd = t.suspendInstance, Bm = t.waitForCommitToBeReady, Yl = t.NotPendingTransition, mr = t.HostTransitionContext, Pm = t.resetFormInstance; t.bindToConsole; var Im = t.supportsMicrotasks, Hm = t.scheduleMicrotask, Yo = t.supportsTestSelectors, Fm = t.findFiberRoot, dy = t.getBoundingRect, Vm = t.getTextContent, Ps = t.isHiddenSubtree, Gm = t.matchAccessibilityRole, Cf = t.setFocusIfFocusable, Df = t.setupIntersectionObserver, Xm = t.appendChild, yd = t.appendChildToContainer, qm = t.commitTextUpdate, Ym = t.commitMount, Wm = t.commitUpdate, km = t.insertBefore, _d = t.insertInContainerBefore, jm = t.removeChild, Zm = t.removeChildFromContainer, Uf = t.resetTextContent, Qm = t.hideInstance, Km = t.hideTextInstance, py = t.unhideInstance, xd = t.unhideTextInstance, Jm = t.clearContainer, $m = t.cloneInstance, Nf = t.createContainerChildSet, Sd = t.appendChildToContainerChildSet, tg = t.finalizeContainerChildren, eg = t.replaceContainerChildren, ng = t.cloneHiddenInstance, Md = t.cloneHiddenTextInstance, Wl = t.isSuspenseInstancePending, lc = t.isSuspenseInstanceFallback, Of = t.getSuspenseInstanceFallbackErrorDetails, ig = t.registerSuspenseInstanceRetry, ag = t.canHydrateFormStateMarker, Is = t.isFormStateMarkerMatching, ol = t.getNextHydratableSibling, gr = t.getFirstHydratableChild, kl = t.getFirstHydratableChildWithinContainer, bd = t.getFirstHydratableChildWithinSuspenseInstance, Ed = t.canHydrateInstance, sg = t.canHydrateTextInstance, rg = t.canHydrateSuspenseInstance, jl = t.hydrateInstance, Lf = t.hydrateTextInstance, lg = t.hydrateSuspenseInstance, og = t.getNextHydratableInstanceAfterSuspenseInstance, ug = t.commitHydratedContainer, zf = t.commitHydratedSuspenseInstance, cg = t.clearSuspenseBoundary, Td = t.clearSuspenseBoundaryFromContainer, Ad = t.shouldDeleteUnhydratedTailInstances; t.diffHydratedPropsForDevWarnings, t.diffHydratedTextForDevWarnings, t.describeHydratableInstanceForDevWarnings; var fg = t.validateHydratableInstance, my = t.validateHydratableTextInstance, Na = t.supportsResources, xi = t.isHostHoistableType, Si = t.getHoistableRoot, Rd = t.getResource, wd = t.acquireResource, Cd = t.releaseResource, hg = t.hydrateHoistable, Dd = t.mountHoistable, Wo = t.unmountHoistable, Ud = t.createHoistableInstance, dg = t.prepareToCommitHoistables, pg = t.mayResourceSuspendCommit, Nd = t.preloadResource, Od = t.suspendResource, Ti = t.supportsSingletons, Bf = t.resolveSingletonInstance, mg = t.clearSingleton, Ld = t.acquireSingletonInstance, zd = t.releaseSingletonInstance, Pf = t.isHostSingletonType, If = [], ul = -1, Zl = {}, ti = Math.clz32 ? Math.clz32 : N, Bd = Math.log, gy = Math.LN2, oc = 128, ko = 4194304, Hs = Ua.unstable_scheduleCallback, _s = Ua.unstable_cancelCallback, cl = Ua.unstable_shouldYield, vr = Ua.unstable_requestPaint, Oa = Ua.unstable_now, Hf = Ua.unstable_ImmediatePriority, uc = Ua.unstable_UserBlockingPriority, jo = Ua.unstable_NormalPriority, Ql = Ua.unstable_IdlePriority, Xi = Ua.log, Ff = Ua.unstable_setDisableYieldValue, Zo = null, hi = null, ia = typeof Object.is == "function" ? Object.is : nt, Vf = new WeakMap, La = [], za = 0, fl = null, Qo = 0, va = [], qi = 0, xs = null, Fs = 1, Vs = "", ei = R(null), Za = R(null), yr = R(null), cc = R(null), ni = null, Tn = null, fn = !1, Qa = null, Ss = !1, fc = Error(a(519)), ya = [], _r = 0, Ms = 0, In = null, hl = null, Gf = !1, ii = !1, Xf = !1, Ko = 0, Jo = null, qf = 0, Hn = 0, Ai = null, Yi = !1, Yf = !1, gg = Object.prototype.hasOwnProperty, hc = Error(a(460)), dc = Error(a(474)), aa = { then: function () { } }, Wi = null, Kl = null, ki = 0, dl = Ii(!0), Gs = Ii(!1), bs = R(null), Es = R(0), _a = R(null), Ka = null, zn = R(0), xr = 0, Pe = null, mn = null, Xn = null, Sr = !1, Jl = !1, pl = !1, ml = 0, $o = 0, Mr = null, vg = 0, Pd = function () { return { lastEffect: null, events: null, stores: null, memoCache: null } }, ai = { readContext: Ui, use: ht, useCallback: Ye, useContext: Ye, useEffect: Ye, useImperativeHandle: Ye, useLayoutEffect: Ye, useInsertionEffect: Ye, useMemo: Ye, useReducer: Ye, useRef: Ye, useState: Ye, useDebugValue: Ye, useDeferredValue: Ye, useTransition: Ye, useSyncExternalStore: Ye, useId: Ye }; ai.useCacheRefresh = Ye, ai.useMemoCache = Ye, ai.useHostTransitionStatus = Ye, ai.useFormState = Ye, ai.useActionState = Ye, ai.useOptimistic = Ye; var br = { readContext: Ui, use: ht, useCallback: function (l, u) { return P().memoizedState = [l, u === void 0 ? null : u], l }, useContext: Ui, useEffect: Vh, useImperativeHandle: function (l, u, p) { p = p != null ? p.concat([l]) : null, af(4194308, 4, Nu.bind(null, u, l), p) }, useLayoutEffect: function (l, u) { return af(4194308, 4, l, u) }, useInsertionEffect: function (l, u) { af(4, 2, l, u) }, useMemo: function (l, u) { var p = P(); u = u === void 0 ? null : u; var y = l(); if (pl) { ft(!0); try { l() } finally { ft(!1) } } return p.memoizedState = [y, u], y }, useReducer: function (l, u, p) { var y = P(); if (p !== void 0) { var E = p(u); if (pl) { ft(!0); try { p(u) } finally { ft(!1) } } } else E = u; return y.memoizedState = y.baseState = E, l = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: l, lastRenderedState: E }, y.queue = l, l = l.dispatch = of.bind(null, Pe, l), [y.memoizedState, l] }, useRef: function (l) { var u = P(); return l = { current: l }, u.memoizedState = l }, useState: function (l) { l = un(l); var u = l.queue, p = qh.bind(null, Pe, u); return u.dispatch = p, [l.memoizedState, p] }, useDebugValue: Ou, useDeferredValue: function (l, u) { var p = P(); return rf(p, l, u) }, useTransition: function () { var l = un(!1); return l = Gh.bind(null, Pe, l.queue, !0, !1), P().memoizedState = l, [!1, l] }, useSyncExternalStore: function (l, u, p) { var y = Pe, E = P(); if (fn) { if (p === void 0) throw Error(a(407)); p = p() } else { if (p = u(), Rn === null) throw Error(a(349)); (en & 60) !== 0 || De(y, u, p) } E.memoizedState = p; var w = { value: p, getSnapshot: u }; return E.queue = w, Vh(nn.bind(null, y, w, l), [l]), y.flags |= 2048, ms(9, Se.bind(null, y, w, p, u), { destroy: void 0 }, null), p }, useId: function () { var l = P(), u = Rn.identifierPrefix; if (fn) { var p = Vs, y = Fs; p = (y & ~(1 << 32 - ti(y) - 1)).toString(32) + p, u = ":" + u + "R" + p, p = ml++, 0 < p && (u += "H" + p.toString(32)), u += ":" } else p = vg++, u = ":" + u + "r" + p.toString(32) + ":"; return l.memoizedState = u }, useCacheRefresh: function () { return P().memoizedState = Xh.bind(null, Pe) } }; br.useMemoCache = rt, br.useHostTransitionStatus = Lu, br.useFormState = Mn, br.useActionState = Mn, br.useOptimistic = function (l) { var u = P(); u.memoizedState = u.baseState = l; var p = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: null, lastRenderedState: null }; return u.queue = p, u = Ao.bind(null, Pe, !0, p), p.dispatch = u, [l, u] }; var sa = { readContext: Ui, use: ht, useCallback: Nl, useContext: Ui, useEffect: Uu, useImperativeHandle: sf, useInsertionEffect: rm, useLayoutEffect: lm, useMemo: Ol, useReducer: Kt, useRef: $i, useState: function () { return Kt(It) }, useDebugValue: Ou, useDeferredValue: function (l, u) { var p = J(); return lf(p, mn.memoizedState, l, u) }, useTransition: function () { var l = Kt(It)[0], u = J().memoizedState; return [typeof l == "boolean" ? l : gt(l), u] }, useSyncExternalStore: Ce, useId: To }; sa.useCacheRefresh = Ks, sa.useMemoCache = rt, sa.useHostTransitionStatus = Lu, sa.useFormState = Fi, sa.useActionState = Fi, sa.useOptimistic = function (l, u) { var p = J(); return ze(p, mn, l, u) }; var gl = { readContext: Ui, use: ht, useCallback: Nl, useContext: Ui, useEffect: Uu, useImperativeHandle: sf, useInsertionEffect: rm, useLayoutEffect: lm, useMemo: Ol, useReducer: ae, useRef: $i, useState: function () { return ae(It) }, useDebugValue: Ou, useDeferredValue: function (l, u) { var p = J(); return mn === null ? rf(p, l, u) : lf(p, mn.memoizedState, l, u) }, useTransition: function () { var l = ae(It)[0], u = J().memoizedState; return [typeof l == "boolean" ? l : gt(l), u] }, useSyncExternalStore: Ce, useId: To }; gl.useCacheRefresh = Ks, gl.useMemoCache = rt, gl.useHostTransitionStatus = Lu, gl.useFormState = bi, gl.useActionState = bi, gl.useOptimistic = function (l, u) { var p = J(); return mn !== null ? ze(p, mn, l, u) : (p.baseState = l, [l, p.queue.dispatch]) }; var tu = { isMounted: function (l) { return (l = l._reactInternals) ? x(l) === l : !1 }, enqueueSetState: function (l, u, p) { l = l._reactInternals; var y = Vi(), E = ge(y); E.payload = u, p != null && (E.callback = p), u = he(l, E, y), u !== null && (Ln(u, l, y), ue(u, l, y)) }, enqueueReplaceState: function (l, u, p) { l = l._reactInternals; var y = Vi(), E = ge(y); E.tag = 1, E.payload = u, p != null && (E.callback = p), u = he(l, E, y), u !== null && (Ln(u, l, y), ue(u, l, y)) }, enqueueForceUpdate: function (l, u) { l = l._reactInternals; var p = Vi(), y = ge(p); y.tag = 2, u != null && (y.callback = u), u = he(l, y, p), u !== null && (Ln(u, l, p), ue(u, l, p)) } }, vl = typeof reportError == "function" ? reportError : function (l) { if (typeof window == "object" && typeof window.ErrorEvent == "function") { var u = new window.ErrorEvent("error", { bubbles: !0, cancelable: !0, message: typeof l == "object" && l !== null && typeof l.message == "string" ? String(l.message) : String(l), error: l }); if (!window.dispatchEvent(u)) return } else if (typeof process == "object" && typeof process.emit == "function") { process.emit("uncaughtException", l); return } console.error(l) }, Id = Error(a(461)), di = !1, pc = { dehydrated: null, treeContext: null, retryLane: 0 }, Ja = R(null), yl = null, $a = null, mc = typeof AbortController < "u" ? AbortController : function () { var l = [], u = this.signal = { aborted: !1, addEventListener: function (p, y) { l.push(y) } }; this.abort = function () { u.aborted = !0, l.forEach(function (p) { return p() }) } }, Wn = Ua.unstable_scheduleCallback, vy = Ua.unstable_NormalPriority, Qn = { $$typeof: il, Consumer: null, Provider: null, _currentValue: null, _currentValue2: null, _threadCount: 0 }, Hd = Ue.S; Ue.S = function (l, u) { typeof u == "object" && u !== null && typeof u.then == "function" && te(l, u), Hd !== null && Hd(l, u) }; var $l = R(null), Er = !1, Ie = !1, An = !1, Ke = typeof WeakSet == "function" ? WeakSet : Set, Ae = null, Dn = !1, gn = null, si = !1, ji = null, _l = 8192, Tr = { getCacheForType: function (l) { var u = Ui(Qn), p = u.data.get(l); return p === void 0 && (p = l(), u.data.set(l, p)), p } }, Fn = 0, Ts = 1, Xs = 2, eu = 3, ra = 4; if (typeof Symbol == "function" && Symbol.for) { var qs = Symbol.for; Fn = qs("selector.component"), Ts = qs("selector.has_pseudo_class"), Xs = qs("selector.role"), eu = qs("selector.test_id"), ra = qs("selector.text") } var gc = typeof WeakMap == "function" ? WeakMap : Map, tn = 0, Rn = null, ke = null, en = 0, En = 0, pi = null, ts = !1, es = !1, to = !1, As = 0, qn = 0, ns = 0, Ar = 0, la = 0, Ba = 0, mi = 0, nu = null, is = null, Wf = !1, Fd = 0, Pa = 1 / 0, eo = null, Ys = null, Rr = !1, xl = null, iu = 0, kf = 0, vc = null, no = 0, Vd = null; return $e.attemptContinuousHydration = function (l) { if (l.tag === 13) { var u = ee(l, 67108864); u !== null && Ln(u, l, 67108864), Fo(l, 67108864) } }, $e.attemptHydrationAtCurrentPriority = function (l) { if (l.tag === 13) { var u = Vi(), p = ee(l, u); p !== null && Ln(p, l, u), Fo(l, u) } }, $e.attemptSynchronousHydration = function (l) { switch (l.tag) { case 3: if (l = l.stateNode, l.current.memoizedState.isDehydrated) { var u = U(l.pendingLanes); if (u !== 0) { for (l.pendingLanes |= 2, l.entangledLanes |= 2; u;) { var p = 1 << 31 - ti(u); l.entanglements[1] |= p, u &= ~p } Qt(l), (tn & 6) === 0 && (Pa = Oa() + 500, X(0)) } } break; case 13: u = ee(l, 2), u !== null && Ln(u, l, 2), od(), Fo(l, 2) } }, $e.batchedUpdates = function (l, u) { return l(u) }, $e.createComponentSelector = function (l) { return { $$typeof: Fn, value: l } }, $e.createContainer = function (l, u, p, y, E, w, F, Q, ut, Rt) { return cr(l, u, !1, null, p, y, w, F, Q, ut, Rt, null) }, $e.createHasPseudoClassSelector = function (l) { return { $$typeof: Ts, value: l } }, $e.createHydrationContainer = function (l, u, p, y, E, w, F, Q, ut, Rt, Wt, re, qt) { return l = cr(p, y, !0, l, E, w, Q, ut, Rt, Wt, re, qt), l.context = cd(null), p = l.current, y = Vi(), E = ge(y), E.callback = u ?? null, he(p, E, y), l.current.lanes = y, j(l, y), Qt(l), l }, $e.createPortal = function (l, u, p) { var y = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null; return { $$typeof: Bs, key: y == null ? null : "" + y, children: l, containerInfo: u, implementation: p } }, $e.createRoleSelector = function (l) { return { $$typeof: Xs, value: l } }, $e.createTestNameSelector = function (l) { return { $$typeof: eu, value: l } }, $e.createTextSelector = function (l) { return { $$typeof: ra, value: l } }, $e.defaultOnCaughtError = function (l) { console.error(l) }, $e.defaultOnRecoverableError = function (l) { vl(l) }, $e.defaultOnUncaughtError = function (l) { vl(l) }, $e.deferredUpdates = function (l) { var u = Ue.T, p = ll(); try { return na(32), Ue.T = null, l() } finally { na(p), Ue.T = u } }, $e.discreteUpdates = function (l, u, p, y, E) { var w = Ue.T, F = ll(); try { return na(2), Ue.T = null, l(u, p, y, E) } finally { na(F), Ue.T = w, tn === 0 && (Pa = Oa() + 500) } }, $e.findAllNodes = jr, $e.findBoundingRects = function (l, u) { if (!Yo) throw Error(a(363)); u = jr(l, u), l = []; for (var p = 0; p < u.length; p++)l.push(dy(u[p])); for (u = l.length - 1; 0 < u; u--) { p = l[u]; for (var y = p.x, E = y + p.width, w = p.y, F = w + p.height, Q = u - 1; 0 <= Q; Q--)if (u !== Q) { var ut = l[Q], Rt = ut.x, Wt = Rt + ut.width, re = ut.y, qt = re + ut.height; if (y >= Rt && w >= re && E <= Wt && F <= qt) { l.splice(u, 1); break } else if (y !== Rt || p.width !== ut.width || qt < w || re > F) { if (!(w !== re || p.height !== ut.height || Wt < y || Rt > E)) { Rt > y && (ut.width += Rt - y, ut.x = y), Wt < E && (ut.width = E - Rt), l.splice(u, 1); break } } else { re > w && (ut.height += re - w, ut.y = w), qt < F && (ut.height = F - re), l.splice(u, 1); break } } } return l }, $e.findHostInstance = fr, $e.findHostInstanceWithNoPortals = function (l) { return l = M(l), l = l !== null ? C(l) : null, l === null ? null : ql(l.stateNode) }, $e.findHostInstanceWithWarning = function (l) { return fr(l) }, $e.flushPassiveEffects = Kr, $e.flushSyncFromReconciler = function (l) { var u = tn; tn |= 1; var p = Ue.T, y = ll(); try { if (na(2), Ue.T = null, l) return l() } finally { na(y), Ue.T = p, tn = u, (tn & 6) === 0 && X(0) } }, $e.flushSyncWork = od, $e.focusWithin = function (l, u) { if (!Yo) throw Error(a(363)); for (l = kr(l), u = Hl(l, u), u = Array.from(u), l = 0; l < u.length;) { var p = u[l++], y = p.tag; if (!Ps(p)) { if ((y === 5 || y === 26 || y === 27) && Cf(p.stateNode)) return !0; for (p = p.child; p !== null;)u.push(p), p = p.sibling } } return !1 }, $e.getFindAllNodesFailureDescription = function (l, u) {
				if (!Yo) throw Error(a(363)); var p = 0, y = []; l = [kr(l), 0]; for (var E = 0; E < l.length;) { var w = l[E++], F = w.tag, Q = l[E++], ut = u[Q]; if ((F !== 5 && F !== 26 && F !== 27 || !Ps(w)) && (Sf(w, ut) && (y.push(pa(ut)), Q++, Q > p && (p = Q)), Q < u.length)) for (w = w.child; w !== null;)l.push(w, Q), w = w.sibling } if (p < u.length) {
					for (l = []; p < u.length; p++)l.push(pa(u[p])); return `findAllNodes was able to match part of the selector:
  `+ (y.join(" > ") + `

No matching component was found for:
  `) + l.join(" > ")
				} return null
			}, $e.getPublicRootInstance = function (l) { if (l = l.current, !l.child) return null; switch (l.child.tag) { case 27: case 5: return ql(l.child.stateNode); default: return l.child.stateNode } }, $e.injectIntoDevTools = function () { var l = { bundleType: 0, version: Xo, rendererPackageName: cy, currentDispatcherRef: Ue, findFiberByHostInstance: wf, reconcilerVersion: "19.0.0" }; if (Zn !== null && (l.rendererConfig = Zn), typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u") l = !1; else { var u = __REACT_DEVTOOLS_GLOBAL_HOOK__; if (u.isDisabled || !u.supportsFiber) l = !0; else { try { Zo = u.inject(l), hi = u } catch { } l = !!u.checkDCE } } return l }, $e.isAlreadyRendering = function () { return !1 }, $e.observeVisibleRects = function (l, u, p, y) { if (!Yo) throw Error(a(363)); l = jr(l, u); var E = Df(l, p, y).disconnect; return { disconnect: function () { E() } } }, $e.shouldError = function () { return null }, $e.shouldSuspend = function () { return !1 }, $e.startHostTransition = function (l, u, p, y) { if (l.tag !== 5) throw Error(a(476)); var E = Eo(l).queue; Gh(l, E, u, Yl, p === null ? n : function () { var w = Eo(l).next.queue; return Fr(l, w, {}, Vi()), p(y) }) }, $e.updateContainer = function (l, u, p, y) { var E = u.current, w = Vi(); return zs(E, w, l, u, p, y), w }, $e.updateContainerSync = function (l, u, p, y) { return u.tag === 0 && Kr(), zs(u.current, 2, l, u, p, y), 2 }, $e
		}, r.exports.default = r.exports, Object.defineProperty(r.exports, "__esModule", { value: !0 })
	}(z_)), z_.exports
} var HM; function RO() { return HM || (HM = 1, L_.exports = AO()), L_.exports } var wO = RO(); const CO = gx(wO); var FM = aS(); function sS(r, t, e) { if (!r) return; if (e(r) === !0) return r; let n = t ? r.return : r.child; for (; n;) { const a = sS(n, t, e); if (a) return a; n = t ? null : n.sibling } } function dT(r) { try { return Object.defineProperties(r, { _currentRenderer: { get() { return null }, set() { } }, _currentRenderer2: { get() { return null }, set() { } } }) } catch { return r } } const rS = dT(Zt.createContext(null)); class pT extends Zt.Component { render() { return Zt.createElement(rS.Provider, { value: this._reactInternals }, this.props.children) } } function mT() { const r = Zt.useContext(rS); if (r === null) throw new Error("its-fine: useFiber must be called within a <FiberProvider />!"); const t = Zt.useId(); return Zt.useMemo(() => { for (const e of [r, r == null ? void 0 : r.alternate]) { if (!e) continue; const n = sS(e, !1, a => { let o = a.memoizedState; for (; o;) { if (o.memoizedState === t) return !0; o = o.next } }); if (n) return n } }, [r, t]) } const DO = Symbol.for("react.context"), UO = r => r !== null && typeof r == "object" && "$$typeof" in r && r.$$typeof === DO; function NO() { const r = mT(), [t] = Zt.useState(() => new Map); t.clear(); let e = r; for (; e;) { const n = e.type; UO(n) && n !== rS && !t.has(n) && t.set(n, Zt.use(dT(n))), e = e.return } return t } function OO() { const r = NO(); return Zt.useMemo(() => Array.from(r.keys()).reduce((t, e) => n => Zt.createElement(t, null, Zt.createElement(e.Provider, { ...n, value: r.get(e) })), t => Zt.createElement(pT, { ...t })), [r]) } function gT(r) { let t = r.root; for (; t.getState().previousRoot;)t = t.getState().previousRoot; return t } const vT = r => r && r.isOrthographicCamera, LO = r => r && r.hasOwnProperty("current"), zO = r => r != null && (typeof r == "string" || typeof r == "number" || r.isColor), sm = ((r, t) => typeof window < "u" && (((r = window.document) == null ? void 0 : r.createElement) || ((t = window.navigator) == null ? void 0 : t.product) === "ReactNative"))() ? Zt.useLayoutEffect : Zt.useEffect; function yT(r) { const t = Zt.useRef(r); return sm(() => void (t.current = r), [r]), t } function BO() { const r = mT(), t = OO(); return Zt.useMemo(() => ({ children: e }) => { const a = !!sS(r, !0, o => o.type === Zt.StrictMode) ? Zt.StrictMode : Zt.Fragment; return St.jsx(a, { children: St.jsx(t, { children: e }) }) }, [r, t]) } function PO({ set: r }) { return sm(() => (r(new Promise(() => null)), () => r(!1)), [r]), null } const IO = (r => (r = class extends Zt.Component { constructor(...e) { super(...e), this.state = { error: !1 } } componentDidCatch(e) { this.props.set(e) } render() { return this.state.error ? null : this.props.children } }, r.getDerivedStateFromError = () => ({ error: !0 }), r))(); function _T(r) { var t; const e = typeof window < "u" ? (t = window.devicePixelRatio) != null ? t : 2 : 1; return Array.isArray(r) ? Math.min(Math.max(r[0], e), r[1]) : r } function gh(r) { var t; return (t = r.__r3f) == null ? void 0 : t.root.getState() } const ri = { obj: r => r === Object(r) && !ri.arr(r) && typeof r != "function", fun: r => typeof r == "function", str: r => typeof r == "string", num: r => typeof r == "number", boo: r => typeof r == "boolean", und: r => r === void 0, nul: r => r === null, arr: r => Array.isArray(r), equ(r, t, { arrays: e = "shallow", objects: n = "reference", strict: a = !0 } = {}) { if (typeof r != typeof t || !!r != !!t) return !1; if (ri.str(r) || ri.num(r) || ri.boo(r)) return r === t; const o = ri.obj(r); if (o && n === "reference") return r === t; const f = ri.arr(r); if (f && e === "reference") return r === t; if ((f || o) && r === t) return !0; let h; for (h in r) if (!(h in t)) return !1; if (o && e === "shallow" && n === "shallow") { for (h in a ? t : r) if (!ri.equ(r[h], t[h], { strict: a, objects: "reference" })) return !1 } else for (h in a ? t : r) if (r[h] !== t[h]) return !1; if (ri.und(h)) { if (f && r.length === 0 && t.length === 0 || o && Object.keys(r).length === 0 && Object.keys(t).length === 0) return !0; if (r !== t) return !1 } return !0 } }; function HO(r) { r.type !== "Scene" && (r.dispose == null || r.dispose()); for (const t in r) { const e = r[t]; (e == null ? void 0 : e.type) !== "Scene" && (e == null || e.dispose == null || e.dispose()) } } const xT = ["children", "key", "ref"]; function FO(r) { const t = {}; for (const e in r) xT.includes(e) || (t[e] = r[e]); return t } function xv(r, t, e, n) { const a = r; let o = a == null ? void 0 : a.__r3f; return o || (o = { root: t, type: e, parent: null, children: [], props: FO(n), object: a, eventCount: 0, handlers: {}, isHidden: !1 }, a && (a.__r3f = o)), o } function Yp(r, t) { let e = r[t]; if (!t.includes("-")) return { root: r, key: t, target: e }; e = r; for (const a of t.split("-")) { var n; t = a, r = e, e = (n = e) == null ? void 0 : n[t] } return { root: r, key: t, target: e } } const VM = /-\d+$/; function Sv(r, t) { if (ri.str(t.props.attach)) { if (VM.test(t.props.attach)) { const a = t.props.attach.replace(VM, ""), { root: o, key: f } = Yp(r.object, a); Array.isArray(o[f]) || (o[f] = []) } const { root: e, key: n } = Yp(r.object, t.props.attach); t.previousAttach = e[n], e[n] = t.object } else ri.fun(t.props.attach) && (t.previousAttach = t.props.attach(r.object, t.object)) } function Mv(r, t) { if (ri.str(t.props.attach)) { const { root: e, key: n } = Yp(r.object, t.props.attach), a = t.previousAttach; a === void 0 ? delete e[n] : e[n] = a } else t.previousAttach == null || t.previousAttach(r.object, t.object); delete t.previousAttach } const cx = [...xT, "args", "dispose", "attach", "object", "onUpdate", "dispose"], GM = new Map; function VO(r) { let t = GM.get(r.constructor); try { t || (t = new r.constructor, GM.set(r.constructor, t)) } catch { } return t } function GO(r, t) { const e = {}; for (const n in t) if (!cx.includes(n) && !ri.equ(t[n], r.props[n])) { e[n] = t[n]; for (const a in t) a.startsWith(`${n}-`) && (e[a] = t[a]) } for (const n in r.props) { if (cx.includes(n) || t.hasOwnProperty(n)) continue; const { root: a, key: o } = Yp(r.object, n); if (a.constructor && a.constructor.length === 0) { const f = VO(a); ri.und(f) || (e[o] = f[o]) } else e[o] = 0 } return e } const XO = ["map", "emissiveMap", "sheenColorMap", "specularColorMap", "envMap"], qO = /^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/; function _u(r, t) { var e; const n = r.__r3f, a = n && gT(n).getState(), o = n == null ? void 0 : n.eventCount; for (const h in t) { let m = t[h]; if (cx.includes(h)) continue; if (n && qO.test(h)) { typeof m == "function" ? n.handlers[h] = m : delete n.handlers[h], n.eventCount = Object.keys(n.handlers).length; continue } if (m === void 0) continue; let { root: g, key: _, target: x } = Yp(r, h); if (x instanceof wh && m instanceof wh) x.mask = m.mask; else if (x instanceof ce && zO(m)) x.set(m); else if (x !== null && typeof x == "object" && typeof x.set == "function" && typeof x.copy == "function" && m != null && m.constructor && x.constructor === m.constructor) x.copy(m); else if (x !== null && typeof x == "object" && typeof x.set == "function" && Array.isArray(m)) typeof x.fromArray == "function" ? x.fromArray(m) : x.set(...m); else if (x !== null && typeof x == "object" && typeof x.set == "function" && typeof m == "number") typeof x.setScalar == "function" ? x.setScalar(m) : x.set(m); else { var f; g[_] = m, a && !a.linear && XO.includes(_) && (f = g[_]) != null && f.isTexture && g[_].format === Ta && g[_].type === zr && (g[_].colorSpace = Ea) } } if (n != null && n.parent && a != null && a.internal && (e = n.object) != null && e.isObject3D && o !== n.eventCount) { const h = n.object, m = a.internal.interaction.indexOf(h); m > -1 && a.internal.interaction.splice(m, 1), n.eventCount && h.raycast !== null && a.internal.interaction.push(h) } return n && n.props.attach === void 0 && (n.object.isBufferGeometry ? n.props.attach = "geometry" : n.object.isMaterial && (n.props.attach = "material")), n && Fh(n), r } function Fh(r) { var t; if (!r.parent) return; r.props.onUpdate == null || r.props.onUpdate(r.object); const e = (t = r.root) == null || t.getState == null ? void 0 : t.getState(); e && e.internal.frames === 0 && e.invalidate() } function YO(r, t) { r.manual || (vT(r) ? (r.left = t.width / -2, r.right = t.width / 2, r.top = t.height / 2, r.bottom = t.height / -2) : r.aspect = t.width / t.height, r.updateProjectionMatrix()) } const ls = r => r == null ? void 0 : r.isObject3D; function A0(r) { return (r.eventObject || r.object).uuid + "/" + r.index + r.instanceId } function ST(r, t, e, n) { const a = e.get(t); a && (e.delete(t), e.size === 0 && (r.delete(n), a.target.releasePointerCapture(n))) } function WO(r, t) { const { internal: e } = r.getState(); e.interaction = e.interaction.filter(n => n !== t), e.initialHits = e.initialHits.filter(n => n !== t), e.hovered.forEach((n, a) => { (n.eventObject === t || n.object === t) && e.hovered.delete(a) }), e.capturedMap.forEach((n, a) => { ST(e.capturedMap, t, n, a) }) } function kO(r) { function t(m) { const { internal: g } = r.getState(), _ = m.offsetX - g.initialClick[0], x = m.offsetY - g.initialClick[1]; return Math.round(Math.sqrt(_ * _ + x * x)) } function e(m) { return m.filter(g => ["Move", "Over", "Enter", "Out", "Leave"].some(_ => { var x; return (x = g.__r3f) == null ? void 0 : x.handlers["onPointer" + _] })) } function n(m, g) { const _ = r.getState(), x = new Set, S = [], M = g ? g(_.internal.interaction) : _.internal.interaction; for (let T = 0; T < M.length; T++) { const D = gh(M[T]); D && (D.raycaster.camera = void 0) } _.previousRoot || _.events.compute == null || _.events.compute(m, _); function A(T) { const D = gh(T); if (!D || !D.events.enabled || D.raycaster.camera === null) return []; if (D.raycaster.camera === void 0) { var N; D.events.compute == null || D.events.compute(m, D, (N = D.previousRoot) == null ? void 0 : N.getState()), D.raycaster.camera === void 0 && (D.raycaster.camera = null) } return D.raycaster.camera ? D.raycaster.intersectObject(T, !0) : [] } let C = M.flatMap(A).sort((T, D) => { const N = gh(T.object), U = gh(D.object); return !N || !U ? T.distance - D.distance : U.events.priority - N.events.priority || T.distance - D.distance }).filter(T => { const D = A0(T); return x.has(D) ? !1 : (x.add(D), !0) }); _.events.filter && (C = _.events.filter(C, _)); for (const T of C) { let D = T.object; for (; D;) { var R; (R = D.__r3f) != null && R.eventCount && S.push({ ...T, eventObject: D }), D = D.parent } } if ("pointerId" in m && _.internal.capturedMap.has(m.pointerId)) for (let T of _.internal.capturedMap.get(m.pointerId).values()) x.has(A0(T.intersection)) || S.push(T.intersection); return S } function a(m, g, _, x) { if (m.length) { const S = { stopped: !1 }; for (const M of m) { let A = gh(M.object); if (A || M.object.traverseAncestors(C => { const R = gh(C); if (R) return A = R, !1 }), A) { const { raycaster: C, pointer: R, camera: T, internal: D } = A, N = new k(R.x, R.y, 0).unproject(T), U = z => { var L, j; return (L = (j = D.capturedMap.get(z)) == null ? void 0 : j.has(M.eventObject)) != null ? L : !1 }, V = z => { const L = { intersection: M, target: g.target }; D.capturedMap.has(z) ? D.capturedMap.get(z).set(M.eventObject, L) : D.capturedMap.set(z, new Map([[M.eventObject, L]])), g.target.setPointerCapture(z) }, I = z => { const L = D.capturedMap.get(z); L && ST(D.capturedMap, M.eventObject, L, z) }; let G = {}; for (let z in g) { let L = g[z]; typeof L != "function" && (G[z] = L) } let q = { ...M, ...G, pointer: R, intersections: m, stopped: S.stopped, delta: _, unprojectedPoint: N, ray: C.ray, camera: T, stopPropagation() { const z = "pointerId" in g && D.capturedMap.get(g.pointerId); if ((!z || z.has(M.eventObject)) && (q.stopped = S.stopped = !0, D.hovered.size && Array.from(D.hovered.values()).find(L => L.eventObject === M.eventObject))) { const L = m.slice(0, m.indexOf(M)); o([...L, M]) } }, target: { hasPointerCapture: U, setPointerCapture: V, releasePointerCapture: I }, currentTarget: { hasPointerCapture: U, setPointerCapture: V, releasePointerCapture: I }, nativeEvent: g }; if (x(q), S.stopped === !0) break } } } return m } function o(m) { const { internal: g } = r.getState(); for (const _ of g.hovered.values()) if (!m.length || !m.find(x => x.object === _.object && x.index === _.index && x.instanceId === _.instanceId)) { const S = _.eventObject.__r3f; if (g.hovered.delete(A0(_)), S != null && S.eventCount) { const M = S.handlers, A = { ..._, intersections: m }; M.onPointerOut == null || M.onPointerOut(A), M.onPointerLeave == null || M.onPointerLeave(A) } } } function f(m, g) { for (let _ = 0; _ < g.length; _++) { const x = g[_].__r3f; x == null || x.handlers.onPointerMissed == null || x.handlers.onPointerMissed(m) } } function h(m) { switch (m) { case "onPointerLeave": case "onPointerCancel": return () => o([]); case "onLostPointerCapture": return g => { const { internal: _ } = r.getState(); "pointerId" in g && _.capturedMap.has(g.pointerId) && requestAnimationFrame(() => { _.capturedMap.has(g.pointerId) && (_.capturedMap.delete(g.pointerId), o([])) }) } }return function (_) { const { onPointerMissed: x, internal: S } = r.getState(); S.lastEvent.current = _; const M = m === "onPointerMove", A = m === "onClick" || m === "onContextMenu" || m === "onDoubleClick", R = n(_, M ? e : void 0), T = A ? t(_) : 0; m === "onPointerDown" && (S.initialClick = [_.offsetX, _.offsetY], S.initialHits = R.map(N => N.eventObject)), A && !R.length && T <= 2 && (f(_, S.interaction), x && x(_)), M && o(R); function D(N) { const U = N.eventObject, V = U.__r3f; if (!(V != null && V.eventCount)) return; const I = V.handlers; if (M) { if (I.onPointerOver || I.onPointerEnter || I.onPointerOut || I.onPointerLeave) { const G = A0(N), q = S.hovered.get(G); q ? q.stopped && N.stopPropagation() : (S.hovered.set(G, N), I.onPointerOver == null || I.onPointerOver(N), I.onPointerEnter == null || I.onPointerEnter(N)) } I.onPointerMove == null || I.onPointerMove(N) } else { const G = I[m]; G ? (!A || S.initialHits.includes(U)) && (f(_, S.interaction.filter(q => !S.initialHits.includes(q))), G(N)) : A && S.initialHits.includes(U) && f(_, S.interaction.filter(q => !S.initialHits.includes(q))) } } a(R, _, T, D) } } return { handlePointer: h } } const XM = r => !!(r != null && r.render), MT = Zt.createContext(null), jO = (r, t) => { const e = EO((h, m) => { const g = new k, _ = new k, x = new k; function S(T = m().camera, D = _, N = m().size) { const { width: U, height: V, top: I, left: G } = N, q = U / V; D.isVector3 ? x.copy(D) : x.set(...D); const z = T.getWorldPosition(g).distanceTo(x); if (vT(T)) return { width: U / T.zoom, height: V / T.zoom, top: I, left: G, factor: 1, distance: z, aspect: q }; { const L = T.fov * Math.PI / 180, j = 2 * Math.tan(L / 2) * z, dt = j * (U / V); return { width: dt, height: j, top: I, left: G, factor: U / dt, distance: z, aspect: q } } } let M; const A = T => h(D => ({ performance: { ...D.performance, current: T } })), C = new zt; return { set: h, get: m, gl: null, camera: null, raycaster: null, events: { priority: 1, enabled: !0, connected: !1 }, scene: null, xr: null, invalidate: (T = 1) => r(m(), T), advance: (T, D) => t(T, D, m()), legacy: !1, linear: !1, flat: !1, controls: null, clock: new Jx, pointer: C, mouse: C, frameloop: "always", onPointerMissed: void 0, performance: { current: 1, min: .5, max: 1, debounce: 200, regress: () => { const T = m(); M && clearTimeout(M), T.performance.current !== T.performance.min && A(T.performance.min), M = setTimeout(() => A(m().performance.max), T.performance.debounce) } }, size: { width: 0, height: 0, top: 0, left: 0 }, viewport: { initialDpr: 0, dpr: 0, width: 0, height: 0, top: 0, left: 0, aspect: 0, distance: 0, factor: 0, getCurrentViewport: S }, setEvents: T => h(D => ({ ...D, events: { ...D.events, ...T } })), setSize: (T, D, N = 0, U = 0) => { const V = m().camera, I = { width: T, height: D, top: N, left: U }; h(G => ({ size: I, viewport: { ...G.viewport, ...S(V, _, I) } })) }, setDpr: T => h(D => { const N = _T(T); return { viewport: { ...D.viewport, dpr: N, initialDpr: D.viewport.initialDpr || N } } }), setFrameloop: (T = "always") => { const D = m().clock; D.stop(), D.elapsedTime = 0, T !== "never" && (D.start(), D.elapsedTime = 0), h(() => ({ frameloop: T })) }, previousRoot: void 0, internal: { interaction: [], hovered: new Map, subscribers: [], initialClick: [0, 0], initialHits: [], capturedMap: new Map, lastEvent: Zt.createRef(), active: !1, frames: 0, priority: 0, subscribe: (T, D, N) => { const U = m().internal; return U.priority = U.priority + (D > 0 ? 1 : 0), U.subscribers.push({ ref: T, priority: D, store: N }), U.subscribers = U.subscribers.sort((V, I) => V.priority - I.priority), () => { const V = m().internal; V != null && V.subscribers && (V.priority = V.priority - (D > 0 ? 1 : 0), V.subscribers = V.subscribers.filter(I => I.ref !== T)) } } } } }), n = e.getState(); let a = n.size, o = n.viewport.dpr, f = n.camera; return e.subscribe(() => { const { camera: h, size: m, viewport: g, gl: _, set: x } = e.getState(); if (m.width !== a.width || m.height !== a.height || g.dpr !== o) { a = m, o = g.dpr, YO(h, m), g.dpr > 0 && _.setPixelRatio(g.dpr); const S = typeof HTMLCanvasElement < "u" && _.domElement instanceof HTMLCanvasElement; _.setSize(m.width, m.height, S) } h !== f && (f = h, x(S => ({ viewport: { ...S.viewport, ...S.viewport.getCurrentViewport(h) } }))) }), e.subscribe(h => r(h)), e }; function ZO() { const r = Zt.useContext(MT); if (!r) throw new Error("R3F: Hooks can only be used within the Canvas component!"); return r } function lS(r, t = 0) { const e = ZO(), n = e.getState().internal.subscribe, a = yT(r); return sm(() => n(a, t, e), [t, n, e]), null } function QO(r) { const t = CO(r); return t.injectIntoDevTools({ bundleType: 0, rendererPackageName: "@react-three/fiber", version: Zt.version }), t } const bT = 0, Uh = {}, KO = /^three(?=[A-Z])/, ay = r => `${r[0].toUpperCase()}${r.slice(1)}`; let JO = 0; const $O = r => typeof r == "function"; function tL(r) { if ($O(r)) { const t = `${JO++}`; return Uh[t] = r, t } else Object.assign(Uh, r) } function ET(r, t) { const e = ay(r), n = Uh[e]; if (r !== "primitive" && !n) throw new Error(`R3F: ${e} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`); if (r === "primitive" && !t.object) throw new Error("R3F: Primitives without 'object' are invalid!"); if (t.args !== void 0 && !Array.isArray(t.args)) throw new Error("R3F: The args prop must be an array!") } function eL(r, t, e) { var n; return r = ay(r) in Uh ? r : r.replace(KO, ""), ET(r, t), r === "primitive" && (n = t.object) != null && n.__r3f && delete t.object.__r3f, xv(t.object, e, r, t) } function nL(r) { if (!r.isHidden) { var t; r.props.attach && (t = r.parent) != null && t.object ? Mv(r.parent, r) : ls(r.object) && (r.object.visible = !1), r.isHidden = !0, Fh(r) } } function TT(r) { if (r.isHidden) { var t; r.props.attach && (t = r.parent) != null && t.object ? Sv(r.parent, r) : ls(r.object) && r.props.visible !== !1 && (r.object.visible = !0), r.isHidden = !1, Fh(r) } } function oS(r, t, e) { const n = t.root.getState(); if (!(!r.parent && r.object !== n.scene)) { if (!t.object) { var a, o; const f = Uh[ay(t.type)]; t.object = (a = t.props.object) != null ? a : new f(...(o = t.props.args) != null ? o : []), t.object.__r3f = t } if (_u(t.object, t.props), t.props.attach) Sv(r, t); else if (ls(t.object) && ls(r.object)) { const f = r.object.children.indexOf(e == null ? void 0 : e.object); if (e && f !== -1) { const h = r.object.children.indexOf(t.object); if (h !== -1) { r.object.children.splice(h, 1); const m = h < f ? f - 1 : f; r.object.children.splice(m, 0, t.object) } else t.object.parent = r.object, r.object.children.splice(f, 0, t.object), t.object.dispatchEvent({ type: "added" }), r.object.dispatchEvent({ type: "childadded", child: t.object }) } else r.object.add(t.object) } for (const f of t.children) oS(t, f); Fh(t) } } function I_(r, t) { t && (t.parent = r, r.children.push(t), oS(r, t)) } function qM(r, t, e) { if (!t || !e) return; t.parent = r; const n = r.children.indexOf(e); n !== -1 ? r.children.splice(n, 0, t) : r.children.push(t), oS(r, t, e) } function AT(r) { if (typeof r.dispose == "function") { const t = () => { try { r.dispose() } catch { } }; typeof IS_REACT_ACT_ENVIRONMENT < "u" ? t() : FM.unstable_scheduleCallback(FM.unstable_IdlePriority, t) } } function fx(r, t, e) { if (!t) return; t.parent = null; const n = r.children.indexOf(t); n !== -1 && r.children.splice(n, 1), t.props.attach ? Mv(r, t) : ls(t.object) && ls(r.object) && (r.object.remove(t.object), WO(gT(t), t.object)); const a = t.props.dispose !== null && e !== !1; for (let o = t.children.length - 1; o >= 0; o--) { const f = t.children[o]; fx(t, f, a) } t.children.length = 0, delete t.object.__r3f, a && t.type !== "primitive" && t.object.type !== "Scene" && AT(t.object), e === void 0 && Fh(t) } function iL(r, t) { for (const e of [r, r.alternate]) if (e !== null) if (typeof e.ref == "function") { e.refCleanup == null || e.refCleanup(); const n = e.ref(t); typeof n == "function" && (e.refCleanup = n) } else e.ref && (e.ref.current = t) } const N0 = []; function aL() { for (const [e] of N0) { const n = e.parent; if (n) { e.props.attach ? Mv(n, e) : ls(e.object) && ls(n.object) && n.object.remove(e.object); for (const a of e.children) a.props.attach ? Mv(e, a) : ls(a.object) && ls(e.object) && e.object.remove(a.object) } e.isHidden && TT(e), e.object.__r3f && delete e.object.__r3f, e.type !== "primitive" && AT(e.object) } for (const [e, n, a] of N0) { e.props = n; const o = e.parent; if (o) { var r, t; const f = Uh[ay(e.type)]; e.object = (r = e.props.object) != null ? r : new f(...(t = e.props.args) != null ? t : []), e.object.__r3f = e, iL(a, e.object), _u(e.object, e.props), e.props.attach ? Sv(o, e) : ls(e.object) && ls(o.object) && o.object.add(e.object); for (const h of e.children) h.props.attach ? Sv(e, h) : ls(h.object) && ls(e.object) && e.object.add(h.object); Fh(e) } } N0.length = 0 } const H_ = () => { }, YM = {}; let R0 = bT; const sL = 0, rL = 4, hx = QO({ isPrimaryRenderer: !1, warnsIfNotActing: !1, supportsMutation: !0, supportsPersistence: !1, supportsHydration: !1, createInstance: eL, removeChild: fx, appendChild: I_, appendInitialChild: I_, insertBefore: qM, appendChildToContainer(r, t) { const e = r.getState().scene.__r3f; !t || !e || I_(e, t) }, removeChildFromContainer(r, t) { const e = r.getState().scene.__r3f; !t || !e || fx(e, t) }, insertInContainerBefore(r, t, e) { const n = r.getState().scene.__r3f; !t || !e || !n || qM(n, t, e) }, getRootHostContext: () => YM, getChildHostContext: () => YM, commitUpdate(r, t, e, n, a) { var o, f, h; ET(t, n); let m = !1; if ((r.type === "primitive" && e.object !== n.object || ((o = n.args) == null ? void 0 : o.length) !== ((f = e.args) == null ? void 0 : f.length) || (h = n.args) != null && h.some((_, x) => { var S; return _ !== ((S = e.args) == null ? void 0 : S[x]) })) && (m = !0), m) N0.push([r, { ...n }, a]); else { const _ = GO(r, n); Object.keys(_).length && (Object.assign(r.props, _), _u(r.object, _)) } (a.sibling === null || (a.flags & rL) === sL) && aL() }, finalizeInitialChildren: () => !1, commitMount() { }, getPublicInstance: r => r == null ? void 0 : r.object, prepareForCommit: () => null, preparePortalMount: r => xv(r.getState().scene, r, "", {}), resetAfterCommit: () => { }, shouldSetTextContent: () => !1, clearContainer: () => !1, hideInstance: nL, unhideInstance: TT, createTextInstance: H_, hideTextInstance: H_, unhideTextInstance: H_, scheduleTimeout: typeof setTimeout == "function" ? setTimeout : void 0, cancelTimeout: typeof clearTimeout == "function" ? clearTimeout : void 0, noTimeout: -1, getInstanceFromNode: () => null, beforeActiveInstanceBlur() { }, afterActiveInstanceBlur() { }, detachDeletedInstance() { }, prepareScopeUpdate() { }, getInstanceFromScope: () => null, shouldAttemptEagerTransition: () => !1, trackSchedulerEvent: () => { }, resolveEventType: () => null, resolveEventTimeStamp: () => -1.1, requestPostPaintCallback() { }, maySuspendCommit: () => !1, preloadInstance: () => !0, startSuspendingCommit() { }, suspendInstance() { }, waitForCommitToBeReady: () => null, NotPendingTransition: null, HostTransitionContext: Zt.createContext(null), setCurrentUpdatePriority(r) { R0 = r }, getCurrentUpdatePriority() { return R0 }, resolveUpdatePriority() { var r; if (R0 !== bT) return R0; switch (typeof window < "u" && ((r = window.event) == null ? void 0 : r.type)) { case "click": case "contextmenu": case "dblclick": case "pointercancel": case "pointerdown": case "pointerup": return U0.DiscreteEventPriority; case "pointermove": case "pointerout": case "pointerover": case "pointerenter": case "pointerleave": case "wheel": return U0.ContinuousEventPriority; default: return U0.DefaultEventPriority } }, resetFormInstance() { } }), Zc = new Map, vh = { objects: "shallow", strict: !1 }; function lL(r, t) { if (!t && typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement && r.parentElement) { const { width: e, height: n, top: a, left: o } = r.parentElement.getBoundingClientRect(); return { width: e, height: n, top: a, left: o } } else if (!t && typeof OffscreenCanvas < "u" && r instanceof OffscreenCanvas) return { width: r.width, height: r.height, top: 0, left: 0 }; return { width: 0, height: 0, top: 0, left: 0, ...t } } function oL(r) { const t = Zc.get(r), e = t == null ? void 0 : t.fiber, n = t == null ? void 0 : t.store; t && console.warn("R3F.createRoot should only be called once!"); const a = typeof reportError == "function" ? reportError : console.error, o = n || jO(mx, kM), f = e || hx.createContainer(o, U0.ConcurrentRoot, null, !1, null, "", a, a, a, null); t || Zc.set(r, { fiber: f, store: o }); let h, m, g = !1, _ = null; return { async configure(x = {}) { let S; _ = new Promise(it => S = it); let { gl: M, size: A, scene: C, events: R, onCreated: T, shadows: D = !1, linear: N = !1, flat: U = !1, legacy: V = !1, orthographic: I = !1, frameloop: G = "always", dpr: q = [1, 2], performance: z, raycaster: L, camera: j, onPointerMissed: dt } = x, tt = o.getState(), ct = tt.gl; if (!tt.gl) { const it = { canvas: r, powerPreference: "high-performance", antialias: !0, alpha: !0 }, Dt = typeof M == "function" ? await M(it) : M; XM(Dt) ? ct = Dt : ct = new hT({ ...it, ...M }), tt.set({ gl: ct }) } let xt = tt.raycaster; xt || tt.set({ raycaster: xt = new aT }); const { params: K, ...ft } = L || {}; if (ri.equ(ft, xt, vh) || _u(xt, { ...ft }), ri.equ(K, xt.params, vh) || _u(xt, { params: { ...xt.params, ...K } }), !tt.camera || tt.camera === m && !ri.equ(m, j, vh)) { m = j; const it = j == null ? void 0 : j.isCamera, Dt = it ? j : I ? new am(0, 0, 0, 0, .1, 1e3) : new Ki(75, 0, .1, 1e3); it || (Dt.position.z = 5, j && (_u(Dt, j), Dt.manual || ("aspect" in j || "left" in j || "right" in j || "bottom" in j || "top" in j) && (Dt.manual = !0, Dt.updateProjectionMatrix())), !tt.camera && !(j != null && j.rotation) && Dt.lookAt(0, 0, 0)), tt.set({ camera: Dt }), xt.camera = Dt } if (!tt.scene) { let it; C != null && C.isScene ? (it = C, xv(it, o, "", {})) : (it = new Ox, xv(it, o, "", {}), C && _u(it, C)), tt.set({ scene: it }) } R && !tt.events.handlers && tt.set({ events: R(o) }); const nt = lL(r, A); if (ri.equ(nt, tt.size, vh) || tt.setSize(nt.width, nt.height, nt.top, nt.left), q && tt.viewport.dpr !== _T(q) && tt.setDpr(q), tt.frameloop !== G && tt.setFrameloop(G), tt.onPointerMissed || tt.set({ onPointerMissed: dt }), z && !ri.equ(z, tt.performance, vh) && tt.set(it => ({ performance: { ...it.performance, ...z } })), !tt.xr) { var Et; const it = ($, Tt) => { const Lt = o.getState(); Lt.frameloop !== "never" && kM($, !0, Lt, Tt) }, Dt = () => { const $ = o.getState(); $.gl.xr.enabled = $.gl.xr.isPresenting, $.gl.xr.setAnimationLoop($.gl.xr.isPresenting ? it : null), $.gl.xr.isPresenting || mx($) }, Xt = { connect() { const $ = o.getState().gl; $.xr.addEventListener("sessionstart", Dt), $.xr.addEventListener("sessionend", Dt) }, disconnect() { const $ = o.getState().gl; $.xr.removeEventListener("sessionstart", Dt), $.xr.removeEventListener("sessionend", Dt) } }; typeof ((Et = ct.xr) == null ? void 0 : Et.addEventListener) == "function" && Xt.connect(), tt.set({ xr: Xt }) } if (ct.shadowMap) { const it = ct.shadowMap.enabled, Dt = ct.shadowMap.type; if (ct.shadowMap.enabled = !!D, ri.boo(D)) ct.shadowMap.type = mp; else if (ri.str(D)) { var Y; const Xt = { basic: mb, percentage: Ev, soft: mp, variance: Nr }; ct.shadowMap.type = (Y = Xt[D]) != null ? Y : mp } else ri.obj(D) && Object.assign(ct.shadowMap, D); (it !== ct.shadowMap.enabled || Dt !== ct.shadowMap.type) && (ct.shadowMap.needsUpdate = !0) } return dn.enabled = !V, g || (ct.outputColorSpace = N ? bu : Ea, ct.toneMapping = U ? El : vx), tt.legacy !== V && tt.set(() => ({ legacy: V })), tt.linear !== N && tt.set(() => ({ linear: N })), tt.flat !== U && tt.set(() => ({ flat: U })), M && !ri.fun(M) && !XM(M) && !ri.equ(M, ct, vh) && _u(ct, M), h = T, g = !0, S(), this }, render(x) { return !g && !_ && this.configure(), _.then(() => { hx.updateContainer(St.jsx(uL, { store: o, children: x, onCreated: h, rootElement: r }), f, null, () => { }) }), o }, unmount() { RT(r) } } } function uL({ store: r, children: t, onCreated: e, rootElement: n }) { return sm(() => { const a = r.getState(); a.set(o => ({ internal: { ...o.internal, active: !0 } })), e && e(a), r.getState().events.connected || a.events.connect == null || a.events.connect(n) }, []), St.jsx(MT.Provider, { value: r, children: t }) } function RT(r, t) { const e = Zc.get(r), n = e == null ? void 0 : e.fiber; if (n) { const a = e == null ? void 0 : e.store.getState(); a && (a.internal.active = !1), hx.updateContainer(null, n, null, () => { a && setTimeout(() => { try { var o, f, h, m; a.events.disconnect == null || a.events.disconnect(), (o = a.gl) == null || (f = o.renderLists) == null || f.dispose == null || f.dispose(), (h = a.gl) == null || h.forceContextLoss == null || h.forceContextLoss(), (m = a.gl) != null && m.xr && a.xr.disconnect(), HO(a.scene), Zc.delete(r) } catch { } }, 500) }) } } const cL = new Set, fL = new Set, hL = new Set; function F_(r, t) { if (r.size) for (const { callback: e } of r.values()) e(t) } function Tp(r, t) { switch (r) { case "before": return F_(cL, t); case "after": return F_(fL, t); case "tail": return F_(hL, t) } } let V_, G_; function dx(r, t, e) { let n = t.clock.getDelta(); t.frameloop === "never" && typeof r == "number" && (n = r - t.clock.elapsedTime, t.clock.oldTime = t.clock.elapsedTime, t.clock.elapsedTime = r), V_ = t.internal.subscribers; for (let a = 0; a < V_.length; a++)G_ = V_[a], G_.ref.current(G_.store.getState(), n, e); return !t.internal.priority && t.gl.render && t.gl.render(t.scene, t.camera), t.internal.frames = Math.max(0, t.internal.frames - 1), t.frameloop === "always" ? 1 : t.internal.frames } let bv = !1, px = !1, X_, WM, yh; function wT(r) { WM = requestAnimationFrame(wT), bv = !0, X_ = 0, Tp("before", r), px = !0; for (const e of Zc.values()) { var t; yh = e.store.getState(), yh.internal.active && (yh.frameloop === "always" || yh.internal.frames > 0) && !((t = yh.gl.xr) != null && t.isPresenting) && (X_ += dx(r, yh)) } if (px = !1, Tp("after", r), X_ === 0) return Tp("tail", r), bv = !1, cancelAnimationFrame(WM) } function mx(r, t = 1) { var e; if (!r) return Zc.forEach(n => mx(n.store.getState(), t)); (e = r.gl.xr) != null && e.isPresenting || !r.internal.active || r.frameloop === "never" || (t > 1 ? r.internal.frames = Math.min(60, r.internal.frames + t) : px ? r.internal.frames = 2 : r.internal.frames = 1, bv || (bv = !0, requestAnimationFrame(wT))) } function kM(r, t = !0, e, n) { if (t && Tp("before", r), e) dx(r, e, n); else for (const a of Zc.values()) dx(r, a.store.getState()); t && Tp("after", r) } const q_ = { onClick: ["click", !1], onContextMenu: ["contextmenu", !1], onDoubleClick: ["dblclick", !1], onWheel: ["wheel", !0], onPointerDown: ["pointerdown", !0], onPointerUp: ["pointerup", !0], onPointerLeave: ["pointerleave", !0], onPointerMove: ["pointermove", !0], onPointerCancel: ["pointercancel", !0], onLostPointerCapture: ["lostpointercapture", !0] }; function dL(r) { const { handlePointer: t } = kO(r); return { priority: 1, enabled: !0, compute(e, n, a) { n.pointer.set(e.offsetX / n.size.width * 2 - 1, -(e.offsetY / n.size.height) * 2 + 1), n.raycaster.setFromCamera(n.pointer, n.camera) }, connected: void 0, handlers: Object.keys(q_).reduce((e, n) => ({ ...e, [n]: t(n) }), {}), update: () => { var e; const { events: n, internal: a } = r.getState(); (e = a.lastEvent) != null && e.current && n.handlers && n.handlers.onPointerMove(a.lastEvent.current) }, connect: e => { const { set: n, events: a } = r.getState(); if (a.disconnect == null || a.disconnect(), n(o => ({ events: { ...o.events, connected: e } })), a.handlers) for (const o in a.handlers) { const f = a.handlers[o], [h, m] = q_[o]; e.addEventListener(h, f, { passive: m }) } }, disconnect: () => { const { set: e, events: n } = r.getState(); if (n.connected) { if (n.handlers) for (const a in n.handlers) { const o = n.handlers[a], [f] = q_[a]; n.connected.removeEventListener(f, o) } e(a => ({ events: { ...a.events, connected: void 0 } })) } } } } function jM(r, t) { let e; return (...n) => { window.clearTimeout(e), e = window.setTimeout(() => r(...n), t) } } function pL({ debounce: r, scroll: t, polyfill: e, offsetSize: n } = { debounce: 0, scroll: !1, offsetSize: !1 }) { const a = e || (typeof window > "u" ? class { } : window.ResizeObserver); if (!a) throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills"); const [o, f] = Zt.useState({ left: 0, top: 0, width: 0, height: 0, bottom: 0, right: 0, x: 0, y: 0 }), h = Zt.useRef({ element: null, scrollContainers: null, resizeObserver: null, lastBounds: o, orientationHandler: null }), m = r ? typeof r == "number" ? r : r.scroll : null, g = r ? typeof r == "number" ? r : r.resize : null, _ = Zt.useRef(!1); Zt.useEffect(() => (_.current = !0, () => void (_.current = !1))); const [x, S, M] = Zt.useMemo(() => { const T = () => { if (!h.current.element) return; const { left: D, top: N, width: U, height: V, bottom: I, right: G, x: q, y: z } = h.current.element.getBoundingClientRect(), L = { left: D, top: N, width: U, height: V, bottom: I, right: G, x: q, y: z }; h.current.element instanceof HTMLElement && n && (L.height = h.current.element.offsetHeight, L.width = h.current.element.offsetWidth), Object.freeze(L), _.current && !yL(h.current.lastBounds, L) && f(h.current.lastBounds = L) }; return [T, g ? jM(T, g) : T, m ? jM(T, m) : T] }, [f, n, m, g]); function A() { h.current.scrollContainers && (h.current.scrollContainers.forEach(T => T.removeEventListener("scroll", M, !0)), h.current.scrollContainers = null), h.current.resizeObserver && (h.current.resizeObserver.disconnect(), h.current.resizeObserver = null), h.current.orientationHandler && ("orientation" in screen && "removeEventListener" in screen.orientation ? screen.orientation.removeEventListener("change", h.current.orientationHandler) : "onorientationchange" in window && window.removeEventListener("orientationchange", h.current.orientationHandler)) } function C() { h.current.element && (h.current.resizeObserver = new a(M), h.current.resizeObserver.observe(h.current.element), t && h.current.scrollContainers && h.current.scrollContainers.forEach(T => T.addEventListener("scroll", M, { capture: !0, passive: !0 })), h.current.orientationHandler = () => { M() }, "orientation" in screen && "addEventListener" in screen.orientation ? screen.orientation.addEventListener("change", h.current.orientationHandler) : "onorientationchange" in window && window.addEventListener("orientationchange", h.current.orientationHandler)) } const R = T => { !T || T === h.current.element || (A(), h.current.element = T, h.current.scrollContainers = CT(T), C()) }; return gL(M, !!t), mL(S), Zt.useEffect(() => { A(), C() }, [t, M, S]), Zt.useEffect(() => A, []), [R, o, x] } function mL(r) { Zt.useEffect(() => { const t = r; return window.addEventListener("resize", t), () => void window.removeEventListener("resize", t) }, [r]) } function gL(r, t) { Zt.useEffect(() => { if (t) { const e = r; return window.addEventListener("scroll", e, { capture: !0, passive: !0 }), () => void window.removeEventListener("scroll", e, !0) } }, [r, t]) } function CT(r) { const t = []; if (!r || r === document.body) return t; const { overflow: e, overflowX: n, overflowY: a } = window.getComputedStyle(r); return [e, n, a].some(o => o === "auto" || o === "scroll") && t.push(r), [...t, ...CT(r.parentElement)] } const vL = ["x", "y", "top", "bottom", "left", "right", "width", "height"], yL = (r, t) => vL.every(e => r[e] === t[e]); function _L({ ref: r, children: t, fallback: e, resize: n, style: a, gl: o, events: f = dL, eventSource: h, eventPrefix: m, shadows: g, linear: _, flat: x, legacy: S, orthographic: M, frameloop: A, dpr: C, performance: R, raycaster: T, camera: D, scene: N, onPointerMissed: U, onCreated: V, ...I }) { Zt.useMemo(() => tL(fO), []); const G = BO(), [q, z] = pL({ scroll: !0, debounce: { scroll: 50, resize: 0 }, ...n }), L = Zt.useRef(null), j = Zt.useRef(null); Zt.useImperativeHandle(r, () => L.current); const dt = yT(U), [tt, ct] = Zt.useState(!1), [xt, K] = Zt.useState(!1); if (tt) throw tt; if (xt) throw xt; const ft = Zt.useRef(null); sm(() => { const Et = L.current; if (z.width > 0 && z.height > 0 && Et) { ft.current || (ft.current = oL(Et)); async function Y() { await ft.current.configure({ gl: o, scene: N, events: f, shadows: g, linear: _, flat: x, legacy: S, orthographic: M, frameloop: A, dpr: C, performance: R, raycaster: T, camera: D, size: z, onPointerMissed: (...it) => dt.current == null ? void 0 : dt.current(...it), onCreated: it => { it.events.connect == null || it.events.connect(h ? LO(h) ? h.current : h : j.current), m && it.setEvents({ compute: (Dt, Xt) => { const $ = Dt[m + "X"], Tt = Dt[m + "Y"]; Xt.pointer.set($ / Xt.size.width * 2 - 1, -(Tt / Xt.size.height) * 2 + 1), Xt.raycaster.setFromCamera(Xt.pointer, Xt.camera) } }), V == null || V(it) } }), ft.current.render(St.jsx(G, { children: St.jsx(IO, { set: K, children: St.jsx(Zt.Suspense, { fallback: St.jsx(PO, { set: ct }), children: t ?? null }) }) })) } Y() } }), Zt.useEffect(() => { const Et = L.current; if (Et) return () => RT(Et) }, []); const nt = h ? "none" : "auto"; return St.jsx("div", { ref: j, style: { position: "relative", width: "100%", height: "100%", overflow: "hidden", pointerEvents: nt, ...a }, ...I, children: St.jsx("div", { ref: q, style: { width: "100%", height: "100%" }, children: St.jsx("canvas", { ref: L, style: { display: "block" }, children: e }) }) }) } function xL(r) { return St.jsx(pT, { children: St.jsx(_L, { ...r }) }) } function Qc() { return Qc = Object.assign ? Object.assign.bind() : function (r) { for (var t = 1; t < arguments.length; t++) { var e = arguments[t]; for (var n in e) ({}).hasOwnProperty.call(e, n) && (r[n] = e[n]) } return r }, Qc.apply(null, arguments) } var Y_ = { exports: {} }, fp = {}, W_ = { exports: {} }, ba = {};/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ZM; function SL() { if (ZM) return ba; ZM = 1; var r = Nh(); function t(m) { var g = "https://react.dev/errors/" + m; if (1 < arguments.length) { g += "?args[]=" + encodeURIComponent(arguments[1]); for (var _ = 2; _ < arguments.length; _++)g += "&args[]=" + encodeURIComponent(arguments[_]) } return "Minified React error #" + m + "; visit " + g + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings." } function e() { } var n = { d: { f: e, r: function () { throw Error(t(522)) }, D: e, C: e, L: e, m: e, X: e, S: e, M: e }, p: 0, findDOMNode: null }, a = Symbol.for("react.portal"); function o(m, g, _) { var x = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null; return { $$typeof: a, key: x == null ? null : "" + x, children: m, containerInfo: g, implementation: _ } } var f = r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE; function h(m, g) { if (m === "font") return ""; if (typeof g == "string") return g === "use-credentials" ? g : "" } return ba.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = n, ba.createPortal = function (m, g) { var _ = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null; if (!g || g.nodeType !== 1 && g.nodeType !== 9 && g.nodeType !== 11) throw Error(t(299)); return o(m, g, null, _) }, ba.flushSync = function (m) { var g = f.T, _ = n.p; try { if (f.T = null, n.p = 2, m) return m() } finally { f.T = g, n.p = _, n.d.f() } }, ba.preconnect = function (m, g) { typeof m == "string" && (g ? (g = g.crossOrigin, g = typeof g == "string" ? g === "use-credentials" ? g : "" : void 0) : g = null, n.d.C(m, g)) }, ba.prefetchDNS = function (m) { typeof m == "string" && n.d.D(m) }, ba.preinit = function (m, g) { if (typeof m == "string" && g && typeof g.as == "string") { var _ = g.as, x = h(_, g.crossOrigin), S = typeof g.integrity == "string" ? g.integrity : void 0, M = typeof g.fetchPriority == "string" ? g.fetchPriority : void 0; _ === "style" ? n.d.S(m, typeof g.precedence == "string" ? g.precedence : void 0, { crossOrigin: x, integrity: S, fetchPriority: M }) : _ === "script" && n.d.X(m, { crossOrigin: x, integrity: S, fetchPriority: M, nonce: typeof g.nonce == "string" ? g.nonce : void 0 }) } }, ba.preinitModule = function (m, g) { if (typeof m == "string") if (typeof g == "object" && g !== null) { if (g.as == null || g.as === "script") { var _ = h(g.as, g.crossOrigin); n.d.M(m, { crossOrigin: _, integrity: typeof g.integrity == "string" ? g.integrity : void 0, nonce: typeof g.nonce == "string" ? g.nonce : void 0 }) } } else g == null && n.d.M(m) }, ba.preload = function (m, g) { if (typeof m == "string" && typeof g == "object" && g !== null && typeof g.as == "string") { var _ = g.as, x = h(_, g.crossOrigin); n.d.L(m, _, { crossOrigin: x, integrity: typeof g.integrity == "string" ? g.integrity : void 0, nonce: typeof g.nonce == "string" ? g.nonce : void 0, type: typeof g.type == "string" ? g.type : void 0, fetchPriority: typeof g.fetchPriority == "string" ? g.fetchPriority : void 0, referrerPolicy: typeof g.referrerPolicy == "string" ? g.referrerPolicy : void 0, imageSrcSet: typeof g.imageSrcSet == "string" ? g.imageSrcSet : void 0, imageSizes: typeof g.imageSizes == "string" ? g.imageSizes : void 0, media: typeof g.media == "string" ? g.media : void 0 }) } }, ba.preloadModule = function (m, g) { if (typeof m == "string") if (g) { var _ = h(g.as, g.crossOrigin); n.d.m(m, { as: typeof g.as == "string" && g.as !== "script" ? g.as : void 0, crossOrigin: _, integrity: typeof g.integrity == "string" ? g.integrity : void 0 }) } else n.d.m(m) }, ba.requestFormReset = function (m) { n.d.r(m) }, ba.unstable_batchedUpdates = function (m, g) { return m(g) }, ba.useFormState = function (m, g, _) { return f.H.useFormState(m, g, _) }, ba.useFormStatus = function () { return f.H.useHostTransitionStatus() }, ba.version = "19.0.0", ba } var QM; function ML() { if (QM) return W_.exports; QM = 1; function r() { if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function")) try { __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(r) } catch (t) { console.error(t) } } return r(), W_.exports = SL(), W_.exports }/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var KM; function bL() {
	if (KM) return fp; KM = 1; var r = aS(), t = Nh(), e = ML(); function n(i) { var s = "https://react.dev/errors/" + i; if (1 < arguments.length) { s += "?args[]=" + encodeURIComponent(arguments[1]); for (var c = 2; c < arguments.length; c++)s += "&args[]=" + encodeURIComponent(arguments[c]) } return "Minified React error #" + i + "; visit " + s + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings." } function a(i) { return !(!i || i.nodeType !== 1 && i.nodeType !== 9 && i.nodeType !== 11) } var o = Symbol.for("react.element"), f = Symbol.for("react.transitional.element"), h = Symbol.for("react.portal"), m = Symbol.for("react.fragment"), g = Symbol.for("react.strict_mode"), _ = Symbol.for("react.profiler"), x = Symbol.for("react.provider"), S = Symbol.for("react.consumer"), M = Symbol.for("react.context"), A = Symbol.for("react.forward_ref"), C = Symbol.for("react.suspense"), R = Symbol.for("react.suspense_list"), T = Symbol.for("react.memo"), D = Symbol.for("react.lazy"), N = Symbol.for("react.offscreen"), U = Symbol.for("react.memo_cache_sentinel"), V = Symbol.iterator; function I(i) { return i === null || typeof i != "object" ? null : (i = V && i[V] || i["@@iterator"], typeof i == "function" ? i : null) } var G = Symbol.for("react.client.reference"); function q(i) { if (i == null) return null; if (typeof i == "function") return i.$$typeof === G ? null : i.displayName || i.name || null; if (typeof i == "string") return i; switch (i) { case m: return "Fragment"; case h: return "Portal"; case _: return "Profiler"; case g: return "StrictMode"; case C: return "Suspense"; case R: return "SuspenseList" }if (typeof i == "object") switch (i.$$typeof) { case M: return (i.displayName || "Context") + ".Provider"; case S: return (i._context.displayName || "Context") + ".Consumer"; case A: var s = i.render; return i = i.displayName, i || (i = s.displayName || s.name || "", i = i !== "" ? "ForwardRef(" + i + ")" : "ForwardRef"), i; case T: return s = i.displayName || null, s !== null ? s : q(i.type) || "Memo"; case D: s = i._payload, i = i._init; try { return q(i(s)) } catch { } }return null } var z = t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, L = Object.assign, j, dt; function tt(i) {
		if (j === void 0) try { throw Error() } catch (c) {
			var s = c.stack.trim().match(/\n( *(at )?)/); j = s && s[1] || "", dt = -1 < c.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < c.stack.indexOf("@") ? "@unknown:0:0" : ""
		} return `
`+ j + i + dt
	} var ct = !1; function xt(i, s) {
		if (!i || ct) return ""; ct = !0; var c = Error.prepareStackTrace; Error.prepareStackTrace = void 0; try {
			var d = { DetermineComponentFrameRoot: function () { try { if (s) { var Ft = function () { throw Error() }; if (Object.defineProperty(Ft.prototype, "props", { set: function () { throw Error() } }), typeof Reflect == "object" && Reflect.construct) { try { Reflect.construct(Ft, []) } catch (At) { var yt = At } Reflect.construct(i, [], Ft) } else { try { Ft.call() } catch (At) { yt = At } i.call(Ft.prototype) } } else { try { throw Error() } catch (At) { yt = At } (Ft = i()) && typeof Ft.catch == "function" && Ft.catch(function () { }) } } catch (At) { if (At && yt && typeof At.stack == "string") return [At.stack, yt.stack] } return [null, null] } }; d.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot"; var v = Object.getOwnPropertyDescriptor(d.DetermineComponentFrameRoot, "name"); v && v.configurable && Object.defineProperty(d.DetermineComponentFrameRoot, "name", { value: "DetermineComponentFrameRoot" }); var b = d.DetermineComponentFrameRoot(), O = b[0], H = b[1]; if (O && H) {
				var Z = O.split(`
`), st = H.split(`
`); for (v = d = 0; d < Z.length && !Z[d].includes("DetermineComponentFrameRoot");)d++; for (; v < st.length && !st[v].includes("DetermineComponentFrameRoot");)v++; if (d === Z.length || v === st.length) for (d = Z.length - 1, v = st.length - 1; 1 <= d && 0 <= v && Z[d] !== st[v];)v--; for (; 1 <= d && 0 <= v; d--, v--)if (Z[d] !== st[v]) {
					if (d !== 1 || v !== 1) do if (d--, v--, 0 > v || Z[d] !== st[v]) {
						var wt = `
`+ Z[d].replace(" at new ", " at "); return i.displayName && wt.includes("<anonymous>") && (wt = wt.replace("<anonymous>", i.displayName)), wt
					} while (1 <= d && 0 <= v); break
				}
			}
		} finally { ct = !1, Error.prepareStackTrace = c } return (c = i ? i.displayName || i.name : "") ? tt(c) : ""
	} function K(i) { switch (i.tag) { case 26: case 27: case 5: return tt(i.type); case 16: return tt("Lazy"); case 13: return tt("Suspense"); case 19: return tt("SuspenseList"); case 0: case 15: return i = xt(i.type, !1), i; case 11: return i = xt(i.type.render, !1), i; case 1: return i = xt(i.type, !0), i; default: return "" } } function ft(i) {
		try { var s = ""; do s += K(i), i = i.return; while (i); return s } catch (c) {
			return `
Error generating stack: `+ c.message + `
`+ c.stack
		}
	} function nt(i) { var s = i, c = i; if (i.alternate) for (; s.return;)s = s.return; else { i = s; do s = i, (s.flags & 4098) !== 0 && (c = s.return), i = s.return; while (i) } return s.tag === 3 ? c : null } function Et(i) { if (i.tag === 13) { var s = i.memoizedState; if (s === null && (i = i.alternate, i !== null && (s = i.memoizedState)), s !== null) return s.dehydrated } return null } function Y(i) { if (nt(i) !== i) throw Error(n(188)) } function it(i) { var s = i.alternate; if (!s) { if (s = nt(i), s === null) throw Error(n(188)); return s !== i ? null : i } for (var c = i, d = s; ;) { var v = c.return; if (v === null) break; var b = v.alternate; if (b === null) { if (d = v.return, d !== null) { c = d; continue } break } if (v.child === b.child) { for (b = v.child; b;) { if (b === c) return Y(v), i; if (b === d) return Y(v), s; b = b.sibling } throw Error(n(188)) } if (c.return !== d.return) c = v, d = b; else { for (var O = !1, H = v.child; H;) { if (H === c) { O = !0, c = v, d = b; break } if (H === d) { O = !0, d = v, c = b; break } H = H.sibling } if (!O) { for (H = b.child; H;) { if (H === c) { O = !0, c = b, d = v; break } if (H === d) { O = !0, d = b, c = v; break } H = H.sibling } if (!O) throw Error(n(189)) } } if (c.alternate !== d) throw Error(n(190)) } if (c.tag !== 3) throw Error(n(188)); return c.stateNode.current === c ? i : s } function Dt(i) { var s = i.tag; if (s === 5 || s === 26 || s === 27 || s === 6) return i; for (i = i.child; i !== null;) { if (s = Dt(i), s !== null) return s; i = i.sibling } return null } var Xt = Array.isArray, $ = e.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, Tt = { pending: !1, data: null, method: null, action: null }, Lt = [], Vt = -1; function kt(i) { return { current: i } } function Me(i) { 0 > Vt || (i.current = Lt[Vt], Lt[Vt] = null, Vt--) } function Jt(i, s) { Vt++, Lt[Vt] = i.current, i.current = s } var Le = kt(null), Bt = kt(null), Ut = kt(null), W = kt(null); function de(i, s) { switch (Jt(Ut, s), Jt(Bt, i), Jt(Le, null), i = s.nodeType, i) { case 9: case 11: s = (s = s.documentElement) && (s = s.namespaceURI) ? yS(s) : 0; break; default: if (i = i === 8 ? s.parentNode : s, s = i.tagName, i = i.namespaceURI) i = yS(i), s = _S(i, s); else switch (s) { case "svg": s = 1; break; case "math": s = 2; break; default: s = 0 } }Me(Le), Jt(Le, s) } function Ht() { Me(Le), Me(Bt), Me(Ut) } function ee(i) { i.memoizedState !== null && Jt(W, i); var s = Le.current, c = _S(s, i.type); s !== c && (Jt(Bt, i), Jt(Le, c)) } function jt(i) { Bt.current === i && (Me(Le), Me(Bt)), W.current === i && (Me(W), kd._currentValue = Tt) } var be = Object.prototype.hasOwnProperty, Qt = r.unstable_scheduleCallback, X = r.unstable_cancelCallback, B = r.unstable_shouldYield, mt = r.unstable_requestPaint, bt = r.unstable_now, Pt = r.unstable_getCurrentPriorityLevel, Ct = r.unstable_ImmediatePriority, pe = r.unstable_UserBlockingPriority, te = r.unstable_NormalPriority, oe = r.unstable_LowPriority, qe = r.unstable_IdlePriority, Yt = r.log, fe = r.unstable_setDisableYieldValue, ge = null, he = null; function ue(i) { if (he && typeof he.onCommitFiberRoot == "function") try { he.onCommitFiberRoot(ge, i, void 0, (i.current.flags & 128) === 128) } catch { } } function Be(i) { if (typeof Yt == "function" && fe(i), he && typeof he.setStrictMode == "function") try { he.setStrictMode(ge, i) } catch { } } var ye = Math.clz32 ? Math.clz32 : ie, pn = Math.log, at = Math.LN2; function ie(i) { return i >>>= 0, i === 0 ? 32 : 31 - (pn(i) / at | 0) | 0 } var Mt = 128, Nt = 4194304; function $t(i) { var s = i & 42; if (s !== 0) return s; switch (i & -i) { case 1: return 1; case 2: return 2; case 4: return 4; case 8: return 8; case 16: return 16; case 32: return 32; case 64: return 64; case 128: case 256: case 512: case 1024: case 2048: case 4096: case 8192: case 16384: case 32768: case 65536: case 131072: case 262144: case 524288: case 1048576: case 2097152: return i & 4194176; case 4194304: case 8388608: case 16777216: case 33554432: return i & 62914560; case 67108864: return 67108864; case 134217728: return 134217728; case 268435456: return 268435456; case 536870912: return 536870912; case 1073741824: return 0; default: return i } } function ne(i, s) { var c = i.pendingLanes; if (c === 0) return 0; var d = 0, v = i.suspendedLanes, b = i.pingedLanes, O = i.warmLanes; i = i.finishedLanes !== 0; var H = c & 134217727; return H !== 0 ? (c = H & ~v, c !== 0 ? d = $t(c) : (b &= H, b !== 0 ? d = $t(b) : i || (O = H & ~O, O !== 0 && (d = $t(O))))) : (H = c & ~v, H !== 0 ? d = $t(H) : b !== 0 ? d = $t(b) : i || (O = c & ~O, O !== 0 && (d = $t(O)))), d === 0 ? 0 : s !== 0 && s !== d && (s & v) === 0 && (v = d & -d, O = s & -s, v >= O || v === 32 && (O & 4194176) !== 0) ? s : d } function we(i, s) { return (i.pendingLanes & ~(i.suspendedLanes & ~i.pingedLanes) & s) === 0 } function Cn(i, s) { switch (i) { case 1: case 2: case 4: case 8: return s + 250; case 16: case 32: case 64: case 128: case 256: case 512: case 1024: case 2048: case 4096: case 8192: case 16384: case 32768: case 65536: case 131072: case 262144: case 524288: case 1048576: case 2097152: return s + 5e3; case 4194304: case 8388608: case 16777216: case 33554432: return -1; case 67108864: case 134217728: case 268435456: case 536870912: case 1073741824: return -1; default: return -1 } } function Yn() { var i = Mt; return Mt <<= 1, (Mt & 4194176) === 0 && (Mt = 128), i } function on() { var i = Nt; return Nt <<= 1, (Nt & 62914560) === 0 && (Nt = 4194304), i } function Pi(i) { for (var s = [], c = 0; 31 > c; c++)s.push(i); return s } function Ii(i, s) { i.pendingLanes |= s, s !== 268435456 && (i.suspendedLanes = 0, i.pingedLanes = 0, i.warmLanes = 0) } function Cu(i, s, c, d, v, b) { var O = i.pendingLanes; i.pendingLanes = c, i.suspendedLanes = 0, i.pingedLanes = 0, i.warmLanes = 0, i.expiredLanes &= c, i.entangledLanes &= c, i.errorRecoveryDisabledLanes &= c, i.shellSuspendCounter = 0; var H = i.entanglements, Z = i.expirationTimes, st = i.hiddenUpdates; for (c = O & ~c; 0 < c;) { var wt = 31 - ye(c), Ft = 1 << wt; H[wt] = 0, Z[wt] = -1; var yt = st[wt]; if (yt !== null) for (st[wt] = null, wt = 0; wt < yt.length; wt++) { var At = yt[wt]; At !== null && (At.lane &= -536870913) } c &= ~Ft } d !== 0 && Dl(i, d, 0), b !== 0 && v === 0 && i.tag !== 0 && (i.suspendedLanes |= b & ~(O & ~s)) } function Dl(i, s, c) { i.pendingLanes |= s, i.suspendedLanes &= ~s; var d = 31 - ye(s); i.entangledLanes |= s, i.entanglements[d] = i.entanglements[d] | 1073741824 | c & 4194218 } function qa(i, s) { var c = i.entangledLanes |= s; for (i = i.entanglements; c;) { var d = 31 - ye(c), v = 1 << d; v & s | i[d] & s && (i[d] |= s), c &= ~v } } function wa(i) { return i &= -i, 2 < i ? 8 < i ? (i & 134217727) !== 0 ? 32 : 268435456 : 8 : 2 } function bo() { var i = $.p; return i !== 0 ? i : (i = window.event, i === void 0 ? 32 : PS(i.type)) } function hs(i, s) { var c = $.p; try { return $.p = i, s() } finally { $.p = c } } var Kn = Math.random().toString(36).slice(2), kn = "__reactFiber$" + Kn, Ye = "__reactProps$" + Kn, ds = "__reactContainer$" + Kn, Hr = "__reactEvents$" + Kn, tf = "__reactListeners$" + Kn, ef = "__reactHandles$" + Kn, nf = "__reactResources$" + Kn, Qs = "__reactMarker$" + Kn; function Ul(i) { delete i[kn], delete i[Ye], delete i[Hr], delete i[tf], delete i[ef] } function ps(i) { var s = i[kn]; if (s) return s; for (var c = i.parentNode; c;) { if (s = c[ds] || c[kn]) { if (c = s.alternate, s.child !== null || c !== null && c.child !== null) for (i = MS(i); i !== null;) { if (c = i[kn]) return c; i = MS(i) } return s } i = c, c = i.parentNode } return null } function P(i) { if (i = i[kn] || i[ds]) { var s = i.tag; if (s === 5 || s === 6 || s === 13 || s === 26 || s === 27 || s === 3) return i } return null } function J(i) { var s = i.tag; if (s === 5 || s === 26 || s === 27 || s === 6) return i.stateNode; throw Error(n(33)) } function gt(i) { var s = i[nf]; return s || (s = i[nf] = { hoistableStyles: new Map, hoistableScripts: new Map }), s } function ht(i) { i[Qs] = !0 } var rt = new Set, It = {}; function Kt(i, s) { se(i, s), se(i + "Capture", s) } function se(i, s) { for (It[i] = s, i = 0; i < s.length; i++)rt.add(s[i]) } var ae = !(typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u"), Ce = RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), De = {}, Se = {}; function nn(i) { return be.call(Se, i) ? !0 : be.call(De, i) ? !1 : Ce.test(i) ? Se[i] = !0 : (De[i] = !0, !1) } function an(i, s, c) { if (nn(s)) if (c === null) i.removeAttribute(s); else { switch (typeof c) { case "undefined": case "function": case "symbol": i.removeAttribute(s); return; case "boolean": var d = s.toLowerCase().slice(0, 5); if (d !== "data-" && d !== "aria-") { i.removeAttribute(s); return } }i.setAttribute(s, "" + c) } } function On(i, s, c) { if (c === null) i.removeAttribute(s); else { switch (typeof c) { case "undefined": case "function": case "symbol": case "boolean": i.removeAttribute(s); return }i.setAttribute(s, "" + c) } } function un(i, s, c, d) { if (d === null) i.removeAttribute(c); else { switch (typeof d) { case "undefined": case "function": case "symbol": case "boolean": i.removeAttribute(c); return }i.setAttributeNS(s, c, "" + d) } } function ze(i) { switch (typeof i) { case "bigint": case "boolean": case "number": case "string": case "undefined": return i; case "object": return i; default: return "" } } function Ee(i) { var s = i.type; return (i = i.nodeName) && i.toLowerCase() === "input" && (s === "checkbox" || s === "radio") } function oi(i) { var s = Ee(i) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(i.constructor.prototype, s), d = "" + i[s]; if (!i.hasOwnProperty(s) && typeof c < "u" && typeof c.get == "function" && typeof c.set == "function") { var v = c.get, b = c.set; return Object.defineProperty(i, s, { configurable: !0, get: function () { return v.call(this) }, set: function (O) { d = "" + O, b.call(this, O) } }), Object.defineProperty(i, s, { enumerable: c.enumerable }), { getValue: function () { return d }, setValue: function (O) { d = "" + O }, stopTracking: function () { i._valueTracker = null, delete i[s] } } } } function sn(i) { i._valueTracker || (i._valueTracker = oi(i)) } function Ji(i) { if (!i) return !1; var s = i._valueTracker; if (!s) return !0; var c = s.getValue(), d = ""; return i && (d = Ee(i) ? i.checked ? "true" : "false" : i.value), i = d, i !== c ? (s.setValue(i), !0) : !1 } function Ca(i) { if (i = i || (typeof document < "u" ? document : void 0), typeof i > "u") return null; try { return i.activeElement || i.body } catch { return i.body } } var Hi = /[\n"\\]/g; function _i(i) { return i.replace(Hi, function (s) { return "\\" + s.charCodeAt(0).toString(16) + " " }) } function Mn(i, s, c, d, v, b, O, H) { i.name = "", O != null && typeof O != "function" && typeof O != "symbol" && typeof O != "boolean" ? i.type = O : i.removeAttribute("type"), s != null ? O === "number" ? (s === 0 && i.value === "" || i.value != s) && (i.value = "" + ze(s)) : i.value !== "" + ze(s) && (i.value = "" + ze(s)) : O !== "submit" && O !== "reset" || i.removeAttribute("value"), s != null ? Ci(i, O, ze(s)) : c != null ? Ci(i, O, ze(c)) : d != null && i.removeAttribute("value"), v == null && b != null && (i.defaultChecked = !!b), v != null && (i.checked = v && typeof v != "function" && typeof v != "symbol"), H != null && typeof H != "function" && typeof H != "symbol" && typeof H != "boolean" ? i.name = "" + ze(H) : i.removeAttribute("name") } function Fi(i, s, c, d, v, b, O, H) { if (b != null && typeof b != "function" && typeof b != "symbol" && typeof b != "boolean" && (i.type = b), s != null || c != null) { if (!(b !== "submit" && b !== "reset" || s != null)) return; c = c != null ? "" + ze(c) : "", s = s != null ? "" + ze(s) : c, H || s === i.value || (i.value = s), i.defaultValue = s } d = d ?? v, d = typeof d != "function" && typeof d != "symbol" && !!d, i.checked = H ? i.checked : !!d, i.defaultChecked = !!d, O != null && typeof O != "function" && typeof O != "symbol" && typeof O != "boolean" && (i.name = O) } function Ci(i, s, c) { s === "number" && Ca(i.ownerDocument) === i || i.defaultValue === "" + c || (i.defaultValue = "" + c) } function jn(i, s, c, d) { if (i = i.options, s) { s = {}; for (var v = 0; v < c.length; v++)s["$" + c[v]] = !0; for (c = 0; c < i.length; c++)v = s.hasOwnProperty("$" + i[c].value), i[c].selected !== v && (i[c].selected = v), v && d && (i[c].defaultSelected = !0) } else { for (c = "" + ze(c), s = null, v = 0; v < i.length; v++) { if (i[v].value === c) { i[v].selected = !0, d && (i[v].defaultSelected = !0); return } s !== null || i[v].disabled || (s = i[v]) } s !== null && (s.selected = !0) } } function bi(i, s, c) { if (s != null && (s = "" + ze(s), s !== i.value && (i.value = s), c == null)) { i.defaultValue !== s && (i.defaultValue = s); return } i.defaultValue = c != null ? "" + ze(c) : "" } function ms(i, s, c, d) { if (s == null) { if (d != null) { if (c != null) throw Error(n(92)); if (Xt(d)) { if (1 < d.length) throw Error(n(93)); d = d[0] } c = d } c == null && (c = ""), s = c } c = ze(s), i.defaultValue = c, d = i.textContent, d === c && d !== "" && d !== null && (i.value = d) } function $i(i, s) { if (s) { var c = i.firstChild; if (c && c === i.lastChild && c.nodeType === 3) { c.nodeValue = s; return } } i.textContent = s } var af = new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" ")); function Du(i, s, c) { var d = s.indexOf("--") === 0; c == null || typeof c == "boolean" || c === "" ? d ? i.setProperty(s, "") : s === "float" ? i.cssFloat = "" : i[s] = "" : d ? i.setProperty(s, c) : typeof c != "number" || c === 0 || af.has(s) ? s === "float" ? i.cssFloat = c : i[s] = ("" + c).trim() : i[s] = c + "px" } function Vh(i, s, c) { if (s != null && typeof s != "object") throw Error(n(62)); if (i = i.style, c != null) { for (var d in c) !c.hasOwnProperty(d) || s != null && s.hasOwnProperty(d) || (d.indexOf("--") === 0 ? i.setProperty(d, "") : d === "float" ? i.cssFloat = "" : i[d] = ""); for (var v in s) d = s[v], s.hasOwnProperty(v) && c[v] !== d && Du(i, v, d) } else for (var b in s) s.hasOwnProperty(b) && Du(i, b, s[b]) } function Uu(i) { if (i.indexOf("-") === -1) return !1; switch (i) { case "annotation-xml": case "color-profile": case "font-face": case "font-face-src": case "font-face-uri": case "font-face-format": case "font-face-name": case "missing-glyph": return !1; default: return !0 } } var rm = new Map([["acceptCharset", "accept-charset"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"], ["crossOrigin", "crossorigin"], ["accentHeight", "accent-height"], ["alignmentBaseline", "alignment-baseline"], ["arabicForm", "arabic-form"], ["baselineShift", "baseline-shift"], ["capHeight", "cap-height"], ["clipPath", "clip-path"], ["clipRule", "clip-rule"], ["colorInterpolation", "color-interpolation"], ["colorInterpolationFilters", "color-interpolation-filters"], ["colorProfile", "color-profile"], ["colorRendering", "color-rendering"], ["dominantBaseline", "dominant-baseline"], ["enableBackground", "enable-background"], ["fillOpacity", "fill-opacity"], ["fillRule", "fill-rule"], ["floodColor", "flood-color"], ["floodOpacity", "flood-opacity"], ["fontFamily", "font-family"], ["fontSize", "font-size"], ["fontSizeAdjust", "font-size-adjust"], ["fontStretch", "font-stretch"], ["fontStyle", "font-style"], ["fontVariant", "font-variant"], ["fontWeight", "font-weight"], ["glyphName", "glyph-name"], ["glyphOrientationHorizontal", "glyph-orientation-horizontal"], ["glyphOrientationVertical", "glyph-orientation-vertical"], ["horizAdvX", "horiz-adv-x"], ["horizOriginX", "horiz-origin-x"], ["imageRendering", "image-rendering"], ["letterSpacing", "letter-spacing"], ["lightingColor", "lighting-color"], ["markerEnd", "marker-end"], ["markerMid", "marker-mid"], ["markerStart", "marker-start"], ["overlinePosition", "overline-position"], ["overlineThickness", "overline-thickness"], ["paintOrder", "paint-order"], ["panose-1", "panose-1"], ["pointerEvents", "pointer-events"], ["renderingIntent", "rendering-intent"], ["shapeRendering", "shape-rendering"], ["stopColor", "stop-color"], ["stopOpacity", "stop-opacity"], ["strikethroughPosition", "strikethrough-position"], ["strikethroughThickness", "strikethrough-thickness"], ["strokeDasharray", "stroke-dasharray"], ["strokeDashoffset", "stroke-dashoffset"], ["strokeLinecap", "stroke-linecap"], ["strokeLinejoin", "stroke-linejoin"], ["strokeMiterlimit", "stroke-miterlimit"], ["strokeOpacity", "stroke-opacity"], ["strokeWidth", "stroke-width"], ["textAnchor", "text-anchor"], ["textDecoration", "text-decoration"], ["textRendering", "text-rendering"], ["transformOrigin", "transform-origin"], ["underlinePosition", "underline-position"], ["underlineThickness", "underline-thickness"], ["unicodeBidi", "unicode-bidi"], ["unicodeRange", "unicode-range"], ["unitsPerEm", "units-per-em"], ["vAlphabetic", "v-alphabetic"], ["vHanging", "v-hanging"], ["vIdeographic", "v-ideographic"], ["vMathematical", "v-mathematical"], ["vectorEffect", "vector-effect"], ["vertAdvY", "vert-adv-y"], ["vertOriginX", "vert-origin-x"], ["vertOriginY", "vert-origin-y"], ["wordSpacing", "word-spacing"], ["writingMode", "writing-mode"], ["xmlnsXlink", "xmlns:xlink"], ["xHeight", "x-height"]]), lm = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i; function Nu(i) { return lm.test("" + i) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : i } var sf = null; function Ou(i) { return i = i.target || i.srcElement || window, i.correspondingUseElement && (i = i.correspondingUseElement), i.nodeType === 3 ? i.parentNode : i } var Nl = null, Ol = null; function rf(i) { var s = P(i); if (s && (i = s.stateNode)) { var c = i[Ye] || null; t: switch (i = s.stateNode, s.type) { case "input": if (Mn(i, c.value, c.defaultValue, c.defaultValue, c.checked, c.defaultChecked, c.type, c.name), s = c.name, c.type === "radio" && s != null) { for (c = i; c.parentNode;)c = c.parentNode; for (c = c.querySelectorAll('input[name="' + _i("" + s) + '"][type="radio"]'), s = 0; s < c.length; s++) { var d = c[s]; if (d !== i && d.form === i.form) { var v = d[Ye] || null; if (!v) throw Error(n(90)); Mn(d, v.value, v.defaultValue, v.defaultValue, v.checked, v.defaultChecked, v.type, v.name) } } for (s = 0; s < c.length; s++)d = c[s], d.form === i.form && Ji(d) } break t; case "textarea": bi(i, c.value, c.defaultValue); break t; case "select": s = c.value, s != null && jn(i, !!c.multiple, s, !1) } } } var lf = !1; function Gh(i, s, c) { if (lf) return i(s, c); lf = !0; try { var d = i(s); return d } finally { if (lf = !1, (Nl !== null || Ol !== null) && (eo(), Nl && (s = Nl, i = Ol, Ol = Nl = null, rf(s), i))) for (s = 0; s < i.length; s++)rf(i[s]) } } function Eo(i, s) { var c = i.stateNode; if (c === null) return null; var d = c[Ye] || null; if (d === null) return null; c = d[s]; t: switch (s) { case "onClick": case "onClickCapture": case "onDoubleClick": case "onDoubleClickCapture": case "onMouseDown": case "onMouseDownCapture": case "onMouseMove": case "onMouseMoveCapture": case "onMouseUp": case "onMouseUpCapture": case "onMouseEnter": (d = !d.disabled) || (i = i.type, d = !(i === "button" || i === "input" || i === "select" || i === "textarea")), i = !d; break t; default: i = !1 }if (i) return null; if (c && typeof c != "function") throw Error(n(231, s, typeof c)); return c } var Lu = !1; if (ae) try { var To = {}; Object.defineProperty(To, "passive", { get: function () { Lu = !0 } }), window.addEventListener("test", To, To), window.removeEventListener("test", To, To) } catch { Lu = !1 } var Ks = null, Xh = null, of = null; function qh() { if (of) return of; var i, s = Xh, c = s.length, d, v = "value" in Ks ? Ks.value : Ks.textContent, b = v.length; for (i = 0; i < c && s[i] === v[i]; i++); var O = c - i; for (d = 1; d <= O && s[c - d] === v[b - d]; d++); return of = v.slice(i, 1 < d ? 1 - d : void 0) } function Fr(i) { var s = i.keyCode; return "charCode" in i ? (i = i.charCode, i === 0 && s === 13 && (i = 13)) : i = s, i === 10 && (i = 13), 32 <= i || i === 13 ? i : 0 } function Ao() { return !0 } function zu() { return !1 } function ta(i) { function s(c, d, v, b, O) { this._reactName = c, this._targetInst = v, this.type = d, this.nativeEvent = b, this.target = O, this.currentTarget = null; for (var H in i) i.hasOwnProperty(H) && (c = i[H], this[H] = c ? c(b) : b[H]); return this.isDefaultPrevented = (b.defaultPrevented != null ? b.defaultPrevented : b.returnValue === !1) ? Ao : zu, this.isPropagationStopped = zu, this } return L(s.prototype, { preventDefault: function () { this.defaultPrevented = !0; var c = this.nativeEvent; c && (c.preventDefault ? c.preventDefault() : typeof c.returnValue != "unknown" && (c.returnValue = !1), this.isDefaultPrevented = Ao) }, stopPropagation: function () { var c = this.nativeEvent; c && (c.stopPropagation ? c.stopPropagation() : typeof c.cancelBubble != "unknown" && (c.cancelBubble = !0), this.isPropagationStopped = Ao) }, persist: function () { }, isPersistent: Ao }), s } var Vr = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function (i) { return i.timeStamp || Date.now() }, defaultPrevented: 0, isTrusted: 0 }, Ro = ta(Vr), wo = L({}, Vr, { view: 0, detail: 0 }), om = ta(wo), Js, Co, Do, Uo = L({}, wo, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: Pu, button: 0, buttons: 0, relatedTarget: function (i) { return i.relatedTarget === void 0 ? i.fromElement === i.srcElement ? i.toElement : i.fromElement : i.relatedTarget }, movementX: function (i) { return "movementX" in i ? i.movementX : (i !== Do && (Do && i.type === "mousemove" ? (Js = i.screenX - Do.screenX, Co = i.screenY - Do.screenY) : Co = Js = 0, Do = i), Js) }, movementY: function (i) { return "movementY" in i ? i.movementY : Co } }), Yh = ta(Uo), um = L({}, Uo, { dataTransfer: 0 }), sy = ta(um), Di = L({}, wo, { relatedTarget: 0 }), uf = ta(Di), cm = L({}, Vr, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), fm = ta(cm), hm = L({}, Vr, { clipboardData: function (i) { return "clipboardData" in i ? i.clipboardData : window.clipboardData } }), dm = ta(hm), Bu = L({}, Vr, { data: 0 }), cf = ta(Bu), pm = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" }, mm = { 8: "Backspace", 9: "Tab", 12: "Clear", 13: "Enter", 16: "Shift", 17: "Control", 18: "Alt", 19: "Pause", 20: "CapsLock", 27: "Escape", 32: " ", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete", 112: "F1", 113: "F2", 114: "F3", 115: "F4", 116: "F5", 117: "F6", 118: "F7", 119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "NumLock", 145: "ScrollLock", 224: "Meta" }, gm = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" }; function Wh(i) { var s = this.nativeEvent; return s.getModifierState ? s.getModifierState(i) : (i = gm[i]) ? !!s[i] : !1 } function Pu() { return Wh } var vm = L({}, wo, { key: function (i) { if (i.key) { var s = pm[i.key] || i.key; if (s !== "Unidentified") return s } return i.type === "keypress" ? (i = Fr(i), i === 13 ? "Enter" : String.fromCharCode(i)) : i.type === "keydown" || i.type === "keyup" ? mm[i.keyCode] || "Unidentified" : "" }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: Pu, charCode: function (i) { return i.type === "keypress" ? Fr(i) : 0 }, keyCode: function (i) { return i.type === "keydown" || i.type === "keyup" ? i.keyCode : 0 }, which: function (i) { return i.type === "keypress" ? Fr(i) : i.type === "keydown" || i.type === "keyup" ? i.keyCode : 0 } }), kh = ta(vm), jh = L({}, Uo, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), ff = ta(jh), ym = L({}, wo, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: Pu }), Zh = ta(ym), _m = L({}, Vr, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), $s = ta(_m), Qh = L({}, Uo, { deltaX: function (i) { return "deltaX" in i ? i.deltaX : "wheelDeltaX" in i ? -i.wheelDeltaX : 0 }, deltaY: function (i) { return "deltaY" in i ? i.deltaY : "wheelDeltaY" in i ? -i.wheelDeltaY : "wheelDelta" in i ? -i.wheelDelta : 0 }, deltaZ: 0, deltaMode: 0 }), ry = ta(Qh), xm = L({}, Vr, { newState: 0, oldState: 0 }), Gr = ta(xm), tr = [9, 13, 27, 32], Iu = ae && "CompositionEvent" in window, Ll = null; ae && "documentMode" in document && (Ll = document.documentMode); var Hu = ae && "TextEvent" in window && !Ll, Fu = ae && (!Iu || Ll && 8 < Ll && 11 >= Ll), Xr = " ", Ui = !1; function Vu(i, s) { switch (i) { case "keyup": return tr.indexOf(s.keyCode) !== -1; case "keydown": return s.keyCode !== 229; case "keypress": case "mousedown": case "focusout": return !0; default: return !1 } } function Kh(i) { return i = i.detail, typeof i == "object" && "data" in i ? i.data : null } var qr = !1; function Gu(i, s) { switch (i) { case "compositionend": return Kh(s); case "keypress": return s.which !== 32 ? null : (Ui = !0, Xr); case "textInput": return i = s.data, i === Xr && Ui ? null : i; default: return null } } function Jh(i, s) { if (qr) return i === "compositionend" || !Iu && Vu(i, s) ? (i = qh(), of = Xh = Ks = null, qr = !1, i) : null; switch (i) { case "paste": return null; case "keypress": if (!(s.ctrlKey || s.altKey || s.metaKey) || s.ctrlKey && s.altKey) { if (s.char && 1 < s.char.length) return s.char; if (s.which) return String.fromCharCode(s.which) } return null; case "compositionend": return Fu && s.locale !== "ko" ? null : s.data; default: return null } } var hf = { color: !0, date: !0, datetime: !0, "datetime-local": !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 }; function $h(i) { var s = i && i.nodeName && i.nodeName.toLowerCase(); return s === "input" ? !!hf[i.type] : s === "textarea" } function ca(i, s, c, d) { Nl ? Ol ? Ol.push(d) : Ol = [d] : Nl = d, s = xg(s, "onChange"), 0 < s.length && (c = new Ro("onChange", "change", null, c, d), i.push({ event: c, listeners: s })) } var No = null, zl = null; function Sm(i) { dS(i, 0) } function Xu(i) { var s = J(i); if (Ji(s)) return i } function df(i, s) { if (i === "change") return s } var pf = !1; if (ae) { var mf; if (ae) { var Oo = "oninput" in document; if (!Oo) { var Lo = document.createElement("div"); Lo.setAttribute("oninput", "return;"), Oo = typeof Lo.oninput == "function" } mf = Oo } else mf = !1; pf = mf && (!document.documentMode || 9 < document.documentMode) } function Vn() { No && (No.detachEvent("onpropertychange", Mm), zl = No = null) } function Mm(i) { if (i.propertyName === "value" && Xu(zl)) { var s = []; ca(s, zl, i, Ou(i)), Gh(Sm, s) } } function ly(i, s, c) { i === "focusin" ? (Vn(), No = s, zl = c, No.attachEvent("onpropertychange", Mm)) : i === "focusout" && Vn() } function bm(i) { if (i === "selectionchange" || i === "keyup" || i === "keydown") return Xu(zl) } function qu(i, s) { if (i === "click") return Xu(s) } function Yr(i, s) { if (i === "input" || i === "change") return Xu(s) } function Em(i, s) { return i === s && (i !== 0 || 1 / i === 1 / s) || i !== i && s !== s } var fa = typeof Object.is == "function" ? Object.is : Em; function gs(i, s) { if (fa(i, s)) return !0; if (typeof i != "object" || i === null || typeof s != "object" || s === null) return !1; var c = Object.keys(i), d = Object.keys(s); if (c.length !== d.length) return !1; for (d = 0; d < c.length; d++) { var v = c[d]; if (!be.call(s, v) || !fa(i[v], s[v])) return !1 } return !0 } function ha(i) { for (; i && i.firstChild;)i = i.firstChild; return i } function td(i, s) { var c = ha(i); i = 0; for (var d; c;) { if (c.nodeType === 3) { if (d = i + c.textContent.length, i <= s && d >= s) return { node: c, offset: s - i }; i = d } t: { for (; c;) { if (c.nextSibling) { c = c.nextSibling; break t } c = c.parentNode } c = void 0 } c = ha(c) } } function ed(i, s) { return i && s ? i === s ? !0 : i && i.nodeType === 3 ? !1 : s && s.nodeType === 3 ? ed(i, s.parentNode) : "contains" in i ? i.contains(s) : i.compareDocumentPosition ? !!(i.compareDocumentPosition(s) & 16) : !1 : !1 } function nd(i) { i = i != null && i.ownerDocument != null && i.ownerDocument.defaultView != null ? i.ownerDocument.defaultView : window; for (var s = Ca(i.document); s instanceof i.HTMLIFrameElement;) { try { var c = typeof s.contentWindow.location.href == "string" } catch { c = !1 } if (c) i = s.contentWindow; else break; s = Ca(i.document) } return s } function Yu(i) { var s = i && i.nodeName && i.nodeName.toLowerCase(); return s && (s === "input" && (i.type === "text" || i.type === "search" || i.type === "tel" || i.type === "url" || i.type === "password") || s === "textarea" || i.contentEditable === "true") } function id(i, s) { var c = nd(s); s = i.focusedElem; var d = i.selectionRange; if (c !== s && s && s.ownerDocument && ed(s.ownerDocument.documentElement, s)) { if (d !== null && Yu(s)) { if (i = d.start, c = d.end, c === void 0 && (c = i), "selectionStart" in s) s.selectionStart = i, s.selectionEnd = Math.min(c, s.value.length); else if (c = (i = s.ownerDocument || document) && i.defaultView || window, c.getSelection) { c = c.getSelection(); var v = s.textContent.length, b = Math.min(d.start, v); d = d.end === void 0 ? b : Math.min(d.end, v), !c.extend && b > d && (v = d, d = b, b = v), v = td(s, b); var O = td(s, d); v && O && (c.rangeCount !== 1 || c.anchorNode !== v.node || c.anchorOffset !== v.offset || c.focusNode !== O.node || c.focusOffset !== O.offset) && (i = i.createRange(), i.setStart(v.node, v.offset), c.removeAllRanges(), b > d ? (c.addRange(i), c.extend(O.node, O.offset)) : (i.setEnd(O.node, O.offset), c.addRange(i))) } } for (i = [], c = s; c = c.parentNode;)c.nodeType === 1 && i.push({ element: c, left: c.scrollLeft, top: c.scrollTop }); for (typeof s.focus == "function" && s.focus(), s = 0; s < i.length; s++)c = i[s], c.element.scrollLeft = c.left, c.element.scrollTop = c.top } } var gf = ae && "documentMode" in document && 11 >= document.documentMode, Bl = null, ad = null, zo = null, vf = !1; function Ya(i, s, c) { var d = c.window === c ? c.document : c.nodeType === 9 ? c : c.ownerDocument; vf || Bl == null || Bl !== Ca(d) || (d = Bl, "selectionStart" in d && Yu(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), zo && gs(zo, d) || (zo = d, d = xg(ad, "onSelect"), 0 < d.length && (s = new Ro("onSelect", "select", null, s, c), i.push({ event: s, listeners: d }), s.target = Bl))) } function er(i, s) { var c = {}; return c[i.toLowerCase()] = s.toLowerCase(), c["Webkit" + i] = "webkit" + s, c["Moz" + i] = "moz" + s, c } var Pl = { animationend: er("Animation", "AnimationEnd"), animationiteration: er("Animation", "AnimationIteration"), animationstart: er("Animation", "AnimationStart"), transitionrun: er("Transition", "TransitionRun"), transitionstart: er("Transition", "TransitionStart"), transitioncancel: er("Transition", "TransitionCancel"), transitionend: er("Transition", "TransitionEnd") }, sd = {}, yf = {}; ae && (yf = document.createElement("div").style, "AnimationEvent" in window || (delete Pl.animationend.animation, delete Pl.animationiteration.animation, delete Pl.animationstart.animation), "TransitionEvent" in window || delete Pl.transitionend.transition); function ui(i) { if (sd[i]) return sd[i]; if (!Pl[i]) return i; var s = Pl[i], c; for (c in s) if (s.hasOwnProperty(c) && c in yf) return sd[i] = s[c]; return i } var rd = ui("animationend"), da = ui("animationiteration"), ld = ui("animationstart"), nr = ui("transitionrun"), Bo = ui("transitionstart"), Wr = ui("transitioncancel"), _f = ui("transitionend"), xf = new Map, ir = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" "); function Wa(i, s) { xf.set(i, s), Kt(s, [i]) } var Ni = [], Us = 0, ar = 0; function Wu() { for (var i = Us, s = ar = Us = 0; s < i;) { var c = Ni[s]; Ni[s++] = null; var d = Ni[s]; Ni[s++] = null; var v = Ni[s]; Ni[s++] = null; var b = Ni[s]; if (Ni[s++] = null, d !== null && v !== null) { var O = d.pending; O === null ? v.next = v : (v.next = O.next, O.next = v), d.pending = v } b !== 0 && ju(c, v, b) } } function ku(i, s, c, d) { Ni[Us++] = i, Ni[Us++] = s, Ni[Us++] = c, Ni[Us++] = d, ar |= d, i.lanes |= d, i = i.alternate, i !== null && (i.lanes |= d) } function Il(i, s, c, d) { return ku(i, s, c, d), Zu(i) } function sr(i, s) { return ku(i, null, null, s), Zu(i) } function ju(i, s, c) { i.lanes |= c; var d = i.alternate; d !== null && (d.lanes |= c); for (var v = !1, b = i.return; b !== null;)b.childLanes |= c, d = b.alternate, d !== null && (d.childLanes |= c), b.tag === 22 && (i = b.stateNode, i === null || i._visibility & 1 || (v = !0)), i = b, b = b.return; v && s !== null && i.tag === 3 && (b = i.stateNode, v = 31 - ye(c), b = b.hiddenUpdates, i = b[v], i === null ? b[v] = [s] : i.push(s), s.lane = c | 536870912) } function Zu(i) { if (50 < ns) throw ns = 0, Ar = null, Error(n(185)); for (var s = i.return; s !== null;)i = s, s = i.return; return i.tag === 3 ? i.stateNode : null } var kr = {}, Sf = new WeakMap; function pa(i, s) { if (typeof i == "object" && i !== null) { var c = Sf.get(i); return c !== void 0 ? c : (s = { value: i, source: s, stack: ft(s) }, Sf.set(i, s), s) } return { value: i, source: s, stack: ft(s) } } var Hl = [], jr = 0, Vi = null, Qu = 0, Ln = [], Da = 0, rr = null, Ns = 1, lr = ""; function ea(i, s) { Hl[jr++] = Qu, Hl[jr++] = Vi, Vi = i, Qu = s } function od(i, s, c) { Ln[Da++] = Ns, Ln[Da++] = lr, Ln[Da++] = rr, rr = i; var d = Ns; i = lr; var v = 32 - ye(d) - 1; d &= ~(1 << v), c += 1; var b = 32 - ye(s) + v; if (30 < b) { var O = v - v % 5; b = (d & (1 << O) - 1).toString(32), d >>= O, v -= O, Ns = 1 << 32 - ye(s) + v | c << v | d, lr = b + i } else Ns = 1 << b | c << v | d, lr = i } function Ku(i) { i.return !== null && (ea(i, 1), od(i, 1, 0)) } function Zr(i) { for (; i === Vi;)Vi = Hl[--jr], Hl[jr] = null, Qu = Hl[--jr], Hl[jr] = null; for (; i === rr;)rr = Ln[--Da], Ln[Da] = null, lr = Ln[--Da], Ln[Da] = null, Ns = Ln[--Da], Ln[Da] = null } var Gi = null, Ei = null, cn = !1, ka = null, ja = !1, Ju = Error(n(519)); function Fl(i) { var s = Error(n(418, "")); throw Os(pa(s, i)), Ju } function Tm(i) { var s = i.stateNode, c = i.type, d = i.memoizedProps; switch (s[kn] = i, s[Ye] = d, c) { case "dialog": hn("cancel", s), hn("close", s); break; case "iframe": case "object": case "embed": hn("load", s); break; case "video": case "audio": for (c = 0; c < Gd.length; c++)hn(Gd[c], s); break; case "source": hn("error", s); break; case "img": case "image": case "link": hn("error", s), hn("load", s); break; case "details": hn("toggle", s); break; case "input": hn("invalid", s), Fi(s, d.value, d.defaultValue, d.checked, d.defaultChecked, d.type, d.name, !0), sn(s); break; case "select": hn("invalid", s); break; case "textarea": hn("invalid", s), ms(s, d.value, d.defaultValue, d.children), sn(s) }c = d.children, typeof c != "string" && typeof c != "number" && typeof c != "bigint" || s.textContent === "" + c || d.suppressHydrationWarning === !0 || vS(s.textContent, c) ? (d.popover != null && (hn("beforetoggle", s), hn("toggle", s)), d.onScroll != null && hn("scroll", s), d.onScrollEnd != null && hn("scrollend", s), d.onClick != null && (s.onclick = Sg), s = !0) : s = !1, s || Fl(i) } function Am(i) { for (Gi = i.return; Gi;)switch (Gi.tag) { case 3: case 27: ja = !0; return; case 5: case 13: ja = !1; return; default: Gi = Gi.return } } function Po(i) { if (i !== Gi) return !1; if (!cn) return Am(i), cn = !0, !1; var s = !1, c; if ((c = i.tag !== 3 && i.tag !== 27) && ((c = i.tag === 5) && (c = i.type, c = !(c !== "form" && c !== "button") || Ry(i.type, i.memoizedProps)), c = !c), c && (s = !0), s && Ei && Fl(i), Am(i), i.tag === 13) { if (i = i.memoizedState, i = i !== null ? i.dehydrated : null, !i) throw Error(n(317)); t: { for (i = i.nextSibling, s = 0; i;) { if (i.nodeType === 8) if (c = i.data, c === "/$") { if (s === 0) { Ei = wr(i.nextSibling); break t } s-- } else c !== "$" && c !== "$!" && c !== "$?" || s++; i = i.nextSibling } Ei = null } } else Ei = Gi ? wr(i.stateNode.nextSibling) : null; return !0 } function Io() { Ei = Gi = null, cn = !1 } function Os(i) { ka === null ? ka = [i] : ka.push(i) } var Qr = Error(n(460)), ud = Error(n(474)), Mf = { then: function () { } }; function Rm(i) { return i = i.status, i === "fulfilled" || i === "rejected" } function $u() { } function Kr(i, s, c) { switch (c = i[c], c === void 0 ? i.push(s) : c !== s && (s.then($u, $u), s = c), s.status) { case "fulfilled": return s.value; case "rejected": throw i = s.reason, i === Qr ? Error(n(483)) : i; default: if (typeof s.status == "string") s.then($u, $u); else { if (i = An, i !== null && 100 < i.shellSuspendCounter) throw Error(n(482)); i = s, i.status = "pending", i.then(function (d) { if (s.status === "pending") { var v = s; v.status = "fulfilled", v.value = d } }, function (d) { if (s.status === "pending") { var v = s; v.status = "rejected", v.reason = d } }) } switch (s.status) { case "fulfilled": return s.value; case "rejected": throw i = s.reason, i === Qr ? Error(n(483)) : i }throw Ho = s, Qr } } var Ho = null; function xn() { if (Ho === null) throw Error(n(459)); var i = Ho; return Ho = null, i } var Jr = null, tc = 0; function ec(i) { var s = tc; return tc += 1, Jr === null && (Jr = []), Kr(Jr, i, s) } function nc(i, s) { s = s.props.ref, i.ref = s !== void 0 ? s : null } function bf(i, s) { throw s.$$typeof === o ? Error(n(525)) : (i = Object.prototype.toString.call(s), Error(n(31, i === "[object Object]" ? "object with keys {" + Object.keys(s).join(", ") + "}" : i))) } function wm(i) { var s = i._init; return s(i._payload) } function Cm(i) { function s(ot, et) { if (i) { var pt = ot.deletions; pt === null ? (ot.deletions = [et], ot.flags |= 16) : pt.push(et) } } function c(ot, et) { if (!i) return null; for (; et !== null;)s(ot, et), et = et.sibling; return null } function d(ot) { for (var et = new Map; ot !== null;)ot.key !== null ? et.set(ot.key, ot) : et.set(ot.index, ot), ot = ot.sibling; return et } function v(ot, et) { return ot = sa(ot, et), ot.index = 0, ot.sibling = null, ot } function b(ot, et, pt) { return ot.index = pt, i ? (pt = ot.alternate, pt !== null ? (pt = pt.index, pt < et ? (ot.flags |= 33554434, et) : pt) : (ot.flags |= 33554434, et)) : (ot.flags |= 1048576, et) } function O(ot) { return i && ot.alternate === null && (ot.flags |= 33554434), ot } function H(ot, et, pt, Ot) { return et === null || et.tag !== 6 ? (et = di(pt, ot.mode, Ot), et.return = ot, et) : (et = v(et, pt), et.return = ot, et) } function Z(ot, et, pt, Ot) { var me = pt.type; return me === m ? wt(ot, et, pt.props.children, Ot, pt.key) : et !== null && (et.elementType === me || typeof me == "object" && me !== null && me.$$typeof === D && wm(me) === et.type) ? (et = v(et, pt.props), nc(et, pt), et.return = ot, et) : (et = tu(pt.type, pt.key, pt.props, null, ot.mode, Ot), nc(et, pt), et.return = ot, et) } function st(ot, et, pt, Ot) { return et === null || et.tag !== 4 || et.stateNode.containerInfo !== pt.containerInfo || et.stateNode.implementation !== pt.implementation ? (et = pc(pt, ot.mode, Ot), et.return = ot, et) : (et = v(et, pt.children || []), et.return = ot, et) } function wt(ot, et, pt, Ot, me) { return et === null || et.tag !== 7 ? (et = vl(pt, ot.mode, Ot, me), et.return = ot, et) : (et = v(et, pt), et.return = ot, et) } function Ft(ot, et, pt) { if (typeof et == "string" && et !== "" || typeof et == "number" || typeof et == "bigint") return et = di("" + et, ot.mode, pt), et.return = ot, et; if (typeof et == "object" && et !== null) { switch (et.$$typeof) { case f: return pt = tu(et.type, et.key, et.props, null, ot.mode, pt), nc(pt, et), pt.return = ot, pt; case h: return et = pc(et, ot.mode, pt), et.return = ot, et; case D: var Ot = et._init; return et = Ot(et._payload), Ft(ot, et, pt) }if (Xt(et) || I(et)) return et = vl(et, ot.mode, pt, null), et.return = ot, et; if (typeof et.then == "function") return Ft(ot, ec(et), pt); if (et.$$typeof === M) return Ft(ot, Ff(ot, et), pt); bf(ot, et) } return null } function yt(ot, et, pt, Ot) { var me = et !== null ? et.key : null; if (typeof pt == "string" && pt !== "" || typeof pt == "number" || typeof pt == "bigint") return me !== null ? null : H(ot, et, "" + pt, Ot); if (typeof pt == "object" && pt !== null) { switch (pt.$$typeof) { case f: return pt.key === me ? Z(ot, et, pt, Ot) : null; case h: return pt.key === me ? st(ot, et, pt, Ot) : null; case D: return me = pt._init, pt = me(pt._payload), yt(ot, et, pt, Ot) }if (Xt(pt) || I(pt)) return me !== null ? null : wt(ot, et, pt, Ot, null); if (typeof pt.then == "function") return yt(ot, et, ec(pt), Ot); if (pt.$$typeof === M) return yt(ot, et, Ff(ot, pt), Ot); bf(ot, pt) } return null } function At(ot, et, pt, Ot, me) { if (typeof Ot == "string" && Ot !== "" || typeof Ot == "number" || typeof Ot == "bigint") return ot = ot.get(pt) || null, H(et, ot, "" + Ot, me); if (typeof Ot == "object" && Ot !== null) { switch (Ot.$$typeof) { case f: return ot = ot.get(Ot.key === null ? pt : Ot.key) || null, Z(et, ot, Ot, me); case h: return ot = ot.get(Ot.key === null ? pt : Ot.key) || null, st(et, ot, Ot, me); case D: var ln = Ot._init; return Ot = ln(Ot._payload), At(ot, et, pt, Ot, me) }if (Xt(Ot) || I(Ot)) return ot = ot.get(pt) || null, wt(et, ot, Ot, me, null); if (typeof Ot.then == "function") return At(ot, et, pt, ec(Ot), me); if (Ot.$$typeof === M) return At(ot, et, pt, Ff(et, Ot), me); bf(et, Ot) } return null } function xe(ot, et, pt, Ot) { for (var me = null, ln = null, Te = et, Ne = et = 0, Zi = null; Te !== null && Ne < pt.length; Ne++) { Te.index > Ne ? (Zi = Te, Te = null) : Zi = Te.sibling; var Sn = yt(ot, Te, pt[Ne], Ot); if (Sn === null) { Te === null && (Te = Zi); break } i && Te && Sn.alternate === null && s(ot, Te), et = b(Sn, et, Ne), ln === null ? me = Sn : ln.sibling = Sn, ln = Sn, Te = Zi } if (Ne === pt.length) return c(ot, Te), cn && ea(ot, Ne), me; if (Te === null) { for (; Ne < pt.length; Ne++)Te = Ft(ot, pt[Ne], Ot), Te !== null && (et = b(Te, et, Ne), ln === null ? me = Te : ln.sibling = Te, ln = Te); return cn && ea(ot, Ne), me } for (Te = d(Te); Ne < pt.length; Ne++)Zi = At(Te, ot, Ne, pt[Ne], Ot), Zi !== null && (i && Zi.alternate !== null && Te.delete(Zi.key === null ? Ne : Zi.key), et = b(Zi, et, Ne), ln === null ? me = Zi : ln.sibling = Zi, ln = Zi); return i && Te.forEach(function (uu) { return s(ot, uu) }), cn && ea(ot, Ne), me } function Fe(ot, et, pt, Ot) { if (pt == null) throw Error(n(151)); for (var me = null, ln = null, Te = et, Ne = et = 0, Zi = null, Sn = pt.next(); Te !== null && !Sn.done; Ne++, Sn = pt.next()) { Te.index > Ne ? (Zi = Te, Te = null) : Zi = Te.sibling; var uu = yt(ot, Te, Sn.value, Ot); if (uu === null) { Te === null && (Te = Zi); break } i && Te && uu.alternate === null && s(ot, Te), et = b(uu, et, Ne), ln === null ? me = uu : ln.sibling = uu, ln = uu, Te = Zi } if (Sn.done) return c(ot, Te), cn && ea(ot, Ne), me; if (Te === null) { for (; !Sn.done; Ne++, Sn = pt.next())Sn = Ft(ot, Sn.value, Ot), Sn !== null && (et = b(Sn, et, Ne), ln === null ? me = Sn : ln.sibling = Sn, ln = Sn); return cn && ea(ot, Ne), me } for (Te = d(Te); !Sn.done; Ne++, Sn = pt.next())Sn = At(Te, ot, Ne, Sn.value, Ot), Sn !== null && (i && Sn.alternate !== null && Te.delete(Sn.key === null ? Ne : Sn.key), et = b(Sn, et, Ne), ln === null ? me = Sn : ln.sibling = Sn, ln = Sn); return i && Te.forEach(function (pA) { return s(ot, pA) }), cn && ea(ot, Ne), me } function gi(ot, et, pt, Ot) { if (typeof pt == "object" && pt !== null && pt.type === m && pt.key === null && (pt = pt.props.children), typeof pt == "object" && pt !== null) { switch (pt.$$typeof) { case f: t: { for (var me = pt.key; et !== null;) { if (et.key === me) { if (me = pt.type, me === m) { if (et.tag === 7) { c(ot, et.sibling), Ot = v(et, pt.props.children), Ot.return = ot, ot = Ot; break t } } else if (et.elementType === me || typeof me == "object" && me !== null && me.$$typeof === D && wm(me) === et.type) { c(ot, et.sibling), Ot = v(et, pt.props), nc(Ot, pt), Ot.return = ot, ot = Ot; break t } c(ot, et); break } else s(ot, et); et = et.sibling } pt.type === m ? (Ot = vl(pt.props.children, ot.mode, Ot, pt.key), Ot.return = ot, ot = Ot) : (Ot = tu(pt.type, pt.key, pt.props, null, ot.mode, Ot), nc(Ot, pt), Ot.return = ot, ot = Ot) } return O(ot); case h: t: { for (me = pt.key; et !== null;) { if (et.key === me) if (et.tag === 4 && et.stateNode.containerInfo === pt.containerInfo && et.stateNode.implementation === pt.implementation) { c(ot, et.sibling), Ot = v(et, pt.children || []), Ot.return = ot, ot = Ot; break t } else { c(ot, et); break } else s(ot, et); et = et.sibling } Ot = pc(pt, ot.mode, Ot), Ot.return = ot, ot = Ot } return O(ot); case D: return me = pt._init, pt = me(pt._payload), gi(ot, et, pt, Ot) }if (Xt(pt)) return xe(ot, et, pt, Ot); if (I(pt)) { if (me = I(pt), typeof me != "function") throw Error(n(150)); return pt = me.call(pt), Fe(ot, et, pt, Ot) } if (typeof pt.then == "function") return gi(ot, et, ec(pt), Ot); if (pt.$$typeof === M) return gi(ot, et, Ff(ot, pt), Ot); bf(ot, pt) } return typeof pt == "string" && pt !== "" || typeof pt == "number" || typeof pt == "bigint" ? (pt = "" + pt, et !== null && et.tag === 6 ? (c(ot, et.sibling), Ot = v(et, pt), Ot.return = ot, ot = Ot) : (c(ot, et), Ot = di(pt, ot.mode, Ot), Ot.return = ot, ot = Ot), O(ot)) : c(ot, et) } return function (ot, et, pt, Ot) { try { tc = 0; var me = gi(ot, et, pt, Ot); return Jr = null, me } catch (Te) { if (Te === Qr) throw Te; var ln = ai(29, Te, null, ot.mode); return ln.lanes = Ot, ln.return = ot, ln } finally { } } } var or = Cm(!0), ur = Cm(!1), Vl = kt(null), Gl = kt(0); function $r(i, s) { i = Tr, Jt(Gl, i), Jt(Vl, s), Tr = i | s.baseLanes } function Ef() { Jt(Gl, Tr), Jt(Vl, Vl.current) } function ic() { Tr = Gl.current, Me(Vl), Me(Gl) } var ma = kt(null), Ls = null; function cr(i) { var s = i.alternate; Jt(ci, ci.current & 1), Jt(ma, i), Ls === null && (s === null || Vl.current !== null || s.memoizedState !== null) && (Ls = i) } function cd(i) { if (i.tag === 22) { if (Jt(ci, ci.current), Jt(ma, i), Ls === null) { var s = i.alternate; s !== null && s.memoizedState !== null && (Ls = i) } } else fr() } function fr() { Jt(ci, ci.current), Jt(ma, ma.current) } function zs(i) { Me(ma), Ls === i && (Ls = null), Me(ci) } var ci = kt(0); function Fo(i) { for (var s = i; s !== null;) { if (s.tag === 13) { var c = s.memoizedState; if (c !== null && (c = c.dehydrated, c === null || c.data === "$?" || c.data === "$!")) return s } else if (s.tag === 19 && s.memoizedProps.revealOrder !== void 0) { if ((s.flags & 128) !== 0) return s } else if (s.child !== null) { s.child.return = s, s = s.child; continue } if (s === i) break; for (; s.sibling === null;) { if (s.return === null || s.return === i) return null; s = s.return } s.sibling.return = s.return, s = s.sibling } return null } var $e = typeof AbortController < "u" ? AbortController : function () { var i = [], s = this.signal = { aborted: !1, addEventListener: function (c, d) { i.push(d) } }; this.abort = function () { s.aborted = !0, i.forEach(function (c) { return c() }) } }, oy = r.unstable_scheduleCallback, Ua = r.unstable_NormalPriority, Jn = { $$typeof: M, Consumer: null, Provider: null, _currentValue: null, _currentValue2: null, _threadCount: 0 }; function fd() { return { controller: new $e, data: new Map, refCount: 0 } } function tl(i) { i.refCount--, i.refCount === 0 && oy(Ua, function () { i.controller.abort() }) } var Bs = null, el = 0, Xl = 0, nl = null; function uy(i, s) { if (Bs === null) { var c = Bs = []; el = 0, Xl = yy(), nl = { status: "pending", value: void 0, then: function (d) { c.push(d) } } } return el++, s.then(hd, hd), s } function hd() { if (--el === 0 && Bs !== null) { nl !== null && (nl.status = "fulfilled"); var i = Bs; Bs = null, Xl = 0, nl = null; for (var s = 0; s < i.length; s++)(0, i[s])() } } function il(i, s) { var c = [], d = { status: "pending", value: null, reason: null, then: function (v) { c.push(v) } }; return i.then(function () { d.status = "fulfilled", d.value = s; for (var v = 0; v < c.length; v++)(0, c[v])(s) }, function (v) { for (d.status = "rejected", d.reason = v, v = 0; v < c.length; v++)(0, c[v])(void 0) }), d } var Tf = z.S; z.S = function (i, s) { typeof s == "object" && s !== null && typeof s.then == "function" && uy(i, s), Tf !== null && Tf(i, s) }; var hr = kt(null); function ac() { var i = hr.current; return i !== null ? i : An.pooledCache } function Vo(i, s) { s === null ? Jt(hr, hr.current) : Jt(hr, s.pool) } function dr() { var i = ac(); return i === null ? null : { parent: Jn._currentValue, pool: i } } var pr = 0, We = null, bn = null, fi = null, Ue = !1, al = !1, sl = !1, Go = 0, rl = 0, Xo = null, cy = 0; function Zn() { throw Error(n(321)) } function ql(i, s) { if (s === null) return !1; for (var c = 0; c < s.length && c < i.length; c++)if (!fa(i[c], s[c])) return !1; return !0 } function dd(i, s, c, d, v, b) { return pr = b, We = s, s.memoizedState = null, s.updateQueue = null, s.lanes = 0, z.H = i === null || i.memoizedState === null ? ol : gr, sl = !1, b = c(d, v), sl = !1, al && (b = Um(s, c, d, v)), Dm(i), b } function Dm(i) { z.H = Is; var s = bn !== null && bn.next !== null; if (pr = 0, fi = bn = We = null, Ue = !1, rl = 0, Xo = null, s) throw Error(n(300)); i === null || xi || (i = i.dependencies, i !== null && jo(i) && (xi = !0)) } function Um(i, s, c, d) { We = i; var v = 0; do { if (al && (Xo = null), rl = 0, al = !1, 25 <= v) throw Error(n(301)); if (v += 1, fi = bn = null, i.updateQueue != null) { var b = i.updateQueue; b.lastEffect = null, b.events = null, b.stores = null, b.memoCache != null && (b.memoCache.index = 0) } z.H = kl, b = s(c, d) } while (al); return b } function fy() { var i = z.H, s = i.useState()[0]; return s = typeof s.then == "function" ? rc(s) : s, i = i.useState()[0], (bn !== null ? bn.memoizedState : null) !== i && (We.flags |= 1024), s } function pd() { var i = Go !== 0; return Go = 0, i } function sc(i, s, c) { s.updateQueue = i.updateQueue, s.flags &= -2053, i.lanes &= ~c } function Af(i) { if (Ue) { for (i = i.memoizedState; i !== null;) { var s = i.queue; s !== null && (s.pending = null), i = i.next } Ue = !1 } pr = 0, fi = bn = We = null, al = !1, rl = Go = 0, Xo = null } function Oi() { var i = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null }; return fi === null ? We.memoizedState = fi = i : fi = fi.next = i, fi } function $n() { if (bn === null) { var i = We.alternate; i = i !== null ? i.memoizedState : null } else i = bn.next; var s = fi === null ? We.memoizedState : fi.next; if (s !== null) fi = s, bn = i; else { if (i === null) throw We.alternate === null ? Error(n(467)) : Error(n(310)); bn = i, i = { memoizedState: bn.memoizedState, baseState: bn.baseState, baseQueue: bn.baseQueue, queue: bn.queue, next: null }, fi === null ? We.memoizedState = fi = i : fi = fi.next = i } return fi } var Rf; Rf = function () { return { lastEffect: null, events: null, stores: null, memoCache: null } }; function rc(i) { var s = rl; return rl += 1, Xo === null && (Xo = []), i = Kr(Xo, i, s), s = We, (fi === null ? s.memoizedState : fi.next) === null && (s = s.alternate, z.H = s === null || s.memoizedState === null ? ol : gr), i } function qo(i) { if (i !== null && typeof i == "object") { if (typeof i.then == "function") return rc(i); if (i.$$typeof === M) return Xi(i) } throw Error(n(438, String(i))) } function vs(i) { var s = null, c = We.updateQueue; if (c !== null && (s = c.memoCache), s == null) { var d = We.alternate; d !== null && (d = d.updateQueue, d !== null && (d = d.memoCache, d != null && (s = { data: d.data.map(function (v) { return v.slice() }), index: 0 }))) } if (s == null && (s = { data: [], index: 0 }), c === null && (c = Rf(), We.updateQueue = c), c.memoCache = s, c = s.data[s.index], c === void 0) for (c = s.data[s.index] = Array(i), d = 0; d < i; d++)c[d] = U; return s.index++, c } function Gn(i, s) { return typeof s == "function" ? s(i) : s } function ys(i) { var s = $n(); return ga(s, bn, i) } function ga(i, s, c) { var d = i.queue; if (d === null) throw Error(n(311)); d.lastRenderedReducer = c; var v = i.baseQueue, b = d.pending; if (b !== null) { if (v !== null) { var O = v.next; v.next = b.next, b.next = O } s.baseQueue = v = b, d.pending = null } if (b = i.baseState, v === null) i.memoizedState = b; else { s = v.next; var H = O = null, Z = null, st = s, wt = !1; do { var Ft = st.lane & -536870913; if (Ft !== st.lane ? (Ae & Ft) === Ft : (pr & Ft) === Ft) { var yt = st.revertLane; if (yt === 0) Z !== null && (Z = Z.next = { lane: 0, revertLane: 0, action: st.action, hasEagerState: st.hasEagerState, eagerState: st.eagerState, next: null }), Ft === Xl && (wt = !0); else if ((pr & yt) === yt) { st = st.next, yt === Xl && (wt = !0); continue } else Ft = { lane: 0, revertLane: st.revertLane, action: st.action, hasEagerState: st.hasEagerState, eagerState: st.eagerState, next: null }, Z === null ? (H = Z = Ft, O = b) : Z = Z.next = Ft, We.lanes |= yt, Ts |= yt; Ft = st.action, sl && c(b, Ft), b = st.hasEagerState ? st.eagerState : c(b, Ft) } else yt = { lane: Ft, revertLane: st.revertLane, action: st.action, hasEagerState: st.hasEagerState, eagerState: st.eagerState, next: null }, Z === null ? (H = Z = yt, O = b) : Z = Z.next = yt, We.lanes |= Ft, Ts |= Ft; st = st.next } while (st !== null && st !== s); if (Z === null ? O = b : Z.next = H, !fa(b, i.memoizedState) && (xi = !0, wt && (c = nl, c !== null))) throw c; i.memoizedState = b, i.baseState = O, i.baseQueue = Z, d.lastRenderedState = b } return v === null && (d.lanes = 0), [i.memoizedState, d.dispatch] } function wf(i) { var s = $n(), c = s.queue; if (c === null) throw Error(n(311)); c.lastRenderedReducer = i; var d = c.dispatch, v = c.pending, b = s.memoizedState; if (v !== null) { c.pending = null; var O = v = v.next; do b = i(b, O.action), O = O.next; while (O !== v); fa(b, s.memoizedState) || (xi = !0), s.memoizedState = b, s.baseQueue === null && (s.baseState = b), c.lastRenderedState = b } return [b, d] } function Nm(i, s, c) { var d = We, v = $n(), b = cn; if (b) { if (c === void 0) throw Error(n(407)); c = c() } else c = s(); var O = !fa((bn || v).memoizedState, c); if (O && (v.memoizedState = c, xi = !0), v = v.queue, yd(Om.bind(null, d, v, i), [i]), v.getSnapshot !== s || O || fi !== null && fi.memoizedState.tag & 1) { if (d.flags |= 2048, Ps(9, ll.bind(null, d, v, c, s), { destroy: void 0 }, null), An === null) throw Error(n(349)); b || (pr & 60) !== 0 || na(d, s, c) } return c } function na(i, s, c) { i.flags |= 16384, i = { getSnapshot: s, value: c }, s = We.updateQueue, s === null ? (s = Rf(), We.updateQueue = s, s.stores = [i]) : (c = s.stores, c === null ? s.stores = [i] : c.push(i)) } function ll(i, s, c, d) { s.value = c, s.getSnapshot = d, Lm(s) && zm(i) } function Om(i, s, c) { return c(function () { Lm(s) && zm(i) }) } function Lm(i) { var s = i.getSnapshot; i = i.value; try { var c = s(); return !fa(i, c) } catch { return !0 } } function zm(i) { var s = sr(i, 2); s !== null && mi(s, i, 2) } function md(i) { var s = Oi(); if (typeof i == "function") { var c = i; if (i = c(), sl) { Be(!0); try { c() } finally { Be(!1) } } } return s.memoizedState = s.baseState = i, s.queue = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: Gn, lastRenderedState: i }, s } function gd(i, s, c, d) { return i.baseState = c, ga(i, bn, typeof d == "function" ? d : Gn) } function hy(i, s, c, d, v) { if (Of(i)) throw Error(n(485)); if (i = s.action, i !== null) { var b = { payload: v, action: i, next: null, isTransition: !0, status: "pending", value: null, reason: null, listeners: [], then: function (O) { b.listeners.push(O) } }; z.T !== null ? c(!0) : b.isTransition = !1, d(b), c = s.pending, c === null ? (b.next = s.pending = b, vd(s, b)) : (b.next = c.next, s.pending = c.next = b) } } function vd(i, s) { var c = s.action, d = s.payload, v = i.state; if (s.isTransition) { var b = z.T, O = {}; z.T = O; try { var H = c(v, d), Z = z.S; Z !== null && Z(O, H), Bm(i, s, H) } catch (st) { mr(i, s, st) } finally { z.T = b } } else try { b = c(v, d), Bm(i, s, b) } catch (st) { mr(i, s, st) } } function Bm(i, s, c) { c !== null && typeof c == "object" && typeof c.then == "function" ? c.then(function (d) { Yl(i, s, d) }, function (d) { return mr(i, s, d) }) : Yl(i, s, c) } function Yl(i, s, c) { s.status = "fulfilled", s.value = c, Pm(s), i.state = c, s = i.pending, s !== null && (c = s.next, c === s ? i.pending = null : (c = c.next, s.next = c, vd(i, c))) } function mr(i, s, c) { var d = i.pending; if (i.pending = null, d !== null) { d = d.next; do s.status = "rejected", s.reason = c, Pm(s), s = s.next; while (s !== d) } i.action = null } function Pm(i) { i = i.listeners; for (var s = 0; s < i.length; s++)(0, i[s])() } function Im(i, s) { return s } function Hm(i, s) { if (cn) { var c = An.formState; if (c !== null) { t: { var d = We; if (cn) { if (Ei) { e: { for (var v = Ei, b = ja; v.nodeType !== 8;) { if (!b) { v = null; break e } if (v = wr(v.nextSibling), v === null) { v = null; break e } } b = v.data, v = b === "F!" || b === "F" ? v : null } if (v) { Ei = wr(v.nextSibling), d = v.data === "F!"; break t } } Fl(d) } d = !1 } d && (s = c[0]) } } return c = Oi(), c.memoizedState = c.baseState = s, d = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: Im, lastRenderedState: s }, c.queue = d, c = Md.bind(null, We, d), d.dispatch = c, d = md(!1), b = lc.bind(null, We, !1, d.queue), d = Oi(), v = { state: s, dispatch: null, action: i, pending: null }, d.queue = v, c = hy.bind(null, We, v, b, c), v.dispatch = c, d.memoizedState = i, [s, c, !1] } function Yo(i) { var s = $n(); return Fm(s, bn, i) } function Fm(i, s, c) { s = ga(i, s, Im)[0], i = ys(Gn)[0], s = typeof s == "object" && s !== null && typeof s.then == "function" ? rc(s) : s; var d = $n(), v = d.queue, b = v.dispatch; return c !== d.memoizedState && (We.flags |= 2048, Ps(9, dy.bind(null, v, c), { destroy: void 0 }, null)), [s, b, i] } function dy(i, s) { i.action = s } function Vm(i) { var s = $n(), c = bn; if (c !== null) return Fm(s, c, i); $n(), s = s.memoizedState, c = $n(); var d = c.queue.dispatch; return c.memoizedState = i, [s, d, !1] } function Ps(i, s, c, d) { return i = { tag: i, create: s, inst: c, deps: d, next: null }, s = We.updateQueue, s === null && (s = Rf(), We.updateQueue = s), c = s.lastEffect, c === null ? s.lastEffect = i.next = i : (d = c.next, c.next = i, i.next = d, s.lastEffect = i), i } function Gm() { return $n().memoizedState } function Cf(i, s, c, d) { var v = Oi(); We.flags |= i, v.memoizedState = Ps(1 | s, c, { destroy: void 0 }, d === void 0 ? null : d) } function Df(i, s, c, d) { var v = $n(); d = d === void 0 ? null : d; var b = v.memoizedState.inst; bn !== null && d !== null && ql(d, bn.memoizedState.deps) ? v.memoizedState = Ps(s, c, b, d) : (We.flags |= i, v.memoizedState = Ps(1 | s, c, b, d)) } function Xm(i, s) { Cf(8390656, 8, i, s) } function yd(i, s) { Df(2048, 8, i, s) } function qm(i, s) { return Df(4, 2, i, s) } function Ym(i, s) { return Df(4, 4, i, s) } function Wm(i, s) { if (typeof s == "function") { i = i(); var c = s(i); return function () { typeof c == "function" ? c() : s(null) } } if (s != null) return i = i(), s.current = i, function () { s.current = null } } function km(i, s, c) { c = c != null ? c.concat([i]) : null, Df(4, 4, Wm.bind(null, s, i), c) } function _d() { } function jm(i, s) { var c = $n(); s = s === void 0 ? null : s; var d = c.memoizedState; return s !== null && ql(s, d[1]) ? d[0] : (c.memoizedState = [i, s], i) } function Zm(i, s) { var c = $n(); s = s === void 0 ? null : s; var d = c.memoizedState; if (s !== null && ql(s, d[1])) return d[0]; if (d = i(), sl) { Be(!0); try { i() } finally { Be(!1) } } return c.memoizedState = [d, s], d } function Uf(i, s, c) { return c === void 0 || (pr & 1073741824) !== 0 ? i.memoizedState = s : (i.memoizedState = c, i = Ba(), We.lanes |= i, Ts |= i, c) } function Qm(i, s, c, d) { return fa(c, s) ? c : Vl.current !== null ? (i = Uf(i, c, d), fa(i, s) || (xi = !0), i) : (pr & 42) === 0 ? (xi = !0, i.memoizedState = c) : (i = Ba(), We.lanes |= i, Ts |= i, s) } function Km(i, s, c, d, v) { var b = $.p; $.p = b !== 0 && 8 > b ? b : 8; var O = z.T, H = {}; z.T = H, lc(i, !1, s, c); try { var Z = v(), st = z.S; if (st !== null && st(H, Z), Z !== null && typeof Z == "object" && typeof Z.then == "function") { var wt = il(Z, d); Wl(i, s, wt, la(i)) } else Wl(i, s, d, la(i)) } catch (Ft) { Wl(i, s, { then: function () { }, status: "rejected", reason: Ft }, la()) } finally { $.p = b, z.T = O } } function py() { } function xd(i, s, c, d) { if (i.tag !== 5) throw Error(n(476)); var v = Jm(i).queue; Km(i, v, s, Tt, c === null ? py : function () { return $m(i), c(d) }) } function Jm(i) { var s = i.memoizedState; if (s !== null) return s; s = { memoizedState: Tt, baseState: Tt, baseQueue: null, queue: { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: Gn, lastRenderedState: Tt }, next: null }; var c = {}; return s.next = { memoizedState: c, baseState: c, baseQueue: null, queue: { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: Gn, lastRenderedState: c }, next: null }, i.memoizedState = s, i = i.alternate, i !== null && (i.memoizedState = s), s } function $m(i) { var s = Jm(i).next.queue; Wl(i, s, {}, la()) } function Nf() { return Xi(kd) } function Sd() { return $n().memoizedState } function tg() { return $n().memoizedState } function eg(i) { for (var s = i.return; s !== null;) { switch (s.tag) { case 24: case 3: var c = la(); i = La(c); var d = za(s, i, c); d !== null && (mi(d, s, c), fl(d, s, c)), s = { cache: fd() }, i.payload = s; return }s = s.return } } function ng(i, s, c) { var d = la(); c = { lane: d, revertLane: 0, action: c, hasEagerState: !1, eagerState: null, next: null }, Of(i) ? ig(s, c) : (c = Il(i, s, c, d), c !== null && (mi(c, i, d), ag(c, s, d))) } function Md(i, s, c) { var d = la(); Wl(i, s, c, d) } function Wl(i, s, c, d) { var v = { lane: d, revertLane: 0, action: c, hasEagerState: !1, eagerState: null, next: null }; if (Of(i)) ig(s, v); else { var b = i.alternate; if (i.lanes === 0 && (b === null || b.lanes === 0) && (b = s.lastRenderedReducer, b !== null)) try { var O = s.lastRenderedState, H = b(O, c); if (v.hasEagerState = !0, v.eagerState = H, fa(H, O)) return ku(i, s, v, 0), An === null && Wu(), !1 } catch { } finally { } if (c = Il(i, s, v, d), c !== null) return mi(c, i, d), ag(c, s, d), !0 } return !1 } function lc(i, s, c, d) { if (d = { lane: 2, revertLane: yy(), action: d, hasEagerState: !1, eagerState: null, next: null }, Of(i)) { if (s) throw Error(n(479)) } else s = Il(i, c, d, 2), s !== null && mi(s, i, 2) } function Of(i) { var s = i.alternate; return i === We || s !== null && s === We } function ig(i, s) { al = Ue = !0; var c = i.pending; c === null ? s.next = s : (s.next = c.next, c.next = s), i.pending = s } function ag(i, s, c) { if ((c & 4194176) !== 0) { var d = s.lanes; d &= i.pendingLanes, c |= d, s.lanes = c, qa(i, c) } } var Is = { readContext: Xi, use: qo, useCallback: Zn, useContext: Zn, useEffect: Zn, useImperativeHandle: Zn, useLayoutEffect: Zn, useInsertionEffect: Zn, useMemo: Zn, useReducer: Zn, useRef: Zn, useState: Zn, useDebugValue: Zn, useDeferredValue: Zn, useTransition: Zn, useSyncExternalStore: Zn, useId: Zn }; Is.useCacheRefresh = Zn, Is.useMemoCache = Zn, Is.useHostTransitionStatus = Zn, Is.useFormState = Zn, Is.useActionState = Zn, Is.useOptimistic = Zn; var ol = { readContext: Xi, use: qo, useCallback: function (i, s) { return Oi().memoizedState = [i, s === void 0 ? null : s], i }, useContext: Xi, useEffect: Xm, useImperativeHandle: function (i, s, c) { c = c != null ? c.concat([i]) : null, Cf(4194308, 4, Wm.bind(null, s, i), c) }, useLayoutEffect: function (i, s) { return Cf(4194308, 4, i, s) }, useInsertionEffect: function (i, s) { Cf(4, 2, i, s) }, useMemo: function (i, s) { var c = Oi(); s = s === void 0 ? null : s; var d = i(); if (sl) { Be(!0); try { i() } finally { Be(!1) } } return c.memoizedState = [d, s], d }, useReducer: function (i, s, c) { var d = Oi(); if (c !== void 0) { var v = c(s); if (sl) { Be(!0); try { c(s) } finally { Be(!1) } } } else v = s; return d.memoizedState = d.baseState = v, i = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: i, lastRenderedState: v }, d.queue = i, i = i.dispatch = ng.bind(null, We, i), [d.memoizedState, i] }, useRef: function (i) { var s = Oi(); return i = { current: i }, s.memoizedState = i }, useState: function (i) { i = md(i); var s = i.queue, c = Md.bind(null, We, s); return s.dispatch = c, [i.memoizedState, c] }, useDebugValue: _d, useDeferredValue: function (i, s) { var c = Oi(); return Uf(c, i, s) }, useTransition: function () { var i = md(!1); return i = Km.bind(null, We, i.queue, !0, !1), Oi().memoizedState = i, [!1, i] }, useSyncExternalStore: function (i, s, c) { var d = We, v = Oi(); if (cn) { if (c === void 0) throw Error(n(407)); c = c() } else { if (c = s(), An === null) throw Error(n(349)); (Ae & 60) !== 0 || na(d, s, c) } v.memoizedState = c; var b = { value: c, getSnapshot: s }; return v.queue = b, Xm(Om.bind(null, d, b, i), [i]), d.flags |= 2048, Ps(9, ll.bind(null, d, b, c, s), { destroy: void 0 }, null), c }, useId: function () { var i = Oi(), s = An.identifierPrefix; if (cn) { var c = lr, d = Ns; c = (d & ~(1 << 32 - ye(d) - 1)).toString(32) + c, s = ":" + s + "R" + c, c = Go++, 0 < c && (s += "H" + c.toString(32)), s += ":" } else c = cy++, s = ":" + s + "r" + c.toString(32) + ":"; return i.memoizedState = s }, useCacheRefresh: function () { return Oi().memoizedState = eg.bind(null, We) } }; ol.useMemoCache = vs, ol.useHostTransitionStatus = Nf, ol.useFormState = Hm, ol.useActionState = Hm, ol.useOptimistic = function (i) { var s = Oi(); s.memoizedState = s.baseState = i; var c = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: null, lastRenderedState: null }; return s.queue = c, s = lc.bind(null, We, !0, c), c.dispatch = s, [i, s] }; var gr = { readContext: Xi, use: qo, useCallback: jm, useContext: Xi, useEffect: yd, useImperativeHandle: km, useInsertionEffect: qm, useLayoutEffect: Ym, useMemo: Zm, useReducer: ys, useRef: Gm, useState: function () { return ys(Gn) }, useDebugValue: _d, useDeferredValue: function (i, s) { var c = $n(); return Qm(c, bn.memoizedState, i, s) }, useTransition: function () { var i = ys(Gn)[0], s = $n().memoizedState; return [typeof i == "boolean" ? i : rc(i), s] }, useSyncExternalStore: Nm, useId: Sd }; gr.useCacheRefresh = tg, gr.useMemoCache = vs, gr.useHostTransitionStatus = Nf, gr.useFormState = Yo, gr.useActionState = Yo, gr.useOptimistic = function (i, s) { var c = $n(); return gd(c, bn, i, s) }; var kl = { readContext: Xi, use: qo, useCallback: jm, useContext: Xi, useEffect: yd, useImperativeHandle: km, useInsertionEffect: qm, useLayoutEffect: Ym, useMemo: Zm, useReducer: wf, useRef: Gm, useState: function () { return wf(Gn) }, useDebugValue: _d, useDeferredValue: function (i, s) { var c = $n(); return bn === null ? Uf(c, i, s) : Qm(c, bn.memoizedState, i, s) }, useTransition: function () { var i = wf(Gn)[0], s = $n().memoizedState; return [typeof i == "boolean" ? i : rc(i), s] }, useSyncExternalStore: Nm, useId: Sd }; kl.useCacheRefresh = tg, kl.useMemoCache = vs, kl.useHostTransitionStatus = Nf, kl.useFormState = Vm, kl.useActionState = Vm, kl.useOptimistic = function (i, s) { var c = $n(); return bn !== null ? gd(c, bn, i, s) : (c.baseState = i, [i, c.queue.dispatch]) }; function bd(i, s, c, d) { s = i.memoizedState, c = c(d, s), c = c == null ? s : L({}, s, c), i.memoizedState = c, i.lanes === 0 && (i.updateQueue.baseState = c) } var Ed = { isMounted: function (i) { return (i = i._reactInternals) ? nt(i) === i : !1 }, enqueueSetState: function (i, s, c) { i = i._reactInternals; var d = la(), v = La(d); v.payload = s, c != null && (v.callback = c), s = za(i, v, d), s !== null && (mi(s, i, d), fl(s, i, d)) }, enqueueReplaceState: function (i, s, c) { i = i._reactInternals; var d = la(), v = La(d); v.tag = 1, v.payload = s, c != null && (v.callback = c), s = za(i, v, d), s !== null && (mi(s, i, d), fl(s, i, d)) }, enqueueForceUpdate: function (i, s) { i = i._reactInternals; var c = la(), d = La(c); d.tag = 2, s != null && (d.callback = s), s = za(i, d, c), s !== null && (mi(s, i, c), fl(s, i, c)) } }; function sg(i, s, c, d, v, b, O) { return i = i.stateNode, typeof i.shouldComponentUpdate == "function" ? i.shouldComponentUpdate(d, b, O) : s.prototype && s.prototype.isPureReactComponent ? !gs(c, d) || !gs(v, b) : !0 } function rg(i, s, c, d) { i = s.state, typeof s.componentWillReceiveProps == "function" && s.componentWillReceiveProps(c, d), typeof s.UNSAFE_componentWillReceiveProps == "function" && s.UNSAFE_componentWillReceiveProps(c, d), s.state !== i && Ed.enqueueReplaceState(s, s.state, null) } function jl(i, s) { var c = s; if ("ref" in s) { c = {}; for (var d in s) d !== "ref" && (c[d] = s[d]) } if (i = i.defaultProps) { c === s && (c = L({}, c)); for (var v in i) c[v] === void 0 && (c[v] = i[v]) } return c } var Lf = typeof reportError == "function" ? reportError : function (i) { if (typeof window == "object" && typeof window.ErrorEvent == "function") { var s = new window.ErrorEvent("error", { bubbles: !0, cancelable: !0, message: typeof i == "object" && i !== null && typeof i.message == "string" ? String(i.message) : String(i), error: i }); if (!window.dispatchEvent(s)) return } else if (typeof process == "object" && typeof process.emit == "function") { process.emit("uncaughtException", i); return } console.error(i) }; function lg(i) { Lf(i) } function og(i) { console.error(i) } function ug(i) { Lf(i) } function zf(i, s) { try { var c = i.onUncaughtError; c(s.value, { componentStack: s.stack }) } catch (d) { setTimeout(function () { throw d }) } } function cg(i, s, c) { try { var d = i.onCaughtError; d(c.value, { componentStack: c.stack, errorBoundary: s.tag === 1 ? s.stateNode : null }) } catch (v) { setTimeout(function () { throw v }) } } function Td(i, s, c) { return c = La(c), c.tag = 3, c.payload = { element: null }, c.callback = function () { zf(i, s) }, c } function Ad(i) { return i = La(i), i.tag = 3, i } function fg(i, s, c, d) { var v = c.type.getDerivedStateFromError; if (typeof v == "function") { var b = d.value; i.payload = function () { return v(b) }, i.callback = function () { cg(s, c, d) } } var O = c.stateNode; O !== null && typeof O.componentDidCatch == "function" && (i.callback = function () { cg(s, c, d), typeof v != "function" && (pi === null ? pi = new Set([this]) : pi.add(this)); var H = d.stack; this.componentDidCatch(d.value, { componentStack: H !== null ? H : "" }) }) } function my(i, s, c, d, v) { if (c.flags |= 32768, d !== null && typeof d == "object" && typeof d.then == "function") { if (s = c.alternate, s !== null && uc(s, c, v, !0), c = ma.current, c !== null) { switch (c.tag) { case 13: return Ls === null ? vc() : c.alternate === null && Fn === 0 && (Fn = 3), c.flags &= -257, c.flags |= 65536, c.lanes = v, d === Mf ? c.flags |= 16384 : (s = c.updateQueue, s === null ? c.updateQueue = new Set([d]) : s.add(d), He(i, d, v)), !1; case 22: return c.flags |= 65536, d === Mf ? c.flags |= 16384 : (s = c.updateQueue, s === null ? (s = { transitions: null, markerInstances: null, retryQueue: new Set([d]) }, c.updateQueue = s) : (c = s.retryQueue, c === null ? s.retryQueue = new Set([d]) : c.add(d)), He(i, d, v)), !1 }throw Error(n(435, c.tag)) } return He(i, d, v), vc(), !1 } if (cn) return s = ma.current, s !== null ? ((s.flags & 65536) === 0 && (s.flags |= 256), s.flags |= 65536, s.lanes = v, d !== Ju && (i = Error(n(422), { cause: d }), Os(pa(i, c)))) : (d !== Ju && (s = Error(n(423), { cause: d }), Os(pa(s, c))), i = i.current.alternate, i.flags |= 65536, v &= -v, i.lanes |= v, d = pa(d, c), v = Td(i.stateNode, d, v), Qo(i, v), Fn !== 4 && (Fn = 2)), !1; var b = Error(n(520), { cause: d }); if (b = pa(b, c), gc === null ? gc = [b] : gc.push(b), Fn !== 4 && (Fn = 2), s === null) return !0; d = pa(d, c), c = s; do { switch (c.tag) { case 3: return c.flags |= 65536, i = v & -v, c.lanes |= i, i = Td(c.stateNode, d, i), Qo(c, i), !1; case 1: if (s = c.type, b = c.stateNode, (c.flags & 128) === 0 && (typeof s.getDerivedStateFromError == "function" || b !== null && typeof b.componentDidCatch == "function" && (pi === null || !pi.has(b)))) return c.flags |= 65536, v &= -v, c.lanes |= v, v = Ad(v), fg(v, i, c, d), Qo(c, v), !1 }c = c.return } while (c !== null); return !1 } var Na = Error(n(461)), xi = !1; function Si(i, s, c, d) { s.child = i === null ? ur(s, null, c, d) : or(s, i.child, c, d) } function Rd(i, s, c, d, v) { c = c.render; var b = s.ref; if ("ref" in d) { var O = {}; for (var H in d) H !== "ref" && (O[H] = d[H]) } else O = d; return Ql(s), d = dd(i, s, c, O, b, v), H = pd(), i !== null && !xi ? (sc(i, s, v), ti(i, s, v)) : (cn && H && Ku(s), s.flags |= 1, Si(i, s, d, v), s.child) } function wd(i, s, c, d, v) { if (i === null) { var b = c.type; return typeof b == "function" && !br(b) && b.defaultProps === void 0 && c.compare === null ? (s.tag = 15, s.type = b, Cd(i, s, b, d, v)) : (i = tu(c.type, null, d, s, s.mode, v), i.ref = s.ref, i.return = s, s.child = i) } if (b = i.child, !Bd(i, v)) { var O = b.memoizedProps; if (c = c.compare, c = c !== null ? c : gs, c(O, d) && i.ref === s.ref) return ti(i, s, v) } return s.flags |= 1, i = sa(b, d), i.ref = s.ref, i.return = s, s.child = i } function Cd(i, s, c, d, v) { if (i !== null) { var b = i.memoizedProps; if (gs(b, d) && i.ref === s.ref) if (xi = !1, s.pendingProps = d = b, Bd(i, v)) (i.flags & 131072) !== 0 && (xi = !0); else return s.lanes = i.lanes, ti(i, s, v) } return Ud(i, s, c, d, v) } function hg(i, s, c) { var d = s.pendingProps, v = d.children, b = (s.stateNode._pendingVisibility & 2) !== 0, O = i !== null ? i.memoizedState : null; if (Wo(i, s), d.mode === "hidden" || b) { if ((s.flags & 128) !== 0) { if (d = O !== null ? O.baseLanes | c : c, i !== null) { for (v = s.child = i.child, b = 0; v !== null;)b = b | v.lanes | v.childLanes, v = v.sibling; s.childLanes = b & ~d } else s.childLanes = 0, s.child = null; return Dd(i, s, d, c) } if ((c & 536870912) !== 0) s.memoizedState = { baseLanes: 0, cachePool: null }, i !== null && Vo(s, O !== null ? O.cachePool : null), O !== null ? $r(s, O) : Ef(), cd(s); else return s.lanes = s.childLanes = 536870912, Dd(i, s, O !== null ? O.baseLanes | c : c, c) } else O !== null ? (Vo(s, O.cachePool), $r(s, O), fr(), s.memoizedState = null) : (i !== null && Vo(s, null), Ef(), fr()); return Si(i, s, v, c), s.child } function Dd(i, s, c, d) { var v = ac(); return v = v === null ? null : { parent: Jn._currentValue, pool: v }, s.memoizedState = { baseLanes: c, cachePool: v }, i !== null && Vo(s, null), Ef(), cd(s), i !== null && uc(i, s, d, !0), null } function Wo(i, s) { var c = s.ref; if (c === null) i !== null && i.ref !== null && (s.flags |= 2097664); else { if (typeof c != "function" && typeof c != "object") throw Error(n(284)); (i === null || i.ref !== c) && (s.flags |= 2097664) } } function Ud(i, s, c, d, v) { return Ql(s), c = dd(i, s, c, d, void 0, v), d = pd(), i !== null && !xi ? (sc(i, s, v), ti(i, s, v)) : (cn && d && Ku(s), s.flags |= 1, Si(i, s, c, v), s.child) } function dg(i, s, c, d, v, b) { return Ql(s), s.updateQueue = null, c = Um(s, d, c, v), Dm(i), d = pd(), i !== null && !xi ? (sc(i, s, b), ti(i, s, b)) : (cn && d && Ku(s), s.flags |= 1, Si(i, s, c, b), s.child) } function pg(i, s, c, d, v) { if (Ql(s), s.stateNode === null) { var b = kr, O = c.contextType; typeof O == "object" && O !== null && (b = Xi(O)), b = new c(d, b), s.memoizedState = b.state !== null && b.state !== void 0 ? b.state : null, b.updater = Ed, s.stateNode = b, b._reactInternals = s, b = s.stateNode, b.props = d, b.state = s.memoizedState, b.refs = {}, ia(s), O = c.contextType, b.context = typeof O == "object" && O !== null ? Xi(O) : kr, b.state = s.memoizedState, O = c.getDerivedStateFromProps, typeof O == "function" && (bd(s, c, O, d), b.state = s.memoizedState), typeof c.getDerivedStateFromProps == "function" || typeof b.getSnapshotBeforeUpdate == "function" || typeof b.UNSAFE_componentWillMount != "function" && typeof b.componentWillMount != "function" || (O = b.state, typeof b.componentWillMount == "function" && b.componentWillMount(), typeof b.UNSAFE_componentWillMount == "function" && b.UNSAFE_componentWillMount(), O !== b.state && Ed.enqueueReplaceState(b, b.state, null), xs(s, d, b, v), qi(), b.state = s.memoizedState), typeof b.componentDidMount == "function" && (s.flags |= 4194308), d = !0 } else if (i === null) { b = s.stateNode; var H = s.memoizedProps, Z = jl(c, H); b.props = Z; var st = b.context, wt = c.contextType; O = kr, typeof wt == "object" && wt !== null && (O = Xi(wt)); var Ft = c.getDerivedStateFromProps; wt = typeof Ft == "function" || typeof b.getSnapshotBeforeUpdate == "function", H = s.pendingProps !== H, wt || typeof b.UNSAFE_componentWillReceiveProps != "function" && typeof b.componentWillReceiveProps != "function" || (H || st !== O) && rg(s, b, d, O), hi = !1; var yt = s.memoizedState; b.state = yt, xs(s, d, b, v), qi(), st = s.memoizedState, H || yt !== st || hi ? (typeof Ft == "function" && (bd(s, c, Ft, d), st = s.memoizedState), (Z = hi || sg(s, c, Z, d, yt, st, O)) ? (wt || typeof b.UNSAFE_componentWillMount != "function" && typeof b.componentWillMount != "function" || (typeof b.componentWillMount == "function" && b.componentWillMount(), typeof b.UNSAFE_componentWillMount == "function" && b.UNSAFE_componentWillMount()), typeof b.componentDidMount == "function" && (s.flags |= 4194308)) : (typeof b.componentDidMount == "function" && (s.flags |= 4194308), s.memoizedProps = d, s.memoizedState = st), b.props = d, b.state = st, b.context = O, d = Z) : (typeof b.componentDidMount == "function" && (s.flags |= 4194308), d = !1) } else { b = s.stateNode, Vf(i, s), O = s.memoizedProps, wt = jl(c, O), b.props = wt, Ft = s.pendingProps, yt = b.context, st = c.contextType, Z = kr, typeof st == "object" && st !== null && (Z = Xi(st)), H = c.getDerivedStateFromProps, (st = typeof H == "function" || typeof b.getSnapshotBeforeUpdate == "function") || typeof b.UNSAFE_componentWillReceiveProps != "function" && typeof b.componentWillReceiveProps != "function" || (O !== Ft || yt !== Z) && rg(s, b, d, Z), hi = !1, yt = s.memoizedState, b.state = yt, xs(s, d, b, v), qi(); var At = s.memoizedState; O !== Ft || yt !== At || hi || i !== null && i.dependencies !== null && jo(i.dependencies) ? (typeof H == "function" && (bd(s, c, H, d), At = s.memoizedState), (wt = hi || sg(s, c, wt, d, yt, At, Z) || i !== null && i.dependencies !== null && jo(i.dependencies)) ? (st || typeof b.UNSAFE_componentWillUpdate != "function" && typeof b.componentWillUpdate != "function" || (typeof b.componentWillUpdate == "function" && b.componentWillUpdate(d, At, Z), typeof b.UNSAFE_componentWillUpdate == "function" && b.UNSAFE_componentWillUpdate(d, At, Z)), typeof b.componentDidUpdate == "function" && (s.flags |= 4), typeof b.getSnapshotBeforeUpdate == "function" && (s.flags |= 1024)) : (typeof b.componentDidUpdate != "function" || O === i.memoizedProps && yt === i.memoizedState || (s.flags |= 4), typeof b.getSnapshotBeforeUpdate != "function" || O === i.memoizedProps && yt === i.memoizedState || (s.flags |= 1024), s.memoizedProps = d, s.memoizedState = At), b.props = d, b.state = At, b.context = Z, d = wt) : (typeof b.componentDidUpdate != "function" || O === i.memoizedProps && yt === i.memoizedState || (s.flags |= 4), typeof b.getSnapshotBeforeUpdate != "function" || O === i.memoizedProps && yt === i.memoizedState || (s.flags |= 1024), d = !1) } return b = d, Wo(i, s), d = (s.flags & 128) !== 0, b || d ? (b = s.stateNode, c = d && typeof c.getDerivedStateFromError != "function" ? null : b.render(), s.flags |= 1, i !== null && d ? (s.child = or(s, i.child, null, v), s.child = or(s, null, c, v)) : Si(i, s, c, v), s.memoizedState = b.state, i = s.child) : i = ti(i, s, v), i } function Nd(i, s, c, d) { return Io(), s.flags |= 256, Si(i, s, c, d), s.child } var Od = { dehydrated: null, treeContext: null, retryLane: 0 }; function Ti(i) { return { baseLanes: i, cachePool: dr() } } function Bf(i, s, c) { return i = i !== null ? i.childLanes & ~c : 0, s && (i |= ra), i } function mg(i, s, c) { var d = s.pendingProps, v = !1, b = (s.flags & 128) !== 0, O; if ((O = b) || (O = i !== null && i.memoizedState === null ? !1 : (ci.current & 2) !== 0), O && (v = !0, s.flags &= -129), O = (s.flags & 32) !== 0, s.flags &= -33, i === null) { if (cn) { if (v ? cr(s) : fr(), cn) { var H = Ei, Z; if (Z = H) { t: { for (Z = H, H = ja; Z.nodeType !== 8;) { if (!H) { H = null; break t } if (Z = wr(Z.nextSibling), Z === null) { H = null; break t } } H = Z } H !== null ? (s.memoizedState = { dehydrated: H, treeContext: rr !== null ? { id: Ns, overflow: lr } : null, retryLane: 536870912 }, Z = ai(18, null, null, 0), Z.stateNode = H, Z.return = s, s.child = Z, Gi = s, Ei = null, Z = !0) : Z = !1 } Z || Fl(s) } if (H = s.memoizedState, H !== null && (H = H.dehydrated, H !== null)) return H.data === "$!" ? s.lanes = 16 : s.lanes = 536870912, null; zs(s) } return H = d.children, d = d.fallback, v ? (fr(), v = s.mode, H = zd({ mode: "hidden", children: H }, v), d = vl(d, v, c, null), H.return = s, d.return = s, H.sibling = d, s.child = H, v = s.child, v.memoizedState = Ti(c), v.childLanes = Bf(i, O, c), s.memoizedState = Od, d) : (cr(s), Ld(s, H)) } if (Z = i.memoizedState, Z !== null && (H = Z.dehydrated, H !== null)) { if (b) s.flags & 256 ? (cr(s), s.flags &= -257, s = Pf(i, s, c)) : s.memoizedState !== null ? (fr(), s.child = i.child, s.flags |= 128, s = null) : (fr(), v = d.fallback, H = s.mode, d = zd({ mode: "visible", children: d.children }, H), v = vl(v, H, c, null), v.flags |= 2, d.return = s, v.return = s, d.sibling = v, s.child = d, or(s, i.child, null, c), d = s.child, d.memoizedState = Ti(c), d.childLanes = Bf(i, O, c), s.memoizedState = Od, s = v); else if (cr(s), H.data === "$!") { if (O = H.nextSibling && H.nextSibling.dataset, O) var st = O.dgst; O = st, d = Error(n(419)), d.stack = "", d.digest = O, Os({ value: d, source: null, stack: null }), s = Pf(i, s, c) } else if (xi || uc(i, s, c, !1), O = (c & i.childLanes) !== 0, xi || O) { if (O = An, O !== null) { if (d = c & -c, (d & 42) !== 0) d = 1; else switch (d) { case 2: d = 1; break; case 8: d = 4; break; case 32: d = 16; break; case 128: case 256: case 512: case 1024: case 2048: case 4096: case 8192: case 16384: case 32768: case 65536: case 131072: case 262144: case 524288: case 1048576: case 2097152: case 4194304: case 8388608: case 16777216: case 33554432: d = 64; break; case 268435456: d = 134217728; break; default: d = 0 }if (d = (d & (O.suspendedLanes | c)) !== 0 ? 0 : d, d !== 0 && d !== Z.retryLane) throw Z.retryLane = d, sr(i, d), mi(O, i, d), Na } H.data === "$?" || vc(), s = Pf(i, s, c) } else H.data === "$?" ? (s.flags |= 128, s.child = i.child, s = io.bind(null, i), H._reactRetry = s, s = null) : (i = Z.treeContext, Ei = wr(H.nextSibling), Gi = s, cn = !0, ka = null, ja = !1, i !== null && (Ln[Da++] = Ns, Ln[Da++] = lr, Ln[Da++] = rr, Ns = i.id, lr = i.overflow, rr = s), s = Ld(s, d.children), s.flags |= 4096); return s } return v ? (fr(), v = d.fallback, H = s.mode, Z = i.child, st = Z.sibling, d = sa(Z, { mode: "hidden", children: d.children }), d.subtreeFlags = Z.subtreeFlags & 31457280, st !== null ? v = sa(st, v) : (v = vl(v, H, c, null), v.flags |= 2), v.return = s, d.return = s, d.sibling = v, s.child = d, d = v, v = s.child, H = i.child.memoizedState, H === null ? H = Ti(c) : (Z = H.cachePool, Z !== null ? (st = Jn._currentValue, Z = Z.parent !== st ? { parent: st, pool: st } : Z) : Z = dr(), H = { baseLanes: H.baseLanes | c, cachePool: Z }), v.memoizedState = H, v.childLanes = Bf(i, O, c), s.memoizedState = Od, d) : (cr(s), c = i.child, i = c.sibling, c = sa(c, { mode: "visible", children: d.children }), c.return = s, c.sibling = null, i !== null && (O = s.deletions, O === null ? (s.deletions = [i], s.flags |= 16) : O.push(i)), s.child = c, s.memoizedState = null, c) } function Ld(i, s) { return s = zd({ mode: "visible", children: s }, i.mode), s.return = i, i.child = s } function zd(i, s) { return Id(i, s, 0, null) } function Pf(i, s, c) { return or(s, i.child, null, c), i = Ld(s, s.pendingProps.children), i.flags |= 2, s.memoizedState = null, i } function If(i, s, c) { i.lanes |= s; var d = i.alternate; d !== null && (d.lanes |= s), Oa(i.return, s, c) } function ul(i, s, c, d, v) { var b = i.memoizedState; b === null ? i.memoizedState = { isBackwards: s, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: v } : (b.isBackwards = s, b.rendering = null, b.renderingStartTime = 0, b.last = d, b.tail = c, b.tailMode = v) } function Zl(i, s, c) { var d = s.pendingProps, v = d.revealOrder, b = d.tail; if (Si(i, s, d.children, c), d = ci.current, (d & 2) !== 0) d = d & 1 | 2, s.flags |= 128; else { if (i !== null && (i.flags & 128) !== 0) t: for (i = s.child; i !== null;) { if (i.tag === 13) i.memoizedState !== null && If(i, c, s); else if (i.tag === 19) If(i, c, s); else if (i.child !== null) { i.child.return = i, i = i.child; continue } if (i === s) break t; for (; i.sibling === null;) { if (i.return === null || i.return === s) break t; i = i.return } i.sibling.return = i.return, i = i.sibling } d &= 1 } switch (Jt(ci, d), v) { case "forwards": for (c = s.child, v = null; c !== null;)i = c.alternate, i !== null && Fo(i) === null && (v = c), c = c.sibling; c = v, c === null ? (v = s.child, s.child = null) : (v = c.sibling, c.sibling = null), ul(s, !1, v, c, b); break; case "backwards": for (c = null, v = s.child, s.child = null; v !== null;) { if (i = v.alternate, i !== null && Fo(i) === null) { s.child = v; break } i = v.sibling, v.sibling = c, c = v, v = i } ul(s, !0, c, null, b); break; case "together": ul(s, !1, null, null, void 0); break; default: s.memoizedState = null }return s.child } function ti(i, s, c) { if (i !== null && (s.dependencies = i.dependencies), Ts |= s.lanes, (c & s.childLanes) === 0) if (i !== null) { if (uc(i, s, c, !1), (c & s.childLanes) === 0) return null } else return null; if (i !== null && s.child !== i.child) throw Error(n(153)); if (s.child !== null) { for (i = s.child, c = sa(i, i.pendingProps), s.child = c, c.return = s; i.sibling !== null;)i = i.sibling, c = c.sibling = sa(i, i.pendingProps), c.return = s; c.sibling = null } return s.child } function Bd(i, s) { return (i.lanes & s) !== 0 ? !0 : (i = i.dependencies, !!(i !== null && jo(i))) } function gy(i, s, c) { switch (s.tag) { case 3: de(s, s.stateNode.containerInfo), cl(s, Jn, i.memoizedState.cache), Io(); break; case 27: case 5: ee(s); break; case 4: de(s, s.stateNode.containerInfo); break; case 10: cl(s, s.type, s.memoizedProps.value); break; case 13: var d = s.memoizedState; if (d !== null) return d.dehydrated !== null ? (cr(s), s.flags |= 128, null) : (c & s.child.childLanes) !== 0 ? mg(i, s, c) : (cr(s), i = ti(i, s, c), i !== null ? i.sibling : null); cr(s); break; case 19: var v = (i.flags & 128) !== 0; if (d = (c & s.childLanes) !== 0, d || (uc(i, s, c, !1), d = (c & s.childLanes) !== 0), v) { if (d) return Zl(i, s, c); s.flags |= 128 } if (v = s.memoizedState, v !== null && (v.rendering = null, v.tail = null, v.lastEffect = null), Jt(ci, ci.current), d) break; return null; case 22: case 23: return s.lanes = 0, hg(i, s, c); case 24: cl(s, Jn, i.memoizedState.cache) }return ti(i, s, c) } function oc(i, s, c) { if (i !== null) if (i.memoizedProps !== s.pendingProps) xi = !0; else { if (!Bd(i, c) && (s.flags & 128) === 0) return xi = !1, gy(i, s, c); xi = (i.flags & 131072) !== 0 } else xi = !1, cn && (s.flags & 1048576) !== 0 && od(s, Qu, s.index); switch (s.lanes = 0, s.tag) { case 16: t: { i = s.pendingProps; var d = s.elementType, v = d._init; if (d = v(d._payload), s.type = d, typeof d == "function") br(d) ? (i = jl(d, i), s.tag = 1, s = pg(null, s, d, i, c)) : (s.tag = 0, s = Ud(null, s, d, i, c)); else { if (d != null) { if (v = d.$$typeof, v === A) { s.tag = 11, s = Rd(null, s, d, i, c); break t } else if (v === T) { s.tag = 14, s = wd(null, s, d, i, c); break t } } throw s = q(d) || d, Error(n(306, s, "")) } } return s; case 0: return Ud(i, s, s.type, s.pendingProps, c); case 1: return d = s.type, v = jl(d, s.pendingProps), pg(i, s, d, v, c); case 3: t: { if (de(s, s.stateNode.containerInfo), i === null) throw Error(n(387)); var b = s.pendingProps; v = s.memoizedState, d = v.element, Vf(i, s), xs(s, b, null, c); var O = s.memoizedState; if (b = O.cache, cl(s, Jn, b), b !== v.cache && Hf(s, [Jn], c, !0), qi(), b = O.element, v.isDehydrated) if (v = { element: b, isDehydrated: !1, cache: O.cache }, s.updateQueue.baseState = v, s.memoizedState = v, s.flags & 256) { s = Nd(i, s, b, c); break t } else if (b !== d) { d = pa(Error(n(424)), s), Os(d), s = Nd(i, s, b, c); break t } else for (Ei = wr(s.stateNode.containerInfo.firstChild), Gi = s, cn = !0, ka = null, ja = !0, c = ur(s, null, b, c), s.child = c; c;)c.flags = c.flags & -3 | 4096, c = c.sibling; else { if (Io(), b === d) { s = ti(i, s, c); break t } Si(i, s, b, c) } s = s.child } return s; case 26: return Wo(i, s), i === null ? (c = AS(s.type, null, s.pendingProps, null)) ? s.memoizedState = c : cn || (c = s.type, i = s.pendingProps, d = Mg(Ut.current).createElement(c), d[kn] = s, d[Ye] = i, oa(d, c, i), ht(d), s.stateNode = d) : s.memoizedState = AS(s.type, i.memoizedProps, s.pendingProps, i.memoizedState), null; case 27: return ee(s), i === null && cn && (d = s.stateNode = bS(s.type, s.pendingProps, Ut.current), Gi = s, ja = !0, Ei = wr(d.firstChild)), d = s.pendingProps.children, i !== null || cn ? Si(i, s, d, c) : s.child = or(s, null, d, c), Wo(i, s), s.child; case 5: return i === null && cn && ((v = d = Ei) && (d = qT(d, s.type, s.pendingProps, ja), d !== null ? (s.stateNode = d, Gi = s, Ei = wr(d.firstChild), ja = !1, v = !0) : v = !1), v || Fl(s)), ee(s), v = s.type, b = s.pendingProps, O = i !== null ? i.memoizedProps : null, d = b.children, Ry(v, b) ? d = null : O !== null && Ry(v, O) && (s.flags |= 32), s.memoizedState !== null && (v = dd(i, s, fy, null, null, c), kd._currentValue = v), Wo(i, s), Si(i, s, d, c), s.child; case 6: return i === null && cn && ((i = c = Ei) && (c = YT(c, s.pendingProps, ja), c !== null ? (s.stateNode = c, Gi = s, Ei = null, i = !0) : i = !1), i || Fl(s)), null; case 13: return mg(i, s, c); case 4: return de(s, s.stateNode.containerInfo), d = s.pendingProps, i === null ? s.child = or(s, null, d, c) : Si(i, s, d, c), s.child; case 11: return Rd(i, s, s.type, s.pendingProps, c); case 7: return Si(i, s, s.pendingProps, c), s.child; case 8: return Si(i, s, s.pendingProps.children, c), s.child; case 12: return Si(i, s, s.pendingProps.children, c), s.child; case 10: return d = s.pendingProps, cl(s, s.type, d.value), Si(i, s, d.children, c), s.child; case 9: return v = s.type._context, d = s.pendingProps.children, Ql(s), v = Xi(v), d = d(v), s.flags |= 1, Si(i, s, d, c), s.child; case 14: return wd(i, s, s.type, s.pendingProps, c); case 15: return Cd(i, s, s.type, s.pendingProps, c); case 19: return Zl(i, s, c); case 22: return hg(i, s, c); case 24: return Ql(s), d = Xi(Jn), i === null ? (v = ac(), v === null && (v = An, b = fd(), v.pooledCache = b, b.refCount++, b !== null && (v.pooledCacheLanes |= c), v = b), s.memoizedState = { parent: d, cache: v }, ia(s), cl(s, Jn, v)) : ((i.lanes & c) !== 0 && (Vf(i, s), xs(s, null, null, c), qi()), v = i.memoizedState, b = s.memoizedState, v.parent !== d ? (v = { parent: d, cache: d }, s.memoizedState = v, s.lanes === 0 && (s.memoizedState = s.updateQueue.baseState = v), cl(s, Jn, d)) : (d = b.cache, cl(s, Jn, d), d !== v.cache && Hf(s, [Jn], c, !0))), Si(i, s, s.pendingProps.children, c), s.child; case 29: throw s.pendingProps }throw Error(n(156, s.tag)) } var ko = kt(null), Hs = null, _s = null; function cl(i, s, c) { Jt(ko, s._currentValue), s._currentValue = c } function vr(i) { i._currentValue = ko.current, Me(ko) } function Oa(i, s, c) { for (; i !== null;) { var d = i.alternate; if ((i.childLanes & s) !== s ? (i.childLanes |= s, d !== null && (d.childLanes |= s)) : d !== null && (d.childLanes & s) !== s && (d.childLanes |= s), i === c) break; i = i.return } } function Hf(i, s, c, d) { var v = i.child; for (v !== null && (v.return = i); v !== null;) { var b = v.dependencies; if (b !== null) { var O = v.child; b = b.firstContext; t: for (; b !== null;) { var H = b; b = v; for (var Z = 0; Z < s.length; Z++)if (H.context === s[Z]) { b.lanes |= c, H = b.alternate, H !== null && (H.lanes |= c), Oa(b.return, c, i), d || (O = null); break t } b = H.next } } else if (v.tag === 18) { if (O = v.return, O === null) throw Error(n(341)); O.lanes |= c, b = O.alternate, b !== null && (b.lanes |= c), Oa(O, c, i), O = null } else O = v.child; if (O !== null) O.return = v; else for (O = v; O !== null;) { if (O === i) { O = null; break } if (v = O.sibling, v !== null) { v.return = O.return, O = v; break } O = O.return } v = O } } function uc(i, s, c, d) { i = null; for (var v = s, b = !1; v !== null;) { if (!b) { if ((v.flags & 524288) !== 0) b = !0; else if ((v.flags & 262144) !== 0) break } if (v.tag === 10) { var O = v.alternate; if (O === null) throw Error(n(387)); if (O = O.memoizedProps, O !== null) { var H = v.type; fa(v.pendingProps.value, O.value) || (i !== null ? i.push(H) : i = [H]) } } else if (v === W.current) { if (O = v.alternate, O === null) throw Error(n(387)); O.memoizedState.memoizedState !== v.memoizedState.memoizedState && (i !== null ? i.push(kd) : i = [kd]) } v = v.return } i !== null && Hf(s, i, c, d), s.flags |= 262144 } function jo(i) { for (i = i.firstContext; i !== null;) { if (!fa(i.context._currentValue, i.memoizedValue)) return !0; i = i.next } return !1 } function Ql(i) { Hs = i, _s = null, i = i.dependencies, i !== null && (i.firstContext = null) } function Xi(i) { return Zo(Hs, i) } function Ff(i, s) { return Hs === null && Ql(i), Zo(i, s) } function Zo(i, s) { var c = s._currentValue; if (s = { context: s, memoizedValue: c, next: null }, _s === null) { if (i === null) throw Error(n(308)); _s = s, i.dependencies = { lanes: 0, firstContext: s }, i.flags |= 524288 } else _s = _s.next = s; return c } var hi = !1; function ia(i) { i.updateQueue = { baseState: i.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, lanes: 0, hiddenCallbacks: null }, callbacks: null } } function Vf(i, s) { i = i.updateQueue, s.updateQueue === i && (s.updateQueue = { baseState: i.baseState, firstBaseUpdate: i.firstBaseUpdate, lastBaseUpdate: i.lastBaseUpdate, shared: i.shared, callbacks: null }) } function La(i) { return { lane: i, tag: 0, payload: null, callback: null, next: null } } function za(i, s, c) { var d = i.updateQueue; if (d === null) return null; if (d = d.shared, (Ie & 2) !== 0) { var v = d.pending; return v === null ? s.next = s : (s.next = v.next, v.next = s), d.pending = s, s = Zu(i), ju(i, null, c), s } return ku(i, d, s, c), Zu(i) } function fl(i, s, c) { if (s = s.updateQueue, s !== null && (s = s.shared, (c & 4194176) !== 0)) { var d = s.lanes; d &= i.pendingLanes, c |= d, s.lanes = c, qa(i, c) } } function Qo(i, s) { var c = i.updateQueue, d = i.alternate; if (d !== null && (d = d.updateQueue, c === d)) { var v = null, b = null; if (c = c.firstBaseUpdate, c !== null) { do { var O = { lane: c.lane, tag: c.tag, payload: c.payload, callback: null, next: null }; b === null ? v = b = O : b = b.next = O, c = c.next } while (c !== null); b === null ? v = b = s : b = b.next = s } else v = b = s; c = { baseState: d.baseState, firstBaseUpdate: v, lastBaseUpdate: b, shared: d.shared, callbacks: d.callbacks }, i.updateQueue = c; return } i = c.lastBaseUpdate, i === null ? c.firstBaseUpdate = s : i.next = s, c.lastBaseUpdate = s } var va = !1; function qi() { if (va) { var i = nl; if (i !== null) throw i } } function xs(i, s, c, d) { va = !1; var v = i.updateQueue; hi = !1; var b = v.firstBaseUpdate, O = v.lastBaseUpdate, H = v.shared.pending; if (H !== null) { v.shared.pending = null; var Z = H, st = Z.next; Z.next = null, O === null ? b = st : O.next = st, O = Z; var wt = i.alternate; wt !== null && (wt = wt.updateQueue, H = wt.lastBaseUpdate, H !== O && (H === null ? wt.firstBaseUpdate = st : H.next = st, wt.lastBaseUpdate = Z)) } if (b !== null) { var Ft = v.baseState; O = 0, wt = st = Z = null, H = b; do { var yt = H.lane & -536870913, At = yt !== H.lane; if (At ? (Ae & yt) === yt : (d & yt) === yt) { yt !== 0 && yt === Xl && (va = !0), wt !== null && (wt = wt.next = { lane: 0, tag: H.tag, payload: H.payload, callback: null, next: null }); t: { var xe = i, Fe = H; yt = s; var gi = c; switch (Fe.tag) { case 1: if (xe = Fe.payload, typeof xe == "function") { Ft = xe.call(gi, Ft, yt); break t } Ft = xe; break t; case 3: xe.flags = xe.flags & -65537 | 128; case 0: if (xe = Fe.payload, yt = typeof xe == "function" ? xe.call(gi, Ft, yt) : xe, yt == null) break t; Ft = L({}, Ft, yt); break t; case 2: hi = !0 } } yt = H.callback, yt !== null && (i.flags |= 64, At && (i.flags |= 8192), At = v.callbacks, At === null ? v.callbacks = [yt] : At.push(yt)) } else At = { lane: yt, tag: H.tag, payload: H.payload, callback: H.callback, next: null }, wt === null ? (st = wt = At, Z = Ft) : wt = wt.next = At, O |= yt; if (H = H.next, H === null) { if (H = v.shared.pending, H === null) break; At = H, H = At.next, At.next = null, v.lastBaseUpdate = At, v.shared.pending = null } } while (!0); wt === null && (Z = Ft), v.baseState = Z, v.firstBaseUpdate = st, v.lastBaseUpdate = wt, b === null && (v.shared.lanes = 0), Ts |= O, i.lanes = O, i.memoizedState = Ft } } function Fs(i, s) { if (typeof i != "function") throw Error(n(191, i)); i.call(s) } function Vs(i, s) { var c = i.callbacks; if (c !== null) for (i.callbacks = null, i = 0; i < c.length; i++)Fs(c[i], s) } function ei(i, s) { try { var c = s.updateQueue, d = c !== null ? c.lastEffect : null; if (d !== null) { var v = d.next; c = v; do { if ((c.tag & i) === i) { d = void 0; var b = c.create, O = c.inst; d = b(), O.destroy = d } c = c.next } while (c !== v) } } catch (H) { qt(s, s.return, H) } } function Za(i, s, c) { try { var d = s.updateQueue, v = d !== null ? d.lastEffect : null; if (v !== null) { var b = v.next; d = b; do { if ((d.tag & i) === i) { var O = d.inst, H = O.destroy; if (H !== void 0) { O.destroy = void 0, v = s; var Z = c; try { H() } catch (st) { qt(v, Z, st) } } } d = d.next } while (d !== b) } } catch (st) { qt(s, s.return, st) } } function yr(i) { var s = i.updateQueue; if (s !== null) { var c = i.stateNode; try { Vs(s, c) } catch (d) { qt(i, i.return, d) } } } function cc(i, s, c) { c.props = jl(i.type, i.memoizedProps), c.state = i.memoizedState; try { c.componentWillUnmount() } catch (d) { qt(i, s, d) } } function ni(i, s) { try { var c = i.ref; if (c !== null) { var d = i.stateNode; switch (i.tag) { case 26: case 27: case 5: var v = d; break; default: v = d }typeof c == "function" ? i.refCleanup = c(v) : c.current = v } } catch (b) { qt(i, s, b) } } function Tn(i, s) { var c = i.ref, d = i.refCleanup; if (c !== null) if (typeof d == "function") try { d() } catch (v) { qt(i, s, v) } finally { i.refCleanup = null, i = i.alternate, i != null && (i.refCleanup = null) } else if (typeof c == "function") try { c(null) } catch (v) { qt(i, s, v) } else c.current = null } function fn(i) { var s = i.type, c = i.memoizedProps, d = i.stateNode; try { t: switch (s) { case "button": case "input": case "select": case "textarea": c.autoFocus && d.focus(); break t; case "img": c.src ? d.src = c.src : c.srcSet && (d.srcset = c.srcSet) } } catch (v) { qt(i, i.return, v) } } function Qa(i, s, c) { try { var d = i.stateNode; HT(d, i.type, c, s), d[Ye] = s } catch (v) { qt(i, i.return, v) } } function Ss(i) { return i.tag === 5 || i.tag === 3 || i.tag === 26 || i.tag === 27 || i.tag === 4 } function fc(i) { t: for (; ;) { for (; i.sibling === null;) { if (i.return === null || Ss(i.return)) return null; i = i.return } for (i.sibling.return = i.return, i = i.sibling; i.tag !== 5 && i.tag !== 6 && i.tag !== 27 && i.tag !== 18;) { if (i.flags & 2 || i.child === null || i.tag === 4) continue t; i.child.return = i, i = i.child } if (!(i.flags & 2)) return i.stateNode } } function ya(i, s, c) { var d = i.tag; if (d === 5 || d === 6) i = i.stateNode, s ? c.nodeType === 8 ? c.parentNode.insertBefore(i, s) : c.insertBefore(i, s) : (c.nodeType === 8 ? (s = c.parentNode, s.insertBefore(i, c)) : (s = c, s.appendChild(i)), c = c._reactRootContainer, c != null || s.onclick !== null || (s.onclick = Sg)); else if (d !== 4 && d !== 27 && (i = i.child, i !== null)) for (ya(i, s, c), i = i.sibling; i !== null;)ya(i, s, c), i = i.sibling } function _r(i, s, c) { var d = i.tag; if (d === 5 || d === 6) i = i.stateNode, s ? c.insertBefore(i, s) : c.appendChild(i); else if (d !== 4 && d !== 27 && (i = i.child, i !== null)) for (_r(i, s, c), i = i.sibling; i !== null;)_r(i, s, c), i = i.sibling } var Ms = !1, In = !1, hl = !1, Gf = typeof WeakSet == "function" ? WeakSet : Set, ii = null, Xf = !1; function Ko(i, s) { if (i = i.containerInfo, Ty = wg, i = nd(i), Yu(i)) { if ("selectionStart" in i) var c = { start: i.selectionStart, end: i.selectionEnd }; else t: { c = (c = i.ownerDocument) && c.defaultView || window; var d = c.getSelection && c.getSelection(); if (d && d.rangeCount !== 0) { c = d.anchorNode; var v = d.anchorOffset, b = d.focusNode; d = d.focusOffset; try { c.nodeType, b.nodeType } catch { c = null; break t } var O = 0, H = -1, Z = -1, st = 0, wt = 0, Ft = i, yt = null; e: for (; ;) { for (var At; Ft !== c || v !== 0 && Ft.nodeType !== 3 || (H = O + v), Ft !== b || d !== 0 && Ft.nodeType !== 3 || (Z = O + d), Ft.nodeType === 3 && (O += Ft.nodeValue.length), (At = Ft.firstChild) !== null;)yt = Ft, Ft = At; for (; ;) { if (Ft === i) break e; if (yt === c && ++st === v && (H = O), yt === b && ++wt === d && (Z = O), (At = Ft.nextSibling) !== null) break; Ft = yt, yt = Ft.parentNode } Ft = At } c = H === -1 || Z === -1 ? null : { start: H, end: Z } } else c = null } c = c || { start: 0, end: 0 } } else c = null; for (Ay = { focusedElem: i, selectionRange: c }, wg = !1, ii = s; ii !== null;)if (s = ii, i = s.child, (s.subtreeFlags & 1028) !== 0 && i !== null) i.return = s, ii = i; else for (; ii !== null;) { switch (s = ii, b = s.alternate, i = s.flags, s.tag) { case 0: break; case 11: case 15: break; case 1: if ((i & 1024) !== 0 && b !== null) { i = void 0, c = s, v = b.memoizedProps, b = b.memoizedState, d = c.stateNode; try { var xe = jl(c.type, v, c.elementType === c.type); i = d.getSnapshotBeforeUpdate(xe, b), d.__reactInternalSnapshotBeforeUpdate = i } catch (Fe) { qt(c, c.return, Fe) } } break; case 3: if ((i & 1024) !== 0) { if (i = s.stateNode.containerInfo, c = i.nodeType, c === 9) Dy(i); else if (c === 1) switch (i.nodeName) { case "HEAD": case "HTML": case "BODY": Dy(i); break; default: i.textContent = "" } } break; case 5: case 26: case 27: case 6: case 4: case 17: break; default: if ((i & 1024) !== 0) throw Error(n(163)) }if (i = s.sibling, i !== null) { i.return = s.return, ii = i; break } ii = s.return } return xe = Xf, Xf = !1, xe } function Jo(i, s, c) { var d = c.flags; switch (c.tag) { case 0: case 11: case 15: Gs(i, c), d & 4 && ei(5, c); break; case 1: if (Gs(i, c), d & 4) if (i = c.stateNode, s === null) try { i.componentDidMount() } catch (H) { qt(c, c.return, H) } else { var v = jl(c.type, s.memoizedProps); s = s.memoizedState; try { i.componentDidUpdate(v, s, i.__reactInternalSnapshotBeforeUpdate) } catch (H) { qt(c, c.return, H) } } d & 64 && yr(c), d & 512 && ni(c, c.return); break; case 3: if (Gs(i, c), d & 64 && (d = c.updateQueue, d !== null)) { if (i = null, c.child !== null) switch (c.child.tag) { case 27: case 5: i = c.child.stateNode; break; case 1: i = c.child.stateNode }try { Vs(d, i) } catch (H) { qt(c, c.return, H) } } break; case 26: Gs(i, c), d & 512 && ni(c, c.return); break; case 27: case 5: Gs(i, c), s === null && d & 4 && fn(c), d & 512 && ni(c, c.return); break; case 12: Gs(i, c); break; case 13: Gs(i, c), d & 4 && gg(i, c); break; case 22: if (v = c.memoizedState !== null || Ms, !v) { s = s !== null && s.memoizedState !== null || In; var b = Ms, O = In; Ms = v, (In = s) && !O ? Es(i, c, (c.subtreeFlags & 8772) !== 0) : Gs(i, c), Ms = b, In = O } d & 512 && (c.memoizedProps.mode === "manual" ? ni(c, c.return) : Tn(c, c.return)); break; default: Gs(i, c) } } function qf(i) { var s = i.alternate; s !== null && (i.alternate = null, qf(s)), i.child = null, i.deletions = null, i.sibling = null, i.tag === 5 && (s = i.stateNode, s !== null && Ul(s)), i.stateNode = null, i.return = null, i.dependencies = null, i.memoizedProps = null, i.memoizedState = null, i.pendingProps = null, i.stateNode = null, i.updateQueue = null } var Hn = null, Ai = !1; function Yi(i, s, c) { for (c = c.child; c !== null;)Yf(i, s, c), c = c.sibling } function Yf(i, s, c) { if (he && typeof he.onCommitFiberUnmount == "function") try { he.onCommitFiberUnmount(ge, c) } catch { } switch (c.tag) { case 26: In || Tn(c, s), Yi(i, s, c), c.memoizedState ? c.memoizedState.count-- : c.stateNode && (c = c.stateNode, c.parentNode.removeChild(c)); break; case 27: In || Tn(c, s); var d = Hn, v = Ai; for (Hn = c.stateNode, Yi(i, s, c), c = c.stateNode, s = c.attributes; s.length;)c.removeAttributeNode(s[0]); Ul(c), Hn = d, Ai = v; break; case 5: In || Tn(c, s); case 6: v = Hn; var b = Ai; if (Hn = null, Yi(i, s, c), Hn = v, Ai = b, Hn !== null) if (Ai) try { i = Hn, d = c.stateNode, i.nodeType === 8 ? i.parentNode.removeChild(d) : i.removeChild(d) } catch (O) { qt(c, s, O) } else try { Hn.removeChild(c.stateNode) } catch (O) { qt(c, s, O) } break; case 18: Hn !== null && (Ai ? (s = Hn, c = c.stateNode, s.nodeType === 8 ? Cy(s.parentNode, c) : s.nodeType === 1 && Cy(s, c), Kd(s)) : Cy(Hn, c.stateNode)); break; case 4: d = Hn, v = Ai, Hn = c.stateNode.containerInfo, Ai = !0, Yi(i, s, c), Hn = d, Ai = v; break; case 0: case 11: case 14: case 15: In || Za(2, c, s), In || Za(4, c, s), Yi(i, s, c); break; case 1: In || (Tn(c, s), d = c.stateNode, typeof d.componentWillUnmount == "function" && cc(c, s, d)), Yi(i, s, c); break; case 21: Yi(i, s, c); break; case 22: In || Tn(c, s), In = (d = In) || c.memoizedState !== null, Yi(i, s, c), In = d; break; default: Yi(i, s, c) } } function gg(i, s) { if (s.memoizedState === null && (i = s.alternate, i !== null && (i = i.memoizedState, i !== null && (i = i.dehydrated, i !== null)))) try { Kd(i) } catch (c) { qt(s, s.return, c) } } function hc(i) { switch (i.tag) { case 13: case 19: var s = i.stateNode; return s === null && (s = i.stateNode = new Gf), s; case 22: return i = i.stateNode, s = i._retryCache, s === null && (s = i._retryCache = new Gf), s; default: throw Error(n(435, i.tag)) } } function dc(i, s) { var c = hc(i); s.forEach(function (d) { var v = vt.bind(null, i, d); c.has(d) || (c.add(d), d.then(v, v)) }) } function aa(i, s) { var c = s.deletions; if (c !== null) for (var d = 0; d < c.length; d++) { var v = c[d], b = i, O = s, H = O; t: for (; H !== null;) { switch (H.tag) { case 27: case 5: Hn = H.stateNode, Ai = !1; break t; case 3: Hn = H.stateNode.containerInfo, Ai = !0; break t; case 4: Hn = H.stateNode.containerInfo, Ai = !0; break t }H = H.return } if (Hn === null) throw Error(n(160)); Yf(b, O, v), Hn = null, Ai = !1, b = v.alternate, b !== null && (b.return = null), v.return = null } if (s.subtreeFlags & 13878) for (s = s.child; s !== null;)Kl(s, i), s = s.sibling } var Wi = null; function Kl(i, s) { var c = i.alternate, d = i.flags; switch (i.tag) { case 0: case 11: case 14: case 15: aa(s, i), ki(i), d & 4 && (Za(3, i, i.return), ei(3, i), Za(5, i, i.return)); break; case 1: aa(s, i), ki(i), d & 512 && (In || c === null || Tn(c, c.return)), d & 64 && Ms && (i = i.updateQueue, i !== null && (d = i.callbacks, d !== null && (c = i.shared.hiddenCallbacks, i.shared.hiddenCallbacks = c === null ? d : c.concat(d)))); break; case 26: var v = Wi; if (aa(s, i), ki(i), d & 512 && (In || c === null || Tn(c, c.return)), d & 4) { var b = c !== null ? c.memoizedState : null; if (d = i.memoizedState, c === null) if (d === null) if (i.stateNode === null) { t: { d = i.type, c = i.memoizedProps, v = v.ownerDocument || v; e: switch (d) { case "title": b = v.getElementsByTagName("title")[0], (!b || b[Qs] || b[kn] || b.namespaceURI === "http://www.w3.org/2000/svg" || b.hasAttribute("itemprop")) && (b = v.createElement(d), v.head.insertBefore(b, v.querySelector("head > title"))), oa(b, d, c), b[kn] = i, ht(b), d = b; break t; case "link": var O = CS("link", "href", v).get(d + (c.href || "")); if (O) { for (var H = 0; H < O.length; H++)if (b = O[H], b.getAttribute("href") === (c.href == null ? null : c.href) && b.getAttribute("rel") === (c.rel == null ? null : c.rel) && b.getAttribute("title") === (c.title == null ? null : c.title) && b.getAttribute("crossorigin") === (c.crossOrigin == null ? null : c.crossOrigin)) { O.splice(H, 1); break e } } b = v.createElement(d), oa(b, d, c), v.head.appendChild(b); break; case "meta": if (O = CS("meta", "content", v).get(d + (c.content || ""))) { for (H = 0; H < O.length; H++)if (b = O[H], b.getAttribute("content") === (c.content == null ? null : "" + c.content) && b.getAttribute("name") === (c.name == null ? null : c.name) && b.getAttribute("property") === (c.property == null ? null : c.property) && b.getAttribute("http-equiv") === (c.httpEquiv == null ? null : c.httpEquiv) && b.getAttribute("charset") === (c.charSet == null ? null : c.charSet)) { O.splice(H, 1); break e } } b = v.createElement(d), oa(b, d, c), v.head.appendChild(b); break; default: throw Error(n(468, d)) }b[kn] = i, ht(b), d = b } i.stateNode = d } else DS(v, i.type, i.stateNode); else i.stateNode = wS(v, d, i.memoizedProps); else b !== d ? (b === null ? c.stateNode !== null && (c = c.stateNode, c.parentNode.removeChild(c)) : b.count--, d === null ? DS(v, i.type, i.stateNode) : wS(v, d, i.memoizedProps)) : d === null && i.stateNode !== null && Qa(i, i.memoizedProps, c.memoizedProps) } break; case 27: if (d & 4 && i.alternate === null) { v = i.stateNode, b = i.memoizedProps; try { for (var Z = v.firstChild; Z;) { var st = Z.nextSibling, wt = Z.nodeName; Z[Qs] || wt === "HEAD" || wt === "BODY" || wt === "SCRIPT" || wt === "STYLE" || wt === "LINK" && Z.rel.toLowerCase() === "stylesheet" || v.removeChild(Z), Z = st } for (var Ft = i.type, yt = v.attributes; yt.length;)v.removeAttributeNode(yt[0]); oa(v, Ft, b), v[kn] = i, v[Ye] = b } catch (xe) { qt(i, i.return, xe) } } case 5: if (aa(s, i), ki(i), d & 512 && (In || c === null || Tn(c, c.return)), i.flags & 32) { v = i.stateNode; try { $i(v, "") } catch (xe) { qt(i, i.return, xe) } } d & 4 && i.stateNode != null && (v = i.memoizedProps, Qa(i, v, c !== null ? c.memoizedProps : v)), d & 1024 && (hl = !0); break; case 6: if (aa(s, i), ki(i), d & 4) { if (i.stateNode === null) throw Error(n(162)); d = i.memoizedProps, c = i.stateNode; try { c.nodeValue = d } catch (xe) { qt(i, i.return, xe) } } break; case 3: if (Tg = null, v = Wi, Wi = bg(s.containerInfo), aa(s, i), Wi = v, ki(i), d & 4 && c !== null && c.memoizedState.isDehydrated) try { Kd(s.containerInfo) } catch (xe) { qt(i, i.return, xe) } hl && (hl = !1, dl(i)); break; case 4: d = Wi, Wi = bg(i.stateNode.containerInfo), aa(s, i), ki(i), Wi = d; break; case 12: aa(s, i), ki(i); break; case 13: aa(s, i), ki(i), i.child.flags & 8192 && i.memoizedState !== null != (c !== null && c.memoizedState !== null) && (ke = bt()), d & 4 && (d = i.updateQueue, d !== null && (i.updateQueue = null, dc(i, d))); break; case 22: if (d & 512 && (In || c === null || Tn(c, c.return)), Z = i.memoizedState !== null, st = c !== null && c.memoizedState !== null, wt = Ms, Ft = In, Ms = wt || Z, In = Ft || st, aa(s, i), In = Ft, Ms = wt, ki(i), s = i.stateNode, s._current = i, s._visibility &= -3, s._visibility |= s._pendingVisibility & 2, d & 8192 && (s._visibility = Z ? s._visibility & -2 : s._visibility | 1, Z && (s = Ms || In, c === null || st || s || bs(i)), i.memoizedProps === null || i.memoizedProps.mode !== "manual")) t: for (c = null, s = i; ;) { if (s.tag === 5 || s.tag === 26 || s.tag === 27) { if (c === null) { st = c = s; try { if (v = st.stateNode, Z) b = v.style, typeof b.setProperty == "function" ? b.setProperty("display", "none", "important") : b.display = "none"; else { O = st.stateNode, H = st.memoizedProps.style; var At = H != null && H.hasOwnProperty("display") ? H.display : null; O.style.display = At == null || typeof At == "boolean" ? "" : ("" + At).trim() } } catch (xe) { qt(st, st.return, xe) } } } else if (s.tag === 6) { if (c === null) { st = s; try { st.stateNode.nodeValue = Z ? "" : st.memoizedProps } catch (xe) { qt(st, st.return, xe) } } } else if ((s.tag !== 22 && s.tag !== 23 || s.memoizedState === null || s === i) && s.child !== null) { s.child.return = s, s = s.child; continue } if (s === i) break t; for (; s.sibling === null;) { if (s.return === null || s.return === i) break t; c === s && (c = null), s = s.return } c === s && (c = null), s.sibling.return = s.return, s = s.sibling } d & 4 && (d = i.updateQueue, d !== null && (c = d.retryQueue, c !== null && (d.retryQueue = null, dc(i, c)))); break; case 19: aa(s, i), ki(i), d & 4 && (d = i.updateQueue, d !== null && (i.updateQueue = null, dc(i, d))); break; case 21: break; default: aa(s, i), ki(i) } } function ki(i) { var s = i.flags; if (s & 2) { try { if (i.tag !== 27) { t: { for (var c = i.return; c !== null;) { if (Ss(c)) { var d = c; break t } c = c.return } throw Error(n(160)) } switch (d.tag) { case 27: var v = d.stateNode, b = fc(i); _r(i, b, v); break; case 5: var O = d.stateNode; d.flags & 32 && ($i(O, ""), d.flags &= -33); var H = fc(i); _r(i, H, O); break; case 3: case 4: var Z = d.stateNode.containerInfo, st = fc(i); ya(i, st, Z); break; default: throw Error(n(161)) } } } catch (wt) { qt(i, i.return, wt) } i.flags &= -3 } s & 4096 && (i.flags &= -4097) } function dl(i) { if (i.subtreeFlags & 1024) for (i = i.child; i !== null;) { var s = i; dl(s), s.tag === 5 && s.flags & 1024 && s.stateNode.reset(), i = i.sibling } } function Gs(i, s) { if (s.subtreeFlags & 8772) for (s = s.child; s !== null;)Jo(i, s.alternate, s), s = s.sibling } function bs(i) { for (i = i.child; i !== null;) { var s = i; switch (s.tag) { case 0: case 11: case 14: case 15: Za(4, s, s.return), bs(s); break; case 1: Tn(s, s.return); var c = s.stateNode; typeof c.componentWillUnmount == "function" && cc(s, s.return, c), bs(s); break; case 26: case 27: case 5: Tn(s, s.return), bs(s); break; case 22: Tn(s, s.return), s.memoizedState === null && bs(s); break; default: bs(s) }i = i.sibling } } function Es(i, s, c) { for (c = c && (s.subtreeFlags & 8772) !== 0, s = s.child; s !== null;) { var d = s.alternate, v = i, b = s, O = b.flags; switch (b.tag) { case 0: case 11: case 15: Es(v, b, c), ei(4, b); break; case 1: if (Es(v, b, c), d = b, v = d.stateNode, typeof v.componentDidMount == "function") try { v.componentDidMount() } catch (st) { qt(d, d.return, st) } if (d = b, v = d.updateQueue, v !== null) { var H = d.stateNode; try { var Z = v.shared.hiddenCallbacks; if (Z !== null) for (v.shared.hiddenCallbacks = null, v = 0; v < Z.length; v++)Fs(Z[v], H) } catch (st) { qt(d, d.return, st) } } c && O & 64 && yr(b), ni(b, b.return); break; case 26: case 27: case 5: Es(v, b, c), c && d === null && O & 4 && fn(b), ni(b, b.return); break; case 12: Es(v, b, c); break; case 13: Es(v, b, c), c && O & 4 && gg(v, b); break; case 22: b.memoizedState === null && Es(v, b, c), ni(b, b.return); break; default: Es(v, b, c) }s = s.sibling } } function _a(i, s) { var c = null; i !== null && i.memoizedState !== null && i.memoizedState.cachePool !== null && (c = i.memoizedState.cachePool.pool), i = null, s.memoizedState !== null && s.memoizedState.cachePool !== null && (i = s.memoizedState.cachePool.pool), i !== c && (i != null && i.refCount++, c != null && tl(c)) } function Ka(i, s) { i = null, s.alternate !== null && (i = s.alternate.memoizedState.cache), s = s.memoizedState.cache, s !== i && (s.refCount++, i != null && tl(i)) } function zn(i, s, c, d) { if (s.subtreeFlags & 10256) for (s = s.child; s !== null;)xr(i, s, c, d), s = s.sibling } function xr(i, s, c, d) { var v = s.flags; switch (s.tag) { case 0: case 11: case 15: zn(i, s, c, d), v & 2048 && ei(9, s); break; case 3: zn(i, s, c, d), v & 2048 && (i = null, s.alternate !== null && (i = s.alternate.memoizedState.cache), s = s.memoizedState.cache, s !== i && (s.refCount++, i != null && tl(i))); break; case 12: if (v & 2048) { zn(i, s, c, d), i = s.stateNode; try { var b = s.memoizedProps, O = b.id, H = b.onPostCommit; typeof H == "function" && H(O, s.alternate === null ? "mount" : "update", i.passiveEffectDuration, -0) } catch (Z) { qt(s, s.return, Z) } } else zn(i, s, c, d); break; case 23: break; case 22: b = s.stateNode, s.memoizedState !== null ? b._visibility & 4 ? zn(i, s, c, d) : mn(i, s) : b._visibility & 4 ? zn(i, s, c, d) : (b._visibility |= 4, Pe(i, s, c, d, (s.subtreeFlags & 10256) !== 0)), v & 2048 && _a(s.alternate, s); break; case 24: zn(i, s, c, d), v & 2048 && Ka(s.alternate, s); break; default: zn(i, s, c, d) } } function Pe(i, s, c, d, v) { for (v = v && (s.subtreeFlags & 10256) !== 0, s = s.child; s !== null;) { var b = i, O = s, H = c, Z = d, st = O.flags; switch (O.tag) { case 0: case 11: case 15: Pe(b, O, H, Z, v), ei(8, O); break; case 23: break; case 22: var wt = O.stateNode; O.memoizedState !== null ? wt._visibility & 4 ? Pe(b, O, H, Z, v) : mn(b, O) : (wt._visibility |= 4, Pe(b, O, H, Z, v)), v && st & 2048 && _a(O.alternate, O); break; case 24: Pe(b, O, H, Z, v), v && st & 2048 && Ka(O.alternate, O); break; default: Pe(b, O, H, Z, v) }s = s.sibling } } function mn(i, s) { if (s.subtreeFlags & 10256) for (s = s.child; s !== null;) { var c = i, d = s, v = d.flags; switch (d.tag) { case 22: mn(c, d), v & 2048 && _a(d.alternate, d); break; case 24: mn(c, d), v & 2048 && Ka(d.alternate, d); break; default: mn(c, d) }s = s.sibling } } var Xn = 8192; function Sr(i) { if (i.subtreeFlags & Xn) for (i = i.child; i !== null;)Jl(i), i = i.sibling } function Jl(i) { switch (i.tag) { case 26: Sr(i), i.flags & Xn && i.memoizedState !== null && aA(Wi, i.memoizedState, i.memoizedProps); break; case 5: Sr(i); break; case 3: case 4: var s = Wi; Wi = bg(i.stateNode.containerInfo), Sr(i), Wi = s; break; case 22: i.memoizedState === null && (s = i.alternate, s !== null && s.memoizedState !== null ? (s = Xn, Xn = 16777216, Sr(i), Xn = s) : Sr(i)); break; default: Sr(i) } } function pl(i) { var s = i.alternate; if (s !== null && (i = s.child, i !== null)) { s.child = null; do s = i.sibling, i.sibling = null, i = s; while (i !== null) } } function ml(i) { var s = i.deletions; if ((i.flags & 16) !== 0) { if (s !== null) for (var c = 0; c < s.length; c++) { var d = s[c]; ii = d, vg(d, i) } pl(i) } if (i.subtreeFlags & 10256) for (i = i.child; i !== null;)$o(i), i = i.sibling } function $o(i) { switch (i.tag) { case 0: case 11: case 15: ml(i), i.flags & 2048 && Za(9, i, i.return); break; case 3: ml(i); break; case 12: ml(i); break; case 22: var s = i.stateNode; i.memoizedState !== null && s._visibility & 4 && (i.return === null || i.return.tag !== 13) ? (s._visibility &= -5, Mr(i)) : ml(i); break; default: ml(i) } } function Mr(i) { var s = i.deletions; if ((i.flags & 16) !== 0) { if (s !== null) for (var c = 0; c < s.length; c++) { var d = s[c]; ii = d, vg(d, i) } pl(i) } for (i = i.child; i !== null;) { switch (s = i, s.tag) { case 0: case 11: case 15: Za(8, s, s.return), Mr(s); break; case 22: c = s.stateNode, c._visibility & 4 && (c._visibility &= -5, Mr(s)); break; default: Mr(s) }i = i.sibling } } function vg(i, s) { for (; ii !== null;) { var c = ii; switch (c.tag) { case 0: case 11: case 15: Za(8, c, s); break; case 23: case 22: if (c.memoizedState !== null && c.memoizedState.cachePool !== null) { var d = c.memoizedState.cachePool.pool; d != null && d.refCount++ } break; case 24: tl(c.memoizedState.cache) }if (d = c.child, d !== null) d.return = c, ii = d; else t: for (c = i; ii !== null;) { d = ii; var v = d.sibling, b = d.return; if (qf(d), d === c) { ii = null; break t } if (v !== null) { v.return = b, ii = v; break t } ii = b } } } function Pd(i, s, c, d) { this.tag = i, this.key = c, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.refCleanup = this.ref = null, this.pendingProps = s, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = d, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null } function ai(i, s, c, d) { return new Pd(i, s, c, d) } function br(i) { return i = i.prototype, !(!i || !i.isReactComponent) } function sa(i, s) { var c = i.alternate; return c === null ? (c = ai(i.tag, s, i.key, i.mode), c.elementType = i.elementType, c.type = i.type, c.stateNode = i.stateNode, c.alternate = i, i.alternate = c) : (c.pendingProps = s, c.type = i.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null), c.flags = i.flags & 31457280, c.childLanes = i.childLanes, c.lanes = i.lanes, c.child = i.child, c.memoizedProps = i.memoizedProps, c.memoizedState = i.memoizedState, c.updateQueue = i.updateQueue, s = i.dependencies, c.dependencies = s === null ? null : { lanes: s.lanes, firstContext: s.firstContext }, c.sibling = i.sibling, c.index = i.index, c.ref = i.ref, c.refCleanup = i.refCleanup, c } function gl(i, s) { i.flags &= 31457282; var c = i.alternate; return c === null ? (i.childLanes = 0, i.lanes = s, i.child = null, i.subtreeFlags = 0, i.memoizedProps = null, i.memoizedState = null, i.updateQueue = null, i.dependencies = null, i.stateNode = null) : (i.childLanes = c.childLanes, i.lanes = c.lanes, i.child = c.child, i.subtreeFlags = 0, i.deletions = null, i.memoizedProps = c.memoizedProps, i.memoizedState = c.memoizedState, i.updateQueue = c.updateQueue, i.type = c.type, s = c.dependencies, i.dependencies = s === null ? null : { lanes: s.lanes, firstContext: s.firstContext }), i } function tu(i, s, c, d, v, b) { var O = 0; if (d = i, typeof i == "function") br(i) && (O = 1); else if (typeof i == "string") O = nA(i, c, Le.current) ? 26 : i === "html" || i === "head" || i === "body" ? 27 : 5; else t: switch (i) { case m: return vl(c.children, v, b, s); case g: O = 8, v |= 24; break; case _: return i = ai(12, c, s, v | 2), i.elementType = _, i.lanes = b, i; case C: return i = ai(13, c, s, v), i.elementType = C, i.lanes = b, i; case R: return i = ai(19, c, s, v), i.elementType = R, i.lanes = b, i; case N: return Id(c, v, b, s); default: if (typeof i == "object" && i !== null) switch (i.$$typeof) { case x: case M: O = 10; break t; case S: O = 9; break t; case A: O = 11; break t; case T: O = 14; break t; case D: O = 16, d = null; break t }O = 29, c = Error(n(130, i === null ? "null" : typeof i, "")), d = null }return s = ai(O, c, s, v), s.elementType = i, s.type = d, s.lanes = b, s } function vl(i, s, c, d) { return i = ai(7, i, d, s), i.lanes = c, i } function Id(i, s, c, d) { i = ai(22, i, d, s), i.elementType = N, i.lanes = c; var v = { _visibility: 1, _pendingVisibility: 1, _pendingMarkers: null, _retryCache: null, _transitions: null, _current: null, detach: function () { var b = v._current; if (b === null) throw Error(n(456)); if ((v._pendingVisibility & 2) === 0) { var O = sr(b, 2); O !== null && (v._pendingVisibility |= 2, mi(O, b, 2)) } }, attach: function () { var b = v._current; if (b === null) throw Error(n(456)); if ((v._pendingVisibility & 2) !== 0) { var O = sr(b, 2); O !== null && (v._pendingVisibility &= -3, mi(O, b, 2)) } } }; return i.stateNode = v, i } function di(i, s, c) { return i = ai(6, i, null, s), i.lanes = c, i } function pc(i, s, c) { return s = ai(4, i.children !== null ? i.children : [], i.key, s), s.lanes = c, s.stateNode = { containerInfo: i.containerInfo, pendingChildren: null, implementation: i.implementation }, s } function Ja(i) { i.flags |= 4 } function yl(i, s) { if (s.type !== "stylesheet" || (s.state.loading & 4) !== 0) i.flags &= -16777217; else if (i.flags |= 16777216, !US(s)) { if (s = ma.current, s !== null && ((Ae & 4194176) === Ae ? Ls !== null : (Ae & 62914560) !== Ae && (Ae & 536870912) === 0 || s !== Ls)) throw Ho = Mf, ud; i.flags |= 8192 } } function $a(i, s) { s !== null && (i.flags |= 4), i.flags & 16384 && (s = i.tag !== 22 ? on() : 536870912, i.lanes |= s, qs |= s) } function mc(i, s) { if (!cn) switch (i.tailMode) { case "hidden": s = i.tail; for (var c = null; s !== null;)s.alternate !== null && (c = s), s = s.sibling; c === null ? i.tail = null : c.sibling = null; break; case "collapsed": c = i.tail; for (var d = null; c !== null;)c.alternate !== null && (d = c), c = c.sibling; d === null ? s || i.tail === null ? i.tail = null : i.tail.sibling = null : d.sibling = null } } function Wn(i) { var s = i.alternate !== null && i.alternate.child === i.child, c = 0, d = 0; if (s) for (var v = i.child; v !== null;)c |= v.lanes | v.childLanes, d |= v.subtreeFlags & 31457280, d |= v.flags & 31457280, v.return = i, v = v.sibling; else for (v = i.child; v !== null;)c |= v.lanes | v.childLanes, d |= v.subtreeFlags, d |= v.flags, v.return = i, v = v.sibling; return i.subtreeFlags |= d, i.childLanes = c, s } function vy(i, s, c) { var d = s.pendingProps; switch (Zr(s), s.tag) { case 16: case 15: case 0: case 11: case 7: case 8: case 12: case 9: case 14: return Wn(s), null; case 1: return Wn(s), null; case 3: return c = s.stateNode, d = null, i !== null && (d = i.memoizedState.cache), s.memoizedState.cache !== d && (s.flags |= 2048), vr(Jn), Ht(), c.pendingContext && (c.context = c.pendingContext, c.pendingContext = null), (i === null || i.child === null) && (Po(s) ? Ja(s) : i === null || i.memoizedState.isDehydrated && (s.flags & 256) === 0 || (s.flags |= 1024, ka !== null && (is(ka), ka = null))), Wn(s), null; case 26: return c = s.memoizedState, i === null ? (Ja(s), c !== null ? (Wn(s), yl(s, c)) : (Wn(s), s.flags &= -16777217)) : c ? c !== i.memoizedState ? (Ja(s), Wn(s), yl(s, c)) : (Wn(s), s.flags &= -16777217) : (i.memoizedProps !== d && Ja(s), Wn(s), s.flags &= -16777217), null; case 27: jt(s), c = Ut.current; var v = s.type; if (i !== null && s.stateNode != null) i.memoizedProps !== d && Ja(s); else { if (!d) { if (s.stateNode === null) throw Error(n(166)); return Wn(s), null } i = Le.current, Po(s) ? Tm(s) : (i = bS(v, d, c), s.stateNode = i, Ja(s)) } return Wn(s), null; case 5: if (jt(s), c = s.type, i !== null && s.stateNode != null) i.memoizedProps !== d && Ja(s); else { if (!d) { if (s.stateNode === null) throw Error(n(166)); return Wn(s), null } if (i = Le.current, Po(s)) Tm(s); else { switch (v = Mg(Ut.current), i) { case 1: i = v.createElementNS("http://www.w3.org/2000/svg", c); break; case 2: i = v.createElementNS("http://www.w3.org/1998/Math/MathML", c); break; default: switch (c) { case "svg": i = v.createElementNS("http://www.w3.org/2000/svg", c); break; case "math": i = v.createElementNS("http://www.w3.org/1998/Math/MathML", c); break; case "script": i = v.createElement("div"), i.innerHTML = "<script><\/script>", i = i.removeChild(i.firstChild); break; case "select": i = typeof d.is == "string" ? v.createElement("select", { is: d.is }) : v.createElement("select"), d.multiple ? i.multiple = !0 : d.size && (i.size = d.size); break; default: i = typeof d.is == "string" ? v.createElement(c, { is: d.is }) : v.createElement(c) } }i[kn] = s, i[Ye] = d; t: for (v = s.child; v !== null;) { if (v.tag === 5 || v.tag === 6) i.appendChild(v.stateNode); else if (v.tag !== 4 && v.tag !== 27 && v.child !== null) { v.child.return = v, v = v.child; continue } if (v === s) break t; for (; v.sibling === null;) { if (v.return === null || v.return === s) break t; v = v.return } v.sibling.return = v.return, v = v.sibling } s.stateNode = i; t: switch (oa(i, c, d), c) { case "button": case "input": case "select": case "textarea": i = !!d.autoFocus; break t; case "img": i = !0; break t; default: i = !1 }i && Ja(s) } } return Wn(s), s.flags &= -16777217, null; case 6: if (i && s.stateNode != null) i.memoizedProps !== d && Ja(s); else { if (typeof d != "string" && s.stateNode === null) throw Error(n(166)); if (i = Ut.current, Po(s)) { if (i = s.stateNode, c = s.memoizedProps, d = null, v = Gi, v !== null) switch (v.tag) { case 27: case 5: d = v.memoizedProps }i[kn] = s, i = !!(i.nodeValue === c || d !== null && d.suppressHydrationWarning === !0 || vS(i.nodeValue, c)), i || Fl(s) } else i = Mg(i).createTextNode(d), i[kn] = s, s.stateNode = i } return Wn(s), null; case 13: if (d = s.memoizedState, i === null || i.memoizedState !== null && i.memoizedState.dehydrated !== null) { if (v = Po(s), d !== null && d.dehydrated !== null) { if (i === null) { if (!v) throw Error(n(318)); if (v = s.memoizedState, v = v !== null ? v.dehydrated : null, !v) throw Error(n(317)); v[kn] = s } else Io(), (s.flags & 128) === 0 && (s.memoizedState = null), s.flags |= 4; Wn(s), v = !1 } else ka !== null && (is(ka), ka = null), v = !0; if (!v) return s.flags & 256 ? (zs(s), s) : (zs(s), null) } if (zs(s), (s.flags & 128) !== 0) return s.lanes = c, s; if (c = d !== null, i = i !== null && i.memoizedState !== null, c) { d = s.child, v = null, d.alternate !== null && d.alternate.memoizedState !== null && d.alternate.memoizedState.cachePool !== null && (v = d.alternate.memoizedState.cachePool.pool); var b = null; d.memoizedState !== null && d.memoizedState.cachePool !== null && (b = d.memoizedState.cachePool.pool), b !== v && (d.flags |= 2048) } return c !== i && c && (s.child.flags |= 8192), $a(s, s.updateQueue), Wn(s), null; case 4: return Ht(), i === null && My(s.stateNode.containerInfo), Wn(s), null; case 10: return vr(s.type), Wn(s), null; case 19: if (Me(ci), v = s.memoizedState, v === null) return Wn(s), null; if (d = (s.flags & 128) !== 0, b = v.rendering, b === null) if (d) mc(v, !1); else { if (Fn !== 0 || i !== null && (i.flags & 128) !== 0) for (i = s.child; i !== null;) { if (b = Fo(i), b !== null) { for (s.flags |= 128, mc(v, !1), i = b.updateQueue, s.updateQueue = i, $a(s, i), s.subtreeFlags = 0, i = c, c = s.child; c !== null;)gl(c, i), c = c.sibling; return Jt(ci, ci.current & 1 | 2), s.child } i = i.sibling } v.tail !== null && bt() > en && (s.flags |= 128, d = !0, mc(v, !1), s.lanes = 4194304) } else { if (!d) if (i = Fo(b), i !== null) { if (s.flags |= 128, d = !0, i = i.updateQueue, s.updateQueue = i, $a(s, i), mc(v, !0), v.tail === null && v.tailMode === "hidden" && !b.alternate && !cn) return Wn(s), null } else 2 * bt() - v.renderingStartTime > en && c !== 536870912 && (s.flags |= 128, d = !0, mc(v, !1), s.lanes = 4194304); v.isBackwards ? (b.sibling = s.child, s.child = b) : (i = v.last, i !== null ? i.sibling = b : s.child = b, v.last = b) } return v.tail !== null ? (s = v.tail, v.rendering = s, v.tail = s.sibling, v.renderingStartTime = bt(), s.sibling = null, i = ci.current, Jt(ci, d ? i & 1 | 2 : i & 1), s) : (Wn(s), null); case 22: case 23: return zs(s), ic(), d = s.memoizedState !== null, i !== null ? i.memoizedState !== null !== d && (s.flags |= 8192) : d && (s.flags |= 8192), d ? (c & 536870912) !== 0 && (s.flags & 128) === 0 && (Wn(s), s.subtreeFlags & 6 && (s.flags |= 8192)) : Wn(s), c = s.updateQueue, c !== null && $a(s, c.retryQueue), c = null, i !== null && i.memoizedState !== null && i.memoizedState.cachePool !== null && (c = i.memoizedState.cachePool.pool), d = null, s.memoizedState !== null && s.memoizedState.cachePool !== null && (d = s.memoizedState.cachePool.pool), d !== c && (s.flags |= 2048), i !== null && Me(hr), null; case 24: return c = null, i !== null && (c = i.memoizedState.cache), s.memoizedState.cache !== c && (s.flags |= 2048), vr(Jn), Wn(s), null; case 25: return null }throw Error(n(156, s.tag)) } function Qn(i, s) { switch (Zr(s), s.tag) { case 1: return i = s.flags, i & 65536 ? (s.flags = i & -65537 | 128, s) : null; case 3: return vr(Jn), Ht(), i = s.flags, (i & 65536) !== 0 && (i & 128) === 0 ? (s.flags = i & -65537 | 128, s) : null; case 26: case 27: case 5: return jt(s), null; case 13: if (zs(s), i = s.memoizedState, i !== null && i.dehydrated !== null) { if (s.alternate === null) throw Error(n(340)); Io() } return i = s.flags, i & 65536 ? (s.flags = i & -65537 | 128, s) : null; case 19: return Me(ci), null; case 4: return Ht(), null; case 10: return vr(s.type), null; case 22: case 23: return zs(s), ic(), i !== null && Me(hr), i = s.flags, i & 65536 ? (s.flags = i & -65537 | 128, s) : null; case 24: return vr(Jn), null; case 25: return null; default: return null } } function Hd(i, s) { switch (Zr(s), s.tag) { case 3: vr(Jn), Ht(); break; case 26: case 27: case 5: jt(s); break; case 4: Ht(); break; case 13: zs(s); break; case 19: Me(ci); break; case 10: vr(s.type); break; case 22: case 23: zs(s), ic(), i !== null && Me(hr); break; case 24: vr(Jn) } } var $l = { getCacheForType: function (i) { var s = Xi(Jn), c = s.data.get(i); return c === void 0 && (c = i(), s.data.set(i, c)), c } }, Er = typeof WeakMap == "function" ? WeakMap : Map, Ie = 0, An = null, Ke = null, Ae = 0, Dn = 0, gn = null, si = !1, ji = !1, _l = !1, Tr = 0, Fn = 0, Ts = 0, Xs = 0, eu = 0, ra = 0, qs = 0, gc = null, tn = null, Rn = !1, ke = 0, en = 1 / 0, En = null, pi = null, ts = !1, es = null, to = 0, As = 0, qn = null, ns = 0, Ar = null; function la() { if ((Ie & 2) !== 0 && Ae !== 0) return Ae & -Ae; if (z.T !== null) { var i = Xl; return i !== 0 ? i : yy() } return bo() } function Ba() { ra === 0 && (ra = (Ae & 536870912) === 0 || cn ? Yn() : 536870912); var i = ma.current; return i !== null && (i.flags |= 32), ra } function mi(i, s, c) { (i === An && Dn === 2 || i.cancelPendingCommit !== null) && (Rr(i, 0), Pa(i, Ae, ra, !1)), Ii(i, c), ((Ie & 2) === 0 || i !== An) && (i === An && ((Ie & 2) === 0 && (Xs |= c), Fn === 4 && Pa(i, Ae, ra, !1)), Un(i)) } function nu(i, s, c) { if ((Ie & 6) !== 0) throw Error(n(327)); var d = !c && (s & 60) === 0 && (s & i.expiredLanes) === 0 || we(i, s), v = d ? l(i, s) : no(i, s, !0), b = d; do { if (v === 0) { ji && !d && Pa(i, s, 0, !1); break } else if (v === 6) Pa(i, s, 0, !si); else { if (c = i.current.alternate, b && !Fd(c)) { v = no(i, s, !1), b = !1; continue } if (v === 2) { if (b = s, i.errorRecoveryDisabledLanes & b) var O = 0; else O = i.pendingLanes & -536870913, O = O !== 0 ? O : O & 536870912 ? 536870912 : 0; if (O !== 0) { s = O; t: { var H = i; v = gc; var Z = H.current.memoizedState.isDehydrated; if (Z && (Rr(H, O).flags |= 256), O = no(H, O, !1), O !== 2) { if (_l && !Z) { H.errorRecoveryDisabledLanes |= b, Xs |= b, v = 4; break t } b = tn, tn = v, b !== null && is(b) } v = O } if (b = !1, v !== 2) continue } } if (v === 1) { Rr(i, 0), Pa(i, s, 0, !0); break } t: { switch (d = i, v) { case 0: case 1: throw Error(n(345)); case 4: if ((s & 4194176) === s) { Pa(d, s, ra, !si); break t } break; case 2: tn = null; break; case 3: case 5: break; default: throw Error(n(329)) }if (d.finishedWork = c, d.finishedLanes = s, (s & 62914560) === s && (b = ke + 300 - bt(), 10 < b)) { if (Pa(d, s, ra, !si), ne(d, 0) !== 0) break t; d.timeoutHandle = xS(Wf.bind(null, d, c, tn, En, Rn, s, ra, Xs, qs, si, 2, -0, 0), b); break t } Wf(d, c, tn, En, Rn, s, ra, Xs, qs, si, 0, -0, 0) } } break } while (!0); Un(i) } function is(i) { tn === null ? tn = i : tn.push.apply(tn, i) } function Wf(i, s, c, d, v, b, O, H, Z, st, wt, Ft, yt) { var At = s.subtreeFlags; if ((At & 8192 || (At & 16785408) === 16785408) && (Wd = { stylesheets: null, count: 0, unsuspend: iA }, Jl(s), s = sA(), s !== null)) { i.cancelPendingCommit = s(Q.bind(null, i, c, d, v, O, H, Z, 1, Ft, yt)), Pa(i, b, O, !st); return } Q(i, c, d, v, O, H, Z, wt, Ft, yt) } function Fd(i) { for (var s = i; ;) { var c = s.tag; if ((c === 0 || c === 11 || c === 15) && s.flags & 16384 && (c = s.updateQueue, c !== null && (c = c.stores, c !== null))) for (var d = 0; d < c.length; d++) { var v = c[d], b = v.getSnapshot; v = v.value; try { if (!fa(b(), v)) return !1 } catch { return !1 } } if (c = s.child, s.subtreeFlags & 16384 && c !== null) c.return = s, s = c; else { if (s === i) break; for (; s.sibling === null;) { if (s.return === null || s.return === i) return !0; s = s.return } s.sibling.return = s.return, s = s.sibling } } return !0 } function Pa(i, s, c, d) { s &= ~eu, s &= ~Xs, i.suspendedLanes |= s, i.pingedLanes &= ~s, d && (i.warmLanes |= s), d = i.expirationTimes; for (var v = s; 0 < v;) { var b = 31 - ye(v), O = 1 << b; d[b] = -1, v &= ~O } c !== 0 && Dl(i, c, s) } function eo() { return (Ie & 6) === 0 ? (rn(0), !1) : !0 } function Ys() { if (Ke !== null) { if (Dn === 0) var i = Ke.return; else i = Ke, _s = Hs = null, Af(i), Jr = null, tc = 0, i = Ke; for (; i !== null;)Hd(i.alternate, i), i = i.return; Ke = null } } function Rr(i, s) { i.finishedWork = null, i.finishedLanes = 0; var c = i.timeoutHandle; c !== -1 && (i.timeoutHandle = -1, VT(c)), c = i.cancelPendingCommit, c !== null && (i.cancelPendingCommit = null, c()), Ys(), An = i, Ke = c = sa(i.current, null), Ae = s, Dn = 0, gn = null, si = !1, ji = we(i, s), _l = !1, qs = ra = eu = Xs = Ts = Fn = 0, tn = gc = null, Rn = !1, (s & 8) !== 0 && (s |= s & 32); var d = i.entangledLanes; if (d !== 0) for (i = i.entanglements, d &= s; 0 < d;) { var v = 31 - ye(d), b = 1 << v; s |= i[v], d &= ~b } return Tr = s, Wu(), c } function xl(i, s) { We = null, z.H = Is, s === Qr ? (s = xn(), Dn = 3) : s === ud ? (s = xn(), Dn = 4) : Dn = s === Na ? 8 : s !== null && typeof s == "object" && typeof s.then == "function" ? 6 : 1, gn = s, Ke === null && (Fn = 1, zf(i, pa(s, i.current))) } function iu() { var i = z.H; return z.H = Is, i === null ? Is : i } function kf() { var i = z.A; return z.A = $l, i } function vc() { Fn = 4, si || (Ae & 4194176) !== Ae && ma.current !== null || (ji = !0), (Ts & 134217727) === 0 && (Xs & 134217727) === 0 || An === null || Pa(An, Ae, ra, !1) } function no(i, s, c) { var d = Ie; Ie |= 2; var v = iu(), b = kf(); (An !== i || Ae !== s) && (En = null, Rr(i, s)), s = !1; var O = Fn; t: do try { if (Dn !== 0 && Ke !== null) { var H = Ke, Z = gn; switch (Dn) { case 8: Ys(), O = 6; break t; case 3: case 2: case 6: ma.current === null && (s = !0); var st = Dn; if (Dn = 0, gn = null, E(i, H, Z, st), c && ji) { O = 0; break t } break; default: st = Dn, Dn = 0, gn = null, E(i, H, Z, st) } } Vd(), O = Fn; break } catch (wt) { xl(i, wt) } while (!0); return s && i.shellSuspendCounter++, _s = Hs = null, Ie = d, z.H = v, z.A = b, Ke === null && (An = null, Ae = 0, Wu()), O } function Vd() { for (; Ke !== null;)p(Ke) } function l(i, s) { var c = Ie; Ie |= 2; var d = iu(), v = kf(); An !== i || Ae !== s ? (En = null, en = bt() + 500, Rr(i, s)) : ji = we(i, s); t: do try { if (Dn !== 0 && Ke !== null) { s = Ke; var b = gn; e: switch (Dn) { case 1: Dn = 0, gn = null, E(i, s, b, 1); break; case 2: if (Rm(b)) { Dn = 0, gn = null, y(s); break } s = function () { Dn === 2 && An === i && (Dn = 7), Un(i) }, b.then(s, s); break t; case 3: Dn = 7; break t; case 4: Dn = 5; break t; case 7: Rm(b) ? (Dn = 0, gn = null, y(s)) : (Dn = 0, gn = null, E(i, s, b, 7)); break; case 5: var O = null; switch (Ke.tag) { case 26: O = Ke.memoizedState; case 5: case 27: var H = Ke; if (!O || US(O)) { Dn = 0, gn = null; var Z = H.sibling; if (Z !== null) Ke = Z; else { var st = H.return; st !== null ? (Ke = st, w(st)) : Ke = null } break e } }Dn = 0, gn = null, E(i, s, b, 5); break; case 6: Dn = 0, gn = null, E(i, s, b, 6); break; case 8: Ys(), Fn = 6; break t; default: throw Error(n(462)) } } u(); break } catch (wt) { xl(i, wt) } while (!0); return _s = Hs = null, z.H = d, z.A = v, Ie = c, Ke !== null ? 0 : (An = null, Ae = 0, Wu(), Fn) } function u() { for (; Ke !== null && !B();)p(Ke) } function p(i) { var s = oc(i.alternate, i, Tr); i.memoizedProps = i.pendingProps, s === null ? w(i) : Ke = s } function y(i) { var s = i, c = s.alternate; switch (s.tag) { case 15: case 0: s = dg(c, s, s.pendingProps, s.type, void 0, Ae); break; case 11: s = dg(c, s, s.pendingProps, s.type.render, s.ref, Ae); break; case 5: Af(s); default: Hd(c, s), s = Ke = gl(s, Tr), s = oc(c, s, Tr) }i.memoizedProps = i.pendingProps, s === null ? w(i) : Ke = s } function E(i, s, c, d) { _s = Hs = null, Af(s), Jr = null, tc = 0; var v = s.return; try { if (my(i, v, s, c, Ae)) { Fn = 1, zf(i, pa(c, i.current)), Ke = null; return } } catch (b) { if (v !== null) throw Ke = v, b; Fn = 1, zf(i, pa(c, i.current)), Ke = null; return } s.flags & 32768 ? (cn || d === 1 ? i = !0 : ji || (Ae & 536870912) !== 0 ? i = !1 : (si = i = !0, (d === 2 || d === 3 || d === 6) && (d = ma.current, d !== null && d.tag === 13 && (d.flags |= 16384))), F(s, i)) : w(s) } function w(i) { var s = i; do { if ((s.flags & 32768) !== 0) { F(s, si); return } i = s.return; var c = vy(s.alternate, s, Tr); if (c !== null) { Ke = c; return } if (s = s.sibling, s !== null) { Ke = s; return } Ke = s = i } while (s !== null); Fn === 0 && (Fn = 5) } function F(i, s) { do { var c = Qn(i.alternate, i); if (c !== null) { c.flags &= 32767, Ke = c; return } if (c = i.return, c !== null && (c.flags |= 32768, c.subtreeFlags = 0, c.deletions = null), !s && (i = i.sibling, i !== null)) { Ke = i; return } Ke = i = c } while (i !== null); Fn = 6, Ke = null } function Q(i, s, c, d, v, b, O, H, Z, st) { var wt = z.T, Ft = $.p; try { $.p = 2, z.T = null, ut(i, s, c, d, Ft, v, b, O, H, Z, st) } finally { z.T = wt, $.p = Ft } } function ut(i, s, c, d, v, b, O, H) { do Wt(); while (es !== null); if ((Ie & 6) !== 0) throw Error(n(327)); var Z = i.finishedWork; if (d = i.finishedLanes, Z === null) return null; if (i.finishedWork = null, i.finishedLanes = 0, Z === i.current) throw Error(n(177)); i.callbackNode = null, i.callbackPriority = 0, i.cancelPendingCommit = null; var st = Z.lanes | Z.childLanes; if (st |= ar, Cu(i, d, st, b, O, H), i === An && (Ke = An = null, Ae = 0), (Z.subtreeFlags & 10256) === 0 && (Z.flags & 10256) === 0 || ts || (ts = !0, As = st, qn = c, lt(te, function () { return Wt(), null })), c = (Z.flags & 15990) !== 0, (Z.subtreeFlags & 15990) !== 0 || c ? (c = z.T, z.T = null, b = $.p, $.p = 2, O = Ie, Ie |= 4, Ko(i, Z), Kl(Z, i), id(Ay, i.containerInfo), wg = !!Ty, Ay = Ty = null, i.current = Z, Jo(i, Z.alternate, Z), mt(), Ie = O, $.p = b, z.T = c) : i.current = Z, ts ? (ts = !1, es = i, to = d) : Rt(i, st), st = i.pendingLanes, st === 0 && (pi = null), ue(Z.stateNode), Un(i), s !== null) for (v = i.onRecoverableError, Z = 0; Z < s.length; Z++)st = s[Z], v(st.value, { componentStack: st.stack }); return (to & 3) !== 0 && Wt(), st = i.pendingLanes, (d & 4194218) !== 0 && (st & 42) !== 0 ? i === Ar ? ns++ : (ns = 0, Ar = i) : ns = 0, rn(0), null } function Rt(i, s) { (i.pooledCacheLanes &= s) === 0 && (s = i.pooledCache, s != null && (i.pooledCache = null, tl(s))) } function Wt() { if (es !== null) { var i = es, s = As; As = 0; var c = wa(to), d = z.T, v = $.p; try { if ($.p = 32 > c ? 32 : c, z.T = null, es === null) var b = !1; else { c = qn, qn = null; var O = es, H = to; if (es = null, to = 0, (Ie & 6) !== 0) throw Error(n(331)); var Z = Ie; if (Ie |= 4, $o(O.current), xr(O, O.current, H, c), Ie = Z, rn(0, !1), he && typeof he.onPostCommitFiberRoot == "function") try { he.onPostCommitFiberRoot(ge, O) } catch { } b = !0 } return b } finally { $.p = v, z.T = d, Rt(i, s) } } return !1 } function re(i, s, c) { s = pa(c, s), s = Td(i.stateNode, s, 2), i = za(i, s, 2), i !== null && (Ii(i, 2), Un(i)) } function qt(i, s, c) { if (i.tag === 3) re(i, i, c); else for (; s !== null;) { if (s.tag === 3) { re(s, i, c); break } else if (s.tag === 1) { var d = s.stateNode; if (typeof s.type.getDerivedStateFromError == "function" || typeof d.componentDidCatch == "function" && (pi === null || !pi.has(d))) { i = pa(c, i), c = Ad(2), d = za(s, c, 2), d !== null && (fg(c, d, s, i), Ii(d, 2), Un(d)); break } } s = s.return } } function He(i, s, c) { var d = i.pingCache; if (d === null) { d = i.pingCache = new Er; var v = new Set; d.set(s, v) } else v = d.get(s), v === void 0 && (v = new Set, d.set(s, v)); v.has(c) || (_l = !0, v.add(c), i = as.bind(null, i, s, c), s.then(i, i)) } function as(i, s, c) { var d = i.pingCache; d !== null && d.delete(s), i.pingedLanes |= i.suspendedLanes & c, i.warmLanes &= ~c, An === i && (Ae & c) === c && (Fn === 4 || Fn === 3 && (Ae & 62914560) === Ae && 300 > bt() - ke ? (Ie & 2) === 0 && Rr(i, 0) : eu |= c, qs === Ae && (qs = 0)), Un(i) } function au(i, s) { s === 0 && (s = on()), i = sr(i, s), i !== null && (Ii(i, s), Un(i)) } function io(i) { var s = i.memoizedState, c = 0; s !== null && (c = s.retryLane), au(i, c) } function vt(i, s) { var c = 0; switch (i.tag) { case 13: var d = i.stateNode, v = i.memoizedState; v !== null && (c = v.retryLane); break; case 19: d = i.stateNode; break; case 22: d = i.stateNode._retryCache; break; default: throw Error(n(314)) }d !== null && d.delete(s), au(i, c) } function lt(i, s) { return Qt(i, s) } var _t = null, Gt = null, _e = !1, wn = !1, Re = !1, Je = 0; function Un(i) { i !== Gt && i.next === null && (Gt === null ? _t = Gt = i : Gt = Gt.next = i), wn = !0, _e || (_e = !0, NT(Sl)) } function rn(i, s) { if (!Re && wn) { Re = !0; do for (var c = !1, d = _t; d !== null;) { if (i !== 0) { var v = d.pendingLanes; if (v === 0) var b = 0; else { var O = d.suspendedLanes, H = d.pingedLanes; b = (1 << 31 - ye(42 | i) + 1) - 1, b &= v & ~(O & ~H), b = b & 201326677 ? b & 201326677 | 1 : b ? b | 2 : 0 } b !== 0 && (c = !0, cS(d, b)) } else b = Ae, b = ne(d, d === An ? b : 0), (b & 3) === 0 || we(d, b) || (c = !0, cS(d, b)); d = d.next } while (c); Re = !1 } } function Sl() { wn = _e = !1; var i = 0; Je !== 0 && (FT() && (i = Je), Je = 0); for (var s = bt(), c = null, d = _t; d !== null;) { var v = d.next, b = yg(d, s); b === 0 ? (d.next = null, c === null ? _t = v : c.next = v, v === null && (Gt = c)) : (c = d, (i !== 0 || (b & 3) !== 0) && (wn = !0)), d = v } rn(i) } function yg(i, s) { for (var c = i.suspendedLanes, d = i.pingedLanes, v = i.expirationTimes, b = i.pendingLanes & -62914561; 0 < b;) { var O = 31 - ye(b), H = 1 << O, Z = v[O]; Z === -1 ? ((H & c) === 0 || (H & d) !== 0) && (v[O] = Cn(H, s)) : Z <= s && (i.expiredLanes |= H), b &= ~H } if (s = An, c = Ae, c = ne(i, i === s ? c : 0), d = i.callbackNode, c === 0 || i === s && Dn === 2 || i.cancelPendingCommit !== null) return d !== null && d !== null && X(d), i.callbackNode = null, i.callbackPriority = 0; if ((c & 3) === 0 || we(i, c)) { if (s = c & -c, s === i.callbackPriority) return s; switch (d !== null && X(d), wa(c)) { case 2: case 8: c = pe; break; case 32: c = te; break; case 268435456: c = qe; break; default: c = te }return d = uS.bind(null, i), c = Qt(c, d), i.callbackPriority = s, i.callbackNode = c, s } return d !== null && d !== null && X(d), i.callbackPriority = 2, i.callbackNode = null, 2 } function uS(i, s) { var c = i.callbackNode; if (Wt() && i.callbackNode !== c) return null; var d = Ae; return d = ne(i, i === An ? d : 0), d === 0 ? null : (nu(i, d, s), yg(i, bt()), i.callbackNode != null && i.callbackNode === c ? uS.bind(null, i) : null) } function cS(i, s) { if (Wt()) return null; nu(i, s, !0) } function NT(i) { GT(function () { (Ie & 6) !== 0 ? Qt(Ct, i) : i() }) } function yy() { return Je === 0 && (Je = Yn()), Je } function fS(i) { return i == null || typeof i == "symbol" || typeof i == "boolean" ? null : typeof i == "function" ? i : Nu("" + i) } function hS(i, s) { var c = s.ownerDocument.createElement("input"); return c.name = s.name, c.value = s.value, i.id && c.setAttribute("form", i.id), s.parentNode.insertBefore(c, s), i = new FormData(i), c.parentNode.removeChild(c), i } function OT(i, s, c, d, v) { if (s === "submit" && c && c.stateNode === v) { var b = fS((v[Ye] || null).action), O = d.submitter; O && (s = (s = O[Ye] || null) ? fS(s.formAction) : O.getAttribute("formAction"), s !== null && (b = s, O = null)); var H = new Ro("action", "action", null, d, v); i.push({ event: H, listeners: [{ instance: null, listener: function () { if (d.defaultPrevented) { if (Je !== 0) { var Z = O ? hS(v, O) : new FormData(v); xd(c, { pending: !0, data: Z, method: v.method, action: b }, null, Z) } } else typeof b == "function" && (H.preventDefault(), Z = O ? hS(v, O) : new FormData(v), xd(c, { pending: !0, data: Z, method: v.method, action: b }, b, Z)) }, currentTarget: v }] }) } } for (var _y = 0; _y < ir.length; _y++) { var xy = ir[_y], LT = xy.toLowerCase(), zT = xy[0].toUpperCase() + xy.slice(1); Wa(LT, "on" + zT) } Wa(rd, "onAnimationEnd"), Wa(da, "onAnimationIteration"), Wa(ld, "onAnimationStart"), Wa("dblclick", "onDoubleClick"), Wa("focusin", "onFocus"), Wa("focusout", "onBlur"), Wa(nr, "onTransitionRun"), Wa(Bo, "onTransitionStart"), Wa(Wr, "onTransitionCancel"), Wa(_f, "onTransitionEnd"), se("onMouseEnter", ["mouseout", "mouseover"]), se("onMouseLeave", ["mouseout", "mouseover"]), se("onPointerEnter", ["pointerout", "pointerover"]), se("onPointerLeave", ["pointerout", "pointerover"]), Kt("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" ")), Kt("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")), Kt("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), Kt("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" ")), Kt("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" ")), Kt("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" ")); var Gd = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), BT = new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Gd)); function dS(i, s) { s = (s & 4) !== 0; for (var c = 0; c < i.length; c++) { var d = i[c], v = d.event; d = d.listeners; t: { var b = void 0; if (s) for (var O = d.length - 1; 0 <= O; O--) { var H = d[O], Z = H.instance, st = H.currentTarget; if (H = H.listener, Z !== b && v.isPropagationStopped()) break t; b = H, v.currentTarget = st; try { b(v) } catch (wt) { Lf(wt) } v.currentTarget = null, b = Z } else for (O = 0; O < d.length; O++) { if (H = d[O], Z = H.instance, st = H.currentTarget, H = H.listener, Z !== b && v.isPropagationStopped()) break t; b = H, v.currentTarget = st; try { b(v) } catch (wt) { Lf(wt) } v.currentTarget = null, b = Z } } } } function hn(i, s) { var c = s[Hr]; c === void 0 && (c = s[Hr] = new Set); var d = i + "__bubble"; c.has(d) || (pS(s, i, 2, !1), c.add(d)) } function Sy(i, s, c) { var d = 0; s && (d |= 4), pS(c, i, d, s) } var _g = "_reactListening" + Math.random().toString(36).slice(2); function My(i) { if (!i[_g]) { i[_g] = !0, rt.forEach(function (c) { c !== "selectionchange" && (BT.has(c) || Sy(c, !1, i), Sy(c, !0, i)) }); var s = i.nodeType === 9 ? i : i.ownerDocument; s === null || s[_g] || (s[_g] = !0, Sy("selectionchange", !1, s)) } } function pS(i, s, c, d) { switch (PS(s)) { case 2: var v = oA; break; case 8: v = uA; break; default: v = zy }c = v.bind(null, s, c, i), v = void 0, !Lu || s !== "touchstart" && s !== "touchmove" && s !== "wheel" || (v = !0), d ? v !== void 0 ? i.addEventListener(s, c, { capture: !0, passive: v }) : i.addEventListener(s, c, !0) : v !== void 0 ? i.addEventListener(s, c, { passive: v }) : i.addEventListener(s, c, !1) } function by(i, s, c, d, v) { var b = d; if ((s & 1) === 0 && (s & 2) === 0 && d !== null) t: for (; ;) { if (d === null) return; var O = d.tag; if (O === 3 || O === 4) { var H = d.stateNode.containerInfo; if (H === v || H.nodeType === 8 && H.parentNode === v) break; if (O === 4) for (O = d.return; O !== null;) { var Z = O.tag; if ((Z === 3 || Z === 4) && (Z = O.stateNode.containerInfo, Z === v || Z.nodeType === 8 && Z.parentNode === v)) return; O = O.return } for (; H !== null;) { if (O = ps(H), O === null) return; if (Z = O.tag, Z === 5 || Z === 6 || Z === 26 || Z === 27) { d = b = O; continue t } H = H.parentNode } } d = d.return } Gh(function () { var st = b, wt = Ou(c), Ft = []; t: { var yt = xf.get(i); if (yt !== void 0) { var At = Ro, xe = i; switch (i) { case "keypress": if (Fr(c) === 0) break t; case "keydown": case "keyup": At = kh; break; case "focusin": xe = "focus", At = uf; break; case "focusout": xe = "blur", At = uf; break; case "beforeblur": case "afterblur": At = uf; break; case "click": if (c.button === 2) break t; case "auxclick": case "dblclick": case "mousedown": case "mousemove": case "mouseup": case "mouseout": case "mouseover": case "contextmenu": At = Yh; break; case "drag": case "dragend": case "dragenter": case "dragexit": case "dragleave": case "dragover": case "dragstart": case "drop": At = sy; break; case "touchcancel": case "touchend": case "touchmove": case "touchstart": At = Zh; break; case rd: case da: case ld: At = fm; break; case _f: At = $s; break; case "scroll": case "scrollend": At = om; break; case "wheel": At = ry; break; case "copy": case "cut": case "paste": At = dm; break; case "gotpointercapture": case "lostpointercapture": case "pointercancel": case "pointerdown": case "pointermove": case "pointerout": case "pointerover": case "pointerup": At = ff; break; case "toggle": case "beforetoggle": At = Gr }var Fe = (s & 4) !== 0, gi = !Fe && (i === "scroll" || i === "scrollend"), ot = Fe ? yt !== null ? yt + "Capture" : null : yt; Fe = []; for (var et = st, pt; et !== null;) { var Ot = et; if (pt = Ot.stateNode, Ot = Ot.tag, Ot !== 5 && Ot !== 26 && Ot !== 27 || pt === null || ot === null || (Ot = Eo(et, ot), Ot != null && Fe.push(Xd(et, Ot, pt))), gi) break; et = et.return } 0 < Fe.length && (yt = new At(yt, xe, null, c, wt), Ft.push({ event: yt, listeners: Fe })) } } if ((s & 7) === 0) { t: { if (yt = i === "mouseover" || i === "pointerover", At = i === "mouseout" || i === "pointerout", yt && c !== sf && (xe = c.relatedTarget || c.fromElement) && (ps(xe) || xe[ds])) break t; if ((At || yt) && (yt = wt.window === wt ? wt : (yt = wt.ownerDocument) ? yt.defaultView || yt.parentWindow : window, At ? (xe = c.relatedTarget || c.toElement, At = st, xe = xe ? ps(xe) : null, xe !== null && (gi = nt(xe), Fe = xe.tag, xe !== gi || Fe !== 5 && Fe !== 27 && Fe !== 6) && (xe = null)) : (At = null, xe = st), At !== xe)) { if (Fe = Yh, Ot = "onMouseLeave", ot = "onMouseEnter", et = "mouse", (i === "pointerout" || i === "pointerover") && (Fe = ff, Ot = "onPointerLeave", ot = "onPointerEnter", et = "pointer"), gi = At == null ? yt : J(At), pt = xe == null ? yt : J(xe), yt = new Fe(Ot, et + "leave", At, c, wt), yt.target = gi, yt.relatedTarget = pt, Ot = null, ps(wt) === st && (Fe = new Fe(ot, et + "enter", xe, c, wt), Fe.target = pt, Fe.relatedTarget = gi, Ot = Fe), gi = Ot, At && xe) e: { for (Fe = At, ot = xe, et = 0, pt = Fe; pt; pt = jf(pt))et++; for (pt = 0, Ot = ot; Ot; Ot = jf(Ot))pt++; for (; 0 < et - pt;)Fe = jf(Fe), et--; for (; 0 < pt - et;)ot = jf(ot), pt--; for (; et--;) { if (Fe === ot || ot !== null && Fe === ot.alternate) break e; Fe = jf(Fe), ot = jf(ot) } Fe = null } else Fe = null; At !== null && mS(Ft, yt, At, Fe, !1), xe !== null && gi !== null && mS(Ft, gi, xe, Fe, !0) } } t: { if (yt = st ? J(st) : window, At = yt.nodeName && yt.nodeName.toLowerCase(), At === "select" || At === "input" && yt.type === "file") var me = df; else if ($h(yt)) if (pf) me = Yr; else { me = bm; var ln = ly } else At = yt.nodeName, !At || At.toLowerCase() !== "input" || yt.type !== "checkbox" && yt.type !== "radio" ? st && Uu(st.elementType) && (me = df) : me = qu; if (me && (me = me(i, st))) { ca(Ft, me, c, wt); break t } ln && ln(i, yt, st), i === "focusout" && st && yt.type === "number" && st.memoizedProps.value != null && Ci(yt, "number", yt.value) } switch (ln = st ? J(st) : window, i) { case "focusin": ($h(ln) || ln.contentEditable === "true") && (Bl = ln, ad = st, zo = null); break; case "focusout": zo = ad = Bl = null; break; case "mousedown": vf = !0; break; case "contextmenu": case "mouseup": case "dragend": vf = !1, Ya(Ft, c, wt); break; case "selectionchange": if (gf) break; case "keydown": case "keyup": Ya(Ft, c, wt) }var Te; if (Iu) t: { switch (i) { case "compositionstart": var Ne = "onCompositionStart"; break t; case "compositionend": Ne = "onCompositionEnd"; break t; case "compositionupdate": Ne = "onCompositionUpdate"; break t }Ne = void 0 } else qr ? Vu(i, c) && (Ne = "onCompositionEnd") : i === "keydown" && c.keyCode === 229 && (Ne = "onCompositionStart"); Ne && (Fu && c.locale !== "ko" && (qr || Ne !== "onCompositionStart" ? Ne === "onCompositionEnd" && qr && (Te = qh()) : (Ks = wt, Xh = "value" in Ks ? Ks.value : Ks.textContent, qr = !0)), ln = xg(st, Ne), 0 < ln.length && (Ne = new cf(Ne, i, null, c, wt), Ft.push({ event: Ne, listeners: ln }), Te ? Ne.data = Te : (Te = Kh(c), Te !== null && (Ne.data = Te)))), (Te = Hu ? Gu(i, c) : Jh(i, c)) && (Ne = xg(st, "onBeforeInput"), 0 < Ne.length && (ln = new cf("onBeforeInput", "beforeinput", null, c, wt), Ft.push({ event: ln, listeners: Ne }), ln.data = Te)), OT(Ft, i, st, c, wt) } dS(Ft, s) }) } function Xd(i, s, c) { return { instance: i, listener: s, currentTarget: c } } function xg(i, s) { for (var c = s + "Capture", d = []; i !== null;) { var v = i, b = v.stateNode; v = v.tag, v !== 5 && v !== 26 && v !== 27 || b === null || (v = Eo(i, c), v != null && d.unshift(Xd(i, v, b)), v = Eo(i, s), v != null && d.push(Xd(i, v, b))), i = i.return } return d } function jf(i) { if (i === null) return null; do i = i.return; while (i && i.tag !== 5 && i.tag !== 27); return i || null } function mS(i, s, c, d, v) { for (var b = s._reactName, O = []; c !== null && c !== d;) { var H = c, Z = H.alternate, st = H.stateNode; if (H = H.tag, Z !== null && Z === d) break; H !== 5 && H !== 26 && H !== 27 || st === null || (Z = st, v ? (st = Eo(c, b), st != null && O.unshift(Xd(c, st, Z))) : v || (st = Eo(c, b), st != null && O.push(Xd(c, st, Z)))), c = c.return } O.length !== 0 && i.push({ event: s, listeners: O }) } var PT = /\r\n?/g, IT = /\u0000|\uFFFD/g; function gS(i) {
		return (typeof i == "string" ? i : "" + i).replace(PT, `
`).replace(IT, "")
	} function vS(i, s) { return s = gS(s), gS(i) === s } function Sg() { } function Bn(i, s, c, d, v, b) { switch (c) { case "children": typeof d == "string" ? s === "body" || s === "textarea" && d === "" || $i(i, d) : (typeof d == "number" || typeof d == "bigint") && s !== "body" && $i(i, "" + d); break; case "className": On(i, "class", d); break; case "tabIndex": On(i, "tabindex", d); break; case "dir": case "role": case "viewBox": case "width": case "height": On(i, c, d); break; case "style": Vh(i, d, b); break; case "data": if (s !== "object") { On(i, "data", d); break } case "src": case "href": if (d === "" && (s !== "a" || c !== "href")) { i.removeAttribute(c); break } if (d == null || typeof d == "function" || typeof d == "symbol" || typeof d == "boolean") { i.removeAttribute(c); break } d = Nu("" + d), i.setAttribute(c, d); break; case "action": case "formAction": if (typeof d == "function") { i.setAttribute(c, "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"); break } else typeof b == "function" && (c === "formAction" ? (s !== "input" && Bn(i, s, "name", v.name, v, null), Bn(i, s, "formEncType", v.formEncType, v, null), Bn(i, s, "formMethod", v.formMethod, v, null), Bn(i, s, "formTarget", v.formTarget, v, null)) : (Bn(i, s, "encType", v.encType, v, null), Bn(i, s, "method", v.method, v, null), Bn(i, s, "target", v.target, v, null))); if (d == null || typeof d == "symbol" || typeof d == "boolean") { i.removeAttribute(c); break } d = Nu("" + d), i.setAttribute(c, d); break; case "onClick": d != null && (i.onclick = Sg); break; case "onScroll": d != null && hn("scroll", i); break; case "onScrollEnd": d != null && hn("scrollend", i); break; case "dangerouslySetInnerHTML": if (d != null) { if (typeof d != "object" || !("__html" in d)) throw Error(n(61)); if (c = d.__html, c != null) { if (v.children != null) throw Error(n(60)); i.innerHTML = c } } break; case "multiple": i.multiple = d && typeof d != "function" && typeof d != "symbol"; break; case "muted": i.muted = d && typeof d != "function" && typeof d != "symbol"; break; case "suppressContentEditableWarning": case "suppressHydrationWarning": case "defaultValue": case "defaultChecked": case "innerHTML": case "ref": break; case "autoFocus": break; case "xlinkHref": if (d == null || typeof d == "function" || typeof d == "boolean" || typeof d == "symbol") { i.removeAttribute("xlink:href"); break } c = Nu("" + d), i.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", c); break; case "contentEditable": case "spellCheck": case "draggable": case "value": case "autoReverse": case "externalResourcesRequired": case "focusable": case "preserveAlpha": d != null && typeof d != "function" && typeof d != "symbol" ? i.setAttribute(c, "" + d) : i.removeAttribute(c); break; case "inert": case "allowFullScreen": case "async": case "autoPlay": case "controls": case "default": case "defer": case "disabled": case "disablePictureInPicture": case "disableRemotePlayback": case "formNoValidate": case "hidden": case "loop": case "noModule": case "noValidate": case "open": case "playsInline": case "readOnly": case "required": case "reversed": case "scoped": case "seamless": case "itemScope": d && typeof d != "function" && typeof d != "symbol" ? i.setAttribute(c, "") : i.removeAttribute(c); break; case "capture": case "download": d === !0 ? i.setAttribute(c, "") : d !== !1 && d != null && typeof d != "function" && typeof d != "symbol" ? i.setAttribute(c, d) : i.removeAttribute(c); break; case "cols": case "rows": case "size": case "span": d != null && typeof d != "function" && typeof d != "symbol" && !isNaN(d) && 1 <= d ? i.setAttribute(c, d) : i.removeAttribute(c); break; case "rowSpan": case "start": d == null || typeof d == "function" || typeof d == "symbol" || isNaN(d) ? i.removeAttribute(c) : i.setAttribute(c, d); break; case "popover": hn("beforetoggle", i), hn("toggle", i), an(i, "popover", d); break; case "xlinkActuate": un(i, "http://www.w3.org/1999/xlink", "xlink:actuate", d); break; case "xlinkArcrole": un(i, "http://www.w3.org/1999/xlink", "xlink:arcrole", d); break; case "xlinkRole": un(i, "http://www.w3.org/1999/xlink", "xlink:role", d); break; case "xlinkShow": un(i, "http://www.w3.org/1999/xlink", "xlink:show", d); break; case "xlinkTitle": un(i, "http://www.w3.org/1999/xlink", "xlink:title", d); break; case "xlinkType": un(i, "http://www.w3.org/1999/xlink", "xlink:type", d); break; case "xmlBase": un(i, "http://www.w3.org/XML/1998/namespace", "xml:base", d); break; case "xmlLang": un(i, "http://www.w3.org/XML/1998/namespace", "xml:lang", d); break; case "xmlSpace": un(i, "http://www.w3.org/XML/1998/namespace", "xml:space", d); break; case "is": an(i, "is", d); break; case "innerText": case "textContent": break; default: (!(2 < c.length) || c[0] !== "o" && c[0] !== "O" || c[1] !== "n" && c[1] !== "N") && (c = rm.get(c) || c, an(i, c, d)) } } function Ey(i, s, c, d, v, b) { switch (c) { case "style": Vh(i, d, b); break; case "dangerouslySetInnerHTML": if (d != null) { if (typeof d != "object" || !("__html" in d)) throw Error(n(61)); if (c = d.__html, c != null) { if (v.children != null) throw Error(n(60)); i.innerHTML = c } } break; case "children": typeof d == "string" ? $i(i, d) : (typeof d == "number" || typeof d == "bigint") && $i(i, "" + d); break; case "onScroll": d != null && hn("scroll", i); break; case "onScrollEnd": d != null && hn("scrollend", i); break; case "onClick": d != null && (i.onclick = Sg); break; case "suppressContentEditableWarning": case "suppressHydrationWarning": case "innerHTML": case "ref": break; case "innerText": case "textContent": break; default: if (!It.hasOwnProperty(c)) t: { if (c[0] === "o" && c[1] === "n" && (v = c.endsWith("Capture"), s = c.slice(2, v ? c.length - 7 : void 0), b = i[Ye] || null, b = b != null ? b[c] : null, typeof b == "function" && i.removeEventListener(s, b, v), typeof d == "function")) { typeof b != "function" && b !== null && (c in i ? i[c] = null : i.hasAttribute(c) && i.removeAttribute(c)), i.addEventListener(s, d, v); break t } c in i ? i[c] = d : d === !0 ? i.setAttribute(c, "") : an(i, c, d) } } } function oa(i, s, c) { switch (s) { case "div": case "span": case "svg": case "path": case "a": case "g": case "p": case "li": break; case "img": hn("error", i), hn("load", i); var d = !1, v = !1, b; for (b in c) if (c.hasOwnProperty(b)) { var O = c[b]; if (O != null) switch (b) { case "src": d = !0; break; case "srcSet": v = !0; break; case "children": case "dangerouslySetInnerHTML": throw Error(n(137, s)); default: Bn(i, s, b, O, c, null) } } v && Bn(i, s, "srcSet", c.srcSet, c, null), d && Bn(i, s, "src", c.src, c, null); return; case "input": hn("invalid", i); var H = b = O = v = null, Z = null, st = null; for (d in c) if (c.hasOwnProperty(d)) { var wt = c[d]; if (wt != null) switch (d) { case "name": v = wt; break; case "type": O = wt; break; case "checked": Z = wt; break; case "defaultChecked": st = wt; break; case "value": b = wt; break; case "defaultValue": H = wt; break; case "children": case "dangerouslySetInnerHTML": if (wt != null) throw Error(n(137, s)); break; default: Bn(i, s, d, wt, c, null) } } Fi(i, b, H, Z, st, O, v, !1), sn(i); return; case "select": hn("invalid", i), d = O = b = null; for (v in c) if (c.hasOwnProperty(v) && (H = c[v], H != null)) switch (v) { case "value": b = H; break; case "defaultValue": O = H; break; case "multiple": d = H; default: Bn(i, s, v, H, c, null) }s = b, c = O, i.multiple = !!d, s != null ? jn(i, !!d, s, !1) : c != null && jn(i, !!d, c, !0); return; case "textarea": hn("invalid", i), b = v = d = null; for (O in c) if (c.hasOwnProperty(O) && (H = c[O], H != null)) switch (O) { case "value": d = H; break; case "defaultValue": v = H; break; case "children": b = H; break; case "dangerouslySetInnerHTML": if (H != null) throw Error(n(91)); break; default: Bn(i, s, O, H, c, null) }ms(i, d, v, b), sn(i); return; case "option": for (Z in c) if (c.hasOwnProperty(Z) && (d = c[Z], d != null)) switch (Z) { case "selected": i.selected = d && typeof d != "function" && typeof d != "symbol"; break; default: Bn(i, s, Z, d, c, null) }return; case "dialog": hn("cancel", i), hn("close", i); break; case "iframe": case "object": hn("load", i); break; case "video": case "audio": for (d = 0; d < Gd.length; d++)hn(Gd[d], i); break; case "image": hn("error", i), hn("load", i); break; case "details": hn("toggle", i); break; case "embed": case "source": case "link": hn("error", i), hn("load", i); case "area": case "base": case "br": case "col": case "hr": case "keygen": case "meta": case "param": case "track": case "wbr": case "menuitem": for (st in c) if (c.hasOwnProperty(st) && (d = c[st], d != null)) switch (st) { case "children": case "dangerouslySetInnerHTML": throw Error(n(137, s)); default: Bn(i, s, st, d, c, null) }return; default: if (Uu(s)) { for (wt in c) c.hasOwnProperty(wt) && (d = c[wt], d !== void 0 && Ey(i, s, wt, d, c, void 0)); return } }for (H in c) c.hasOwnProperty(H) && (d = c[H], d != null && Bn(i, s, H, d, c, null)) } function HT(i, s, c, d) { switch (s) { case "div": case "span": case "svg": case "path": case "a": case "g": case "p": case "li": break; case "input": var v = null, b = null, O = null, H = null, Z = null, st = null, wt = null; for (At in c) { var Ft = c[At]; if (c.hasOwnProperty(At) && Ft != null) switch (At) { case "checked": break; case "value": break; case "defaultValue": Z = Ft; default: d.hasOwnProperty(At) || Bn(i, s, At, null, d, Ft) } } for (var yt in d) { var At = d[yt]; if (Ft = c[yt], d.hasOwnProperty(yt) && (At != null || Ft != null)) switch (yt) { case "type": b = At; break; case "name": v = At; break; case "checked": st = At; break; case "defaultChecked": wt = At; break; case "value": O = At; break; case "defaultValue": H = At; break; case "children": case "dangerouslySetInnerHTML": if (At != null) throw Error(n(137, s)); break; default: At !== Ft && Bn(i, s, yt, At, d, Ft) } } Mn(i, O, H, Z, st, wt, b, v); return; case "select": At = O = H = yt = null; for (b in c) if (Z = c[b], c.hasOwnProperty(b) && Z != null) switch (b) { case "value": break; case "multiple": At = Z; default: d.hasOwnProperty(b) || Bn(i, s, b, null, d, Z) }for (v in d) if (b = d[v], Z = c[v], d.hasOwnProperty(v) && (b != null || Z != null)) switch (v) { case "value": yt = b; break; case "defaultValue": H = b; break; case "multiple": O = b; default: b !== Z && Bn(i, s, v, b, d, Z) }s = H, c = O, d = At, yt != null ? jn(i, !!c, yt, !1) : !!d != !!c && (s != null ? jn(i, !!c, s, !0) : jn(i, !!c, c ? [] : "", !1)); return; case "textarea": At = yt = null; for (H in c) if (v = c[H], c.hasOwnProperty(H) && v != null && !d.hasOwnProperty(H)) switch (H) { case "value": break; case "children": break; default: Bn(i, s, H, null, d, v) }for (O in d) if (v = d[O], b = c[O], d.hasOwnProperty(O) && (v != null || b != null)) switch (O) { case "value": yt = v; break; case "defaultValue": At = v; break; case "children": break; case "dangerouslySetInnerHTML": if (v != null) throw Error(n(91)); break; default: v !== b && Bn(i, s, O, v, d, b) }bi(i, yt, At); return; case "option": for (var xe in c) if (yt = c[xe], c.hasOwnProperty(xe) && yt != null && !d.hasOwnProperty(xe)) switch (xe) { case "selected": i.selected = !1; break; default: Bn(i, s, xe, null, d, yt) }for (Z in d) if (yt = d[Z], At = c[Z], d.hasOwnProperty(Z) && yt !== At && (yt != null || At != null)) switch (Z) { case "selected": i.selected = yt && typeof yt != "function" && typeof yt != "symbol"; break; default: Bn(i, s, Z, yt, d, At) }return; case "img": case "link": case "area": case "base": case "br": case "col": case "embed": case "hr": case "keygen": case "meta": case "param": case "source": case "track": case "wbr": case "menuitem": for (var Fe in c) yt = c[Fe], c.hasOwnProperty(Fe) && yt != null && !d.hasOwnProperty(Fe) && Bn(i, s, Fe, null, d, yt); for (st in d) if (yt = d[st], At = c[st], d.hasOwnProperty(st) && yt !== At && (yt != null || At != null)) switch (st) { case "children": case "dangerouslySetInnerHTML": if (yt != null) throw Error(n(137, s)); break; default: Bn(i, s, st, yt, d, At) }return; default: if (Uu(s)) { for (var gi in c) yt = c[gi], c.hasOwnProperty(gi) && yt !== void 0 && !d.hasOwnProperty(gi) && Ey(i, s, gi, void 0, d, yt); for (wt in d) yt = d[wt], At = c[wt], !d.hasOwnProperty(wt) || yt === At || yt === void 0 && At === void 0 || Ey(i, s, wt, yt, d, At); return } }for (var ot in c) yt = c[ot], c.hasOwnProperty(ot) && yt != null && !d.hasOwnProperty(ot) && Bn(i, s, ot, null, d, yt); for (Ft in d) yt = d[Ft], At = c[Ft], !d.hasOwnProperty(Ft) || yt === At || yt == null && At == null || Bn(i, s, Ft, yt, d, At) } var Ty = null, Ay = null; function Mg(i) { return i.nodeType === 9 ? i : i.ownerDocument } function yS(i) { switch (i) { case "http://www.w3.org/2000/svg": return 1; case "http://www.w3.org/1998/Math/MathML": return 2; default: return 0 } } function _S(i, s) { if (i === 0) switch (s) { case "svg": return 1; case "math": return 2; default: return 0 }return i === 1 && s === "foreignObject" ? 0 : i } function Ry(i, s) { return i === "textarea" || i === "noscript" || typeof s.children == "string" || typeof s.children == "number" || typeof s.children == "bigint" || typeof s.dangerouslySetInnerHTML == "object" && s.dangerouslySetInnerHTML !== null && s.dangerouslySetInnerHTML.__html != null } var wy = null; function FT() { var i = window.event; return i && i.type === "popstate" ? i === wy ? !1 : (wy = i, !0) : (wy = null, !1) } var xS = typeof setTimeout == "function" ? setTimeout : void 0, VT = typeof clearTimeout == "function" ? clearTimeout : void 0, SS = typeof Promise == "function" ? Promise : void 0, GT = typeof queueMicrotask == "function" ? queueMicrotask : typeof SS < "u" ? function (i) { return SS.resolve(null).then(i).catch(XT) } : xS; function XT(i) { setTimeout(function () { throw i }) } function Cy(i, s) { var c = s, d = 0; do { var v = c.nextSibling; if (i.removeChild(c), v && v.nodeType === 8) if (c = v.data, c === "/$") { if (d === 0) { i.removeChild(v), Kd(s); return } d-- } else c !== "$" && c !== "$?" && c !== "$!" || d++; c = v } while (c); Kd(s) } function Dy(i) { var s = i.firstChild; for (s && s.nodeType === 10 && (s = s.nextSibling); s;) { var c = s; switch (s = s.nextSibling, c.nodeName) { case "HTML": case "HEAD": case "BODY": Dy(c), Ul(c); continue; case "SCRIPT": case "STYLE": continue; case "LINK": if (c.rel.toLowerCase() === "stylesheet") continue }i.removeChild(c) } } function qT(i, s, c, d) { for (; i.nodeType === 1;) { var v = c; if (i.nodeName.toLowerCase() !== s.toLowerCase()) { if (!d && (i.nodeName !== "INPUT" || i.type !== "hidden")) break } else if (d) { if (!i[Qs]) switch (s) { case "meta": if (!i.hasAttribute("itemprop")) break; return i; case "link": if (b = i.getAttribute("rel"), b === "stylesheet" && i.hasAttribute("data-precedence")) break; if (b !== v.rel || i.getAttribute("href") !== (v.href == null ? null : v.href) || i.getAttribute("crossorigin") !== (v.crossOrigin == null ? null : v.crossOrigin) || i.getAttribute("title") !== (v.title == null ? null : v.title)) break; return i; case "style": if (i.hasAttribute("data-precedence")) break; return i; case "script": if (b = i.getAttribute("src"), (b !== (v.src == null ? null : v.src) || i.getAttribute("type") !== (v.type == null ? null : v.type) || i.getAttribute("crossorigin") !== (v.crossOrigin == null ? null : v.crossOrigin)) && b && i.hasAttribute("async") && !i.hasAttribute("itemprop")) break; return i; default: return i } } else if (s === "input" && i.type === "hidden") { var b = v.name == null ? null : "" + v.name; if (v.type === "hidden" && i.getAttribute("name") === b) return i } else return i; if (i = wr(i.nextSibling), i === null) break } return null } function YT(i, s, c) { if (s === "") return null; for (; i.nodeType !== 3;)if ((i.nodeType !== 1 || i.nodeName !== "INPUT" || i.type !== "hidden") && !c || (i = wr(i.nextSibling), i === null)) return null; return i } function wr(i) { for (; i != null; i = i.nextSibling) { var s = i.nodeType; if (s === 1 || s === 3) break; if (s === 8) { if (s = i.data, s === "$" || s === "$!" || s === "$?" || s === "F!" || s === "F") break; if (s === "/$") return null } } return i } function MS(i) { i = i.previousSibling; for (var s = 0; i;) { if (i.nodeType === 8) { var c = i.data; if (c === "$" || c === "$!" || c === "$?") { if (s === 0) return i; s-- } else c === "/$" && s++ } i = i.previousSibling } return null } function bS(i, s, c) { switch (s = Mg(c), i) { case "html": if (i = s.documentElement, !i) throw Error(n(452)); return i; case "head": if (i = s.head, !i) throw Error(n(453)); return i; case "body": if (i = s.body, !i) throw Error(n(454)); return i; default: throw Error(n(451)) } } var Ws = new Map, ES = new Set; function bg(i) { return typeof i.getRootNode == "function" ? i.getRootNode() : i.ownerDocument } var ao = $.d; $.d = { f: WT, r: kT, D: jT, C: ZT, L: QT, m: KT, X: $T, S: JT, M: tA }; function WT() { var i = ao.f(), s = eo(); return i || s } function kT(i) { var s = P(i); s !== null && s.tag === 5 && s.type === "form" ? $m(s) : ao.r(i) } var Zf = typeof document > "u" ? null : document; function TS(i, s, c) { var d = Zf; if (d && typeof s == "string" && s) { var v = _i(s); v = 'link[rel="' + i + '"][href="' + v + '"]', typeof c == "string" && (v += '[crossorigin="' + c + '"]'), ES.has(v) || (ES.add(v), i = { rel: i, crossOrigin: c, href: s }, d.querySelector(v) === null && (s = d.createElement("link"), oa(s, "link", i), ht(s), d.head.appendChild(s))) } } function jT(i) { ao.D(i), TS("dns-prefetch", i, null) } function ZT(i, s) { ao.C(i, s), TS("preconnect", i, s) } function QT(i, s, c) { ao.L(i, s, c); var d = Zf; if (d && i && s) { var v = 'link[rel="preload"][as="' + _i(s) + '"]'; s === "image" && c && c.imageSrcSet ? (v += '[imagesrcset="' + _i(c.imageSrcSet) + '"]', typeof c.imageSizes == "string" && (v += '[imagesizes="' + _i(c.imageSizes) + '"]')) : v += '[href="' + _i(i) + '"]'; var b = v; switch (s) { case "style": b = Qf(i); break; case "script": b = Kf(i) }Ws.has(b) || (i = L({ rel: "preload", href: s === "image" && c && c.imageSrcSet ? void 0 : i, as: s }, c), Ws.set(b, i), d.querySelector(v) !== null || s === "style" && d.querySelector(qd(b)) || s === "script" && d.querySelector(Yd(b)) || (s = d.createElement("link"), oa(s, "link", i), ht(s), d.head.appendChild(s))) } } function KT(i, s) { ao.m(i, s); var c = Zf; if (c && i) { var d = s && typeof s.as == "string" ? s.as : "script", v = 'link[rel="modulepreload"][as="' + _i(d) + '"][href="' + _i(i) + '"]', b = v; switch (d) { case "audioworklet": case "paintworklet": case "serviceworker": case "sharedworker": case "worker": case "script": b = Kf(i) }if (!Ws.has(b) && (i = L({ rel: "modulepreload", href: i }, s), Ws.set(b, i), c.querySelector(v) === null)) { switch (d) { case "audioworklet": case "paintworklet": case "serviceworker": case "sharedworker": case "worker": case "script": if (c.querySelector(Yd(b))) return }d = c.createElement("link"), oa(d, "link", i), ht(d), c.head.appendChild(d) } } } function JT(i, s, c) { ao.S(i, s, c); var d = Zf; if (d && i) { var v = gt(d).hoistableStyles, b = Qf(i); s = s || "default"; var O = v.get(b); if (!O) { var H = { loading: 0, preload: null }; if (O = d.querySelector(qd(b))) H.loading = 5; else { i = L({ rel: "stylesheet", href: i, "data-precedence": s }, c), (c = Ws.get(b)) && Uy(i, c); var Z = O = d.createElement("link"); ht(Z), oa(Z, "link", i), Z._p = new Promise(function (st, wt) { Z.onload = st, Z.onerror = wt }), Z.addEventListener("load", function () { H.loading |= 1 }), Z.addEventListener("error", function () { H.loading |= 2 }), H.loading |= 4, Eg(O, s, d) } O = { type: "stylesheet", instance: O, count: 1, state: H }, v.set(b, O) } } } function $T(i, s) { ao.X(i, s); var c = Zf; if (c && i) { var d = gt(c).hoistableScripts, v = Kf(i), b = d.get(v); b || (b = c.querySelector(Yd(v)), b || (i = L({ src: i, async: !0 }, s), (s = Ws.get(v)) && Ny(i, s), b = c.createElement("script"), ht(b), oa(b, "link", i), c.head.appendChild(b)), b = { type: "script", instance: b, count: 1, state: null }, d.set(v, b)) } } function tA(i, s) { ao.M(i, s); var c = Zf; if (c && i) { var d = gt(c).hoistableScripts, v = Kf(i), b = d.get(v); b || (b = c.querySelector(Yd(v)), b || (i = L({ src: i, async: !0, type: "module" }, s), (s = Ws.get(v)) && Ny(i, s), b = c.createElement("script"), ht(b), oa(b, "link", i), c.head.appendChild(b)), b = { type: "script", instance: b, count: 1, state: null }, d.set(v, b)) } } function AS(i, s, c, d) { var v = (v = Ut.current) ? bg(v) : null; if (!v) throw Error(n(446)); switch (i) { case "meta": case "title": return null; case "style": return typeof c.precedence == "string" && typeof c.href == "string" ? (s = Qf(c.href), c = gt(v).hoistableStyles, d = c.get(s), d || (d = { type: "style", instance: null, count: 0, state: null }, c.set(s, d)), d) : { type: "void", instance: null, count: 0, state: null }; case "link": if (c.rel === "stylesheet" && typeof c.href == "string" && typeof c.precedence == "string") { i = Qf(c.href); var b = gt(v).hoistableStyles, O = b.get(i); if (O || (v = v.ownerDocument || v, O = { type: "stylesheet", instance: null, count: 0, state: { loading: 0, preload: null } }, b.set(i, O), (b = v.querySelector(qd(i))) && !b._p && (O.instance = b, O.state.loading = 5), Ws.has(i) || (c = { rel: "preload", as: "style", href: c.href, crossOrigin: c.crossOrigin, integrity: c.integrity, media: c.media, hrefLang: c.hrefLang, referrerPolicy: c.referrerPolicy }, Ws.set(i, c), b || eA(v, i, c, O.state))), s && d === null) throw Error(n(528, "")); return O } if (s && d !== null) throw Error(n(529, "")); return null; case "script": return s = c.async, c = c.src, typeof c == "string" && s && typeof s != "function" && typeof s != "symbol" ? (s = Kf(c), c = gt(v).hoistableScripts, d = c.get(s), d || (d = { type: "script", instance: null, count: 0, state: null }, c.set(s, d)), d) : { type: "void", instance: null, count: 0, state: null }; default: throw Error(n(444, i)) } } function Qf(i) { return 'href="' + _i(i) + '"' } function qd(i) { return 'link[rel="stylesheet"][' + i + "]" } function RS(i) { return L({}, i, { "data-precedence": i.precedence, precedence: null }) } function eA(i, s, c, d) { i.querySelector('link[rel="preload"][as="style"][' + s + "]") ? d.loading = 1 : (s = i.createElement("link"), d.preload = s, s.addEventListener("load", function () { return d.loading |= 1 }), s.addEventListener("error", function () { return d.loading |= 2 }), oa(s, "link", c), ht(s), i.head.appendChild(s)) } function Kf(i) { return '[src="' + _i(i) + '"]' } function Yd(i) { return "script[async]" + i } function wS(i, s, c) { if (s.count++, s.instance === null) switch (s.type) { case "style": var d = i.querySelector('style[data-href~="' + _i(c.href) + '"]'); if (d) return s.instance = d, ht(d), d; var v = L({}, c, { "data-href": c.href, "data-precedence": c.precedence, href: null, precedence: null }); return d = (i.ownerDocument || i).createElement("style"), ht(d), oa(d, "style", v), Eg(d, c.precedence, i), s.instance = d; case "stylesheet": v = Qf(c.href); var b = i.querySelector(qd(v)); if (b) return s.state.loading |= 4, s.instance = b, ht(b), b; d = RS(c), (v = Ws.get(v)) && Uy(d, v), b = (i.ownerDocument || i).createElement("link"), ht(b); var O = b; return O._p = new Promise(function (H, Z) { O.onload = H, O.onerror = Z }), oa(b, "link", d), s.state.loading |= 4, Eg(b, c.precedence, i), s.instance = b; case "script": return b = Kf(c.src), (v = i.querySelector(Yd(b))) ? (s.instance = v, ht(v), v) : (d = c, (v = Ws.get(b)) && (d = L({}, c), Ny(d, v)), i = i.ownerDocument || i, v = i.createElement("script"), ht(v), oa(v, "link", d), i.head.appendChild(v), s.instance = v); case "void": return null; default: throw Error(n(443, s.type)) } else s.type === "stylesheet" && (s.state.loading & 4) === 0 && (d = s.instance, s.state.loading |= 4, Eg(d, c.precedence, i)); return s.instance } function Eg(i, s, c) { for (var d = c.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'), v = d.length ? d[d.length - 1] : null, b = v, O = 0; O < d.length; O++) { var H = d[O]; if (H.dataset.precedence === s) b = H; else if (b !== v) break } b ? b.parentNode.insertBefore(i, b.nextSibling) : (s = c.nodeType === 9 ? c.head : c, s.insertBefore(i, s.firstChild)) } function Uy(i, s) { i.crossOrigin == null && (i.crossOrigin = s.crossOrigin), i.referrerPolicy == null && (i.referrerPolicy = s.referrerPolicy), i.title == null && (i.title = s.title) } function Ny(i, s) { i.crossOrigin == null && (i.crossOrigin = s.crossOrigin), i.referrerPolicy == null && (i.referrerPolicy = s.referrerPolicy), i.integrity == null && (i.integrity = s.integrity) } var Tg = null; function CS(i, s, c) { if (Tg === null) { var d = new Map, v = Tg = new Map; v.set(c, d) } else v = Tg, d = v.get(c), d || (d = new Map, v.set(c, d)); if (d.has(i)) return d; for (d.set(i, null), c = c.getElementsByTagName(i), v = 0; v < c.length; v++) { var b = c[v]; if (!(b[Qs] || b[kn] || i === "link" && b.getAttribute("rel") === "stylesheet") && b.namespaceURI !== "http://www.w3.org/2000/svg") { var O = b.getAttribute(s) || ""; O = i + O; var H = d.get(O); H ? H.push(b) : d.set(O, [b]) } } return d } function DS(i, s, c) { i = i.ownerDocument || i, i.head.insertBefore(c, s === "title" ? i.querySelector("head > title") : null) } function nA(i, s, c) { if (c === 1 || s.itemProp != null) return !1; switch (i) { case "meta": case "title": return !0; case "style": if (typeof s.precedence != "string" || typeof s.href != "string" || s.href === "") break; return !0; case "link": if (typeof s.rel != "string" || typeof s.href != "string" || s.href === "" || s.onLoad || s.onError) break; switch (s.rel) { case "stylesheet": return i = s.disabled, typeof s.precedence == "string" && i == null; default: return !0 }case "script": if (s.async && typeof s.async != "function" && typeof s.async != "symbol" && !s.onLoad && !s.onError && s.src && typeof s.src == "string") return !0 }return !1 } function US(i) { return !(i.type === "stylesheet" && (i.state.loading & 3) === 0) } var Wd = null; function iA() { } function aA(i, s, c) { if (Wd === null) throw Error(n(475)); var d = Wd; if (s.type === "stylesheet" && (typeof c.media != "string" || matchMedia(c.media).matches !== !1) && (s.state.loading & 4) === 0) { if (s.instance === null) { var v = Qf(c.href), b = i.querySelector(qd(v)); if (b) { i = b._p, i !== null && typeof i == "object" && typeof i.then == "function" && (d.count++, d = Ag.bind(d), i.then(d, d)), s.state.loading |= 4, s.instance = b, ht(b); return } b = i.ownerDocument || i, c = RS(c), (v = Ws.get(v)) && Uy(c, v), b = b.createElement("link"), ht(b); var O = b; O._p = new Promise(function (H, Z) { O.onload = H, O.onerror = Z }), oa(b, "link", c), s.instance = b } d.stylesheets === null && (d.stylesheets = new Map), d.stylesheets.set(s, i), (i = s.state.preload) && (s.state.loading & 3) === 0 && (d.count++, s = Ag.bind(d), i.addEventListener("load", s), i.addEventListener("error", s)) } } function sA() { if (Wd === null) throw Error(n(475)); var i = Wd; return i.stylesheets && i.count === 0 && Oy(i, i.stylesheets), 0 < i.count ? function (s) { var c = setTimeout(function () { if (i.stylesheets && Oy(i, i.stylesheets), i.unsuspend) { var d = i.unsuspend; i.unsuspend = null, d() } }, 6e4); return i.unsuspend = s, function () { i.unsuspend = null, clearTimeout(c) } } : null } function Ag() { if (this.count--, this.count === 0) { if (this.stylesheets) Oy(this, this.stylesheets); else if (this.unsuspend) { var i = this.unsuspend; this.unsuspend = null, i() } } } var Rg = null; function Oy(i, s) { i.stylesheets = null, i.unsuspend !== null && (i.count++, Rg = new Map, s.forEach(rA, i), Rg = null, Ag.call(i)) } function rA(i, s) { if (!(s.state.loading & 4)) { var c = Rg.get(i); if (c) var d = c.get(null); else { c = new Map, Rg.set(i, c); for (var v = i.querySelectorAll("link[data-precedence],style[data-precedence]"), b = 0; b < v.length; b++) { var O = v[b]; (O.nodeName === "LINK" || O.getAttribute("media") !== "not all") && (c.set(O.dataset.precedence, O), d = O) } d && c.set(null, d) } v = s.instance, O = v.getAttribute("data-precedence"), b = c.get(O) || d, b === d && c.set(null, v), c.set(O, v), this.count++, d = Ag.bind(this), v.addEventListener("load", d), v.addEventListener("error", d), b ? b.parentNode.insertBefore(v, b.nextSibling) : (i = i.nodeType === 9 ? i.head : i, i.insertBefore(v, i.firstChild)), s.state.loading |= 4 } } var kd = { $$typeof: M, Provider: null, Consumer: null, _currentValue: Tt, _currentValue2: Tt, _threadCount: 0 }; function lA(i, s, c, d, v, b, O, H) { this.tag = 1, this.containerInfo = i, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null, this.callbackPriority = 0, this.expirationTimes = Pi(-1), this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = Pi(0), this.hiddenUpdates = Pi(null), this.identifierPrefix = d, this.onUncaughtError = v, this.onCaughtError = b, this.onRecoverableError = O, this.pooledCache = null, this.pooledCacheLanes = 0, this.formState = H, this.incompleteTransitions = new Map } function NS(i, s, c, d, v, b, O, H, Z, st, wt, Ft) { return i = new lA(i, s, c, O, H, Z, st, Ft), s = 1, b === !0 && (s |= 24), b = ai(3, null, null, s), i.current = b, b.stateNode = i, s = fd(), s.refCount++, i.pooledCache = s, s.refCount++, b.memoizedState = { element: d, isDehydrated: c, cache: s }, ia(b), i } function OS(i) { return i ? (i = kr, i) : kr } function LS(i, s, c, d, v, b) { v = OS(v), d.context === null ? d.context = v : d.pendingContext = v, d = La(s), d.payload = { element: c }, b = b === void 0 ? null : b, b !== null && (d.callback = b), c = za(i, d, s), c !== null && (mi(c, i, s), fl(c, i, s)) } function zS(i, s) { if (i = i.memoizedState, i !== null && i.dehydrated !== null) { var c = i.retryLane; i.retryLane = c !== 0 && c < s ? c : s } } function Ly(i, s) { zS(i, s), (i = i.alternate) && zS(i, s) } function BS(i) { if (i.tag === 13) { var s = sr(i, 67108864); s !== null && mi(s, i, 67108864), Ly(i, 67108864) } } var wg = !0; function oA(i, s, c, d) { var v = z.T; z.T = null; var b = $.p; try { $.p = 2, zy(i, s, c, d) } finally { $.p = b, z.T = v } } function uA(i, s, c, d) { var v = z.T; z.T = null; var b = $.p; try { $.p = 8, zy(i, s, c, d) } finally { $.p = b, z.T = v } } function zy(i, s, c, d) { if (wg) { var v = By(d); if (v === null) by(i, s, d, Cg, c), IS(i, d); else if (fA(v, i, s, c, d)) d.stopPropagation(); else if (IS(i, d), s & 4 && -1 < cA.indexOf(i)) { for (; v !== null;) { var b = P(v); if (b !== null) switch (b.tag) { case 3: if (b = b.stateNode, b.current.memoizedState.isDehydrated) { var O = $t(b.pendingLanes); if (O !== 0) { var H = b; for (H.pendingLanes |= 2, H.entangledLanes |= 2; O;) { var Z = 1 << 31 - ye(O); H.entanglements[1] |= Z, O &= ~Z } Un(b), (Ie & 6) === 0 && (en = bt() + 500, rn(0)) } } break; case 13: H = sr(b, 2), H !== null && mi(H, b, 2), eo(), Ly(b, 2) }if (b = By(d), b === null && by(i, s, d, Cg, c), b === v) break; v = b } v !== null && d.stopPropagation() } else by(i, s, d, null, c) } } function By(i) { return i = Ou(i), Py(i) } var Cg = null; function Py(i) { if (Cg = null, i = ps(i), i !== null) { var s = nt(i); if (s === null) i = null; else { var c = s.tag; if (c === 13) { if (i = Et(s), i !== null) return i; i = null } else if (c === 3) { if (s.stateNode.current.memoizedState.isDehydrated) return s.tag === 3 ? s.stateNode.containerInfo : null; i = null } else s !== i && (i = null) } } return Cg = i, null } function PS(i) { switch (i) { case "beforetoggle": case "cancel": case "click": case "close": case "contextmenu": case "copy": case "cut": case "auxclick": case "dblclick": case "dragend": case "dragstart": case "drop": case "focusin": case "focusout": case "input": case "invalid": case "keydown": case "keypress": case "keyup": case "mousedown": case "mouseup": case "paste": case "pause": case "play": case "pointercancel": case "pointerdown": case "pointerup": case "ratechange": case "reset": case "resize": case "seeked": case "submit": case "toggle": case "touchcancel": case "touchend": case "touchstart": case "volumechange": case "change": case "selectionchange": case "textInput": case "compositionstart": case "compositionend": case "compositionupdate": case "beforeblur": case "afterblur": case "beforeinput": case "blur": case "fullscreenchange": case "focus": case "hashchange": case "popstate": case "select": case "selectstart": return 2; case "drag": case "dragenter": case "dragexit": case "dragleave": case "dragover": case "mousemove": case "mouseout": case "mouseover": case "pointermove": case "pointerout": case "pointerover": case "scroll": case "touchmove": case "wheel": case "mouseenter": case "mouseleave": case "pointerenter": case "pointerleave": return 8; case "message": switch (Pt()) { case Ct: return 2; case pe: return 8; case te: case oe: return 32; case qe: return 268435456; default: return 32 }default: return 32 } } var Iy = !1, su = null, ru = null, lu = null, jd = new Map, Zd = new Map, ou = [], cA = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" "); function IS(i, s) { switch (i) { case "focusin": case "focusout": su = null; break; case "dragenter": case "dragleave": ru = null; break; case "mouseover": case "mouseout": lu = null; break; case "pointerover": case "pointerout": jd.delete(s.pointerId); break; case "gotpointercapture": case "lostpointercapture": Zd.delete(s.pointerId) } } function Qd(i, s, c, d, v, b) { return i === null || i.nativeEvent !== b ? (i = { blockedOn: s, domEventName: c, eventSystemFlags: d, nativeEvent: b, targetContainers: [v] }, s !== null && (s = P(s), s !== null && BS(s)), i) : (i.eventSystemFlags |= d, s = i.targetContainers, v !== null && s.indexOf(v) === -1 && s.push(v), i) } function fA(i, s, c, d, v) { switch (s) { case "focusin": return su = Qd(su, i, s, c, d, v), !0; case "dragenter": return ru = Qd(ru, i, s, c, d, v), !0; case "mouseover": return lu = Qd(lu, i, s, c, d, v), !0; case "pointerover": var b = v.pointerId; return jd.set(b, Qd(jd.get(b) || null, i, s, c, d, v)), !0; case "gotpointercapture": return b = v.pointerId, Zd.set(b, Qd(Zd.get(b) || null, i, s, c, d, v)), !0 }return !1 } function HS(i) { var s = ps(i.target); if (s !== null) { var c = nt(s); if (c !== null) { if (s = c.tag, s === 13) { if (s = Et(c), s !== null) { i.blockedOn = s, hs(i.priority, function () { if (c.tag === 13) { var d = la(), v = sr(c, d); v !== null && mi(v, c, d), Ly(c, d) } }); return } } else if (s === 3 && c.stateNode.current.memoizedState.isDehydrated) { i.blockedOn = c.tag === 3 ? c.stateNode.containerInfo : null; return } } } i.blockedOn = null } function Dg(i) { if (i.blockedOn !== null) return !1; for (var s = i.targetContainers; 0 < s.length;) { var c = By(i.nativeEvent); if (c === null) { c = i.nativeEvent; var d = new c.constructor(c.type, c); sf = d, c.target.dispatchEvent(d), sf = null } else return s = P(c), s !== null && BS(s), i.blockedOn = c, !1; s.shift() } return !0 } function FS(i, s, c) { Dg(i) && c.delete(s) } function hA() { Iy = !1, su !== null && Dg(su) && (su = null), ru !== null && Dg(ru) && (ru = null), lu !== null && Dg(lu) && (lu = null), jd.forEach(FS), Zd.forEach(FS) } function Ug(i, s) { i.blockedOn === s && (i.blockedOn = null, Iy || (Iy = !0, r.unstable_scheduleCallback(r.unstable_NormalPriority, hA))) } var Ng = null; function VS(i) { Ng !== i && (Ng = i, r.unstable_scheduleCallback(r.unstable_NormalPriority, function () { Ng === i && (Ng = null); for (var s = 0; s < i.length; s += 3) { var c = i[s], d = i[s + 1], v = i[s + 2]; if (typeof d != "function") { if (Py(d || c) === null) continue; break } var b = P(c); b !== null && (i.splice(s, 3), s -= 3, xd(b, { pending: !0, data: v, method: c.method, action: d }, d, v)) } })) } function Kd(i) { function s(Z) { return Ug(Z, i) } su !== null && Ug(su, i), ru !== null && Ug(ru, i), lu !== null && Ug(lu, i), jd.forEach(s), Zd.forEach(s); for (var c = 0; c < ou.length; c++) { var d = ou[c]; d.blockedOn === i && (d.blockedOn = null) } for (; 0 < ou.length && (c = ou[0], c.blockedOn === null);)HS(c), c.blockedOn === null && ou.shift(); if (c = (i.ownerDocument || i).$$reactFormReplay, c != null) for (d = 0; d < c.length; d += 3) { var v = c[d], b = c[d + 1], O = v[Ye] || null; if (typeof b == "function") O || VS(c); else if (O) { var H = null; if (b && b.hasAttribute("formAction")) { if (v = b, O = b[Ye] || null) H = O.formAction; else if (Py(v) !== null) continue } else H = O.action; typeof H == "function" ? c[d + 1] = H : (c.splice(d, 3), d -= 3), VS(c) } } } function Hy(i) { this._internalRoot = i } Og.prototype.render = Hy.prototype.render = function (i) { var s = this._internalRoot; if (s === null) throw Error(n(409)); var c = s.current, d = la(); LS(c, d, i, s, null, null) }, Og.prototype.unmount = Hy.prototype.unmount = function () { var i = this._internalRoot; if (i !== null) { this._internalRoot = null; var s = i.containerInfo; i.tag === 0 && Wt(), LS(i.current, 2, null, i, null, null), eo(), s[ds] = null } }; function Og(i) { this._internalRoot = i } Og.prototype.unstable_scheduleHydration = function (i) { if (i) { var s = bo(); i = { blockedOn: null, target: i, priority: s }; for (var c = 0; c < ou.length && s !== 0 && s < ou[c].priority; c++); ou.splice(c, 0, i), c === 0 && HS(i) } }; var GS = t.version; if (GS !== "19.0.0") throw Error(n(527, GS, "19.0.0")); $.findDOMNode = function (i) { var s = i._reactInternals; if (s === void 0) throw typeof i.render == "function" ? Error(n(188)) : (i = Object.keys(i).join(","), Error(n(268, i))); return i = it(s), i = i !== null ? Dt(i) : null, i = i === null ? null : i.stateNode, i }; var dA = { bundleType: 0, version: "19.0.0", rendererPackageName: "react-dom", currentDispatcherRef: z, findFiberByHostInstance: ps, reconcilerVersion: "19.0.0" }; if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u") { var Lg = __REACT_DEVTOOLS_GLOBAL_HOOK__; if (!Lg.isDisabled && Lg.supportsFiber) try { ge = Lg.inject(dA), he = Lg } catch { } } return fp.createRoot = function (i, s) { if (!a(i)) throw Error(n(299)); var c = !1, d = "", v = lg, b = og, O = ug, H = null; return s != null && (s.unstable_strictMode === !0 && (c = !0), s.identifierPrefix !== void 0 && (d = s.identifierPrefix), s.onUncaughtError !== void 0 && (v = s.onUncaughtError), s.onCaughtError !== void 0 && (b = s.onCaughtError), s.onRecoverableError !== void 0 && (O = s.onRecoverableError), s.unstable_transitionCallbacks !== void 0 && (H = s.unstable_transitionCallbacks)), s = NS(i, 1, !1, null, null, c, d, v, b, O, H, null), i[ds] = s.current, My(i.nodeType === 8 ? i.parentNode : i), new Hy(s) }, fp.hydrateRoot = function (i, s, c) { if (!a(i)) throw Error(n(299)); var d = !1, v = "", b = lg, O = og, H = ug, Z = null, st = null; return c != null && (c.unstable_strictMode === !0 && (d = !0), c.identifierPrefix !== void 0 && (v = c.identifierPrefix), c.onUncaughtError !== void 0 && (b = c.onUncaughtError), c.onCaughtError !== void 0 && (O = c.onCaughtError), c.onRecoverableError !== void 0 && (H = c.onRecoverableError), c.unstable_transitionCallbacks !== void 0 && (Z = c.unstable_transitionCallbacks), c.formState !== void 0 && (st = c.formState)), s = NS(i, 1, !0, s, c ?? null, d, v, b, O, H, Z, st), s.context = OS(null), c = s.current, d = la(), v = La(d), v.callback = null, za(c, v, d), s.current.lanes = d, Ii(s, d), Un(s), i[ds] = s.current, My(i), new Og(s) }, fp.version = "19.0.0", fp
} var JM; function EL() { if (JM) return Y_.exports; JM = 1; function r() { if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function")) try { __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(r) } catch (t) { console.error(t) } } return r(), Y_.exports = bL(), Y_.exports } var TL = EL(); function Th(r, t, e) { return t in r ? Object.defineProperty(r, t, { value: e, enumerable: !0, configurable: !0, writable: !0 }) : r[t] = e, r } function $M(r, t) { var e = Object.keys(r); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(r); t && (n = n.filter(function (a) { return Object.getOwnPropertyDescriptor(r, a).enumerable })), e.push.apply(e, n) } return e } function tb(r) { for (var t = 1; t < arguments.length; t++) { var e = arguments[t] != null ? arguments[t] : {}; t % 2 ? $M(Object(e), !0).forEach(function (n) { Th(r, n, e[n]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(e)) : $M(Object(e)).forEach(function (n) { Object.defineProperty(r, n, Object.getOwnPropertyDescriptor(e, n)) }) } return r } new zt; new zt; function DT(r, t) { if (!(r instanceof t)) throw new TypeError("Cannot call a class as a function") } var js = function r(t, e, n) { var a = this; DT(this, r), Th(this, "dot2", function (o, f) { return a.x * o + a.y * f }), Th(this, "dot3", function (o, f, h) { return a.x * o + a.y * f + a.z * h }), this.x = t, this.y = e, this.z = n }, AL = [new js(1, 1, 0), new js(-1, 1, 0), new js(1, -1, 0), new js(-1, -1, 0), new js(1, 0, 1), new js(-1, 0, 1), new js(1, 0, -1), new js(-1, 0, -1), new js(0, 1, 1), new js(0, -1, 1), new js(0, 1, -1), new js(0, -1, -1)], eb = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180], nb = new Array(512), ib = new Array(512), RL = function (t) { t > 0 && t < 1 && (t *= 65536), t = Math.floor(t), t < 256 && (t |= t << 8); for (var e = 0; e < 256; e++) { var n; e & 1 ? n = eb[e] ^ t & 255 : n = eb[e] ^ t >> 8 & 255, nb[e] = nb[e + 256] = n, ib[e] = ib[e + 256] = AL[n % 12] } }; RL(0); function wL(r) { if (typeof r == "number") r = Math.abs(r); else if (typeof r == "string") { var t = r; r = 0; for (var e = 0; e < t.length; e++)r = (r + (e + 1) * (t.charCodeAt(e) % 96)) % 2147483647 } return r === 0 && (r = 311), r } function ab(r) { var t = wL(r); return function () { var e = t * 48271 % 2147483647; return t = e, e / 2147483647 } } var CL = function r(t) { var e = this; DT(this, r), Th(this, "seed", 0), Th(this, "init", function (n) { e.seed = n, e.value = ab(n) }), Th(this, "value", ab(this.seed)), this.init(t) }, DL = new CL(Math.random()), UL = { radius: 1, center: [0, 0, 0] }; function NL(r, t) { for (var e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : DL, n = tb(tb({}, UL), t), a = n.radius, o = n.center, f = 0; f < r.length; f += 3) { var h = Math.pow(e.value(), .3333333333333333), m = e.value() * 2 - 1, g = e.value() * 2 - 1, _ = e.value() * 2 - 1, x = Math.sqrt(m * m + g * g + _ * _); m = h * m / x, g = h * g / x, _ = h * _ / x, r[f] = m * a + o[0], r[f + 1] = g * a + o[1], r[f + 2] = _ * a + o[2] } return r } const OL = () => parseInt(kp.replace(/\D+/g, "")), UT = OL(), k_ = UT >= 154 ? "opaque_fragment" : "output_fragment"; class LL extends Fv {
	constructor(t) {
		super(t), this.onBeforeCompile = (e, n) => {
			const { isWebGL2: a } = n.capabilities; e.fragmentShader = e.fragmentShader.replace(`#include <${k_}>`, `
        ${a ? `#include <${k_}>` : `#extension GL_OES_standard_derivatives : enable
#include <${k_}>`}
      vec2 cxy = 2.0 * gl_PointCoord - 1.0;
      float r = dot(cxy, cxy);
      float delta = fwidth(r);     
      float mask = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);
      gl_FragColor = vec4(gl_FragColor.rgb, mask * gl_FragColor.a );
      #include <tonemapping_fragment>
      #include <${UT >= 154 ? "colorspace_fragment" : "encodings_fragment"}>
      `)
		}
	}
} const zL = Zt.forwardRef((r, t) => { const [e] = Zt.useState(() => new LL(null)); return Zt.createElement("primitive", Qc({}, r, { object: e, ref: t, attach: "material" })) }); let Uc, hp; const BL = Zt.createContext(null), sb = new Oe, rb = new k, PL = Zt.forwardRef(({ children: r, range: t, limit: e = 1e3, ...n }, a) => { const o = Zt.useRef(null); Zt.useImperativeHandle(a, () => o.current, []); const [f, h] = Zt.useState([]), [[m, g, _]] = Zt.useState(() => [new Float32Array(e * 3), Float32Array.from({ length: e * 3 }, () => 1), Float32Array.from({ length: e }, () => 1)]); Zt.useEffect(() => { o.current.geometry.attributes.position.needsUpdate = !0 }), lS(() => { for (o.current.updateMatrix(), o.current.updateMatrixWorld(), sb.copy(o.current.matrixWorld).invert(), o.current.geometry.drawRange.count = Math.min(e, t !== void 0 ? t : e, f.length), Uc = 0; Uc < f.length; Uc++)hp = f[Uc].current, hp.getWorldPosition(rb).applyMatrix4(sb), rb.toArray(m, Uc * 3), o.current.geometry.attributes.position.needsUpdate = !0, hp.matrixWorldNeedsUpdate = !0, hp.color.toArray(g, Uc * 3), o.current.geometry.attributes.color.needsUpdate = !0, _.set([hp.size], Uc), o.current.geometry.attributes.size.needsUpdate = !0 }); const x = Zt.useMemo(() => ({ getParent: () => o, subscribe: S => (h(M => [...M, S]), () => h(M => M.filter(A => A.current !== S.current))) }), []); return Zt.createElement("points", Qc({ userData: { instances: f }, matrixAutoUpdate: !1, ref: o, raycast: () => null }, n), Zt.createElement("bufferGeometry", null, Zt.createElement("bufferAttribute", { attach: "attributes-position", args: [m, 3], usage: Vc }), Zt.createElement("bufferAttribute", { attach: "attributes-color", args: [g, 3], usage: Vc }), Zt.createElement("bufferAttribute", { attach: "attributes-size", args: [_, 1], usage: Vc })), Zt.createElement(BL.Provider, { value: x }, r)) }), IL = Zt.forwardRef(({ children: r, positions: t, colors: e, sizes: n, stride: a = 3, ...o }, f) => { const h = Zt.useRef(null); return Zt.useImperativeHandle(f, () => h.current, []), lS(() => { const m = h.current.geometry.attributes; m.position.needsUpdate = !0, e && (m.color.needsUpdate = !0), n && (m.size.needsUpdate = !0) }), Zt.createElement("points", Qc({ ref: h }, o), Zt.createElement("bufferGeometry", null, Zt.createElement("bufferAttribute", { attach: "attributes-position", args: [t, a], usage: Vc }), e && Zt.createElement("bufferAttribute", { attach: "attributes-color", args: [e, a], count: e.length / a, usage: Vc }), n && Zt.createElement("bufferAttribute", { attach: "attributes-size", args: [n, 1], count: n.length / a, usage: Vc })), r) }), HL = Zt.forwardRef((r, t) => r.positions instanceof Float32Array ? Zt.createElement(IL, Qc({}, r, { ref: t })) : Zt.createElement(PL, Qc({}, r, { ref: t }))), FL = r => { const t = Zt.useRef(), [e] = Zt.useState(() => { const n = NL(new Float32Array(4998), { radius: 1.2 }); return n.some(isNaN) && console.error("NaN detected in star positions!", n), n }); return lS((n, a) => { t.current.rotation.x -= a / 10, t.current.rotation.y -= a / 15 }), Zt.useEffect(() => { t.current && t.current.geometry.computeBoundingSphere() }, []), St.jsx("group", { rotation: [0, 0, Math.PI / 4], children: St.jsx(HL, { ref: t, positions: e || new Float32Array, stride: 3, frustumCulled: !0, ...r, children: St.jsx(zL, { transparent: !0, color: "#ffffff", size: .002, sizeAttenuation: !0, depthWrite: !1 }) }) }) }, VL = () => St.jsx("div", { className: "w-full h-auto fixed inset-0 z-0", children: St.jsx(xL, { camera: { position: [0, 0, 1] }, children: St.jsx(Zt.Suspense, { fallback: null, children: St.jsx(FL, {}) }) }) }), GL = ({ onComplete: r }) => { const [t, e] = Zt.useState(""), n = "<Hello World /> "; return Zt.useEffect(() => { let a = 0; const o = setInterval(() => { e(n.substring(0, a)), a++, a > n.length && (clearInterval(o), setTimeout(() => { r() }, 1e3)) }, 100); return () => clearInterval(o) }, [r]), St.jsxs("div", { className: "fixed inset-0 z-50 bg-black text-gray-100 flex flex-col items-center justify-center", children: [St.jsxs("div", { className: "cursive mb-4 text-4xl font-mono font-bold", children: [t, " ", St.jsx("span", { className: "animate-blink ml-1", children: " | " })] }), St.jsx("div", { className: "w-[200px] h-[2px] bg-gray-800 rounded relative overflow-hidden", children: St.jsx("div", { className: "w-[40%] h-full bg-white shadow-[0_0_15px_#ffffff] animate-loading-bar" }) })] }) }; function XL() { EA(); const [r, t] = Zt.useState(!1), [e, n] = Zt.useState(!1); return St.jsxs(St.Fragment, { children: [!r && St.jsx(GL, { onComplete: () => t(!0) }), " ", St.jsxs("div", { className: `min-h-screen transition-opacity duration-700 ${r ? "opacity-100" : "opacity-0"} bg-black text-gray-100`, children: [St.jsx(VL, {}), St.jsx(GA, { menuOpen: e, setMenuOpen: n }), St.jsx(KA, { menuOpen: e, setMenuOpen: n }), St.jsx(TA, {}), St.jsx(FA, {}), St.jsx(QA, {}), St.jsx(jA, {}), St.jsx(PA, {})] })] }) } TL.createRoot(document.getElementById("root")).render(St.jsx(Zt.StrictMode, { children: St.jsx(XL, {}) }));
